# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Pivy is a Coin binding for Python. Coin is a high-level 3D graphics
library with a C++ Application Programming Interface. Coin uses
scene-graph data structures to render real-time graphics suitable for
mostly all kinds of scientific and engineering visualization
applications.
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coin')
    _coin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coin', [dirname(__file__)])
        except ImportError:
            import _coin
            return _coin
        try:
            _mod = imp.load_module('_coin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coin = swig_import_helper()
    del swig_import_helper
else:
    import _coin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class charp(object):
    """Proxy of C++ charp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(charp self) -> charp"""
        this = _coin.new_charp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_charp
    __del__ = lambda self: None

    def assign(self, value: 'char') -> "void":
        """assign(charp self, char value)"""
        return _coin.charp_assign(self, value)


    def value(self) -> "char":
        """value(charp self) -> char"""
        return _coin.charp_value(self)


    def cast(self) -> "char *":
        """cast(charp self) -> char *"""
        return _coin.charp_cast(self)


    def frompointer(t: 'char *') -> "charp *":
        """frompointer(char * t) -> charp"""
        return _coin.charp_frompointer(t)

    frompointer = staticmethod(frompointer)
charp_swigregister = _coin.charp_swigregister
charp_swigregister(charp)
cast = _coin.cast

def charp_frompointer(t: 'char *') -> "charp *":
    """charp_frompointer(char * t) -> charp"""
    return _coin.charp_frompointer(t)

class intp(object):
    """Proxy of C++ intp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(intp self) -> intp"""
        this = _coin.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_intp
    __del__ = lambda self: None

    def assign(self, value: 'int') -> "void":
        """assign(intp self, int value)"""
        return _coin.intp_assign(self, value)


    def value(self) -> "int":
        """value(intp self) -> int"""
        return _coin.intp_value(self)


    def cast(self) -> "int *":
        """cast(intp self) -> int *"""
        return _coin.intp_cast(self)


    def frompointer(t: 'int *') -> "intp *":
        """frompointer(int * t) -> intp"""
        return _coin.intp_frompointer(t)

    frompointer = staticmethod(frompointer)
intp_swigregister = _coin.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t: 'int *') -> "intp *":
    """intp_frompointer(int * t) -> intp"""
    return _coin.intp_frompointer(t)

class longp(object):
    """Proxy of C++ longp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(longp self) -> longp"""
        this = _coin.new_longp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_longp
    __del__ = lambda self: None

    def assign(self, value: 'long') -> "void":
        """assign(longp self, long value)"""
        return _coin.longp_assign(self, value)


    def value(self) -> "long":
        """value(longp self) -> long"""
        return _coin.longp_value(self)


    def cast(self) -> "long *":
        """cast(longp self) -> long *"""
        return _coin.longp_cast(self)


    def frompointer(t: 'long *') -> "longp *":
        """frompointer(long * t) -> longp"""
        return _coin.longp_frompointer(t)

    frompointer = staticmethod(frompointer)
longp_swigregister = _coin.longp_swigregister
longp_swigregister(longp)

def longp_frompointer(t: 'long *') -> "longp *":
    """longp_frompointer(long * t) -> longp"""
    return _coin.longp_frompointer(t)

class floatp(object):
    """Proxy of C++ floatp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(floatp self) -> floatp"""
        this = _coin.new_floatp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_floatp
    __del__ = lambda self: None

    def assign(self, value: 'float') -> "void":
        """assign(floatp self, float value)"""
        return _coin.floatp_assign(self, value)


    def value(self) -> "float":
        """value(floatp self) -> float"""
        return _coin.floatp_value(self)


    def cast(self) -> "float *":
        """cast(floatp self) -> float *"""
        return _coin.floatp_cast(self)


    def frompointer(t: 'float *') -> "floatp *":
        """frompointer(float * t) -> floatp"""
        return _coin.floatp_frompointer(t)

    frompointer = staticmethod(frompointer)
floatp_swigregister = _coin.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(t: 'float *') -> "floatp *":
    """floatp_frompointer(float * t) -> floatp"""
    return _coin.floatp_frompointer(t)

class doublep(object):
    """Proxy of C++ doublep class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(doublep self) -> doublep"""
        this = _coin.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_doublep
    __del__ = lambda self: None

    def assign(self, value: 'double') -> "void":
        """assign(doublep self, double value)"""
        return _coin.doublep_assign(self, value)


    def value(self) -> "double":
        """value(doublep self) -> double"""
        return _coin.doublep_value(self)


    def cast(self) -> "double *":
        """cast(doublep self) -> double *"""
        return _coin.doublep_cast(self)


    def frompointer(t: 'double *') -> "doublep *":
        """frompointer(double * t) -> doublep"""
        return _coin.doublep_frompointer(t)

    frompointer = staticmethod(frompointer)
doublep_swigregister = _coin.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t: 'double *') -> "doublep *":
    """doublep_frompointer(double * t) -> doublep"""
    return _coin.doublep_frompointer(t)

FALSE = _coin.FALSE
TRUE = _coin.TRUE
HAVE_INTTYPES_H = _coin.HAVE_INTTYPES_H
HAVE_STDINT_H = _coin.HAVE_STDINT_H
HAVE_SYS_TYPES_H = _coin.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = _coin.HAVE_STDDEF_H
HAVE_INT8_T = _coin.HAVE_INT8_T
HAVE_UINT8_T = _coin.HAVE_UINT8_T
HAVE_INT16_T = _coin.HAVE_INT16_T
HAVE_UINT16_T = _coin.HAVE_UINT16_T
HAVE_INT32_T = _coin.HAVE_INT32_T
HAVE_UINT32_T = _coin.HAVE_UINT32_T
HAVE_INT64_T = _coin.HAVE_INT64_T
HAVE_UINT64_T = _coin.HAVE_UINT64_T
HAVE_INTPTR_T = _coin.HAVE_INTPTR_T
HAVE_UINTPTR_T = _coin.HAVE_UINTPTR_T
M_E = _coin.M_E
M_LOG2E = _coin.M_LOG2E
M_LOG10E = _coin.M_LOG10E
M_LN2 = _coin.M_LN2
M_LN10 = _coin.M_LN10
M_PI = _coin.M_PI
M_TWOPI = _coin.M_TWOPI
M_PI_2 = _coin.M_PI_2
M_PI_4 = _coin.M_PI_4
M_3PI_4 = _coin.M_3PI_4
M_SQRTPI = _coin.M_SQRTPI
M_1_PI = _coin.M_1_PI
M_2_PI = _coin.M_2_PI
M_2_SQRTPI = _coin.M_2_SQRTPI
M_SQRT2 = _coin.M_SQRT2
M_SQRT1_2 = _coin.M_SQRT1_2
M_LN2LO = _coin.M_LN2LO
M_LN2HI = _coin.M_LN2HI
M_SQRT3 = _coin.M_SQRT3
M_IVLN10 = _coin.M_IVLN10
M_LOG2_E = _coin.M_LOG2_E
M_INVLN2 = _coin.M_INVLN2
COIN_MAJOR_VERSION = _coin.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = _coin.COIN_MINOR_VERSION
COIN_MICRO_VERSION = _coin.COIN_MICRO_VERSION
COIN_VERSION = _coin.COIN_VERSION
HAVE_HASH_QUOTING = _coin.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = _coin.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    """Proxy of C++ SbDict class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbDict self, int const entries=251) -> SbDict
        __init__(SbDict self) -> SbDict
        __init__(SbDict self, SbDict arg2) -> SbDict
        """
        this = _coin.new_SbDict(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbDict
    __del__ = lambda self: None

    def applyToAll(self, *args) -> "void":
        """
        applyToAll(SbDict self, SbDictApplyFunc * rtn)
        applyToAll(SbDict self, SbDictApplyDataFunc * rtn, void * data)
        """
        return _coin.SbDict_applyToAll(self, *args)


    def clear(self) -> "void":
        """clear(SbDict self)"""
        return _coin.SbDict_clear(self)


    def enter(self, key: 'SbDict::Key const', value: 'void *const') -> "SbBool":
        """enter(SbDict self, SbDict::Key const key, void *const value) -> SbBool"""
        return _coin.SbDict_enter(self, key, value)


    def find(self, key: 'SbDict::Key const', value: 'void *&') -> "SbBool":
        """find(SbDict self, SbDict::Key const key, void *& value) -> SbBool"""
        return _coin.SbDict_find(self, key, value)


    def makePList(self, keys: 'SbPList', values: 'SbPList') -> "void":
        """makePList(SbDict self, SbPList keys, SbPList values)"""
        return _coin.SbDict_makePList(self, keys, values)


    def remove(self, key: 'SbDict::Key const') -> "SbBool":
        """remove(SbDict self, SbDict::Key const key) -> SbBool"""
        return _coin.SbDict_remove(self, key)


    def setHashingFunction(self, func: 'SbDictHashingFunc *') -> "void":
        """setHashingFunction(SbDict self, SbDictHashingFunc * func)"""
        return _coin.SbDict_setHashingFunction(self, func)

SbDict_swigregister = _coin.SbDict_swigregister
SbDict_swigregister(SbDict)

class SoType(object):
    """Proxy of C++ SoType class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def fromName(name: 'SbName') -> "SoType":
        """fromName(SbName name) -> SoType"""
        return _coin.SoType_fromName(name)

    fromName = staticmethod(fromName)

    def getName(self) -> "SbName":
        """getName(SoType self) -> SbName"""
        return _coin.SoType_getName(self)


    def getParent(self) -> "SoType const":
        """getParent(SoType self) -> SoType"""
        return _coin.SoType_getParent(self)


    def isDerivedFrom(self, type: 'SoType') -> "SbBool":
        """isDerivedFrom(SoType self, SoType type) -> SbBool"""
        return _coin.SoType_isDerivedFrom(self, type)


    def getAllDerivedFrom(type: 'SoType', list: 'SoTypeList') -> "int":
        """getAllDerivedFrom(SoType type, SoTypeList list) -> int"""
        return _coin.SoType_getAllDerivedFrom(type, list)

    getAllDerivedFrom = staticmethod(getAllDerivedFrom)

    def canCreateInstance(self) -> "SbBool":
        """canCreateInstance(SoType self) -> SbBool"""
        return _coin.SoType_canCreateInstance(self)


    def getData(self) -> "uint16_t":
        """getData(SoType self) -> uint16_t"""
        return _coin.SoType_getData(self)


    def getKey(self) -> "int16_t":
        """getKey(SoType self) -> int16_t"""
        return _coin.SoType_getKey(self)


    def __eq__(self, type: 'SoType') -> "SbBool":
        """__eq__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___eq__(self, type)


    def __ne__(self, type: 'SoType') -> "SbBool":
        """__ne__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___ne__(self, type)


    def __lt__(self, type: 'SoType') -> "SbBool":
        """__lt__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___lt__(self, type)


    def __le__(self, type: 'SoType') -> "SbBool":
        """__le__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___le__(self, type)


    def __ge__(self, type: 'SoType') -> "SbBool":
        """__ge__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___ge__(self, type)


    def __gt__(self, type: 'SoType') -> "SbBool":
        """__gt__(SoType self, SoType type) -> SbBool"""
        return _coin.SoType___gt__(self, type)


    def removeType(name: 'SbName') -> "SbBool":
        """removeType(SbName name) -> SbBool"""
        return _coin.SoType_removeType(name)

    removeType = staticmethod(removeType)

    def init() -> "void":
        """init()"""
        return _coin.SoType_init()

    init = staticmethod(init)

    def fromKey(key: 'uint16_t') -> "SoType":
        """fromKey(uint16_t key) -> SoType"""
        return _coin.SoType_fromKey(key)

    fromKey = staticmethod(fromKey)

    def badType() -> "SoType":
        """badType() -> SoType"""
        return _coin.SoType_badType()

    badType = staticmethod(badType)

    def isBad(self) -> "SbBool":
        """isBad(SoType self) -> SbBool"""
        return _coin.SoType_isBad(self)


    def makeInternal(self) -> "void":
        """makeInternal(SoType self)"""
        return _coin.SoType_makeInternal(self)


    def isInternal(self) -> "SbBool":
        """isInternal(SoType self) -> SbBool"""
        return _coin.SoType_isInternal(self)


    def getNumTypes() -> "int":
        """getNumTypes() -> int"""
        return _coin.SoType_getNumTypes()

    getNumTypes = staticmethod(getNumTypes)

    def getInstantiationMethod(self) -> "SoType::instantiationMethod":
        """getInstantiationMethod(SoType self) -> SoType::instantiationMethod"""
        return _coin.SoType_getInstantiationMethod(self)


    def createInstance(self) -> "PyObject *":
        """createInstance(SoType self) -> PyObject *"""
        return _coin.SoType_createInstance(self)


    def __init__(self):
        """__init__(SoType self) -> SoType"""
        this = _coin.new_SoType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoType
    __del__ = lambda self: None
SoType_swigregister = _coin.SoType_swigregister
SoType_swigregister(SoType)

def SoType_fromName(name: 'SbName') -> "SoType":
    """SoType_fromName(SbName name) -> SoType"""
    return _coin.SoType_fromName(name)

def SoType_getAllDerivedFrom(type: 'SoType', list: 'SoTypeList') -> "int":
    """SoType_getAllDerivedFrom(SoType type, SoTypeList list) -> int"""
    return _coin.SoType_getAllDerivedFrom(type, list)

def SoType_removeType(name: 'SbName') -> "SbBool":
    """SoType_removeType(SbName name) -> SbBool"""
    return _coin.SoType_removeType(name)

def SoType_init() -> "void":
    """SoType_init()"""
    return _coin.SoType_init()

def SoType_fromKey(key: 'uint16_t') -> "SoType":
    """SoType_fromKey(uint16_t key) -> SoType"""
    return _coin.SoType_fromKey(key)

def SoType_badType() -> "SoType":
    """SoType_badType() -> SoType"""
    return _coin.SoType_badType()

def SoType_getNumTypes() -> "int":
    """SoType_getNumTypes() -> int"""
    return _coin.SoType_getNumTypes()

class SbPList(object):
    """Proxy of C++ SbPList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbPList self, int const sizehint) -> SbPList
        __init__(SbPList self) -> SbPList
        __init__(SbPList self, SbPList l) -> SbPList
        """
        this = _coin.new_SbPList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbPList
    __del__ = lambda self: None

    def copy(self, l: 'SbPList') -> "void":
        """copy(SbPList self, SbPList l)"""
        return _coin.SbPList_copy(self, l)


    def fit(self) -> "void":
        """fit(SbPList self)"""
        return _coin.SbPList_fit(self)


    def append(self, item: 'void *') -> "void":
        """append(SbPList self, void * item)"""
        return _coin.SbPList_append(self, item)


    def find(self, item: 'void const *') -> "int":
        """find(SbPList self, void const * item) -> int"""
        return _coin.SbPList_find(self, item)


    def insert(self, item: 'void *', insertbefore: 'int const') -> "void":
        """insert(SbPList self, void * item, int const insertbefore)"""
        return _coin.SbPList_insert(self, item, insertbefore)


    def removeItem(self, item: 'void *') -> "void":
        """removeItem(SbPList self, void * item)"""
        return _coin.SbPList_removeItem(self, item)


    def remove(self, index: 'int const') -> "void":
        """remove(SbPList self, int const index)"""
        return _coin.SbPList_remove(self, index)


    def removeFast(self, index: 'int const') -> "void":
        """removeFast(SbPList self, int const index)"""
        return _coin.SbPList_removeFast(self, index)


    def getLength(self) -> "int":
        """getLength(SbPList self) -> int"""
        return _coin.SbPList_getLength(self)


    def truncate(self, length: 'int const', fit: 'int const'=0) -> "void":
        """
        truncate(SbPList self, int const length, int const fit=0)
        truncate(SbPList self, int const length)
        """
        return _coin.SbPList_truncate(self, length, fit)


    def getArrayPtr(self, start: 'int const'=0) -> "void **":
        """
        getArrayPtr(SbPList self, int const start=0)
        getArrayPtr(SbPList self) -> void **
        """
        return _coin.SbPList_getArrayPtr(self, start)


    def __eq__(self, l: 'SbPList') -> "int":
        """__eq__(SbPList self, SbPList l) -> int"""
        return _coin.SbPList___eq__(self, l)


    def __ne__(self, l: 'SbPList') -> "int":
        """__ne__(SbPList self, SbPList l) -> int"""
        return _coin.SbPList___ne__(self, l)


    def get(self, index: 'int const') -> "void *":
        """get(SbPList self, int const index) -> void *"""
        return _coin.SbPList_get(self, index)


    def set(self, index: 'int const', item: 'void *') -> "void":
        """set(SbPList self, int const index, void * item)"""
        return _coin.SbPList_set(self, index, item)


    def __getitem__(self, i: 'int') -> "void *":
        """__getitem__(SbPList self, int i) -> void *"""
        return _coin.SbPList___getitem__(self, i)


    def __setitem__(self, i: 'int', val: 'void *') -> "void":
        """__setitem__(SbPList self, int i, void * val)"""
        return _coin.SbPList___setitem__(self, i, val)


    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]

SbPList_swigregister = _coin.SbPList_swigregister
SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    """Proxy of C++ SbIntList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbIntList self) -> SbIntList
        __init__(SbIntList self, int const sizehint) -> SbIntList
        """
        this = _coin.new_SbIntList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, item: 'int const') -> "void":
        """append(SbIntList self, int const item)"""
        return _coin.SbIntList_append(self, item)


    def find(self, item: 'int const') -> "int":
        """find(SbIntList self, int const item) -> int"""
        return _coin.SbIntList_find(self, item)


    def insert(self, item: 'int const', addbefore: 'int const') -> "void":
        """insert(SbIntList self, int const item, int const addbefore)"""
        return _coin.SbIntList_insert(self, item, addbefore)


    def __setitem__(self, i: 'int const', value: 'int *') -> "void":
        """__setitem__(SbIntList self, int const i, int * value)"""
        return _coin.SbIntList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "int &":
        """__getitem__(SbIntList self, int const i) -> int &"""
        return _coin.SbIntList___getitem__(self, i)


    def get(self, i: 'int const') -> "int":
        """get(SbIntList self, int const i) -> int"""
        return _coin.SbIntList_get(self, i)

    __swig_destroy__ = _coin.delete_SbIntList
    __del__ = lambda self: None
SbIntList_swigregister = _coin.SbIntList_swigregister
SbIntList_swigregister(SbIntList)

class SbString(object):
    """Proxy of C++ SbString class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args):
        """
        __init__(SbString self) -> SbString
        __init__(SbString self, char const * s) -> SbString
        __init__(SbString self, wchar_t const * s) -> SbString
        __init__(SbString self, char const * s, int start, int end) -> SbString
        __init__(SbString self, SbString s) -> SbString
        __init__(SbString self, int const digits) -> SbString
        """
        this = _coin.new_SbString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbString
    __del__ = lambda self: None

    def hash(*args) -> "uint32_t":
        """
        hash() -> uint32_t
        hash(char const * s) -> uint32_t
        """
        return _coin.SbString_hash(*args)

    hash = staticmethod(hash)

    def getLength(self) -> "int":
        """getLength(SbString self) -> int"""
        return _coin.SbString_getLength(self)


    def makeEmpty(self, freeold: 'SbBool'=1) -> "void":
        """
        makeEmpty(SbString self, SbBool freeold=1)
        makeEmpty(SbString self)
        """
        return _coin.SbString_makeEmpty(self, freeold)


    def getString(self) -> "char const *":
        """getString(SbString self) -> char const *"""
        return _coin.SbString_getString(self)


    def getSubString(self, startidx: 'int', endidx: 'int'=-1) -> "SbString":
        """
        getSubString(SbString self, int startidx, int endidx=-1) -> SbString
        getSubString(SbString self, int startidx) -> SbString
        """
        return _coin.SbString_getSubString(self, startidx, endidx)


    def deleteSubString(self, startidx: 'int', endidx: 'int'=-1) -> "void":
        """
        deleteSubString(SbString self, int startidx, int endidx=-1)
        deleteSubString(SbString self, int startidx)
        """
        return _coin.SbString_deleteSubString(self, startidx, endidx)


    def addIntString(self, value: 'int const') -> "void":
        """addIntString(SbString self, int const value)"""
        return _coin.SbString_addIntString(self, value)


    def __iadd__(self, *args) -> "SbString &":
        """
        __iadd__(SbString self, char const * s) -> SbString
        __iadd__(SbString self, SbString s) -> SbString
        __iadd__(SbString self, char const c) -> SbString
        """
        return _coin.SbString___iadd__(self, *args)


    def compareSubString(self, text: 'char const *', offset: 'int'=0) -> "int":
        """
        compareSubString(SbString self, char const * text, int offset=0) -> int
        compareSubString(SbString self, char const * text) -> int
        """
        return _coin.SbString_compareSubString(self, text, offset)


    def sprintf(self, formatstr: 'char const *') -> "SbString &":
        """sprintf(SbString self, char const * formatstr) -> SbString"""
        return _coin.SbString_sprintf(self, formatstr)


    def apply(self, func: 'char (*)(char)') -> "void":
        """apply(SbString self, char (*)(char) func)"""
        return _coin.SbString_apply(self, func)


    def find(self, s: 'SbString') -> "int":
        """find(SbString self, SbString s) -> int"""
        return _coin.SbString_find(self, s)


    def findAll(self, s: 'SbString', found: 'SbIntList') -> "SbBool":
        """findAll(SbString self, SbString s, SbIntList found) -> SbBool"""
        return _coin.SbString_findAll(self, s, found)


    def lower(self) -> "SbString":
        """lower(SbString self) -> SbString"""
        return _coin.SbString_lower(self)


    def upper(self) -> "SbString":
        """upper(SbString self) -> SbString"""
        return _coin.SbString_upper(self)


    def _print(self, fp: 'std::FILE *') -> "void":
        """_print(SbString self, std::FILE * fp)"""
        return _coin.SbString__print(self, fp)


    def __eq__(self, *args) -> "int":
        """
        __eq__(SbString self, SbString u) -> int
        __eq__(SbString self, char * u) -> int
        """
        return _coin.SbString___eq__(self, *args)


    def __nq__(self, *args) -> "int":
        """
        __nq__(SbString self, SbString u) -> int
        __nq__(SbString self, char * u) -> int
        """
        return _coin.SbString___nq__(self, *args)


    def __getitem__(self, i: 'int') -> "char":
        """__getitem__(SbString self, int i) -> char"""
        return _coin.SbString___getitem__(self, i)


    def __iter__(self):
      return getString().__iter__()


    def __repr__(self) -> "char const *":
        """__repr__(SbString self) -> char const *"""
        return _coin.SbString___repr__(self)

SbString_swigregister = _coin.SbString_swigregister
SbString_swigregister(SbString)

def SbString_hash(*args) -> "uint32_t":
    """
    hash() -> uint32_t
    SbString_hash(char const * s) -> uint32_t
    """
    return _coin.SbString_hash(*args)

class SbName(object):
    """Proxy of C++ SbName class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args):
        """
        __init__(SbName self) -> SbName
        __init__(SbName self, char const * namestring) -> SbName
        __init__(SbName self, SbString str) -> SbName
        __init__(SbName self, SbName name) -> SbName
        """
        this = _coin.new_SbName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbName
    __del__ = lambda self: None

    def getString(self) -> "char const *":
        """getString(SbName self) -> char const *"""
        return _coin.SbName_getString(self)


    def getLength(self) -> "int":
        """getLength(SbName self) -> int"""
        return _coin.SbName_getLength(self)


    def isIdentStartChar(c: 'char const') -> "SbBool":
        """isIdentStartChar(char const c) -> SbBool"""
        return _coin.SbName_isIdentStartChar(c)

    isIdentStartChar = staticmethod(isIdentStartChar)

    def isIdentChar(c: 'char const') -> "SbBool":
        """isIdentChar(char const c) -> SbBool"""
        return _coin.SbName_isIdentChar(c)

    isIdentChar = staticmethod(isIdentChar)

    def isBaseNameStartChar(c: 'char const') -> "SbBool":
        """isBaseNameStartChar(char const c) -> SbBool"""
        return _coin.SbName_isBaseNameStartChar(c)

    isBaseNameStartChar = staticmethod(isBaseNameStartChar)

    def isBaseNameChar(c: 'char const') -> "SbBool":
        """isBaseNameChar(char const c) -> SbBool"""
        return _coin.SbName_isBaseNameChar(c)

    isBaseNameChar = staticmethod(isBaseNameChar)

    def empty() -> "SbName const &":
        """empty() -> SbName"""
        return _coin.SbName_empty()

    empty = staticmethod(empty)

    def __eq__(self, *args) -> "int":
        """
        __eq__(SbName self, SbName u) -> int
        __eq__(SbName self, char * u) -> int
        __eq__(SbName self, SbString u) -> int
        """
        return _coin.SbName___eq__(self, *args)


    def __nq__(self, *args) -> "int":
        """
        __nq__(SbName self, SbName u) -> int
        __nq__(SbName self, char * u) -> int
        __nq__(SbName self, SbString u) -> int
        """
        return _coin.SbName___nq__(self, *args)


    def __getitem__(self, i: 'int') -> "char":
        """__getitem__(SbName self, int i) -> char"""
        return _coin.SbName___getitem__(self, i)


    def __iter__(self):
      return getString().__iter__()


    def __repr__(self) -> "char const *":
        """__repr__(SbName self) -> char const *"""
        return _coin.SbName___repr__(self)

SbName_swigregister = _coin.SbName_swigregister
SbName_swigregister(SbName)

def SbName_isIdentStartChar(c: 'char const') -> "SbBool":
    """SbName_isIdentStartChar(char const c) -> SbBool"""
    return _coin.SbName_isIdentStartChar(c)

def SbName_isIdentChar(c: 'char const') -> "SbBool":
    """SbName_isIdentChar(char const c) -> SbBool"""
    return _coin.SbName_isIdentChar(c)

def SbName_isBaseNameStartChar(c: 'char const') -> "SbBool":
    """SbName_isBaseNameStartChar(char const c) -> SbBool"""
    return _coin.SbName_isBaseNameStartChar(c)

def SbName_isBaseNameChar(c: 'char const') -> "SbBool":
    """SbName_isBaseNameChar(char const c) -> SbBool"""
    return _coin.SbName_isBaseNameChar(c)

def SbName_empty() -> "SbName const &":
    """SbName_empty() -> SbName"""
    return _coin.SbName_empty()

class SoError(object):
    """Proxy of C++ SoError class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoError self) -> SoError"""
        this = _coin.new_SoError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoError
    __del__ = lambda self: None

    def setHandlerCallback(func: 'SoErrorCB *const', data: 'void *const') -> "void":
        """setHandlerCallback(SoErrorCB *const func, void *const data)"""
        return _coin.SoError_setHandlerCallback(func, data)

    setHandlerCallback = staticmethod(setHandlerCallback)

    def getHandlerCallback() -> "SoErrorCB *":
        """getHandlerCallback() -> SoErrorCB *"""
        return _coin.SoError_getHandlerCallback()

    getHandlerCallback = staticmethod(getHandlerCallback)

    def getHandlerData() -> "void *":
        """getHandlerData() -> void *"""
        return _coin.SoError_getHandlerData()

    getHandlerData = staticmethod(getHandlerData)

    def getDebugString(self) -> "SbString const &":
        """getDebugString(SoError self) -> SbString"""
        return _coin.SoError_getDebugString(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoError_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoError self) -> SoType"""
        return _coin.SoError_getTypeId(self)


    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoError self, SoType type) -> SbBool"""
        return _coin.SoError_isOfType(self, type)


    def post(format: 'char const *const') -> "void":
        """post(char const *const format)"""
        return _coin.SoError_post(format)

    post = staticmethod(post)

    def getString(*args) -> "SbString":
        """
        getString(SoNode node) -> SbString
        getString(SoPath path) -> SbString
        getString(SoEngine engine) -> SbString
        """
        return _coin.SoError_getString(*args)

    getString = staticmethod(getString)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoError_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoError_initClasses()

    initClasses = staticmethod(initClasses)
SoError_swigregister = _coin.SoError_swigregister
SoError_swigregister(SoError)

def SoError_setHandlerCallback(func: 'SoErrorCB *const', data: 'void *const') -> "void":
    """SoError_setHandlerCallback(SoErrorCB *const func, void *const data)"""
    return _coin.SoError_setHandlerCallback(func, data)

def SoError_getHandlerCallback() -> "SoErrorCB *":
    """SoError_getHandlerCallback() -> SoErrorCB *"""
    return _coin.SoError_getHandlerCallback()

def SoError_getHandlerData() -> "void *":
    """SoError_getHandlerData() -> void *"""
    return _coin.SoError_getHandlerData()

def SoError_getClassTypeId() -> "SoType":
    """SoError_getClassTypeId() -> SoType"""
    return _coin.SoError_getClassTypeId()

def SoError_post(format: 'char const *const') -> "void":
    """SoError_post(char const *const format)"""
    return _coin.SoError_post(format)

def SoError_getString(*args) -> "SbString":
    """
    getString(SoNode node) -> SbString
    getString(SoPath path) -> SbString
    SoError_getString(SoEngine engine) -> SbString
    """
    return _coin.SoError_getString(*args)

def SoError_initClass() -> "void":
    """SoError_initClass()"""
    return _coin.SoError_initClass()

def SoError_initClasses() -> "void":
    """SoError_initClasses()"""
    return _coin.SoError_initClasses()

class SoDebugError(SoError):
    """Proxy of C++ SoDebugError class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ERROR = _coin.SoDebugError_ERROR
    WARNING = _coin.SoDebugError_WARNING
    INFO = _coin.SoDebugError_INFO

    def setHandlerCallback(function: 'SoErrorCB *const', data: 'void *const') -> "void":
        """setHandlerCallback(SoErrorCB *const function, void *const data)"""
        return _coin.SoDebugError_setHandlerCallback(function, data)

    setHandlerCallback = staticmethod(setHandlerCallback)

    def getHandlerCallback() -> "SoErrorCB *":
        """getHandlerCallback() -> SoErrorCB *"""
        return _coin.SoDebugError_getHandlerCallback()

    getHandlerCallback = staticmethod(getHandlerCallback)

    def getHandlerData() -> "void *":
        """getHandlerData() -> void *"""
        return _coin.SoDebugError_getHandlerData()

    getHandlerData = staticmethod(getHandlerData)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDebugError_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDebugError self) -> SoType"""
        return _coin.SoDebugError_getTypeId(self)


    def getSeverity(self) -> "SoDebugError::Severity":
        """getSeverity(SoDebugError self) -> SoDebugError::Severity"""
        return _coin.SoDebugError_getSeverity(self)


    def post(source: 'char const *const', format: 'char const *const') -> "void":
        """post(char const *const source, char const *const format)"""
        return _coin.SoDebugError_post(source, format)

    post = staticmethod(post)

    def postWarning(source: 'char const *const', format: 'char const *const') -> "void":
        """postWarning(char const *const source, char const *const format)"""
        return _coin.SoDebugError_postWarning(source, format)

    postWarning = staticmethod(postWarning)

    def postInfo(source: 'char const *const', format: 'char const *const') -> "void":
        """postInfo(char const *const source, char const *const format)"""
        return _coin.SoDebugError_postInfo(source, format)

    postInfo = staticmethod(postInfo)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDebugError_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDebugError self) -> SoDebugError"""
        this = _coin.new_SoDebugError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoDebugError
    __del__ = lambda self: None
SoDebugError_swigregister = _coin.SoDebugError_swigregister
SoDebugError_swigregister(SoDebugError)

def SoDebugError_setHandlerCallback(function: 'SoErrorCB *const', data: 'void *const') -> "void":
    """SoDebugError_setHandlerCallback(SoErrorCB *const function, void *const data)"""
    return _coin.SoDebugError_setHandlerCallback(function, data)

def SoDebugError_getHandlerCallback() -> "SoErrorCB *":
    """SoDebugError_getHandlerCallback() -> SoErrorCB *"""
    return _coin.SoDebugError_getHandlerCallback()

def SoDebugError_getHandlerData() -> "void *":
    """SoDebugError_getHandlerData() -> void *"""
    return _coin.SoDebugError_getHandlerData()

def SoDebugError_getClassTypeId() -> "SoType":
    """SoDebugError_getClassTypeId() -> SoType"""
    return _coin.SoDebugError_getClassTypeId()

def SoDebugError_post(source: 'char const *const', format: 'char const *const') -> "void":
    """SoDebugError_post(char const *const source, char const *const format)"""
    return _coin.SoDebugError_post(source, format)

def SoDebugError_postWarning(source: 'char const *const', format: 'char const *const') -> "void":
    """SoDebugError_postWarning(char const *const source, char const *const format)"""
    return _coin.SoDebugError_postWarning(source, format)

def SoDebugError_postInfo(source: 'char const *const', format: 'char const *const') -> "void":
    """SoDebugError_postInfo(char const *const source, char const *const format)"""
    return _coin.SoDebugError_postInfo(source, format)

def SoDebugError_initClass() -> "void":
    """SoDebugError_initClass()"""
    return _coin.SoDebugError_initClass()

class SbVec2s(object):
    """Proxy of C++ SbVec2s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec2s self) -> SbVec2s
        __init__(SbVec2s self, short const [2] v) -> SbVec2s
        __init__(SbVec2s self, short x, short y) -> SbVec2s
        __init__(SbVec2s self, SbVec2us const & v) -> SbVec2s
        __init__(SbVec2s self, SbVec2b v) -> SbVec2s
        __init__(SbVec2s self, SbVec2i32 v) -> SbVec2s
        __init__(SbVec2s self, SbVec2f v) -> SbVec2s
        __init__(SbVec2s self, SbVec2d v) -> SbVec2s
        """
        this = _coin.new_SbVec2s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec2s &":
        """
        setValue(SbVec2s self, short const [2] v) -> SbVec2s
        setValue(SbVec2s self, short x, short y) -> SbVec2s
        setValue(SbVec2s self, SbVec2us const & v) -> SbVec2s
        setValue(SbVec2s self, SbVec2b v) -> SbVec2s
        setValue(SbVec2s self, SbVec2i32 v) -> SbVec2s
        setValue(SbVec2s self, SbVec2f v) -> SbVec2s
        setValue(SbVec2s self, SbVec2d v) -> SbVec2s
        """
        return _coin.SbVec2s_setValue(self, *args)


    def getValue(self) -> "void":
        """getValue(SbVec2s self)"""
        return _coin.SbVec2s_getValue(self)


    def dot(self, v: 'SbVec2s') -> "int32_t":
        """dot(SbVec2s self, SbVec2s v) -> int32_t"""
        return _coin.SbVec2s_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec2s self)"""
        return _coin.SbVec2s_negate(self)


    def __imul__(self, *args) -> "SbVec2s &":
        """
        __imul__(SbVec2s self, int d) -> SbVec2s
        __imul__(SbVec2s self, double d) -> SbVec2s
        """
        return _coin.SbVec2s___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec2s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec2s') -> "SbVec2s &":
        """__iadd__(SbVec2s self, SbVec2s v) -> SbVec2s"""
        return _coin.SbVec2s___iadd__(self, v)


    def __isub__(self, v: 'SbVec2s') -> "SbVec2s &":
        """__isub__(SbVec2s self, SbVec2s v) -> SbVec2s"""
        return _coin.SbVec2s___isub__(self, v)


    def __neg__(self) -> "SbVec2s":
        """__neg__(SbVec2s self) -> SbVec2s"""
        return _coin.SbVec2s___neg__(self)


    def toString(self) -> "SbString":
        """toString(SbVec2s self) -> SbString"""
        return _coin.SbVec2s_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbVec2s self, SbString str) -> SbBool"""
        return _coin.SbVec2s_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec2s self, FILE * fp)"""
        return _coin.SbVec2s_output(self, fp)


    def __add__(self, u: 'SbVec2s') -> "SbVec2s":
        """__add__(SbVec2s self, SbVec2s u) -> SbVec2s"""
        return _coin.SbVec2s___add__(self, u)


    def __sub__(self, u: 'SbVec2s') -> "SbVec2s":
        """__sub__(SbVec2s self, SbVec2s u) -> SbVec2s"""
        return _coin.SbVec2s___sub__(self, u)


    def __mul__(self, d: 'double const') -> "SbVec2s":
        """__mul__(SbVec2s self, double const d) -> SbVec2s"""
        return _coin.SbVec2s___mul__(self, d)


    def __rmul__(self, d: 'double const') -> "SbVec2s":
        """__rmul__(SbVec2s self, double const d) -> SbVec2s"""
        return _coin.SbVec2s___rmul__(self, d)


    def __div__(self, d: 'double const') -> "SbVec2s":
        """__div__(SbVec2s self, double const d) -> SbVec2s"""
        return _coin.SbVec2s___div__(self, d)


    def __truediv__(self, d: 'double const') -> "SbVec2s":
        """__truediv__(SbVec2s self, double const d) -> SbVec2s"""
        return _coin.SbVec2s___truediv__(self, d)


    def __eq__(self, u: 'SbVec2s') -> "int":
        """__eq__(SbVec2s self, SbVec2s u) -> int"""
        return _coin.SbVec2s___eq__(self, u)


    def __nq__(self, u: 'SbVec2s') -> "int":
        """__nq__(SbVec2s self, SbVec2s u) -> int"""
        return _coin.SbVec2s___nq__(self, u)


    def __getitem__(self, i: 'int') -> "short":
        """__getitem__(SbVec2s self, int i) -> short"""
        return _coin.SbVec2s___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'short') -> "void":
        """__setitem__(SbVec2s self, int i, short value)"""
        return _coin.SbVec2s___setitem__(self, i, value)


    def __iter__(self):
       for i in range(2):
          yield self[i]

    def __len__(self):
          return 2

    __swig_destroy__ = _coin.delete_SbVec2s
    __del__ = lambda self: None
SbVec2s_swigregister = _coin.SbVec2s_swigregister
SbVec2s_swigregister(SbVec2s)

class SbVec2f(object):
    """Proxy of C++ SbVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec2f self) -> SbVec2f
        __init__(SbVec2f self, float const [2] v) -> SbVec2f
        __init__(SbVec2f self, float x, float y) -> SbVec2f
        __init__(SbVec2f self, SbVec2d v) -> SbVec2f
        __init__(SbVec2f self, SbVec2b v) -> SbVec2f
        __init__(SbVec2f self, SbVec2s v) -> SbVec2f
        __init__(SbVec2f self, SbVec2i32 v) -> SbVec2f
        """
        this = _coin.new_SbVec2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec2f &":
        """
        setValue(SbVec2f self, float const [2] v) -> SbVec2f
        setValue(SbVec2f self, float x, float y) -> SbVec2f
        setValue(SbVec2f self, SbVec2d v) -> SbVec2f
        setValue(SbVec2f self, SbVec2b v) -> SbVec2f
        setValue(SbVec2f self, SbVec2s v) -> SbVec2f
        setValue(SbVec2f self, SbVec2i32 v) -> SbVec2f
        """
        return _coin.SbVec2f_setValue(self, *args)


    def getValue(self) -> "void":
        """getValue(SbVec2f self)"""
        return _coin.SbVec2f_getValue(self)


    def dot(self, v: 'SbVec2f') -> "float":
        """dot(SbVec2f self, SbVec2f v) -> float"""
        return _coin.SbVec2f_dot(self, v)


    def equals(self, v: 'SbVec2f', tolerance: 'float') -> "SbBool":
        """equals(SbVec2f self, SbVec2f v, float tolerance) -> SbBool"""
        return _coin.SbVec2f_equals(self, v, tolerance)


    def length(self) -> "float":
        """length(SbVec2f self) -> float"""
        return _coin.SbVec2f_length(self)


    def sqrLength(self) -> "float":
        """sqrLength(SbVec2f self) -> float"""
        return _coin.SbVec2f_sqrLength(self)


    def negate(self) -> "void":
        """negate(SbVec2f self)"""
        return _coin.SbVec2f_negate(self)


    def normalize(self) -> "float":
        """normalize(SbVec2f self) -> float"""
        return _coin.SbVec2f_normalize(self)


    def __imul__(self, d: 'float') -> "SbVec2f &":
        """__imul__(SbVec2f self, float d) -> SbVec2f"""
        return _coin.SbVec2f___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec2f') -> "SbVec2f &":
        """__iadd__(SbVec2f self, SbVec2f v) -> SbVec2f"""
        return _coin.SbVec2f___iadd__(self, v)


    def __isub__(self, v: 'SbVec2f') -> "SbVec2f &":
        """__isub__(SbVec2f self, SbVec2f v) -> SbVec2f"""
        return _coin.SbVec2f___isub__(self, v)


    def __neg__(self) -> "SbVec2f":
        """__neg__(SbVec2f self) -> SbVec2f"""
        return _coin.SbVec2f___neg__(self)


    def toString(self) -> "SbString":
        """toString(SbVec2f self) -> SbString"""
        return _coin.SbVec2f_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbVec2f self, SbString str) -> SbBool"""
        return _coin.SbVec2f_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec2f self, FILE * fp)"""
        return _coin.SbVec2f_output(self, fp)


    def __add__(self, u: 'SbVec2f') -> "SbVec2f":
        """__add__(SbVec2f self, SbVec2f u) -> SbVec2f"""
        return _coin.SbVec2f___add__(self, u)


    def __sub__(self, u: 'SbVec2f') -> "SbVec2f":
        """__sub__(SbVec2f self, SbVec2f u) -> SbVec2f"""
        return _coin.SbVec2f___sub__(self, u)


    def __mul__(self, d: 'float const') -> "SbVec2f":
        """__mul__(SbVec2f self, float const d) -> SbVec2f"""
        return _coin.SbVec2f___mul__(self, d)


    def __rmul__(self, d: 'float const') -> "SbVec2f":
        """__rmul__(SbVec2f self, float const d) -> SbVec2f"""
        return _coin.SbVec2f___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbVec2f":
        """__div__(SbVec2f self, float const d) -> SbVec2f"""
        return _coin.SbVec2f___div__(self, d)


    def __truediv__(self, d: 'float const') -> "SbVec2f":
        """__truediv__(SbVec2f self, float const d) -> SbVec2f"""
        return _coin.SbVec2f___truediv__(self, d)


    def __eq__(self, u: 'SbVec2f') -> "int":
        """__eq__(SbVec2f self, SbVec2f u) -> int"""
        return _coin.SbVec2f___eq__(self, u)


    def __nq__(self, u: 'SbVec2f') -> "int":
        """__nq__(SbVec2f self, SbVec2f u) -> int"""
        return _coin.SbVec2f___nq__(self, u)


    def __getitem__(self, i: 'int') -> "float":
        """__getitem__(SbVec2f self, int i) -> float"""
        return _coin.SbVec2f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'float') -> "void":
        """__setitem__(SbVec2f self, int i, float value)"""
        return _coin.SbVec2f___setitem__(self, i, value)


    def __iter__(self):
       for i in range(2):
          yield self[i]

    def __len__(self):
          return 2

    __swig_destroy__ = _coin.delete_SbVec2f
    __del__ = lambda self: None
SbVec2f_swigregister = _coin.SbVec2f_swigregister
SbVec2f_swigregister(SbVec2f)

class SbTime(object):
    """Proxy of C++ SbTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbTime self) -> SbTime
        __init__(SbTime self, double const sec) -> SbTime
        __init__(SbTime self, int32_t const sec, long const usec) -> SbTime
        __init__(SbTime self, timeval const *const tv) -> SbTime
        """
        this = _coin.new_SbTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTimeOfDay() -> "SbTime":
        """getTimeOfDay() -> SbTime"""
        return _coin.SbTime_getTimeOfDay()

    getTimeOfDay = staticmethod(getTimeOfDay)

    def setToTimeOfDay(self) -> "void":
        """setToTimeOfDay(SbTime self)"""
        return _coin.SbTime_setToTimeOfDay(self)


    def zero() -> "SbTime":
        """zero() -> SbTime"""
        return _coin.SbTime_zero()

    zero = staticmethod(zero)

    def max() -> "SbTime":
        """max() -> SbTime"""
        return _coin.SbTime_max()

    max = staticmethod(max)

    def maxTime() -> "SbTime":
        """maxTime() -> SbTime"""
        return _coin.SbTime_maxTime()

    maxTime = staticmethod(maxTime)

    def sleep(msec: 'int') -> "void":
        """sleep(int msec)"""
        return _coin.SbTime_sleep(msec)

    sleep = staticmethod(sleep)

    def setValue(self, *args) -> "void":
        """
        setValue(SbTime self, double const sec)
        setValue(SbTime self, int32_t const sec, long const usec)
        setValue(SbTime self, timeval const *const tv)
        """
        return _coin.SbTime_setValue(self, *args)


    def setMsecValue(self, msec: 'unsigned long const') -> "void":
        """setMsecValue(SbTime self, unsigned long const msec)"""
        return _coin.SbTime_setMsecValue(self, msec)


    def getValue(self, *args) -> "void":
        """
        getValue(SbTime self) -> double
        getValue(SbTime self, time_t & sec, long & usec)
        getValue(SbTime self, timeval * tv)
        """
        return _coin.SbTime_getValue(self, *args)


    def getMsecValue(self) -> "unsigned long":
        """getMsecValue(SbTime self) -> unsigned long"""
        return _coin.SbTime_getMsecValue(self)


    def format(self, *args) -> "SbString":
        """
        format(SbTime self, char const *const fmt) -> SbString
        format(SbTime self) -> SbString
        """
        return _coin.SbTime_format(self, *args)


    def formatDate(self, fmt: 'char const *const'=None) -> "SbString":
        """
        formatDate(SbTime self, char const *const fmt=None) -> SbString
        formatDate(SbTime self) -> SbString
        """
        return _coin.SbTime_formatDate(self, fmt)


    def parsedate(self, date: 'char const *const') -> "SbBool":
        """parsedate(SbTime self, char const *const date) -> SbBool"""
        return _coin.SbTime_parsedate(self, date)


    def __iadd__(self, tm: 'SbTime') -> "SbTime &":
        """__iadd__(SbTime self, SbTime tm) -> SbTime"""
        return _coin.SbTime___iadd__(self, tm)


    def __isub__(self, tm: 'SbTime') -> "SbTime &":
        """__isub__(SbTime self, SbTime tm) -> SbTime"""
        return _coin.SbTime___isub__(self, tm)


    def __neg__(self) -> "SbTime":
        """__neg__(SbTime self) -> SbTime"""
        return _coin.SbTime___neg__(self)


    def __imul__(self, s: 'double const') -> "SbTime &":
        """__imul__(SbTime self, double const s) -> SbTime"""
        return _coin.SbTime___imul__(self, s)


    def __itruediv__(self, *args):
        return _coin.SbTime___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coin.SbTime___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, tm: 'SbTime') -> "SbTime":
        """__mod__(SbTime self, SbTime tm) -> SbTime"""
        return _coin.SbTime___mod__(self, tm)


    def __eq__(self, tm: 'SbTime') -> "int":
        """__eq__(SbTime self, SbTime tm) -> int"""
        return _coin.SbTime___eq__(self, tm)


    def __ne__(self, tm: 'SbTime') -> "int":
        """__ne__(SbTime self, SbTime tm) -> int"""
        return _coin.SbTime___ne__(self, tm)


    def __lt__(self, tm: 'SbTime') -> "SbBool":
        """__lt__(SbTime self, SbTime tm) -> SbBool"""
        return _coin.SbTime___lt__(self, tm)


    def __gt__(self, tm: 'SbTime') -> "SbBool":
        """__gt__(SbTime self, SbTime tm) -> SbBool"""
        return _coin.SbTime___gt__(self, tm)


    def __le__(self, tm: 'SbTime') -> "SbBool":
        """__le__(SbTime self, SbTime tm) -> SbBool"""
        return _coin.SbTime___le__(self, tm)


    def __ge__(self, tm: 'SbTime') -> "SbBool":
        """__ge__(SbTime self, SbTime tm) -> SbBool"""
        return _coin.SbTime___ge__(self, tm)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbTime self, FILE * fp)"""
        return _coin.SbTime_output(self, fp)


    def __add__(self, u: 'SbTime') -> "SbTime":
        """__add__(SbTime self, SbTime u) -> SbTime"""
        return _coin.SbTime___add__(self, u)


    def __sub__(self, u: 'SbTime') -> "SbTime":
        """__sub__(SbTime self, SbTime u) -> SbTime"""
        return _coin.SbTime___sub__(self, u)


    def __mul__(self, d: 'double const') -> "SbTime":
        """__mul__(SbTime self, double const d) -> SbTime"""
        return _coin.SbTime___mul__(self, d)


    def __rmul__(self, d: 'double const') -> "SbTime":
        """__rmul__(SbTime self, double const d) -> SbTime"""
        return _coin.SbTime___rmul__(self, d)


    def __div__(self, d: 'double const') -> "SbTime":
        """__div__(SbTime self, double const d) -> SbTime"""
        return _coin.SbTime___div__(self, d)

    __swig_destroy__ = _coin.delete_SbTime
    __del__ = lambda self: None
SbTime_swigregister = _coin.SbTime_swigregister
SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay() -> "SbTime":
    """SbTime_getTimeOfDay() -> SbTime"""
    return _coin.SbTime_getTimeOfDay()

def SbTime_zero() -> "SbTime":
    """SbTime_zero() -> SbTime"""
    return _coin.SbTime_zero()

def SbTime_max() -> "SbTime":
    """SbTime_max() -> SbTime"""
    return _coin.SbTime_max()

def SbTime_maxTime() -> "SbTime":
    """SbTime_maxTime() -> SbTime"""
    return _coin.SbTime_maxTime()

def SbTime_sleep(msec: 'int') -> "void":
    """SbTime_sleep(int msec)"""
    return _coin.SbTime_sleep(msec)

class SoEvent(object):
    """Proxy of C++ SoEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoEvent self) -> SoType"""
        return _coin.SoEvent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEvent_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoEvent self) -> SoEvent"""
        this = _coin.new_SoEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEvent
    __del__ = lambda self: None

    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoEvent self, SoType type) -> SbBool"""
        return _coin.SoEvent_isOfType(self, type)


    def setTime(self, t: 'SbTime') -> "void":
        """setTime(SoEvent self, SbTime t)"""
        return _coin.SoEvent_setTime(self, t)


    def getTime(self) -> "SbTime":
        """getTime(SoEvent self) -> SbTime"""
        return _coin.SoEvent_getTime(self)


    def setPosition(self, p: 'SbVec2s') -> "void":
        """setPosition(SoEvent self, SbVec2s p)"""
        return _coin.SoEvent_setPosition(self, p)


    def getPosition(self, *args) -> "SbVec2s const &":
        """
        getPosition(SoEvent self) -> SbVec2s
        getPosition(SoEvent self, SbViewportRegion vpRgn) -> SbVec2s
        """
        return _coin.SoEvent_getPosition(self, *args)


    def getNormalizedPosition(self, vpRgn: 'SbViewportRegion') -> "SbVec2f const &":
        """getNormalizedPosition(SoEvent self, SbViewportRegion vpRgn) -> SbVec2f"""
        return _coin.SoEvent_getNormalizedPosition(self, vpRgn)


    def setShiftDown(self, isDown: 'SbBool') -> "void":
        """setShiftDown(SoEvent self, SbBool isDown)"""
        return _coin.SoEvent_setShiftDown(self, isDown)


    def wasShiftDown(self) -> "SbBool":
        """wasShiftDown(SoEvent self) -> SbBool"""
        return _coin.SoEvent_wasShiftDown(self)


    def setCtrlDown(self, isDown: 'SbBool') -> "void":
        """setCtrlDown(SoEvent self, SbBool isDown)"""
        return _coin.SoEvent_setCtrlDown(self, isDown)


    def wasCtrlDown(self) -> "SbBool":
        """wasCtrlDown(SoEvent self) -> SbBool"""
        return _coin.SoEvent_wasCtrlDown(self)


    def setAltDown(self, isDown: 'SbBool') -> "void":
        """setAltDown(SoEvent self, SbBool isDown)"""
        return _coin.SoEvent_setAltDown(self, isDown)


    def wasAltDown(self) -> "SbBool":
        """wasAltDown(SoEvent self) -> SbBool"""
        return _coin.SoEvent_wasAltDown(self)

SoEvent_swigregister = _coin.SoEvent_swigregister
SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId() -> "SoType":
    """SoEvent_getClassTypeId() -> SoType"""
    return _coin.SoEvent_getClassTypeId()

def SoEvent_initClass() -> "void":
    """SoEvent_initClass()"""
    return _coin.SoEvent_initClass()

class SoNotRec(object):
    """Proxy of C++ SoNotRec class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTAINER = _coin.SoNotRec_CONTAINER
    PARENT = _coin.SoNotRec_PARENT
    SENSOR = _coin.SoNotRec_SENSOR
    FIELD = _coin.SoNotRec_FIELD
    ENGINE = _coin.SoNotRec_ENGINE
    UNSPECIFIED = _coin.SoNotRec_UNSPECIFIED
    FIELD_UPDATE = _coin.SoNotRec_FIELD_UPDATE
    GROUP_ADDCHILD = _coin.SoNotRec_GROUP_ADDCHILD
    GROUP_INSERTCHILD = _coin.SoNotRec_GROUP_INSERTCHILD
    GROUP_REPLACECHILD = _coin.SoNotRec_GROUP_REPLACECHILD
    GROUP_REMOVECHILD = _coin.SoNotRec_GROUP_REMOVECHILD
    GROUP_REMOVEALLCHILDREN = _coin.SoNotRec_GROUP_REMOVEALLCHILDREN

    def __init__(self, notifbase: 'SoBase'):
        """__init__(SoNotRec self, SoBase notifbase) -> SoNotRec"""
        this = _coin.new_SoNotRec(notifbase)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setType(self, type: 'SoNotRec::Type const') -> "void":
        """setType(SoNotRec self, SoNotRec::Type const type)"""
        return _coin.SoNotRec_setType(self, type)


    def getBase(self) -> "SoBase *":
        """getBase(SoNotRec self) -> SoBase"""
        return _coin.SoNotRec_getBase(self)


    def getType(self) -> "SoNotRec::Type":
        """getType(SoNotRec self) -> SoNotRec::Type"""
        return _coin.SoNotRec_getType(self)


    def getPrevious(self) -> "SoNotRec const *":
        """getPrevious(SoNotRec self) -> SoNotRec"""
        return _coin.SoNotRec_getPrevious(self)


    def setPrevious(self, prev: 'SoNotRec') -> "void":
        """setPrevious(SoNotRec self, SoNotRec prev)"""
        return _coin.SoNotRec_setPrevious(self, prev)


    def output(self, file: 'FILE *const') -> "void":
        """output(SoNotRec self, FILE *const file)"""
        return _coin.SoNotRec_output(self, file)


    def getOperationType(self) -> "SoNotRec::OperationType":
        """getOperationType(SoNotRec self) -> SoNotRec::OperationType"""
        return _coin.SoNotRec_getOperationType(self)


    def getIndex(self) -> "int":
        """getIndex(SoNotRec self) -> int"""
        return _coin.SoNotRec_getIndex(self)


    def getFieldNumIndices(self) -> "int":
        """getFieldNumIndices(SoNotRec self) -> int"""
        return _coin.SoNotRec_getFieldNumIndices(self)


    def getGroupChild(self) -> "SoBase const *":
        """getGroupChild(SoNotRec self) -> SoBase"""
        return _coin.SoNotRec_getGroupChild(self)


    def getGroupPrevChild(self) -> "SoBase const *":
        """getGroupPrevChild(SoNotRec self) -> SoBase"""
        return _coin.SoNotRec_getGroupPrevChild(self)


    def setOperationType(self, opType: 'SoNotRec::OperationType const') -> "void":
        """setOperationType(SoNotRec self, SoNotRec::OperationType const opType)"""
        return _coin.SoNotRec_setOperationType(self, opType)


    def setIndex(self, idx: 'int const') -> "void":
        """setIndex(SoNotRec self, int const idx)"""
        return _coin.SoNotRec_setIndex(self, idx)


    def setFieldNumIndices(self, fldnumind: 'int const') -> "void":
        """setFieldNumIndices(SoNotRec self, int const fldnumind)"""
        return _coin.SoNotRec_setFieldNumIndices(self, fldnumind)


    def setGroupChild(self, gc: 'SoBase') -> "void":
        """setGroupChild(SoNotRec self, SoBase gc)"""
        return _coin.SoNotRec_setGroupChild(self, gc)


    def setGroupPrevChild(self, pc: 'SoBase') -> "void":
        """setGroupPrevChild(SoNotRec self, SoBase pc)"""
        return _coin.SoNotRec_setGroupPrevChild(self, pc)

    __swig_destroy__ = _coin.delete_SoNotRec
    __del__ = lambda self: None
SoNotRec_swigregister = _coin.SoNotRec_swigregister
SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    """Proxy of C++ SoNotList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoNotList self) -> SoNotList
        __init__(SoNotList self, SoNotList nl) -> SoNotList
        """
        this = _coin.new_SoNotList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, *args) -> "void":
        """
        append(SoNotList self, SoNotRec rec)
        append(SoNotList self, SoNotRec rec, SoField field)
        append(SoNotList self, SoNotRec rec, SoEngineOutput engineout)
        """
        return _coin.SoNotList_append(self, *args)


    def setLastType(self, type: 'SoNotRec::Type const') -> "void":
        """setLastType(SoNotList self, SoNotRec::Type const type)"""
        return _coin.SoNotList_setLastType(self, type)


    def getFirstRec(self) -> "SoNotRec *":
        """getFirstRec(SoNotList self) -> SoNotRec"""
        return _coin.SoNotList_getFirstRec(self)


    def getLastRec(self) -> "SoNotRec *":
        """getLastRec(SoNotList self) -> SoNotRec"""
        return _coin.SoNotList_getLastRec(self)


    def getFirstRecAtNode(self) -> "SoNotRec *":
        """getFirstRecAtNode(SoNotList self) -> SoNotRec"""
        return _coin.SoNotList_getFirstRecAtNode(self)


    def getLastField(self) -> "SoField *":
        """getLastField(SoNotList self) -> SoField"""
        return _coin.SoNotList_getLastField(self)


    def getLastEngineOutput(self) -> "SoEngineOutput *":
        """getLastEngineOutput(SoNotList self) -> SoEngineOutput"""
        return _coin.SoNotList_getLastEngineOutput(self)


    def getTimeStamp(self) -> "SbUniqueId":
        """getTimeStamp(SoNotList self) -> SbUniqueId"""
        return _coin.SoNotList_getTimeStamp(self)


    def output(self, *args) -> "void":
        """
        output(SoNotList self, FILE *const file)
        output(SoNotList self)
        """
        return _coin.SoNotList_output(self, *args)

    __swig_destroy__ = _coin.delete_SoNotList
    __del__ = lambda self: None
SoNotList_swigregister = _coin.SoNotList_swigregister
SoNotList_swigregister(SoNotList)

class SoField(object):
    """Proxy of C++ SoField class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoField
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoField_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoField_initClasses()

    initClasses = staticmethod(initClasses)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoField_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def setIgnored(self, ignore: 'SbBool') -> "void":
        """setIgnored(SoField self, SbBool ignore)"""
        return _coin.SoField_setIgnored(self, ignore)


    def isIgnored(self) -> "SbBool":
        """isIgnored(SoField self) -> SbBool"""
        return _coin.SoField_isIgnored(self)


    def setDefault(self, defaultVal: 'SbBool') -> "void":
        """setDefault(SoField self, SbBool defaultVal)"""
        return _coin.SoField_setDefault(self, defaultVal)


    def isDefault(self) -> "SbBool":
        """isDefault(SoField self) -> SbBool"""
        return _coin.SoField_isDefault(self)


    def getTypeId(self) -> "SoType":
        """getTypeId(SoField self) -> SoType"""
        return _coin.SoField_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoField_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoField self, SoType type) -> SbBool"""
        return _coin.SoField_isOfType(self, type)


    def enableConnection(self, flag: 'SbBool') -> "void":
        """enableConnection(SoField self, SbBool flag)"""
        return _coin.SoField_enableConnection(self, flag)


    def isConnectionEnabled(self) -> "SbBool":
        """isConnectionEnabled(SoField self) -> SbBool"""
        return _coin.SoField_isConnectionEnabled(self)


    def isConnectedFromEngine(self) -> "SbBool":
        """isConnectedFromEngine(SoField self) -> SbBool"""
        return _coin.SoField_isConnectedFromEngine(self)


    def getConnectedEngine(self, master: 'SoEngineOutput *&') -> "SbBool":
        """getConnectedEngine(SoField self, SoEngineOutput *& master) -> SbBool"""
        return _coin.SoField_getConnectedEngine(self, master)


    def connectFrom(self, *args) -> "SbBool":
        """
        connectFrom(SoField self, SoEngineOutput master, SbBool notnotify=0, SbBool append=0) -> SbBool
        connectFrom(SoField self, SoEngineOutput master, SbBool notnotify=0) -> SbBool
        connectFrom(SoField self, SoEngineOutput master) -> SbBool
        connectFrom(SoField self, SoField master, SbBool notnotify=0, SbBool append=0) -> SbBool
        connectFrom(SoField self, SoField master, SbBool notnotify=0) -> SbBool
        connectFrom(SoField self, SoField master) -> SbBool
        """
        return _coin.SoField_connectFrom(self, *args)


    def appendConnection(self, *args) -> "SbBool":
        """
        appendConnection(SoField self, SoEngineOutput master, SbBool notnotify=0) -> SbBool
        appendConnection(SoField self, SoEngineOutput master) -> SbBool
        appendConnection(SoField self, SoField master, SbBool notnotify=0) -> SbBool
        appendConnection(SoField self, SoField master) -> SbBool
        """
        return _coin.SoField_appendConnection(self, *args)


    def isConnectedFromField(self) -> "SbBool":
        """isConnectedFromField(SoField self) -> SbBool"""
        return _coin.SoField_isConnectedFromField(self)


    def getConnectedField(self, master: 'SoField *&') -> "SbBool":
        """getConnectedField(SoField self, SoField *& master) -> SbBool"""
        return _coin.SoField_getConnectedField(self, master)


    def getNumConnections(self) -> "int":
        """getNumConnections(SoField self) -> int"""
        return _coin.SoField_getNumConnections(self)


    def getForwardConnections(self, slavelist: 'SoFieldList') -> "int":
        """getForwardConnections(SoField self, SoFieldList slavelist) -> int"""
        return _coin.SoField_getForwardConnections(self, slavelist)


    def getConnections(self, masterlist: 'SoFieldList') -> "int":
        """getConnections(SoField self, SoFieldList masterlist) -> int"""
        return _coin.SoField_getConnections(self, masterlist)


    def disconnect(self, *args) -> "void":
        """
        disconnect(SoField self, SoEngineOutput engineoutput)
        disconnect(SoField self, SoField field)
        disconnect(SoField self)
        """
        return _coin.SoField_disconnect(self, *args)


    def isConnected(self) -> "SbBool":
        """isConnected(SoField self) -> SbBool"""
        return _coin.SoField_isConnected(self)


    def setContainer(self, cont: 'SoFieldContainer') -> "void":
        """setContainer(SoField self, SoFieldContainer cont)"""
        return _coin.SoField_setContainer(self, cont)


    def getContainer(self) -> "SoFieldContainer *":
        """getContainer(SoField self) -> SoFieldContainer"""
        return _coin.SoField_getContainer(self)


    def set(self, valuestring: 'char const *') -> "SbBool":
        """set(SoField self, char const * valuestring) -> SbBool"""
        return _coin.SoField_set(self, valuestring)


    def shouldWrite(self) -> "SbBool":
        """shouldWrite(SoField self) -> SbBool"""
        return _coin.SoField_shouldWrite(self)


    def touch(self) -> "void":
        """touch(SoField self)"""
        return _coin.SoField_touch(self)


    def startNotify(self) -> "void":
        """startNotify(SoField self)"""
        return _coin.SoField_startNotify(self)


    def notify(self, nlist: 'SoNotList') -> "void":
        """notify(SoField self, SoNotList nlist)"""
        return _coin.SoField_notify(self, nlist)


    def enableNotify(self, on: 'SbBool') -> "SbBool":
        """enableNotify(SoField self, SbBool on) -> SbBool"""
        return _coin.SoField_enableNotify(self, on)


    def isNotifyEnabled(self) -> "SbBool":
        """isNotifyEnabled(SoField self) -> SbBool"""
        return _coin.SoField_isNotifyEnabled(self)


    def addAuditor(self, f: 'void *', type: 'SoNotRec::Type') -> "void":
        """addAuditor(SoField self, void * f, SoNotRec::Type type)"""
        return _coin.SoField_addAuditor(self, f, type)


    def removeAuditor(self, f: 'void *', type: 'SoNotRec::Type') -> "void":
        """removeAuditor(SoField self, void * f, SoNotRec::Type type)"""
        return _coin.SoField_removeAuditor(self, f, type)


    def __eq__(self, f: 'SoField') -> "int":
        """__eq__(SoField self, SoField f) -> int"""
        return _coin.SoField___eq__(self, f)


    def __ne__(self, f: 'SoField') -> "int":
        """__ne__(SoField self, SoField f) -> int"""
        return _coin.SoField___ne__(self, f)


    def connectionStatusChanged(self, numconnections: 'int') -> "void":
        """connectionStatusChanged(SoField self, int numconnections)"""
        return _coin.SoField_connectionStatusChanged(self, numconnections)


    def isReadOnly(self) -> "SbBool":
        """isReadOnly(SoField self) -> SbBool"""
        return _coin.SoField_isReadOnly(self)


    def isSame(self, f: 'SoField') -> "SbBool":
        """isSame(SoField self, SoField f) -> SbBool"""
        return _coin.SoField_isSame(self, f)


    def copyFrom(self, f: 'SoField') -> "void":
        """copyFrom(SoField self, SoField f)"""
        return _coin.SoField_copyFrom(self, f)


    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoField self, SbBool copyconnections)"""
        return _coin.SoField_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoField self) -> SbBool"""
        return _coin.SoField_referencesCopy(self)


    def copyConnection(self, fromfield: 'SoField') -> "void":
        """copyConnection(SoField self, SoField fromfield)"""
        return _coin.SoField_copyConnection(self, fromfield)


    def read(self, input: 'SoInput', name: 'SbName') -> "SbBool":
        """read(SoField self, SoInput input, SbName name) -> SbBool"""
        return _coin.SoField_read(self, input, name)


    def write(self, out: 'SoOutput', name: 'SbName') -> "void":
        """write(SoField self, SoOutput out, SbName name)"""
        return _coin.SoField_write(self, out, name)


    def countWriteRefs(self, out: 'SoOutput') -> "void":
        """countWriteRefs(SoField self, SoOutput out)"""
        return _coin.SoField_countWriteRefs(self, out)

    NORMAL_FIELD = _coin.SoField_NORMAL_FIELD
    EVENTIN_FIELD = _coin.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = _coin.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = _coin.SoField_EXPOSED_FIELD

    def setFieldType(self, type: 'int') -> "void":
        """setFieldType(SoField self, int type)"""
        return _coin.SoField_setFieldType(self, type)


    def getFieldType(self) -> "int":
        """getFieldType(SoField self) -> int"""
        return _coin.SoField_getFieldType(self)


    def getDirty(self) -> "SbBool":
        """getDirty(SoField self) -> SbBool"""
        return _coin.SoField_getDirty(self)


    def setDirty(self, dirty: 'SbBool') -> "void":
        """setDirty(SoField self, SbBool dirty)"""
        return _coin.SoField_setDirty(self, dirty)


    def evaluate(self) -> "void":
        """evaluate(SoField self)"""
        return _coin.SoField_evaluate(self)


    def get(self) -> "SbString":
        """get(SoField self) -> SbString"""
        return _coin.SoField_get(self)

SoField_swigregister = _coin.SoField_swigregister
SoField_swigregister(SoField)

def SoField_initClass() -> "void":
    """SoField_initClass()"""
    return _coin.SoField_initClass()

def SoField_initClasses() -> "void":
    """SoField_initClasses()"""
    return _coin.SoField_initClasses()

def SoField_cleanupClass() -> "void":
    """SoField_cleanupClass()"""
    return _coin.SoField_cleanupClass()

def SoField_getClassTypeId() -> "SoType":
    """SoField_getClassTypeId() -> SoType"""
    return _coin.SoField_getClassTypeId()

class SoSField(SoField):
    """Proxy of C++ SoSField class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoSField
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSField_initClass()

    initClass = staticmethod(initClass)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSField_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def atexit_cleanup() -> "void":
        """atexit_cleanup()"""
        return _coin.SoSField_atexit_cleanup()

    atexit_cleanup = staticmethod(atexit_cleanup)
SoSField_swigregister = _coin.SoSField_swigregister
SoSField_swigregister(SoSField)

def SoSField_initClass() -> "void":
    """SoSField_initClass()"""
    return _coin.SoSField_initClass()

def SoSField_getClassTypeId() -> "SoType":
    """SoSField_getClassTypeId() -> SoType"""
    return _coin.SoSField_getClassTypeId()

def SoSField_atexit_cleanup() -> "void":
    """SoSField_atexit_cleanup()"""
    return _coin.SoSField_atexit_cleanup()

class SoMField(SoField):
    """Proxy of C++ SoMField class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoMField
    __del__ = lambda self: None

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMField_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def atexit_cleanup() -> "void":
        """atexit_cleanup()"""
        return _coin.SoMField_atexit_cleanup()

    atexit_cleanup = staticmethod(atexit_cleanup)

    def getNum(self) -> "int":
        """getNum(SoMField self) -> int"""
        return _coin.SoMField_getNum(self)


    def setNum(self, num: 'int const') -> "void":
        """setNum(SoMField self, int const num)"""
        return _coin.SoMField_setNum(self, num)


    def deleteValues(self, start: 'int', num: 'int'=-1) -> "void":
        """
        deleteValues(SoMField self, int start, int num=-1)
        deleteValues(SoMField self, int start)
        """
        return _coin.SoMField_deleteValues(self, start, num)


    def insertSpace(self, start: 'int', num: 'int') -> "void":
        """insertSpace(SoMField self, int start, int num)"""
        return _coin.SoMField_insertSpace(self, start, num)


    def set1(self, index: 'int const', valuestring: 'char const *const') -> "SbBool":
        """set1(SoMField self, int const index, char const *const valuestring) -> SbBool"""
        return _coin.SoMField_set1(self, index, valuestring)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMField_initClass()

    initClass = staticmethod(initClass)

    def enableDeleteValues(self) -> "void":
        """enableDeleteValues(SoMField self)"""
        return _coin.SoMField_enableDeleteValues(self)


    def isDeleteValuesEnabled(self) -> "SbBool":
        """isDeleteValuesEnabled(SoMField self) -> SbBool"""
        return _coin.SoMField_isDeleteValuesEnabled(self)


    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1


    def __len__(self) -> "int":
        """__len__(SoMField self) -> int"""
        return _coin.SoMField___len__(self)


    def get1(self, index: 'int const') -> "SbString":
        """get1(SoMField self, int const index) -> SbString"""
        return _coin.SoMField_get1(self, index)


    @property
    def values(self):
      def _values(obj):
        for value in obj:
          if hasattr(value, "__iter__"):
            yield list(_values(value))
          else:
            yield value
      out = _values(self)
      return list(out)

    @values.setter
    def values(self, arr):
      self.deleteValues(0)
      self.setValues(0, len(arr), arr)


SoMField_swigregister = _coin.SoMField_swigregister
SoMField_swigregister(SoMField)

def SoMField_getClassTypeId() -> "SoType":
    """SoMField_getClassTypeId() -> SoType"""
    return _coin.SoMField_getClassTypeId()

def SoMField_atexit_cleanup() -> "void":
    """SoMField_atexit_cleanup()"""
    return _coin.SoMField_atexit_cleanup()

def SoMField_initClass() -> "void":
    """SoMField_initClass()"""
    return _coin.SoMField_initClass()

class SoAuditorList(object):
    """Proxy of C++ SoAuditorList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoAuditorList self) -> SoAuditorList"""
        this = _coin.new_SoAuditorList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoAuditorList
    __del__ = lambda self: None

    def append(self, auditor: 'void *const', type: 'SoNotRec::Type const') -> "void":
        """append(SoAuditorList self, void *const auditor, SoNotRec::Type const type)"""
        return _coin.SoAuditorList_append(self, auditor, type)


    def set(self, index: 'int const', auditor: 'void *const', type: 'SoNotRec::Type const') -> "void":
        """set(SoAuditorList self, int const index, void *const auditor, SoNotRec::Type const type)"""
        return _coin.SoAuditorList_set(self, index, auditor, type)


    def getObject(self, index: 'int const') -> "void *":
        """getObject(SoAuditorList self, int const index) -> void *"""
        return _coin.SoAuditorList_getObject(self, index)


    def getType(self, index: 'int const') -> "SoNotRec::Type":
        """getType(SoAuditorList self, int const index) -> SoNotRec::Type"""
        return _coin.SoAuditorList_getType(self, index)


    def getLength(self) -> "int":
        """getLength(SoAuditorList self) -> int"""
        return _coin.SoAuditorList_getLength(self)


    def find(self, auditor: 'void *const', type: 'SoNotRec::Type const') -> "int":
        """find(SoAuditorList self, void *const auditor, SoNotRec::Type const type) -> int"""
        return _coin.SoAuditorList_find(self, auditor, type)


    def remove(self, *args) -> "void":
        """
        remove(SoAuditorList self, int const index)
        remove(SoAuditorList self, void *const auditor, SoNotRec::Type const type)
        """
        return _coin.SoAuditorList_remove(self, *args)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoAuditorList self, SoNotList l)"""
        return _coin.SoAuditorList_notify(self, l)

SoAuditorList_swigregister = _coin.SoAuditorList_swigregister
SoAuditorList_swigregister(SoAuditorList)

class SoBase(object):
    """Proxy of C++ SoBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBase_initClass()

    initClass = staticmethod(initClass)

    def ref(self) -> "void":
        """ref(SoBase self)"""
        return _coin.SoBase_ref(self)


    def unref(self) -> "void":
        """unref(SoBase self)"""
        return _coin.SoBase_unref(self)


    def unrefNoDelete(self) -> "void":
        """unrefNoDelete(SoBase self)"""
        return _coin.SoBase_unrefNoDelete(self)


    def getRefCount(self) -> "int32_t":
        """getRefCount(SoBase self) -> int32_t"""
        return _coin.SoBase_getRefCount(self)


    def touch(self) -> "void":
        """touch(SoBase self)"""
        return _coin.SoBase_touch(self)


    def getTypeId(self) -> "SoType":
        """getTypeId(SoBase self) -> SoType"""
        return _coin.SoBase_getTypeId(self)


    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoBase self, SoType type) -> SbBool"""
        return _coin.SoBase_isOfType(self, type)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBase_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getName(self) -> "SbName":
        """getName(SoBase self) -> SbName"""
        return _coin.SoBase_getName(self)


    def setName(self, newname: 'SbName') -> "void":
        """setName(SoBase self, SbName newname)"""
        return _coin.SoBase_setName(self, newname)


    def addName(base: 'SoBase', name: 'char const *const') -> "void":
        """addName(SoBase base, char const *const name)"""
        return _coin.SoBase_addName(base, name)

    addName = staticmethod(addName)

    def removeName(base: 'SoBase', name: 'char const *const') -> "void":
        """removeName(SoBase base, char const *const name)"""
        return _coin.SoBase_removeName(base, name)

    removeName = staticmethod(removeName)

    def startNotify(self) -> "void":
        """startNotify(SoBase self)"""
        return _coin.SoBase_startNotify(self)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoBase self, SoNotList l)"""
        return _coin.SoBase_notify(self, l)


    def addAuditor(self, auditor: 'void *const', type: 'SoNotRec::Type const') -> "void":
        """addAuditor(SoBase self, void *const auditor, SoNotRec::Type const type)"""
        return _coin.SoBase_addAuditor(self, auditor, type)


    def removeAuditor(self, auditor: 'void *const', type: 'SoNotRec::Type const') -> "void":
        """removeAuditor(SoBase self, void *const auditor, SoNotRec::Type const type)"""
        return _coin.SoBase_removeAuditor(self, auditor, type)


    def getAuditors(self) -> "SoAuditorList const &":
        """getAuditors(SoBase self) -> SoAuditorList"""
        return _coin.SoBase_getAuditors(self)


    def addWriteReference(self, out: 'SoOutput', isfromfield: 'SbBool'=0) -> "void":
        """
        addWriteReference(SoBase self, SoOutput out, SbBool isfromfield=0)
        addWriteReference(SoBase self, SoOutput out)
        """
        return _coin.SoBase_addWriteReference(self, out, isfromfield)


    def shouldWrite(self) -> "SbBool":
        """shouldWrite(SoBase self) -> SbBool"""
        return _coin.SoBase_shouldWrite(self)


    def incrementCurrentWriteCounter() -> "void":
        """incrementCurrentWriteCounter()"""
        return _coin.SoBase_incrementCurrentWriteCounter()

    incrementCurrentWriteCounter = staticmethod(incrementCurrentWriteCounter)

    def decrementCurrentWriteCounter() -> "void":
        """decrementCurrentWriteCounter()"""
        return _coin.SoBase_decrementCurrentWriteCounter()

    decrementCurrentWriteCounter = staticmethod(decrementCurrentWriteCounter)

    def getNamedBase(name: 'SbName', type: 'SoType') -> "SoBase *":
        """getNamedBase(SbName name, SoType type) -> SoBase"""
        return _coin.SoBase_getNamedBase(name, type)

    getNamedBase = staticmethod(getNamedBase)

    def getNamedBases(name: 'SbName', baselist: 'SoBaseList', type: 'SoType') -> "int":
        """getNamedBases(SbName name, SoBaseList baselist, SoType type) -> int"""
        return _coin.SoBase_getNamedBases(name, baselist, type)

    getNamedBases = staticmethod(getNamedBases)

    def read(input: 'SoInput', base: 'SoBase *&', expectedtype: 'SoType') -> "SbBool":
        """read(SoInput input, SoBase *& base, SoType expectedtype) -> SbBool"""
        return _coin.SoBase_read(input, base, expectedtype)

    read = staticmethod(read)

    def setInstancePrefix(c: 'SbString') -> "void":
        """setInstancePrefix(SbString c)"""
        return _coin.SoBase_setInstancePrefix(c)

    setInstancePrefix = staticmethod(setInstancePrefix)

    def setTraceRefs(trace: 'SbBool') -> "void":
        """setTraceRefs(SbBool trace)"""
        return _coin.SoBase_setTraceRefs(trace)

    setTraceRefs = staticmethod(setTraceRefs)

    def getTraceRefs() -> "SbBool":
        """getTraceRefs() -> SbBool"""
        return _coin.SoBase_getTraceRefs()

    getTraceRefs = staticmethod(getTraceRefs)

    def connectRoute(input: 'SoInput', fromnodename: 'SbName', fromfieldname: 'SbName', tonodename: 'SbName', tofieldname: 'SbName') -> "SbBool":
        """connectRoute(SoInput input, SbName fromnodename, SbName fromfieldname, SbName tonodename, SbName tofieldname) -> SbBool"""
        return _coin.SoBase_connectRoute(input, fromnodename, fromfieldname, tonodename, tofieldname)

    connectRoute = staticmethod(connectRoute)

    def assertAlive(self) -> "void":
        """assertAlive(SoBase self)"""
        return _coin.SoBase_assertAlive(self)


    def readRoute(input: 'SoInput') -> "SbBool":
        """readRoute(SoInput input) -> SbBool"""
        return _coin.SoBase_readRoute(input)

    readRoute = staticmethod(readRoute)
    __swig_destroy__ = _coin.delete_SoBase
    __del__ = lambda self: None

    def __hash__(self) -> "size_t":
        """__hash__(SoBase self) -> size_t"""
        return _coin.SoBase___hash__(self)


    def __eq__(self,other):
      return (self.this == other.this) if other is not None else False
    def __ne__(self,other):
      return (self.this != other.this) if other is not None else True
    def __nonzero__(self):
      return True

SoBase_swigregister = _coin.SoBase_swigregister
SoBase_swigregister(SoBase)

def SoBase_initClass() -> "void":
    """SoBase_initClass()"""
    return _coin.SoBase_initClass()

def SoBase_getClassTypeId() -> "SoType":
    """SoBase_getClassTypeId() -> SoType"""
    return _coin.SoBase_getClassTypeId()

def SoBase_addName(base: 'SoBase', name: 'char const *const') -> "void":
    """SoBase_addName(SoBase base, char const *const name)"""
    return _coin.SoBase_addName(base, name)

def SoBase_removeName(base: 'SoBase', name: 'char const *const') -> "void":
    """SoBase_removeName(SoBase base, char const *const name)"""
    return _coin.SoBase_removeName(base, name)

def SoBase_incrementCurrentWriteCounter() -> "void":
    """SoBase_incrementCurrentWriteCounter()"""
    return _coin.SoBase_incrementCurrentWriteCounter()

def SoBase_decrementCurrentWriteCounter() -> "void":
    """SoBase_decrementCurrentWriteCounter()"""
    return _coin.SoBase_decrementCurrentWriteCounter()

def SoBase_getNamedBase(name: 'SbName', type: 'SoType') -> "SoBase *":
    """SoBase_getNamedBase(SbName name, SoType type) -> SoBase"""
    return _coin.SoBase_getNamedBase(name, type)

def SoBase_getNamedBases(name: 'SbName', baselist: 'SoBaseList', type: 'SoType') -> "int":
    """SoBase_getNamedBases(SbName name, SoBaseList baselist, SoType type) -> int"""
    return _coin.SoBase_getNamedBases(name, baselist, type)

def SoBase_read(input: 'SoInput', base: 'SoBase *&', expectedtype: 'SoType') -> "SbBool":
    """SoBase_read(SoInput input, SoBase *& base, SoType expectedtype) -> SbBool"""
    return _coin.SoBase_read(input, base, expectedtype)

def SoBase_setInstancePrefix(c: 'SbString') -> "void":
    """SoBase_setInstancePrefix(SbString c)"""
    return _coin.SoBase_setInstancePrefix(c)

def SoBase_setTraceRefs(trace: 'SbBool') -> "void":
    """SoBase_setTraceRefs(SbBool trace)"""
    return _coin.SoBase_setTraceRefs(trace)

def SoBase_getTraceRefs() -> "SbBool":
    """SoBase_getTraceRefs() -> SbBool"""
    return _coin.SoBase_getTraceRefs()

def SoBase_connectRoute(input: 'SoInput', fromnodename: 'SbName', fromfieldname: 'SbName', tonodename: 'SbName', tofieldname: 'SbName') -> "SbBool":
    """SoBase_connectRoute(SoInput input, SbName fromnodename, SbName fromfieldname, SbName tonodename, SbName tofieldname) -> SbBool"""
    return _coin.SoBase_connectRoute(input, fromnodename, fromfieldname, tonodename, tofieldname)

def SoBase_readRoute(input: 'SoInput') -> "SbBool":
    """SoBase_readRoute(SoInput input) -> SbBool"""
    return _coin.SoBase_readRoute(input)


def intrusive_ptr_add_ref(obj: 'SoBase') -> "void":
    """intrusive_ptr_add_ref(SoBase obj)"""
    return _coin.intrusive_ptr_add_ref(obj)

def intrusive_ptr_release(obj: 'SoBase') -> "void":
    """intrusive_ptr_release(SoBase obj)"""
    return _coin.intrusive_ptr_release(obj)
class SoBaseList(SbPList):
    """Proxy of C++ SoBaseList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoBaseList self) -> SoBaseList
        __init__(SoBaseList self, int const size) -> SoBaseList
        __init__(SoBaseList self, SoBaseList l) -> SoBaseList
        """
        this = _coin.new_SoBaseList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoBaseList
    __del__ = lambda self: None

    def append(self, ptr: 'SoBase') -> "void":
        """append(SoBaseList self, SoBase ptr)"""
        return _coin.SoBaseList_append(self, ptr)


    def insert(self, ptr: 'SoBase', addbefore: 'int const') -> "void":
        """insert(SoBaseList self, SoBase ptr, int const addbefore)"""
        return _coin.SoBaseList_insert(self, ptr, addbefore)


    def remove(self, index: 'int const') -> "void":
        """remove(SoBaseList self, int const index)"""
        return _coin.SoBaseList_remove(self, index)


    def removeItem(self, item: 'SoBase') -> "void":
        """removeItem(SoBaseList self, SoBase item)"""
        return _coin.SoBaseList_removeItem(self, item)


    def truncate(self, length: 'int const') -> "void":
        """truncate(SoBaseList self, int const length)"""
        return _coin.SoBaseList_truncate(self, length)


    def copy(self, l: 'SoBaseList') -> "void":
        """copy(SoBaseList self, SoBaseList l)"""
        return _coin.SoBaseList_copy(self, l)


    def set(self, i: 'int const', ptr: 'SoBase') -> "void":
        """set(SoBaseList self, int const i, SoBase ptr)"""
        return _coin.SoBaseList_set(self, i, ptr)


    def addReferences(self, flag: 'SbBool const') -> "void":
        """addReferences(SoBaseList self, SbBool const flag)"""
        return _coin.SoBaseList_addReferences(self, flag)


    def isReferencing(self) -> "SbBool":
        """isReferencing(SoBaseList self) -> SbBool"""
        return _coin.SoBaseList_isReferencing(self)


    def __setitem__(self, i: 'int const', value: 'SoBase') -> "void":
        """__setitem__(SoBaseList self, int const i, SoBase value)"""
        return _coin.SoBaseList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoBase *":
        """__getitem__(SoBaseList self, int const i) -> SoBase"""
        return _coin.SoBaseList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoBase *":
        """get(SoBaseList self, int const i) -> SoBase"""
        return _coin.SoBaseList_get(self, i)

SoBaseList_swigregister = _coin.SoBaseList_swigregister
SoBaseList_swigregister(SoBaseList)

class SoNodeList(SoBaseList):
    """Proxy of C++ SoNodeList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoNodeList self) -> SoNodeList
        __init__(SoNodeList self, int const size) -> SoNodeList
        __init__(SoNodeList self, SoNodeList nl) -> SoNodeList
        """
        this = _coin.new_SoNodeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNodeList
    __del__ = lambda self: None

    def append(self, ptr: 'SoNode') -> "void":
        """append(SoNodeList self, SoNode ptr)"""
        return _coin.SoNodeList_append(self, ptr)


    def __setitem__(self, i: 'int const', value: 'SoNode') -> "void":
        """__setitem__(SoNodeList self, int const i, SoNode value)"""
        return _coin.SoNodeList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoNode *":
        """__getitem__(SoNodeList self, int const i) -> SoNode"""
        return _coin.SoNodeList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoNode *":
        """get(SoNodeList self, int const i) -> SoNode"""
        return _coin.SoNodeList_get(self, i)

SoNodeList_swigregister = _coin.SoNodeList_swigregister
SoNodeList_swigregister(SoNodeList)

class SoDetailList(SbPList):
    """Proxy of C++ SoDetailList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoDetailList self) -> SoDetailList
        __init__(SoDetailList self, int const sizehint) -> SoDetailList
        __init__(SoDetailList self, SoDetailList l) -> SoDetailList
        """
        this = _coin.new_SoDetailList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoDetailList
    __del__ = lambda self: None

    def append(self, detail: 'SoDetail') -> "void":
        """append(SoDetailList self, SoDetail detail)"""
        return _coin.SoDetailList_append(self, detail)


    def insert(self, detail: 'SoDetail', insertbefore: 'int const') -> "void":
        """insert(SoDetailList self, SoDetail detail, int const insertbefore)"""
        return _coin.SoDetailList_insert(self, detail, insertbefore)


    def truncate(self, length: 'int const', fit: 'int const'=0) -> "void":
        """
        truncate(SoDetailList self, int const length, int const fit=0)
        truncate(SoDetailList self, int const length)
        """
        return _coin.SoDetailList_truncate(self, length, fit)


    def copy(self, l: 'SoDetailList') -> "void":
        """copy(SoDetailList self, SoDetailList l)"""
        return _coin.SoDetailList_copy(self, l)


    def set(self, index: 'int const', item: 'SoDetail') -> "void":
        """set(SoDetailList self, int const index, SoDetail item)"""
        return _coin.SoDetailList_set(self, index, item)


    def __setitem__(self, i: 'int const', value: 'SoDetail') -> "void":
        """__setitem__(SoDetailList self, int const i, SoDetail value)"""
        return _coin.SoDetailList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoDetail *":
        """__getitem__(SoDetailList self, int const i) -> SoDetail"""
        return _coin.SoDetailList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoDetail *":
        """get(SoDetailList self, int const i) -> SoDetail"""
        return _coin.SoDetailList_get(self, i)

SoDetailList_swigregister = _coin.SoDetailList_swigregister
SoDetailList_swigregister(SoDetailList)

class SoTypeList(SbPList):
    """Proxy of C++ SoTypeList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoTypeList self) -> SoTypeList
        __init__(SoTypeList self, int const sizehint) -> SoTypeList
        __init__(SoTypeList self, SoTypeList l) -> SoTypeList
        """
        this = _coin.new_SoTypeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, type: 'SoType') -> "void":
        """append(SoTypeList self, SoType type)"""
        return _coin.SoTypeList_append(self, type)


    def find(self, type: 'SoType') -> "int":
        """find(SoTypeList self, SoType type) -> int"""
        return _coin.SoTypeList_find(self, type)


    def insert(self, type: 'SoType', insertbefore: 'int const') -> "void":
        """insert(SoTypeList self, SoType type, int const insertbefore)"""
        return _coin.SoTypeList_insert(self, type, insertbefore)


    def set(self, index: 'int const', item: 'SoType') -> "void":
        """set(SoTypeList self, int const index, SoType item)"""
        return _coin.SoTypeList_set(self, index, item)


    def __setitem__(self, i: 'int const', value: 'SoType') -> "void":
        """__setitem__(SoTypeList self, int const i, SoType value)"""
        return _coin.SoTypeList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoType":
        """__getitem__(SoTypeList self, int const i) -> SoType"""
        return _coin.SoTypeList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoType":
        """get(SoTypeList self, int const i) -> SoType"""
        return _coin.SoTypeList_get(self, i)

    __swig_destroy__ = _coin.delete_SoTypeList
    __del__ = lambda self: None
SoTypeList_swigregister = _coin.SoTypeList_swigregister
SoTypeList_swigregister(SoTypeList)

class SoEnabledElementsList(object):
    """Proxy of C++ SoEnabledElementsList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, parentlist: 'SoEnabledElementsList'):
        """__init__(SoEnabledElementsList self, SoEnabledElementsList parentlist) -> SoEnabledElementsList"""
        this = _coin.new_SoEnabledElementsList(parentlist)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEnabledElementsList
    __del__ = lambda self: None

    def getElements(self) -> "SoTypeList const &":
        """getElements(SoEnabledElementsList self) -> SoTypeList"""
        return _coin.SoEnabledElementsList_getElements(self)


    def enable(self, elementtype: 'SoType', stackindex: 'int const') -> "void":
        """enable(SoEnabledElementsList self, SoType elementtype, int const stackindex)"""
        return _coin.SoEnabledElementsList_enable(self, elementtype, stackindex)


    def merge(self, eel: 'SoEnabledElementsList') -> "void":
        """merge(SoEnabledElementsList self, SoEnabledElementsList eel)"""
        return _coin.SoEnabledElementsList_merge(self, eel)


    def getCounter() -> "int":
        """getCounter() -> int"""
        return _coin.SoEnabledElementsList_getCounter()

    getCounter = staticmethod(getCounter)
SoEnabledElementsList_swigregister = _coin.SoEnabledElementsList_swigregister
SoEnabledElementsList_swigregister(SoEnabledElementsList)

def SoEnabledElementsList_getCounter() -> "int":
    """SoEnabledElementsList_getCounter() -> int"""
    return _coin.SoEnabledElementsList_getCounter()

class SoEngineOutputList(SbPList):
    """Proxy of C++ SoEngineOutputList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoEngineOutputList self) -> SoEngineOutputList
        __init__(SoEngineOutputList self, int const sizehint) -> SoEngineOutputList
        __init__(SoEngineOutputList self, SoEngineOutputList l) -> SoEngineOutputList
        """
        this = _coin.new_SoEngineOutputList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, output: 'SoEngineOutput') -> "void":
        """append(SoEngineOutputList self, SoEngineOutput output)"""
        return _coin.SoEngineOutputList_append(self, output)


    def insert(self, output: 'SoEngineOutput', insertbefore: 'int const') -> "void":
        """insert(SoEngineOutputList self, SoEngineOutput output, int const insertbefore)"""
        return _coin.SoEngineOutputList_insert(self, output, insertbefore)


    def set(self, idx: 'int const', item: 'SoEngineOutput') -> "void":
        """set(SoEngineOutputList self, int const idx, SoEngineOutput item)"""
        return _coin.SoEngineOutputList_set(self, idx, item)


    def __setitem__(self, i: 'int const', value: 'SoEngineOutput') -> "void":
        """__setitem__(SoEngineOutputList self, int const i, SoEngineOutput value)"""
        return _coin.SoEngineOutputList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoEngineOutput *":
        """__getitem__(SoEngineOutputList self, int const i) -> SoEngineOutput"""
        return _coin.SoEngineOutputList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoEngineOutput *":
        """get(SoEngineOutputList self, int const i) -> SoEngineOutput"""
        return _coin.SoEngineOutputList_get(self, i)

    __swig_destroy__ = _coin.delete_SoEngineOutputList
    __del__ = lambda self: None
SoEngineOutputList_swigregister = _coin.SoEngineOutputList_swigregister
SoEngineOutputList_swigregister(SoEngineOutputList)

class SoEngineList(SoBaseList):
    """Proxy of C++ SoEngineList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoEngineList self) -> SoEngineList
        __init__(SoEngineList self, int const size) -> SoEngineList
        __init__(SoEngineList self, SoEngineList el) -> SoEngineList
        """
        this = _coin.new_SoEngineList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEngineList
    __del__ = lambda self: None

    def append(self, ptr: 'SoEngine') -> "void":
        """append(SoEngineList self, SoEngine ptr)"""
        return _coin.SoEngineList_append(self, ptr)


    def __setitem__(self, i: 'int const', value: 'SoEngine') -> "void":
        """__setitem__(SoEngineList self, int const i, SoEngine value)"""
        return _coin.SoEngineList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoEngine *":
        """__getitem__(SoEngineList self, int const i) -> SoEngine"""
        return _coin.SoEngineList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoEngine *":
        """get(SoEngineList self, int const i) -> SoEngine"""
        return _coin.SoEngineList_get(self, i)

SoEngineList_swigregister = _coin.SoEngineList_swigregister
SoEngineList_swigregister(SoEngineList)

class SoFieldList(SbPList):
    """Proxy of C++ SoFieldList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoFieldList self) -> SoFieldList
        __init__(SoFieldList self, int const sizehint) -> SoFieldList
        __init__(SoFieldList self, SoFieldList l) -> SoFieldList
        """
        this = _coin.new_SoFieldList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, field: 'SoField') -> "void":
        """append(SoFieldList self, SoField field)"""
        return _coin.SoFieldList_append(self, field)


    def insert(self, field: 'SoField', insertbefore: 'int const') -> "void":
        """insert(SoFieldList self, SoField field, int const insertbefore)"""
        return _coin.SoFieldList_insert(self, field, insertbefore)


    def set(self, idx: 'int const', field: 'SoField') -> "void":
        """set(SoFieldList self, int const idx, SoField field)"""
        return _coin.SoFieldList_set(self, idx, field)


    def __setitem__(self, i: 'int const', value: 'SoField') -> "void":
        """__setitem__(SoFieldList self, int const i, SoField value)"""
        return _coin.SoFieldList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoField *":
        """__getitem__(SoFieldList self, int const i) -> SoField"""
        return _coin.SoFieldList___getitem__(self, i)


    def get(self, *args) -> "SoField *":
        """
        get(SoFieldList self, int const idx) -> SoField
        get(SoFieldList self, int const i) -> SoField
        """
        return _coin.SoFieldList_get(self, *args)

    __swig_destroy__ = _coin.delete_SoFieldList
    __del__ = lambda self: None
SoFieldList_swigregister = _coin.SoFieldList_swigregister
SoFieldList_swigregister(SoFieldList)

class SoPathList(SoBaseList):
    """Proxy of C++ SoPathList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoPathList self) -> SoPathList
        __init__(SoPathList self, int const size) -> SoPathList
        __init__(SoPathList self, SoPathList pl) -> SoPathList
        """
        this = _coin.new_SoPathList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPathList
    __del__ = lambda self: None

    def append(self, path: 'SoPath') -> "void":
        """append(SoPathList self, SoPath path)"""
        return _coin.SoPathList_append(self, path)


    def findPath(self, path: 'SoPath') -> "int":
        """findPath(SoPathList self, SoPath path) -> int"""
        return _coin.SoPathList_findPath(self, path)


    def sort(self) -> "void":
        """sort(SoPathList self)"""
        return _coin.SoPathList_sort(self)


    def uniquify(self) -> "void":
        """uniquify(SoPathList self)"""
        return _coin.SoPathList_uniquify(self)


    def __setitem__(self, i: 'int const', value: 'SoPath') -> "void":
        """__setitem__(SoPathList self, int const i, SoPath value)"""
        return _coin.SoPathList___setitem__(self, i, value)


    def __getitem__(self, i: 'int') -> "SoPath *":
        """__getitem__(SoPathList self, int i) -> SoPath"""
        return _coin.SoPathList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoPath *":
        """get(SoPathList self, int const i) -> SoPath"""
        return _coin.SoPathList_get(self, i)

SoPathList_swigregister = _coin.SoPathList_swigregister
SoPathList_swigregister(SoPathList)

class SoPickedPointList(SbPList):
    """Proxy of C++ SoPickedPointList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoPickedPointList self) -> SoPickedPointList
        __init__(SoPickedPointList self, int const sizehint) -> SoPickedPointList
        __init__(SoPickedPointList self, SoPickedPointList l) -> SoPickedPointList
        """
        this = _coin.new_SoPickedPointList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPickedPointList
    __del__ = lambda self: None

    def append(self, pp: 'SoPickedPoint') -> "void":
        """append(SoPickedPointList self, SoPickedPoint pp)"""
        return _coin.SoPickedPointList_append(self, pp)


    def insert(self, pp: 'SoPickedPoint', insertbefore: 'int const') -> "void":
        """insert(SoPickedPointList self, SoPickedPoint pp, int const insertbefore)"""
        return _coin.SoPickedPointList_insert(self, pp, insertbefore)


    def truncate(self, start: 'int const', fit: 'int const'=0) -> "void":
        """
        truncate(SoPickedPointList self, int const start, int const fit=0)
        truncate(SoPickedPointList self, int const start)
        """
        return _coin.SoPickedPointList_truncate(self, start, fit)


    def set(self, idx: 'int const', pp: 'SoPickedPoint') -> "void":
        """set(SoPickedPointList self, int const idx, SoPickedPoint pp)"""
        return _coin.SoPickedPointList_set(self, idx, pp)


    def __setitem__(self, i: 'int const', value: 'SoPickedPoint') -> "void":
        """__setitem__(SoPickedPointList self, int const i, SoPickedPoint value)"""
        return _coin.SoPickedPointList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoPickedPoint *":
        """__getitem__(SoPickedPointList self, int const i) -> SoPickedPoint"""
        return _coin.SoPickedPointList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoPickedPoint *":
        """get(SoPickedPointList self, int const i) -> SoPickedPoint"""
        return _coin.SoPickedPointList_get(self, i)

SoPickedPointList_swigregister = _coin.SoPickedPointList_swigregister
SoPickedPointList_swigregister(SoPickedPointList)

class SoPath(SoBase):
    """Proxy of C++ SoPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPath_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoPath self, int const approxlength=4) -> SoPath
        __init__(SoPath self) -> SoPath
        __init__(SoPath self, SoNode head) -> SoPath
        __init__(SoPath self, SoPath rhs) -> SoPath
        """
        this = _coin.new_SoPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPath_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPath self) -> SoType"""
        return _coin.SoPath_getTypeId(self)


    def setHead(self, head: 'SoNode') -> "void":
        """setHead(SoPath self, SoNode head)"""
        return _coin.SoPath_setHead(self, head)


    def getHead(self) -> "SoNode *":
        """getHead(SoPath self) -> SoNode"""
        return _coin.SoPath_getHead(self)


    def append(self, *args) -> "void":
        """
        append(SoPath self, int const childindex)
        append(SoPath self, SoNode node)
        append(SoPath self, SoPath frompath)
        """
        return _coin.SoPath_append(self, *args)


    def push(self, childindex: 'int const') -> "void":
        """push(SoPath self, int const childindex)"""
        return _coin.SoPath_push(self, childindex)


    def pop(self) -> "void":
        """pop(SoPath self)"""
        return _coin.SoPath_pop(self)


    def getTail(self) -> "SoNode *":
        """getTail(SoPath self) -> SoNode"""
        return _coin.SoPath_getTail(self)


    def getNode(self, index: 'int const') -> "SoNode *":
        """getNode(SoPath self, int const index) -> SoNode"""
        return _coin.SoPath_getNode(self, index)


    def getNodeFromTail(self, index: 'int const') -> "SoNode *":
        """getNodeFromTail(SoPath self, int const index) -> SoNode"""
        return _coin.SoPath_getNodeFromTail(self, index)


    def getIndex(self, index: 'int const') -> "int":
        """getIndex(SoPath self, int const index) -> int"""
        return _coin.SoPath_getIndex(self, index)


    def getIndexFromTail(self, index: 'int const') -> "int":
        """getIndexFromTail(SoPath self, int const index) -> int"""
        return _coin.SoPath_getIndexFromTail(self, index)


    def getLength(self) -> "int":
        """getLength(SoPath self) -> int"""
        return _coin.SoPath_getLength(self)


    def truncate(self, length: 'int const') -> "void":
        """truncate(SoPath self, int const length)"""
        return _coin.SoPath_truncate(self, length)


    def findFork(self, path: 'SoPath') -> "int":
        """findFork(SoPath self, SoPath path) -> int"""
        return _coin.SoPath_findFork(self, path)


    def findNode(self, node: 'SoNode') -> "int":
        """findNode(SoPath self, SoNode node) -> int"""
        return _coin.SoPath_findNode(self, node)


    def containsNode(self, node: 'SoNode') -> "SbBool":
        """containsNode(SoPath self, SoNode node) -> SbBool"""
        return _coin.SoPath_containsNode(self, node)


    def containsPath(self, path: 'SoPath') -> "SbBool":
        """containsPath(SoPath self, SoPath path) -> SbBool"""
        return _coin.SoPath_containsPath(self, path)


    def copy(self, startfromnodeindex: 'int const'=0, numnodes: 'int'=0) -> "SoPath *":
        """
        copy(SoPath self, int const startfromnodeindex=0, int numnodes=0) -> SoPath
        copy(SoPath self, int const startfromnodeindex=0) -> SoPath
        copy(SoPath self) -> SoPath
        """
        return _coin.SoPath_copy(self, startfromnodeindex, numnodes)


    def getByName(*args) -> "int":
        """
        getByName(SbName name) -> SoPath
        getByName(SbName name, SoPathList l) -> int
        """
        return _coin.SoPath_getByName(*args)

    getByName = staticmethod(getByName)

    def insertIndex(self, parent: 'SoNode', newindex: 'int const') -> "void":
        """insertIndex(SoPath self, SoNode parent, int const newindex)"""
        return _coin.SoPath_insertIndex(self, parent, newindex)


    def removeIndex(self, parent: 'SoNode', oldindex: 'int const') -> "void":
        """removeIndex(SoPath self, SoNode parent, int const oldindex)"""
        return _coin.SoPath_removeIndex(self, parent, oldindex)


    def replaceIndex(self, parent: 'SoNode', index: 'int const', newchild: 'SoNode') -> "void":
        """replaceIndex(SoPath self, SoNode parent, int const index, SoNode newchild)"""
        return _coin.SoPath_replaceIndex(self, parent, index, newchild)


    def isRelevantNotification(self, l: 'SoNotList') -> "SbBool":
        """isRelevantNotification(SoPath self, SoNotList l) -> SbBool"""
        return _coin.SoPath_isRelevantNotification(self, l)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoPath self, SoWriteAction action)"""
        return _coin.SoPath_write(self, action)


    def __iter__(self):
       for i in range(self.getLength()):
          yield self.getNode(i)

    def index(self):
       for i in range(self.getLength()):
          yield self.getIndex(i)


    def __eq__(self, u: 'SoPath') -> "int":
        """__eq__(SoPath self, SoPath u) -> int"""
        return _coin.SoPath___eq__(self, u)


    def __nq__(self, u: 'SoPath') -> "int":
        """__nq__(SoPath self, SoPath u) -> int"""
        return _coin.SoPath___nq__(self, u)

SoPath_swigregister = _coin.SoPath_swigregister
SoPath_swigregister(SoPath)

def SoPath_initClass() -> "void":
    """SoPath_initClass()"""
    return _coin.SoPath_initClass()

def SoPath_getClassTypeId() -> "SoType":
    """SoPath_getClassTypeId() -> SoType"""
    return _coin.SoPath_getClassTypeId()

def SoPath_getByName(*args) -> "int":
    """
    getByName(SbName name) -> SoPath
    SoPath_getByName(SbName name, SoPathList l) -> int
    """
    return _coin.SoPath_getByName(*args)

class SoLightPath(object):
    """Proxy of C++ SoLightPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoLightPath self, SoNode node, int const approxlength) -> SoLightPath
        __init__(SoLightPath self, int const approxlength) -> SoLightPath
        """
        this = _coin.new_SoLightPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoLightPath
    __del__ = lambda self: None

    def setHead(self, node: 'SoNode') -> "void":
        """setHead(SoLightPath self, SoNode node)"""
        return _coin.SoLightPath_setHead(self, node)


    def append(self, childindex: 'int const') -> "void":
        """append(SoLightPath self, int const childindex)"""
        return _coin.SoLightPath_append(self, childindex)


    def push(self, childindex: 'int const') -> "void":
        """push(SoLightPath self, int const childindex)"""
        return _coin.SoLightPath_push(self, childindex)


    def pop(self) -> "void":
        """pop(SoLightPath self)"""
        return _coin.SoLightPath_pop(self)


    def setTail(self, childindex: 'int const') -> "void":
        """setTail(SoLightPath self, int const childindex)"""
        return _coin.SoLightPath_setTail(self, childindex)


    def getTail(self) -> "SoNode *":
        """getTail(SoLightPath self) -> SoNode"""
        return _coin.SoLightPath_getTail(self)


    def getHead(self) -> "SoNode *":
        """getHead(SoLightPath self) -> SoNode"""
        return _coin.SoLightPath_getHead(self)


    def getNode(self, index: 'int const') -> "SoNode *":
        """getNode(SoLightPath self, int const index) -> SoNode"""
        return _coin.SoLightPath_getNode(self, index)


    def getIndex(self, index: 'int const') -> "int":
        """getIndex(SoLightPath self, int const index) -> int"""
        return _coin.SoLightPath_getIndex(self, index)


    def getFullLength(self) -> "int":
        """getFullLength(SoLightPath self) -> int"""
        return _coin.SoLightPath_getFullLength(self)


    def truncate(self, startindex: 'int const') -> "void":
        """truncate(SoLightPath self, int const startindex)"""
        return _coin.SoLightPath_truncate(self, startindex)


    def makeTempPath(self, path: 'SoTempPath') -> "void":
        """makeTempPath(SoLightPath self, SoTempPath path)"""
        return _coin.SoLightPath_makeTempPath(self, path)

SoLightPath_swigregister = _coin.SoLightPath_swigregister
SoLightPath_swigregister(SoLightPath)

class SoFullPath(SoPath):
    """Proxy of C++ SoFullPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def pop(self) -> "void":
        """pop(SoFullPath self)"""
        return _coin.SoFullPath_pop(self)


    def getTail(self) -> "SoNode *":
        """getTail(SoFullPath self) -> SoNode"""
        return _coin.SoFullPath_getTail(self)


    def getNodeFromTail(self, index: 'int const') -> "SoNode *":
        """getNodeFromTail(SoFullPath self, int const index) -> SoNode"""
        return _coin.SoFullPath_getNodeFromTail(self, index)


    def getIndexFromTail(self, index: 'int const') -> "int":
        """getIndexFromTail(SoFullPath self, int const index) -> int"""
        return _coin.SoFullPath_getIndexFromTail(self, index)


    def getLength(self) -> "int":
        """getLength(SoFullPath self) -> int"""
        return _coin.SoFullPath_getLength(self)


    def fromSoPath(path: 'SoPath') -> "SoFullPath *":
        """fromSoPath(SoPath path) -> SoFullPath"""
        return _coin.SoFullPath_fromSoPath(path)

    fromSoPath = staticmethod(fromSoPath)
SoFullPath_swigregister = _coin.SoFullPath_swigregister
SoFullPath_swigregister(SoFullPath)

def SoFullPath_fromSoPath(path: 'SoPath') -> "SoFullPath *":
    """SoFullPath_fromSoPath(SoPath path) -> SoFullPath"""
    return _coin.SoFullPath_fromSoPath(path)

class SoTempPath(SoFullPath):
    """Proxy of C++ SoTempPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def simpleAppend(self, node: 'SoNode', index: 'int const') -> "void":
        """simpleAppend(SoTempPath self, SoNode node, int const index)"""
        return _coin.SoTempPath_simpleAppend(self, node, index)


    def replaceTail(self, node: 'SoNode', index: 'int const') -> "void":
        """replaceTail(SoTempPath self, SoNode node, int const index)"""
        return _coin.SoTempPath_replaceTail(self, node, index)

SoTempPath_swigregister = _coin.SoTempPath_swigregister
SoTempPath_swigregister(SoTempPath)

class SoActionMethodList(SbPList):
    """Proxy of C++ SoActionMethodList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, parentlist: 'SoActionMethodList'):
        """__init__(SoActionMethodList self, SoActionMethodList parentlist) -> SoActionMethodList"""
        this = _coin.new_SoActionMethodList(parentlist)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoActionMethodList
    __del__ = lambda self: None

    def addMethod(self, node: 'SoType', method: 'SoActionMethod const') -> "void":
        """addMethod(SoActionMethodList self, SoType node, SoActionMethod const method)"""
        return _coin.SoActionMethodList_addMethod(self, node, method)


    def setUp(self) -> "void":
        """setUp(SoActionMethodList self)"""
        return _coin.SoActionMethodList_setUp(self)


    def __setitem__(self, i: 'int const', value: 'SoActionMethod *') -> "void":
        """__setitem__(SoActionMethodList self, int const i, SoActionMethod * value)"""
        return _coin.SoActionMethodList___setitem__(self, i, value)


    def __getitem__(self, i: 'int const') -> "SoActionMethod &":
        """__getitem__(SoActionMethodList self, int const i) -> SoActionMethod &"""
        return _coin.SoActionMethodList___getitem__(self, i)


    def get(self, i: 'int const') -> "SoActionMethod":
        """get(SoActionMethodList self, int const i) -> SoActionMethod"""
        return _coin.SoActionMethodList_get(self, i)

SoActionMethodList_swigregister = _coin.SoActionMethodList_swigregister
SoActionMethodList_swigregister(SoActionMethodList)

class SoAction(object):
    """Proxy of C++ SoAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAction_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoAction_initClasses()

    initClasses = staticmethod(initClasses)
    NODE = _coin.SoAction_NODE
    PATH = _coin.SoAction_PATH
    PATH_LIST = _coin.SoAction_PATH_LIST
    NO_PATH = _coin.SoAction_NO_PATH
    IN_PATH = _coin.SoAction_IN_PATH
    BELOW_PATH = _coin.SoAction_BELOW_PATH
    OFF_PATH = _coin.SoAction_OFF_PATH
    __swig_destroy__ = _coin.delete_SoAction
    __del__ = lambda self: None

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAction self) -> SoType"""
        return _coin.SoAction_getTypeId(self)


    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoAction self, SoType type) -> SbBool"""
        return _coin.SoAction_isOfType(self, type)


    def apply(self, *args) -> "void":
        """
        apply(SoAction self, SoNode root)
        apply(SoAction self, SoPath path)
        apply(SoAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoAction self, SoPathList pathlist)
        apply(SoAction self, SoAction beingApplied)
        """
        return _coin.SoAction_apply(self, *args)


    def invalidateState(self) -> "void":
        """invalidateState(SoAction self)"""
        return _coin.SoAction_invalidateState(self)


    def nullAction(action: 'SoAction', node: 'SoNode') -> "void":
        """nullAction(SoAction action, SoNode node)"""
        return _coin.SoAction_nullAction(action, node)

    nullAction = staticmethod(nullAction)

    def getWhatAppliedTo(self) -> "SoAction::AppliedCode":
        """getWhatAppliedTo(SoAction self) -> SoAction::AppliedCode"""
        return _coin.SoAction_getWhatAppliedTo(self)


    def getNodeAppliedTo(self) -> "SoNode *":
        """getNodeAppliedTo(SoAction self) -> SoNode"""
        return _coin.SoAction_getNodeAppliedTo(self)


    def getPathAppliedTo(self) -> "SoPath *":
        """getPathAppliedTo(SoAction self) -> SoPath"""
        return _coin.SoAction_getPathAppliedTo(self)


    def getPathListAppliedTo(self) -> "SoPathList const *":
        """getPathListAppliedTo(SoAction self) -> SoPathList"""
        return _coin.SoAction_getPathListAppliedTo(self)


    def getOriginalPathListAppliedTo(self) -> "SoPathList const *":
        """getOriginalPathListAppliedTo(SoAction self) -> SoPathList"""
        return _coin.SoAction_getOriginalPathListAppliedTo(self)


    def isLastPathListAppliedTo(self) -> "SbBool":
        """isLastPathListAppliedTo(SoAction self) -> SbBool"""
        return _coin.SoAction_isLastPathListAppliedTo(self)


    def getPathCode(self, numindices: 'int &', indices: 'int const *&') -> "SoAction::PathCode":
        """getPathCode(SoAction self, int & numindices, int const *& indices) -> SoAction::PathCode"""
        return _coin.SoAction_getPathCode(self, numindices, indices)


    def traverse(self, node: 'SoNode') -> "void":
        """traverse(SoAction self, SoNode node)"""
        return _coin.SoAction_traverse(self, node)


    def hasTerminated(self) -> "SbBool":
        """hasTerminated(SoAction self) -> SbBool"""
        return _coin.SoAction_hasTerminated(self)


    def getCurPath(self) -> "SoPath const *":
        """getCurPath(SoAction self) -> SoPath"""
        return _coin.SoAction_getCurPath(self)


    def getState(self) -> "SoState *":
        """getState(SoAction self) -> SoState"""
        return _coin.SoAction_getState(self)


    def getCurPathCode(self) -> "SoAction::PathCode":
        """getCurPathCode(SoAction self) -> SoAction::PathCode"""
        return _coin.SoAction_getCurPathCode(self)


    def getCurPathTail(self) -> "SoNode *":
        """getCurPathTail(SoAction self) -> SoNode"""
        return _coin.SoAction_getCurPathTail(self)


    def usePathCode(self, numindices: 'int &', indices: 'int const *&') -> "void":
        """usePathCode(SoAction self, int & numindices, int const *& indices)"""
        return _coin.SoAction_usePathCode(self, numindices, indices)


    def pushCurPath(self, *args) -> "void":
        """
        pushCurPath(SoAction self, int const childindex, SoNode node=None)
        pushCurPath(SoAction self, int const childindex)
        pushCurPath(SoAction self)
        """
        return _coin.SoAction_pushCurPath(self, *args)


    def popPushCurPath(self, childindex: 'int const', node: 'SoNode'=None) -> "void":
        """
        popPushCurPath(SoAction self, int const childindex, SoNode node=None)
        popPushCurPath(SoAction self, int const childindex)
        """
        return _coin.SoAction_popPushCurPath(self, childindex, node)


    def popCurPath(self, *args) -> "void":
        """
        popCurPath(SoAction self, SoAction::PathCode const prevpathcode)
        popCurPath(SoAction self)
        """
        return _coin.SoAction_popCurPath(self, *args)


    def switchToPathTraversal(self, path: 'SoPath') -> "void":
        """switchToPathTraversal(SoAction self, SoPath path)"""
        return _coin.SoAction_switchToPathTraversal(self, path)


    def switchToNodeTraversal(self, node: 'SoNode') -> "void":
        """switchToNodeTraversal(SoAction self, SoNode node)"""
        return _coin.SoAction_switchToNodeTraversal(self, node)

SoAction_swigregister = _coin.SoAction_swigregister
SoAction_swigregister(SoAction)

def SoAction_initClass() -> "void":
    """SoAction_initClass()"""
    return _coin.SoAction_initClass()

def SoAction_initClasses() -> "void":
    """SoAction_initClasses()"""
    return _coin.SoAction_initClasses()

def SoAction_getClassTypeId() -> "SoType":
    """SoAction_getClassTypeId() -> SoType"""
    return _coin.SoAction_getClassTypeId()

def SoAction_nullAction(action: 'SoAction', node: 'SoNode') -> "void":
    """SoAction_nullAction(SoAction action, SoNode node)"""
    return _coin.SoAction_nullAction(action, node)

class SoState(object):
    """Proxy of C++ SoState class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, action: 'SoAction', enabledelements: 'SoTypeList'):
        """__init__(SoState self, SoAction action, SoTypeList enabledelements) -> SoState"""
        this = _coin.new_SoState(action, enabledelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoState
    __del__ = lambda self: None

    def getAction(self) -> "SoAction *":
        """getAction(SoState self) -> SoAction"""
        return _coin.SoState_getAction(self)


    def getElement(self, stackindex: 'int const') -> "SoElement *":
        """getElement(SoState self, int const stackindex) -> SoElement"""
        return _coin.SoState_getElement(self, stackindex)


    def getConstElement(self, stackindex: 'int const') -> "SoElement const *":
        """getConstElement(SoState self, int const stackindex) -> SoElement"""
        return _coin.SoState_getConstElement(self, stackindex)


    def push(self) -> "void":
        """push(SoState self)"""
        return _coin.SoState_push(self)


    def pop(self) -> "void":
        """pop(SoState self)"""
        return _coin.SoState_pop(self)


    def output(self, *args) -> "void":
        """
        output(SoState self, FILE *const file)
        output(SoState self)
        """
        return _coin.SoState_output(self, *args)


    def isElementEnabled(self, stackindex: 'int const') -> "SbBool":
        """isElementEnabled(SoState self, int const stackindex) -> SbBool"""
        return _coin.SoState_isElementEnabled(self, stackindex)


    def getDepth(self) -> "int":
        """getDepth(SoState self) -> int"""
        return _coin.SoState_getDepth(self)


    def setCacheOpen(self, flag: 'SbBool const') -> "void":
        """setCacheOpen(SoState self, SbBool const flag)"""
        return _coin.SoState_setCacheOpen(self, flag)


    def isCacheOpen(self) -> "SbBool":
        """isCacheOpen(SoState self) -> SbBool"""
        return _coin.SoState_isCacheOpen(self)


    def getElementNoPush(self, stackindex: 'int const') -> "SoElement *":
        """getElementNoPush(SoState self, int const stackindex) -> SoElement"""
        return _coin.SoState_getElementNoPush(self, stackindex)

SoState_swigregister = _coin.SoState_swigregister
SoState_swigregister(SoState)

class SoElement(object):
    """Proxy of C++ SoElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoElement_initClass()

    initClass = staticmethod(initClass)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def getTypeId(self) -> "SoType const":
        """getTypeId(SoElement self) -> SoType"""
        return _coin.SoElement_getTypeId(self)


    def getStackIndex(self) -> "int":
        """getStackIndex(SoElement self) -> int"""
        return _coin.SoElement_getStackIndex(self)


    def init(self, state: 'SoState') -> "void":
        """init(SoElement self, SoState state)"""
        return _coin.SoElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoElement self, SoState state)"""
        return _coin.SoElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoElement_pop(self, state, prevTopElement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoElement self, SoElement element) -> SbBool"""
        return _coin.SoElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoElement self) -> SoElement"""
        return _coin.SoElement_copyMatchInfo(self)


    def initElements() -> "void":
        """initElements()"""
        return _coin.SoElement_initElements()

    initElements = staticmethod(initElements)

    def getNumStackIndices() -> "int":
        """getNumStackIndices() -> int"""
        return _coin.SoElement_getNumStackIndices()

    getNumStackIndices = staticmethod(getNumStackIndices)

    def getIdFromStackIndex(stackIndex: 'int const') -> "SoType":
        """getIdFromStackIndex(int const stackIndex) -> SoType"""
        return _coin.SoElement_getIdFromStackIndex(stackIndex)

    getIdFromStackIndex = staticmethod(getIdFromStackIndex)

    def setDepth(self, depth: 'int const') -> "void":
        """setDepth(SoElement self, int const depth)"""
        return _coin.SoElement_setDepth(self, depth)


    def getDepth(self) -> "int":
        """getDepth(SoElement self) -> int"""
        return _coin.SoElement_getDepth(self)


    def output(self, *args) -> "void":
        """
        output(SoElement self, FILE * file)
        output(SoElement self)
        """
        return _coin.SoElement_output(self, *args)

    __swig_destroy__ = _coin.delete_SoElement
    __del__ = lambda self: None
SoElement_swigregister = _coin.SoElement_swigregister
SoElement_swigregister(SoElement)

def SoElement_initClass() -> "void":
    """SoElement_initClass()"""
    return _coin.SoElement_initClass()

def SoElement_getClassTypeId() -> "SoType":
    """SoElement_getClassTypeId() -> SoType"""
    return _coin.SoElement_getClassTypeId()

def SoElement_getClassStackIndex() -> "int":
    """SoElement_getClassStackIndex() -> int"""
    return _coin.SoElement_getClassStackIndex()

def SoElement_initElements() -> "void":
    """SoElement_initElements()"""
    return _coin.SoElement_initElements()

def SoElement_getNumStackIndices() -> "int":
    """SoElement_getNumStackIndices() -> int"""
    return _coin.SoElement_getNumStackIndices()

def SoElement_getIdFromStackIndex(stackIndex: 'int const') -> "SoType":
    """SoElement_getIdFromStackIndex(int const stackIndex) -> SoType"""
    return _coin.SoElement_getIdFromStackIndex(stackIndex)

class SoInt32Element(SoElement):
    """Proxy of C++ SoInt32Element class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInt32Element_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoInt32Element_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInt32Element_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoInt32Element self, SoState state)"""
        return _coin.SoInt32Element_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoInt32Element self, SoElement element) -> SbBool"""
        return _coin.SoInt32Element_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoInt32Element self) -> SoElement"""
        return _coin.SoInt32Element_copyMatchInfo(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SoInt32Element self, FILE * file)"""
        return _coin.SoInt32Element_output(self, file)


    def set(*args) -> "void":
        """
        set(int const index, SoState state, SoNode node, int32_t const value)
        set(int const index, SoState state, int32_t const value)
        """
        return _coin.SoInt32Element_set(*args)

    set = staticmethod(set)

    def get(index: 'int const', state: 'SoState') -> "int32_t":
        """get(int const index, SoState state) -> int32_t"""
        return _coin.SoInt32Element_get(index, state)

    get = staticmethod(get)

    def setElt(self, value: 'int32_t') -> "void":
        """setElt(SoInt32Element self, int32_t value)"""
        return _coin.SoInt32Element_setElt(self, value)

SoInt32Element_swigregister = _coin.SoInt32Element_swigregister
SoInt32Element_swigregister(SoInt32Element)

def SoInt32Element_getClassTypeId() -> "SoType":
    """SoInt32Element_getClassTypeId() -> SoType"""
    return _coin.SoInt32Element_getClassTypeId()

def SoInt32Element_getClassStackIndex() -> "int":
    """SoInt32Element_getClassStackIndex() -> int"""
    return _coin.SoInt32Element_getClassStackIndex()

def SoInt32Element_initClass() -> "void":
    """SoInt32Element_initClass()"""
    return _coin.SoInt32Element_initClass()

def SoInt32Element_set(*args) -> "void":
    """
    set(int const index, SoState state, SoNode node, int32_t const value)
    SoInt32Element_set(int const index, SoState state, int32_t const value)
    """
    return _coin.SoInt32Element_set(*args)

def SoInt32Element_get(index: 'int const', state: 'SoState') -> "int32_t":
    """SoInt32Element_get(int const index, SoState state) -> int32_t"""
    return _coin.SoInt32Element_get(index, state)

class SoDecimationTypeElement(SoInt32Element):
    """Proxy of C++ SoDecimationTypeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecimationTypeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoDecimationTypeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecimationTypeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecimationTypeElement_initClass()

    initClass = staticmethod(initClass)
    AUTOMATIC = _coin.SoDecimationTypeElement_AUTOMATIC
    HIGHEST = _coin.SoDecimationTypeElement_HIGHEST
    LOWEST = _coin.SoDecimationTypeElement_LOWEST
    PERCENTAGE = _coin.SoDecimationTypeElement_PERCENTAGE

    def init(self, state: 'SoState') -> "void":
        """init(SoDecimationTypeElement self, SoState state)"""
        return _coin.SoDecimationTypeElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoDecimationTypeElement::Type const type)
        set(SoState state, SoNode node, SoDecimationTypeElement::Type const type)
        """
        return _coin.SoDecimationTypeElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoDecimationTypeElement::Type":
        """get(SoState state) -> SoDecimationTypeElement::Type"""
        return _coin.SoDecimationTypeElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoDecimationTypeElement::Type":
        """getDefault() -> SoDecimationTypeElement::Type"""
        return _coin.SoDecimationTypeElement_getDefault()

    getDefault = staticmethod(getDefault)
SoDecimationTypeElement_swigregister = _coin.SoDecimationTypeElement_swigregister
SoDecimationTypeElement_swigregister(SoDecimationTypeElement)

def SoDecimationTypeElement_getClassTypeId() -> "SoType":
    """SoDecimationTypeElement_getClassTypeId() -> SoType"""
    return _coin.SoDecimationTypeElement_getClassTypeId()

def SoDecimationTypeElement_getClassStackIndex() -> "int":
    """SoDecimationTypeElement_getClassStackIndex() -> int"""
    return _coin.SoDecimationTypeElement_getClassStackIndex()

def SoDecimationTypeElement_createInstance() -> "void *":
    """SoDecimationTypeElement_createInstance() -> void *"""
    return _coin.SoDecimationTypeElement_createInstance()

def SoDecimationTypeElement_initClass() -> "void":
    """SoDecimationTypeElement_initClass()"""
    return _coin.SoDecimationTypeElement_initClass()

def SoDecimationTypeElement_set(*args) -> "void":
    """
    set(SoState state, SoDecimationTypeElement::Type const type)
    SoDecimationTypeElement_set(SoState state, SoNode node, SoDecimationTypeElement::Type const type)
    """
    return _coin.SoDecimationTypeElement_set(*args)

def SoDecimationTypeElement_get(state: 'SoState') -> "SoDecimationTypeElement::Type":
    """SoDecimationTypeElement_get(SoState state) -> SoDecimationTypeElement::Type"""
    return _coin.SoDecimationTypeElement_get(state)

def SoDecimationTypeElement_getDefault() -> "SoDecimationTypeElement::Type":
    """SoDecimationTypeElement_getDefault() -> SoDecimationTypeElement::Type"""
    return _coin.SoDecimationTypeElement_getDefault()

class SoFieldData(object):
    """Proxy of C++ SoFieldData class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoFieldData self) -> SoFieldData
        __init__(SoFieldData self, SoFieldData fd) -> SoFieldData
        __init__(SoFieldData self, SoFieldData fd) -> SoFieldData
        __init__(SoFieldData self, int numfields) -> SoFieldData
        """
        this = _coin.new_SoFieldData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoFieldData
    __del__ = lambda self: None

    def addField(self, base: 'SoFieldContainer', name: 'char const *', field: 'SoField') -> "void":
        """addField(SoFieldData self, SoFieldContainer base, char const * name, SoField field)"""
        return _coin.SoFieldData_addField(self, base, name, field)


    def overlay(self, to: 'SoFieldContainer', arg3: 'SoFieldContainer', copyconnections: 'SbBool') -> "void":
        """overlay(SoFieldData self, SoFieldContainer to, SoFieldContainer arg3, SbBool copyconnections)"""
        return _coin.SoFieldData_overlay(self, to, arg3, copyconnections)


    def getNumFields(self) -> "int":
        """getNumFields(SoFieldData self) -> int"""
        return _coin.SoFieldData_getNumFields(self)


    def getFieldName(self, index: 'int') -> "SbName const &":
        """getFieldName(SoFieldData self, int index) -> SbName"""
        return _coin.SoFieldData_getFieldName(self, index)


    def getField(self, object: 'SoFieldContainer', index: 'int') -> "SoField *":
        """getField(SoFieldData self, SoFieldContainer object, int index) -> SoField"""
        return _coin.SoFieldData_getField(self, object, index)


    def getIndex(self, fc: 'SoFieldContainer', field: 'SoField') -> "int":
        """getIndex(SoFieldData self, SoFieldContainer fc, SoField field) -> int"""
        return _coin.SoFieldData_getIndex(self, fc, field)


    def addEnumValue(self, enumname: 'char const *', valuename: 'char const *', value: 'int') -> "void":
        """addEnumValue(SoFieldData self, char const * enumname, char const * valuename, int value)"""
        return _coin.SoFieldData_addEnumValue(self, enumname, valuename, value)


    def getEnumData(self, enumname: 'char const *', num: 'int &', values: 'int const *&', names: 'SbName const *&') -> "void":
        """getEnumData(SoFieldData self, char const * enumname, int & num, int const *& values, SbName const *& names)"""
        return _coin.SoFieldData_getEnumData(self, enumname, num, values, names)


    def read(self, *args) -> "SbBool":
        """
        read(SoFieldData self, SoInput input, SoFieldContainer object, SbBool erroronunknownfield, SbBool & notbuiltin) -> SbBool
        read(SoFieldData self, SoInput input, SoFieldContainer object, SbName fieldname, SbBool & foundname) -> SbBool
        """
        return _coin.SoFieldData_read(self, *args)


    def write(self, out: 'SoOutput', object: 'SoFieldContainer') -> "void":
        """write(SoFieldData self, SoOutput out, SoFieldContainer object)"""
        return _coin.SoFieldData_write(self, out, object)


    def copy(self, src: 'SoFieldData') -> "void":
        """copy(SoFieldData self, SoFieldData src)"""
        return _coin.SoFieldData_copy(self, src)


    def isSame(self, c1: 'SoFieldContainer', c2: 'SoFieldContainer') -> "SbBool":
        """isSame(SoFieldData self, SoFieldContainer c1, SoFieldContainer c2) -> SbBool"""
        return _coin.SoFieldData_isSame(self, c1, c2)


    def readFieldDescriptions(self, input: 'SoInput', object: 'SoFieldContainer', numdescriptionsexpected: 'int', readfieldvalues: 'SbBool const'=1) -> "SbBool":
        """
        readFieldDescriptions(SoFieldData self, SoInput input, SoFieldContainer object, int numdescriptionsexpected, SbBool const readfieldvalues=1) -> SbBool
        readFieldDescriptions(SoFieldData self, SoInput input, SoFieldContainer object, int numdescriptionsexpected) -> SbBool
        """
        return _coin.SoFieldData_readFieldDescriptions(self, input, object, numdescriptionsexpected, readfieldvalues)


    def writeFieldDescriptions(self, out: 'SoOutput', object: 'SoFieldContainer') -> "void":
        """writeFieldDescriptions(SoFieldData self, SoOutput out, SoFieldContainer object)"""
        return _coin.SoFieldData_writeFieldDescriptions(self, out, object)

SoFieldData_swigregister = _coin.SoFieldData_swigregister
SoFieldData_swigregister(SoFieldData)

class SoFieldContainer(SoBase):
    """Proxy of C++ SoFieldContainer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFieldContainer_initClass()

    initClass = staticmethod(initClass)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFieldContainer_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoFieldContainer_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def setToDefaults(self) -> "void":
        """setToDefaults(SoFieldContainer self)"""
        return _coin.SoFieldContainer_setToDefaults(self)


    def hasDefaultValues(self) -> "SbBool":
        """hasDefaultValues(SoFieldContainer self) -> SbBool"""
        return _coin.SoFieldContainer_hasDefaultValues(self)


    def fieldsAreEqual(self, container: 'SoFieldContainer') -> "SbBool":
        """fieldsAreEqual(SoFieldContainer self, SoFieldContainer container) -> SbBool"""
        return _coin.SoFieldContainer_fieldsAreEqual(self, container)


    def copyFieldValues(self, container: 'SoFieldContainer', copyconnections: 'SbBool'=0) -> "void":
        """
        copyFieldValues(SoFieldContainer self, SoFieldContainer container, SbBool copyconnections=0)
        copyFieldValues(SoFieldContainer self, SoFieldContainer container)
        """
        return _coin.SoFieldContainer_copyFieldValues(self, container, copyconnections)


    def getFields(self, l: 'SoFieldList') -> "int":
        """getFields(SoFieldContainer self, SoFieldList l) -> int"""
        return _coin.SoFieldContainer_getFields(self, l)


    def getAllFields(self, l: 'SoFieldList') -> "int":
        """getAllFields(SoFieldContainer self, SoFieldList l) -> int"""
        return _coin.SoFieldContainer_getAllFields(self, l)


    def getField(self, name: 'SbName') -> "SoField *":
        """getField(SoFieldContainer self, SbName name) -> SoField"""
        return _coin.SoFieldContainer_getField(self, name)


    def getEventIn(self, name: 'SbName') -> "SoField *":
        """getEventIn(SoFieldContainer self, SbName name) -> SoField"""
        return _coin.SoFieldContainer_getEventIn(self, name)


    def getEventOut(self, name: 'SbName') -> "SoField *":
        """getEventOut(SoFieldContainer self, SbName name) -> SoField"""
        return _coin.SoFieldContainer_getEventOut(self, name)


    def enableNotify(self, flag: 'SbBool const') -> "SbBool":
        """enableNotify(SoFieldContainer self, SbBool const flag) -> SbBool"""
        return _coin.SoFieldContainer_enableNotify(self, flag)


    def isNotifyEnabled(self) -> "SbBool":
        """isNotifyEnabled(SoFieldContainer self) -> SbBool"""
        return _coin.SoFieldContainer_isNotifyEnabled(self)


    def set(self, *args) -> "SbBool":
        """
        set(SoFieldContainer self, char const *const fielddata) -> SbBool
        set(SoFieldContainer self, char const * fielddata, SoInput input) -> SbBool
        """
        return _coin.SoFieldContainer_set(self, *args)


    def get(self, *args) -> "void":
        """
        get(SoFieldContainer self, SbString fielddata)
        get(SoFieldContainer self, SbString fielddata, SoOutput out)
        """
        return _coin.SoFieldContainer_get(self, *args)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoFieldContainer self, SoNotList l)"""
        return _coin.SoFieldContainer_notify(self, l)


    def validateNewFieldValue(self, field: 'SoField', newval: 'void *') -> "SbBool":
        """validateNewFieldValue(SoFieldContainer self, SoField field, void * newval) -> SbBool"""
        return _coin.SoFieldContainer_validateNewFieldValue(self, field, newval)


    def addWriteReference(self, out: 'SoOutput', isfromfield: 'SbBool'=0) -> "void":
        """
        addWriteReference(SoFieldContainer self, SoOutput out, SbBool isfromfield=0)
        addWriteReference(SoFieldContainer self, SoOutput out)
        """
        return _coin.SoFieldContainer_addWriteReference(self, out, isfromfield)


    def writeInstance(self, out: 'SoOutput') -> "void":
        """writeInstance(SoFieldContainer self, SoOutput out)"""
        return _coin.SoFieldContainer_writeInstance(self, out)


    def getIsBuiltIn(self) -> "SbBool":
        """getIsBuiltIn(SoFieldContainer self) -> SbBool"""
        return _coin.SoFieldContainer_getIsBuiltIn(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoFieldContainer self) -> SoFieldData"""
        return _coin.SoFieldContainer_getFieldData(self)


    def copyContents(self, arg2: 'SoFieldContainer', copyconnections: 'SbBool') -> "void":
        """copyContents(SoFieldContainer self, SoFieldContainer arg2, SbBool copyconnections)"""
        return _coin.SoFieldContainer_copyContents(self, arg2, copyconnections)


    def copyThroughConnection(self) -> "SoFieldContainer *":
        """copyThroughConnection(SoFieldContainer self) -> SoFieldContainer"""
        return _coin.SoFieldContainer_copyThroughConnection(self)


    def initCopyDict() -> "void":
        """initCopyDict()"""
        return _coin.SoFieldContainer_initCopyDict()

    initCopyDict = staticmethod(initCopyDict)

    def addCopy(orig: 'SoFieldContainer', copy: 'SoFieldContainer') -> "void":
        """addCopy(SoFieldContainer orig, SoFieldContainer copy)"""
        return _coin.SoFieldContainer_addCopy(orig, copy)

    addCopy = staticmethod(addCopy)

    def checkCopy(orig: 'SoFieldContainer') -> "SoFieldContainer *":
        """checkCopy(SoFieldContainer orig) -> SoFieldContainer"""
        return _coin.SoFieldContainer_checkCopy(orig)

    checkCopy = staticmethod(checkCopy)

    def findCopy(orig: 'SoFieldContainer', copyconnections: 'SbBool const') -> "SoFieldContainer *":
        """findCopy(SoFieldContainer orig, SbBool const copyconnections) -> SoFieldContainer"""
        return _coin.SoFieldContainer_findCopy(orig, copyconnections)

    findCopy = staticmethod(findCopy)

    def copyDone() -> "void":
        """copyDone()"""
        return _coin.SoFieldContainer_copyDone()

    copyDone = staticmethod(copyDone)

    def getFieldsMemorySize(self, managed: 'size_t &', unmanaged: 'size_t &') -> "void":
        """getFieldsMemorySize(SoFieldContainer self, size_t & managed, size_t & unmanaged)"""
        return _coin.SoFieldContainer_getFieldsMemorySize(self, managed, unmanaged)


    def setUserData(self, userdata: 'void *') -> "void":
        """setUserData(SoFieldContainer self, void * userdata)"""
        return _coin.SoFieldContainer_setUserData(self, userdata)


    def getUserData(self) -> "void *":
        """getUserData(SoFieldContainer self) -> void *"""
        return _coin.SoFieldContainer_getUserData(self)


    def getFieldName(self, *args) -> "PyObject *":
        """
        getFieldName(SoFieldContainer self, SoField field, SbName name) -> SbBool
        getFieldName(SoFieldContainer self, SoField field) -> PyObject *
        """
        return _coin.SoFieldContainer_getFieldName(self, *args)


    def __getattr__(self, name):
        try:
            return SoBase.__getattribute__(self, name)
        except AttributeError as e:
    ##############################################################
            if name == "this":
                raise AttributeError
    ##############################################################
            field = self.getField(name)
            if field is None:
                raise e
            return field

    def __setattr__(self, name, value):
    # I don't understand why we need this, but otherwise it does not work :/
        if name == 'this':
            return SoBase.__setattr__(self, name, value)
        field = self.getField(name)
        if field is None:
            return SoBase.__setattr__(self, name, value)
        field.setValue(value)
        return field

    def __dir__(self):
        from pivy import coin
        fl = coin.SoFieldList()
        num_fields = self.getAllFields(fl)
        fields = [self.getFieldName(fl[i]) for i in range(num_fields)]
        return super(SoFieldContainer, self).__dir__() + fields


    @property
    def values(self):
        def _values(obj):
            for value in obj:
                if hasattr(value, "__iter__"):
                    yield list(_values(value))
                else:
                    yield value
        out = _values(self)
        return list(out)

    @values.setter
    def values(self, arr):
        self.deleteValues(0)
        self.setValues(0, len(arr), arr)


SoFieldContainer_swigregister = _coin.SoFieldContainer_swigregister
SoFieldContainer_swigregister(SoFieldContainer)

def SoFieldContainer_initClass() -> "void":
    """SoFieldContainer_initClass()"""
    return _coin.SoFieldContainer_initClass()

def SoFieldContainer_getClassTypeId() -> "SoType":
    """SoFieldContainer_getClassTypeId() -> SoType"""
    return _coin.SoFieldContainer_getClassTypeId()

def SoFieldContainer_cleanupClass() -> "void":
    """SoFieldContainer_cleanupClass()"""
    return _coin.SoFieldContainer_cleanupClass()

def SoFieldContainer_initCopyDict() -> "void":
    """SoFieldContainer_initCopyDict()"""
    return _coin.SoFieldContainer_initCopyDict()

def SoFieldContainer_addCopy(orig: 'SoFieldContainer', copy: 'SoFieldContainer') -> "void":
    """SoFieldContainer_addCopy(SoFieldContainer orig, SoFieldContainer copy)"""
    return _coin.SoFieldContainer_addCopy(orig, copy)

def SoFieldContainer_checkCopy(orig: 'SoFieldContainer') -> "SoFieldContainer *":
    """SoFieldContainer_checkCopy(SoFieldContainer orig) -> SoFieldContainer"""
    return _coin.SoFieldContainer_checkCopy(orig)

def SoFieldContainer_findCopy(orig: 'SoFieldContainer', copyconnections: 'SbBool const') -> "SoFieldContainer *":
    """SoFieldContainer_findCopy(SoFieldContainer orig, SbBool const copyconnections) -> SoFieldContainer"""
    return _coin.SoFieldContainer_findCopy(orig, copyconnections)

def SoFieldContainer_copyDone() -> "void":
    """SoFieldContainer_copyDone()"""
    return _coin.SoFieldContainer_copyDone()

class SoNode(SoFieldContainer):
    """Proxy of C++ SoNode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FIRST_INSTANCE = _coin.SoNode_FIRST_INSTANCE
    PROTO_INSTANCE = _coin.SoNode_PROTO_INSTANCE
    OTHER_INSTANCE = _coin.SoNode_OTHER_INSTANCE

    def setOverride(self, state: 'SbBool const') -> "void":
        """setOverride(SoNode self, SbBool const state)"""
        return _coin.SoNode_setOverride(self, state)


    def isOverride(self) -> "SbBool":
        """isOverride(SoNode self) -> SbBool"""
        return _coin.SoNode_isOverride(self)

    INVENTOR = _coin.SoNode_INVENTOR
    VRML1 = _coin.SoNode_VRML1
    VRML2 = _coin.SoNode_VRML2
    INVENTOR_1 = _coin.SoNode_INVENTOR_1
    INVENTOR_2_0 = _coin.SoNode_INVENTOR_2_0
    INVENTOR_2_1 = _coin.SoNode_INVENTOR_2_1
    INVENTOR_2_5 = _coin.SoNode_INVENTOR_2_5
    INVENTOR_2_6 = _coin.SoNode_INVENTOR_2_6
    COIN_1_0 = _coin.SoNode_COIN_1_0
    COIN_2_0 = _coin.SoNode_COIN_2_0
    EXTENSION = _coin.SoNode_EXTENSION
    COIN_2_2 = _coin.SoNode_COIN_2_2
    COIN_2_3 = _coin.SoNode_COIN_2_3
    COIN_2_4 = _coin.SoNode_COIN_2_4
    INVENTOR_5_0 = _coin.SoNode_INVENTOR_5_0
    COIN_2_5 = _coin.SoNode_COIN_2_5
    COIN_3_0 = _coin.SoNode_COIN_3_0
    INVENTOR_6_0 = _coin.SoNode_INVENTOR_6_0
    COIN_4_0 = _coin.SoNode_COIN_4_0

    def getCompatibilityTypes(nodetype: 'SoType') -> "uint32_t":
        """getCompatibilityTypes(SoType nodetype) -> uint32_t"""
        return _coin.SoNode_getCompatibilityTypes(nodetype)

    getCompatibilityTypes = staticmethod(getCompatibilityTypes)

    def setNodeType(self, type: 'SoNode::NodeType const') -> "void":
        """setNodeType(SoNode self, SoNode::NodeType const type)"""
        return _coin.SoNode_setNodeType(self, type)


    def getNodeType(self) -> "SoNode::NodeType":
        """getNodeType(SoNode self) -> SoNode::NodeType"""
        return _coin.SoNode_getNodeType(self)


    def copy(self, copyconnections: 'SbBool'=0) -> "SoNode *":
        """
        copy(SoNode self, SbBool copyconnections=0) -> SoNode
        copy(SoNode self) -> SoNode
        """
        return _coin.SoNode_copy(self, copyconnections)


    def affectsState(self) -> "SbBool":
        """affectsState(SoNode self) -> SbBool"""
        return _coin.SoNode_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoNode self, SoAction action)"""
        return _coin.SoNode_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNode self, SoGLRenderAction action)"""
        return _coin.SoNode_GLRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoNode self, SoGLRenderAction action)"""
        return _coin.SoNode_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoNode self, SoGLRenderAction action)"""
        return _coin.SoNode_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoNode self, SoGLRenderAction action)"""
        return _coin.SoNode_GLRenderOffPath(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoNode self, SoCallbackAction action)"""
        return _coin.SoNode_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoNode self, SoGetBoundingBoxAction action)"""
        return _coin.SoNode_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoNode self, SoGetMatrixAction action)"""
        return _coin.SoNode_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoNode self, SoHandleEventAction action)"""
        return _coin.SoNode_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoNode self, SoPickAction action)"""
        return _coin.SoNode_pick(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoNode self, SoRayPickAction action)"""
        return _coin.SoNode_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoNode self, SoSearchAction action)"""
        return _coin.SoNode_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoNode self, SoWriteAction action)"""
        return _coin.SoNode_write(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoNode self, SoAudioRenderAction action)"""
        return _coin.SoNode_audioRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNode self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNode_getPrimitiveCount(self, action)


    def grabEventsSetup(self) -> "void":
        """grabEventsSetup(SoNode self)"""
        return _coin.SoNode_grabEventsSetup(self)


    def grabEventsCleanup(self) -> "void":
        """grabEventsCleanup(SoNode self)"""
        return _coin.SoNode_grabEventsCleanup(self)


    def startNotify(self) -> "void":
        """startNotify(SoNode self)"""
        return _coin.SoNode_startNotify(self)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoNode self, SoNotList l)"""
        return _coin.SoNode_notify(self, l)


    def getNodeId(self) -> "SbUniqueId":
        """getNodeId(SoNode self) -> SbUniqueId"""
        return _coin.SoNode_getNodeId(self)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoNode self) -> SoChildList"""
        return _coin.SoNode_getChildren(self)


    def writeInstance(self, out: 'SoOutput') -> "void":
        """writeInstance(SoNode self, SoOutput out)"""
        return _coin.SoNode_writeInstance(self, out)


    def addToCopyDict(self) -> "SoNode *":
        """addToCopyDict(SoNode self) -> SoNode"""
        return _coin.SoNode_addToCopyDict(self)


    def copyContents(self, arg2: 'SoFieldContainer', copyconnections: 'SbBool') -> "void":
        """copyContents(SoNode self, SoFieldContainer arg2, SbBool copyconnections)"""
        return _coin.SoNode_copyContents(self, arg2, copyconnections)


    def copyThroughConnection(self) -> "SoFieldContainer *":
        """copyThroughConnection(SoNode self) -> SoFieldContainer"""
        return _coin.SoNode_copyThroughConnection(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNode_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getByName(*args) -> "int":
        """
        getByName(SbName name) -> SoNode
        getByName(SbName name, SoNodeList l) -> int
        """
        return _coin.SoNode_getByName(*args)

    getByName = staticmethod(getByName)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNode_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoNode_initClasses()

    initClasses = staticmethod(initClasses)

    def getNextNodeId() -> "SbUniqueId":
        """getNextNodeId() -> SbUniqueId"""
        return _coin.SoNode_getNextNodeId()

    getNextNodeId = staticmethod(getNextNodeId)

    def getActionMethodIndex(type: 'SoType') -> "int":
        """getActionMethodIndex(SoType type) -> int"""
        return _coin.SoNode_getActionMethodIndex(type)

    getActionMethodIndex = staticmethod(getActionMethodIndex)

    def getBoundingBoxS(action: 'SoAction', node: 'SoNode') -> "void":
        """getBoundingBoxS(SoAction action, SoNode node)"""
        return _coin.SoNode_getBoundingBoxS(action, node)

    getBoundingBoxS = staticmethod(getBoundingBoxS)

    def GLRenderS(action: 'SoAction', node: 'SoNode') -> "void":
        """GLRenderS(SoAction action, SoNode node)"""
        return _coin.SoNode_GLRenderS(action, node)

    GLRenderS = staticmethod(GLRenderS)

    def callbackS(action: 'SoAction', node: 'SoNode') -> "void":
        """callbackS(SoAction action, SoNode node)"""
        return _coin.SoNode_callbackS(action, node)

    callbackS = staticmethod(callbackS)

    def getMatrixS(action: 'SoAction', node: 'SoNode') -> "void":
        """getMatrixS(SoAction action, SoNode node)"""
        return _coin.SoNode_getMatrixS(action, node)

    getMatrixS = staticmethod(getMatrixS)

    def handleEventS(action: 'SoAction', node: 'SoNode') -> "void":
        """handleEventS(SoAction action, SoNode node)"""
        return _coin.SoNode_handleEventS(action, node)

    handleEventS = staticmethod(handleEventS)

    def pickS(action: 'SoAction', node: 'SoNode') -> "void":
        """pickS(SoAction action, SoNode node)"""
        return _coin.SoNode_pickS(action, node)

    pickS = staticmethod(pickS)

    def rayPickS(action: 'SoAction', node: 'SoNode') -> "void":
        """rayPickS(SoAction action, SoNode node)"""
        return _coin.SoNode_rayPickS(action, node)

    rayPickS = staticmethod(rayPickS)

    def searchS(action: 'SoAction', node: 'SoNode') -> "void":
        """searchS(SoAction action, SoNode node)"""
        return _coin.SoNode_searchS(action, node)

    searchS = staticmethod(searchS)

    def writeS(action: 'SoAction', node: 'SoNode') -> "void":
        """writeS(SoAction action, SoNode node)"""
        return _coin.SoNode_writeS(action, node)

    writeS = staticmethod(writeS)

    def audioRenderS(action: 'SoAction', node: 'SoNode') -> "void":
        """audioRenderS(SoAction action, SoNode node)"""
        return _coin.SoNode_audioRenderS(action, node)

    audioRenderS = staticmethod(audioRenderS)

    def getPrimitiveCountS(action: 'SoAction', node: 'SoNode') -> "void":
        """getPrimitiveCountS(SoAction action, SoNode node)"""
        return _coin.SoNode_getPrimitiveCountS(action, node)

    getPrimitiveCountS = staticmethod(getPrimitiveCountS)
SoNode_swigregister = _coin.SoNode_swigregister
SoNode_swigregister(SoNode)

def SoNode_getCompatibilityTypes(nodetype: 'SoType') -> "uint32_t":
    """SoNode_getCompatibilityTypes(SoType nodetype) -> uint32_t"""
    return _coin.SoNode_getCompatibilityTypes(nodetype)

def SoNode_getClassTypeId() -> "SoType":
    """SoNode_getClassTypeId() -> SoType"""
    return _coin.SoNode_getClassTypeId()

def SoNode_getByName(*args) -> "int":
    """
    getByName(SbName name) -> SoNode
    SoNode_getByName(SbName name, SoNodeList l) -> int
    """
    return _coin.SoNode_getByName(*args)

def SoNode_initClass() -> "void":
    """SoNode_initClass()"""
    return _coin.SoNode_initClass()

def SoNode_initClasses() -> "void":
    """SoNode_initClasses()"""
    return _coin.SoNode_initClasses()

def SoNode_getNextNodeId() -> "SbUniqueId":
    """SoNode_getNextNodeId() -> SbUniqueId"""
    return _coin.SoNode_getNextNodeId()

def SoNode_getActionMethodIndex(type: 'SoType') -> "int":
    """SoNode_getActionMethodIndex(SoType type) -> int"""
    return _coin.SoNode_getActionMethodIndex(type)

def SoNode_getBoundingBoxS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_getBoundingBoxS(SoAction action, SoNode node)"""
    return _coin.SoNode_getBoundingBoxS(action, node)

def SoNode_GLRenderS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_GLRenderS(SoAction action, SoNode node)"""
    return _coin.SoNode_GLRenderS(action, node)

def SoNode_callbackS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_callbackS(SoAction action, SoNode node)"""
    return _coin.SoNode_callbackS(action, node)

def SoNode_getMatrixS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_getMatrixS(SoAction action, SoNode node)"""
    return _coin.SoNode_getMatrixS(action, node)

def SoNode_handleEventS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_handleEventS(SoAction action, SoNode node)"""
    return _coin.SoNode_handleEventS(action, node)

def SoNode_pickS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_pickS(SoAction action, SoNode node)"""
    return _coin.SoNode_pickS(action, node)

def SoNode_rayPickS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_rayPickS(SoAction action, SoNode node)"""
    return _coin.SoNode_rayPickS(action, node)

def SoNode_searchS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_searchS(SoAction action, SoNode node)"""
    return _coin.SoNode_searchS(action, node)

def SoNode_writeS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_writeS(SoAction action, SoNode node)"""
    return _coin.SoNode_writeS(action, node)

def SoNode_audioRenderS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_audioRenderS(SoAction action, SoNode node)"""
    return _coin.SoNode_audioRenderS(action, node)

def SoNode_getPrimitiveCountS(action: 'SoAction', node: 'SoNode') -> "void":
    """SoNode_getPrimitiveCountS(SoAction action, SoNode node)"""
    return _coin.SoNode_getPrimitiveCountS(action, node)

class SoSensorManager(object):
    """Proxy of C++ SoSensorManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSensorManager self) -> SoSensorManager"""
        this = _coin.new_SoSensorManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSensorManager
    __del__ = lambda self: None

    def insertDelaySensor(self, s: 'SoDelayQueueSensor') -> "void":
        """insertDelaySensor(SoSensorManager self, SoDelayQueueSensor s)"""
        return _coin.SoSensorManager_insertDelaySensor(self, s)


    def insertTimerSensor(self, s: 'SoTimerQueueSensor') -> "void":
        """insertTimerSensor(SoSensorManager self, SoTimerQueueSensor s)"""
        return _coin.SoSensorManager_insertTimerSensor(self, s)


    def removeDelaySensor(self, s: 'SoDelayQueueSensor') -> "void":
        """removeDelaySensor(SoSensorManager self, SoDelayQueueSensor s)"""
        return _coin.SoSensorManager_removeDelaySensor(self, s)


    def removeTimerSensor(self, s: 'SoTimerQueueSensor') -> "void":
        """removeTimerSensor(SoSensorManager self, SoTimerQueueSensor s)"""
        return _coin.SoSensorManager_removeTimerSensor(self, s)


    def rescheduleTimer(self, s: 'SoTimerSensor') -> "void":
        """rescheduleTimer(SoSensorManager self, SoTimerSensor s)"""
        return _coin.SoSensorManager_rescheduleTimer(self, s)


    def removeRescheduledTimer(self, s: 'SoTimerQueueSensor') -> "void":
        """removeRescheduledTimer(SoSensorManager self, SoTimerQueueSensor s)"""
        return _coin.SoSensorManager_removeRescheduledTimer(self, s)


    def processDelayQueue(self, isidle: 'SbBool') -> "void":
        """processDelayQueue(SoSensorManager self, SbBool isidle)"""
        return _coin.SoSensorManager_processDelayQueue(self, isidle)


    def processImmediateQueue(self) -> "void":
        """processImmediateQueue(SoSensorManager self)"""
        return _coin.SoSensorManager_processImmediateQueue(self)


    def processTimerQueue(self) -> "void":
        """processTimerQueue(SoSensorManager self)"""
        return _coin.SoSensorManager_processTimerQueue(self)


    def isDelaySensorPending(self) -> "SbBool":
        """isDelaySensorPending(SoSensorManager self) -> SbBool"""
        return _coin.SoSensorManager_isDelaySensorPending(self)


    def setDelaySensorTimeout(self, t: 'SbTime') -> "void":
        """setDelaySensorTimeout(SoSensorManager self, SbTime t)"""
        return _coin.SoSensorManager_setDelaySensorTimeout(self, t)


    def getDelaySensorTimeout(self) -> "SbTime const &":
        """getDelaySensorTimeout(SoSensorManager self) -> SbTime"""
        return _coin.SoSensorManager_getDelaySensorTimeout(self)


    def doSelect(self, nfds: 'int', readfds: 'void *', writefds: 'void *', exceptfds: 'void *', userTimeOut: 'timeval *') -> "int":
        """doSelect(SoSensorManager self, int nfds, void * readfds, void * writefds, void * exceptfds, timeval * userTimeOut) -> int"""
        return _coin.SoSensorManager_doSelect(self, nfds, readfds, writefds, exceptfds, userTimeOut)


    def setChangedCallback(self, *args) -> "void":
        """
        setChangedCallback(SoSensorManager self, void (*)(void *) sensorQueueChangedCB, void * data)
        setChangedCallback(SoSensorManager self, PyObject * pyfunc, PyObject * data)
        """
        return _coin.SoSensorManager_setChangedCallback(self, *args)


    def isTimerSensorPending(self, *args) -> "PyObject *":
        """
        isTimerSensorPending(SoSensorManager self, SbTime tm) -> SbBool
        isTimerSensorPending(SoSensorManager self) -> PyObject *
        """
        return _coin.SoSensorManager_isTimerSensorPending(self, *args)

SoSensorManager_swigregister = _coin.SoSensorManager_swigregister
SoSensorManager_swigregister(SoSensorManager)

class SoDB(object):
    """Proxy of C++ SoDB class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def init() -> "void":
        """init()"""
        return _coin.SoDB_init()

    init = staticmethod(init)

    def finish() -> "void":
        """finish()"""
        return _coin.SoDB_finish()

    finish = staticmethod(finish)

    def cleanup() -> "void":
        """cleanup()"""
        return _coin.SoDB_cleanup()

    cleanup = staticmethod(cleanup)

    def getVersion() -> "char const *":
        """getVersion() -> char const *"""
        return _coin.SoDB_getVersion()

    getVersion = staticmethod(getVersion)

    def read(*args) -> "SbBool":
        """
        read(SoInput input, SoPath *& path) -> SbBool
        read(SoInput input, SoBase *& base) -> SbBool
        read(SoInput input, SoNode *& rootnode) -> SbBool
        """
        return _coin.SoDB_read(*args)

    read = staticmethod(read)

    def readAll(input: 'SoInput') -> "SoSeparator *":
        """readAll(SoInput input) -> SoSeparator"""
        return _coin.SoDB_readAll(input)

    readAll = staticmethod(readAll)

    def readAllVRML(input: 'SoInput') -> "SoVRMLGroup *":
        """readAllVRML(SoInput input) -> SoVRMLGroup"""
        return _coin.SoDB_readAllVRML(input)

    readAllVRML = staticmethod(readAllVRML)

    def isValidHeader(teststring: 'char const *') -> "SbBool":
        """isValidHeader(char const * teststring) -> SbBool"""
        return _coin.SoDB_isValidHeader(teststring)

    isValidHeader = staticmethod(isValidHeader)

    def registerHeader(headerstring: 'SbString', isbinary: 'SbBool', ivversion: 'float', precallback: 'SoDBHeaderCB *', postcallback: 'SoDBHeaderCB *', userdata: 'void *'=None) -> "SbBool":
        """
        registerHeader(SbString headerstring, SbBool isbinary, float ivversion, SoDBHeaderCB * precallback, SoDBHeaderCB * postcallback, void * userdata=None) -> SbBool
        registerHeader(SbString headerstring, SbBool isbinary, float ivversion, SoDBHeaderCB * precallback, SoDBHeaderCB * postcallback) -> SbBool
        """
        return _coin.SoDB_registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata)

    registerHeader = staticmethod(registerHeader)

    def getHeaderData(headerstring: 'SbString', isbinary: 'SbBool &', ivversion: 'float &', precallback: 'SoDBHeaderCB *&', postcallback: 'SoDBHeaderCB *&', userdata: 'void *&', substringok: 'SbBool'=0) -> "SbBool":
        """
        getHeaderData(SbString headerstring, SbBool & isbinary, float & ivversion, SoDBHeaderCB *& precallback, SoDBHeaderCB *& postcallback, void *& userdata, SbBool substringok=0) -> SbBool
        getHeaderData(SbString headerstring, SbBool & isbinary, float & ivversion, SoDBHeaderCB *& precallback, SoDBHeaderCB *& postcallback, void *& userdata) -> SbBool
        """
        return _coin.SoDB_getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok)

    getHeaderData = staticmethod(getHeaderData)

    def getNumHeaders() -> "int":
        """getNumHeaders() -> int"""
        return _coin.SoDB_getNumHeaders()

    getNumHeaders = staticmethod(getNumHeaders)

    def getHeaderString(i: 'int const') -> "SbString":
        """getHeaderString(int const i) -> SbString"""
        return _coin.SoDB_getHeaderString(i)

    getHeaderString = staticmethod(getHeaderString)

    def createGlobalField(name: 'SbName', type: 'SoType') -> "SoField *":
        """createGlobalField(SbName name, SoType type) -> SoField"""
        return _coin.SoDB_createGlobalField(name, type)

    createGlobalField = staticmethod(createGlobalField)

    def getGlobalField(name: 'SbName') -> "SoField *":
        """getGlobalField(SbName name) -> SoField"""
        return _coin.SoDB_getGlobalField(name)

    getGlobalField = staticmethod(getGlobalField)

    def renameGlobalField(arg1: 'SbName', to: 'SbName') -> "void":
        """renameGlobalField(SbName arg1, SbName to)"""
        return _coin.SoDB_renameGlobalField(arg1, to)

    renameGlobalField = staticmethod(renameGlobalField)

    def setRealTimeInterval(interval: 'SbTime') -> "void":
        """setRealTimeInterval(SbTime interval)"""
        return _coin.SoDB_setRealTimeInterval(interval)

    setRealTimeInterval = staticmethod(setRealTimeInterval)

    def getRealTimeInterval() -> "SbTime const &":
        """getRealTimeInterval() -> SbTime"""
        return _coin.SoDB_getRealTimeInterval()

    getRealTimeInterval = staticmethod(getRealTimeInterval)

    def enableRealTimeSensor(on: 'SbBool') -> "void":
        """enableRealTimeSensor(SbBool on)"""
        return _coin.SoDB_enableRealTimeSensor(on)

    enableRealTimeSensor = staticmethod(enableRealTimeSensor)

    def getSensorManager() -> "SoSensorManager *":
        """getSensorManager() -> SoSensorManager"""
        return _coin.SoDB_getSensorManager()

    getSensorManager = staticmethod(getSensorManager)

    def setDelaySensorTimeout(t: 'SbTime') -> "void":
        """setDelaySensorTimeout(SbTime t)"""
        return _coin.SoDB_setDelaySensorTimeout(t)

    setDelaySensorTimeout = staticmethod(setDelaySensorTimeout)

    def getDelaySensorTimeout() -> "SbTime const &":
        """getDelaySensorTimeout() -> SbTime"""
        return _coin.SoDB_getDelaySensorTimeout()

    getDelaySensorTimeout = staticmethod(getDelaySensorTimeout)

    def doSelect(nfds: 'int', readfds: 'void *', writefds: 'void *', exceptfds: 'void *', usertimeout: 'timeval *') -> "int":
        """doSelect(int nfds, void * readfds, void * writefds, void * exceptfds, timeval * usertimeout) -> int"""
        return _coin.SoDB_doSelect(nfds, readfds, writefds, exceptfds, usertimeout)

    doSelect = staticmethod(doSelect)

    def addConverter(arg1: 'SoType', to: 'SoType', converter: 'SoType') -> "void":
        """addConverter(SoType arg1, SoType to, SoType converter)"""
        return _coin.SoDB_addConverter(arg1, to, converter)

    addConverter = staticmethod(addConverter)

    def getConverter(arg1: 'SoType', to: 'SoType') -> "SoType":
        """getConverter(SoType arg1, SoType to) -> SoType"""
        return _coin.SoDB_getConverter(arg1, to)

    getConverter = staticmethod(getConverter)

    def isInitialized() -> "SbBool":
        """isInitialized() -> SbBool"""
        return _coin.SoDB_isInitialized()

    isInitialized = staticmethod(isInitialized)

    def startNotify() -> "void":
        """startNotify()"""
        return _coin.SoDB_startNotify()

    startNotify = staticmethod(startNotify)

    def isNotifying() -> "SbBool":
        """isNotifying() -> SbBool"""
        return _coin.SoDB_isNotifying()

    isNotifying = staticmethod(isNotifying)

    def endNotify() -> "void":
        """endNotify()"""
        return _coin.SoDB_endNotify()

    endNotify = staticmethod(endNotify)

    def addProgressCallback(func: 'SoDB::ProgressCallbackType *', userdata: 'void *') -> "void":
        """addProgressCallback(SoDB::ProgressCallbackType * func, void * userdata)"""
        return _coin.SoDB_addProgressCallback(func, userdata)

    addProgressCallback = staticmethod(addProgressCallback)

    def removeProgressCallback(func: 'SoDB::ProgressCallbackType *', userdata: 'void *') -> "void":
        """removeProgressCallback(SoDB::ProgressCallbackType * func, void * userdata)"""
        return _coin.SoDB_removeProgressCallback(func, userdata)

    removeProgressCallback = staticmethod(removeProgressCallback)

    def isMultiThread() -> "SbBool":
        """isMultiThread() -> SbBool"""
        return _coin.SoDB_isMultiThread()

    isMultiThread = staticmethod(isMultiThread)

    def readlock() -> "void":
        """readlock()"""
        return _coin.SoDB_readlock()

    readlock = staticmethod(readlock)

    def readunlock() -> "void":
        """readunlock()"""
        return _coin.SoDB_readunlock()

    readunlock = staticmethod(readunlock)

    def writelock() -> "void":
        """writelock()"""
        return _coin.SoDB_writelock()

    writelock = staticmethod(writelock)

    def writeunlock() -> "void":
        """writeunlock()"""
        return _coin.SoDB_writeunlock()

    writeunlock = staticmethod(writeunlock)

    def createRoute(arg1: 'SoNode', eventout: 'char const *', to: 'SoNode', eventin: 'char const *') -> "void":
        """createRoute(SoNode arg1, char const * eventout, SoNode to, char const * eventin)"""
        return _coin.SoDB_createRoute(arg1, eventout, to, eventin)

    createRoute = staticmethod(createRoute)

    def removeRoute(arg1: 'SoNode', eventout: 'char const *', to: 'SoNode', eventin: 'char const *') -> "void":
        """removeRoute(SoNode arg1, char const * eventout, SoNode to, char const * eventin)"""
        return _coin.SoDB_removeRoute(arg1, eventout, to, eventin)

    removeRoute = staticmethod(removeRoute)

    def __init__(self):
        """__init__(SoDB self) -> SoDB"""
        this = _coin.new_SoDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoDB
    __del__ = lambda self: None
SoDB_swigregister = _coin.SoDB_swigregister
SoDB_swigregister(SoDB)

def SoDB_init() -> "void":
    """SoDB_init()"""
    return _coin.SoDB_init()

def SoDB_finish() -> "void":
    """SoDB_finish()"""
    return _coin.SoDB_finish()

def SoDB_cleanup() -> "void":
    """SoDB_cleanup()"""
    return _coin.SoDB_cleanup()

def SoDB_getVersion() -> "char const *":
    """SoDB_getVersion() -> char const *"""
    return _coin.SoDB_getVersion()

def SoDB_read(*args) -> "SbBool":
    """
    read(SoInput input, SoPath *& path) -> SbBool
    read(SoInput input, SoBase *& base) -> SbBool
    SoDB_read(SoInput input, SoNode *& rootnode) -> SbBool
    """
    return _coin.SoDB_read(*args)

def SoDB_readAll(input: 'SoInput') -> "SoSeparator *":
    """SoDB_readAll(SoInput input) -> SoSeparator"""
    return _coin.SoDB_readAll(input)

def SoDB_readAllVRML(input: 'SoInput') -> "SoVRMLGroup *":
    """SoDB_readAllVRML(SoInput input) -> SoVRMLGroup"""
    return _coin.SoDB_readAllVRML(input)

def SoDB_isValidHeader(teststring: 'char const *') -> "SbBool":
    """SoDB_isValidHeader(char const * teststring) -> SbBool"""
    return _coin.SoDB_isValidHeader(teststring)

def SoDB_registerHeader(headerstring: 'SbString', isbinary: 'SbBool', ivversion: 'float', precallback: 'SoDBHeaderCB *', postcallback: 'SoDBHeaderCB *', userdata: 'void *'=None) -> "SbBool":
    """
    registerHeader(SbString headerstring, SbBool isbinary, float ivversion, SoDBHeaderCB * precallback, SoDBHeaderCB * postcallback, void * userdata=None) -> SbBool
    SoDB_registerHeader(SbString headerstring, SbBool isbinary, float ivversion, SoDBHeaderCB * precallback, SoDBHeaderCB * postcallback) -> SbBool
    """
    return _coin.SoDB_registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata)

def SoDB_getHeaderData(headerstring: 'SbString', isbinary: 'SbBool &', ivversion: 'float &', precallback: 'SoDBHeaderCB *&', postcallback: 'SoDBHeaderCB *&', userdata: 'void *&', substringok: 'SbBool'=0) -> "SbBool":
    """
    getHeaderData(SbString headerstring, SbBool & isbinary, float & ivversion, SoDBHeaderCB *& precallback, SoDBHeaderCB *& postcallback, void *& userdata, SbBool substringok=0) -> SbBool
    SoDB_getHeaderData(SbString headerstring, SbBool & isbinary, float & ivversion, SoDBHeaderCB *& precallback, SoDBHeaderCB *& postcallback, void *& userdata) -> SbBool
    """
    return _coin.SoDB_getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok)

def SoDB_getNumHeaders() -> "int":
    """SoDB_getNumHeaders() -> int"""
    return _coin.SoDB_getNumHeaders()

def SoDB_getHeaderString(i: 'int const') -> "SbString":
    """SoDB_getHeaderString(int const i) -> SbString"""
    return _coin.SoDB_getHeaderString(i)

def SoDB_createGlobalField(name: 'SbName', type: 'SoType') -> "SoField *":
    """SoDB_createGlobalField(SbName name, SoType type) -> SoField"""
    return _coin.SoDB_createGlobalField(name, type)

def SoDB_getGlobalField(name: 'SbName') -> "SoField *":
    """SoDB_getGlobalField(SbName name) -> SoField"""
    return _coin.SoDB_getGlobalField(name)

def SoDB_renameGlobalField(arg2: 'SbName', to: 'SbName') -> "void":
    """SoDB_renameGlobalField(SbName arg2, SbName to)"""
    return _coin.SoDB_renameGlobalField(arg2, to)

def SoDB_setRealTimeInterval(interval: 'SbTime') -> "void":
    """SoDB_setRealTimeInterval(SbTime interval)"""
    return _coin.SoDB_setRealTimeInterval(interval)

def SoDB_getRealTimeInterval() -> "SbTime const &":
    """SoDB_getRealTimeInterval() -> SbTime"""
    return _coin.SoDB_getRealTimeInterval()

def SoDB_enableRealTimeSensor(on: 'SbBool') -> "void":
    """SoDB_enableRealTimeSensor(SbBool on)"""
    return _coin.SoDB_enableRealTimeSensor(on)

def SoDB_getSensorManager() -> "SoSensorManager *":
    """SoDB_getSensorManager() -> SoSensorManager"""
    return _coin.SoDB_getSensorManager()

def SoDB_setDelaySensorTimeout(t: 'SbTime') -> "void":
    """SoDB_setDelaySensorTimeout(SbTime t)"""
    return _coin.SoDB_setDelaySensorTimeout(t)

def SoDB_getDelaySensorTimeout() -> "SbTime const &":
    """SoDB_getDelaySensorTimeout() -> SbTime"""
    return _coin.SoDB_getDelaySensorTimeout()

def SoDB_doSelect(nfds: 'int', readfds: 'void *', writefds: 'void *', exceptfds: 'void *', usertimeout: 'timeval *') -> "int":
    """SoDB_doSelect(int nfds, void * readfds, void * writefds, void * exceptfds, timeval * usertimeout) -> int"""
    return _coin.SoDB_doSelect(nfds, readfds, writefds, exceptfds, usertimeout)

def SoDB_addConverter(arg2: 'SoType', to: 'SoType', converter: 'SoType') -> "void":
    """SoDB_addConverter(SoType arg2, SoType to, SoType converter)"""
    return _coin.SoDB_addConverter(arg2, to, converter)

def SoDB_getConverter(arg2: 'SoType', to: 'SoType') -> "SoType":
    """SoDB_getConverter(SoType arg2, SoType to) -> SoType"""
    return _coin.SoDB_getConverter(arg2, to)

def SoDB_isInitialized() -> "SbBool":
    """SoDB_isInitialized() -> SbBool"""
    return _coin.SoDB_isInitialized()

def SoDB_startNotify() -> "void":
    """SoDB_startNotify()"""
    return _coin.SoDB_startNotify()

def SoDB_isNotifying() -> "SbBool":
    """SoDB_isNotifying() -> SbBool"""
    return _coin.SoDB_isNotifying()

def SoDB_endNotify() -> "void":
    """SoDB_endNotify()"""
    return _coin.SoDB_endNotify()

def SoDB_addProgressCallback(func: 'SoDB::ProgressCallbackType *', userdata: 'void *') -> "void":
    """SoDB_addProgressCallback(SoDB::ProgressCallbackType * func, void * userdata)"""
    return _coin.SoDB_addProgressCallback(func, userdata)

def SoDB_removeProgressCallback(func: 'SoDB::ProgressCallbackType *', userdata: 'void *') -> "void":
    """SoDB_removeProgressCallback(SoDB::ProgressCallbackType * func, void * userdata)"""
    return _coin.SoDB_removeProgressCallback(func, userdata)

def SoDB_isMultiThread() -> "SbBool":
    """SoDB_isMultiThread() -> SbBool"""
    return _coin.SoDB_isMultiThread()

def SoDB_readlock() -> "void":
    """SoDB_readlock()"""
    return _coin.SoDB_readlock()

def SoDB_readunlock() -> "void":
    """SoDB_readunlock()"""
    return _coin.SoDB_readunlock()

def SoDB_writelock() -> "void":
    """SoDB_writelock()"""
    return _coin.SoDB_writelock()

def SoDB_writeunlock() -> "void":
    """SoDB_writeunlock()"""
    return _coin.SoDB_writeunlock()

def SoDB_createRoute(arg2: 'SoNode', eventout: 'char const *', to: 'SoNode', eventin: 'char const *') -> "void":
    """SoDB_createRoute(SoNode arg2, char const * eventout, SoNode to, char const * eventin)"""
    return _coin.SoDB_createRoute(arg2, eventout, to, eventin)

def SoDB_removeRoute(arg2: 'SoNode', eventout: 'char const *', to: 'SoNode', eventin: 'char const *') -> "void":
    """SoDB_removeRoute(SoNode arg2, char const * eventout, SoNode to, char const * eventin)"""
    return _coin.SoDB_removeRoute(arg2, eventout, to, eventin)

class SoInput(object):
    """Proxy of C++ SoInput class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoInput self) -> SoInput
        __init__(SoInput self, SoInput dictIn) -> SoInput
        """
        this = _coin.new_SoInput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def findProto(self, name: 'SbName') -> "SoProto *":
        """findProto(SoInput self, SbName name) -> SoProto"""
        return _coin.SoInput_findProto(self, name)


    def addProto(self, proto: 'SoProto') -> "void":
        """addProto(SoInput self, SoProto proto)"""
        return _coin.SoInput_addProto(self, proto)


    def pushProto(self, proto: 'SoProto') -> "void":
        """pushProto(SoInput self, SoProto proto)"""
        return _coin.SoInput_pushProto(self, proto)


    def getCurrentProto(self) -> "SoProto *":
        """getCurrentProto(SoInput self) -> SoProto"""
        return _coin.SoInput_getCurrentProto(self)


    def popProto(self) -> "void":
        """popProto(SoInput self)"""
        return _coin.SoInput_popProto(self)


    def addRoute(self, fromnode: 'SbName', fromfield: 'SbName', tonode: 'SbName', tofield: 'SbName') -> "void":
        """addRoute(SoInput self, SbName fromnode, SbName fromfield, SbName tonode, SbName tofield)"""
        return _coin.SoInput_addRoute(self, fromnode, fromfield, tonode, tofield)


    def checkISReference(self, container: 'SoFieldContainer', fieldname: 'SbName', readok: 'SbBool &') -> "SbBool":
        """checkISReference(SoInput self, SoFieldContainer container, SbName fieldname, SbBool & readok) -> SbBool"""
        return _coin.SoInput_checkISReference(self, container, fieldname, readok)

    __swig_destroy__ = _coin.delete_SoInput
    __del__ = lambda self: None

    def setFilePointer(self, newFP: 'FILE *') -> "void":
        """setFilePointer(SoInput self, FILE * newFP)"""
        return _coin.SoInput_setFilePointer(self, newFP)


    def openFile(self, fileName: 'char const *', okIfNotFound: 'SbBool'=0) -> "SbBool":
        """
        openFile(SoInput self, char const * fileName, SbBool okIfNotFound=0) -> SbBool
        openFile(SoInput self, char const * fileName) -> SbBool
        """
        return _coin.SoInput_openFile(self, fileName, okIfNotFound)


    def pushFile(self, fileName: 'char const *') -> "SbBool":
        """pushFile(SoInput self, char const * fileName) -> SbBool"""
        return _coin.SoInput_pushFile(self, fileName)


    def closeFile(self) -> "void":
        """closeFile(SoInput self)"""
        return _coin.SoInput_closeFile(self)


    def isValidFile(self) -> "SbBool":
        """isValidFile(SoInput self) -> SbBool"""
        return _coin.SoInput_isValidFile(self)


    def isValidBuffer(self) -> "SbBool":
        """isValidBuffer(SoInput self) -> SbBool"""
        return _coin.SoInput_isValidBuffer(self)


    def getCurFile(self) -> "FILE *":
        """getCurFile(SoInput self) -> FILE *"""
        return _coin.SoInput_getCurFile(self)


    def getCurFileName(self) -> "char const *":
        """getCurFileName(SoInput self) -> char const *"""
        return _coin.SoInput_getCurFileName(self)


    def setBuffer(self, bufpointer: 'void const *') -> "void":
        """setBuffer(SoInput self, void const * bufpointer)"""
        return _coin.SoInput_setBuffer(self, bufpointer)


    def setStringArray(self, strings: 'char const *[]') -> "void":
        """setStringArray(SoInput self, char const *[] strings)"""
        return _coin.SoInput_setStringArray(self, strings)


    def getNumBytesRead(self) -> "size_t":
        """getNumBytesRead(SoInput self) -> size_t"""
        return _coin.SoInput_getNumBytesRead(self)


    def getHeader(self) -> "SbString":
        """getHeader(SoInput self) -> SbString"""
        return _coin.SoInput_getHeader(self)


    def getIVVersion(self) -> "float":
        """getIVVersion(SoInput self) -> float"""
        return _coin.SoInput_getIVVersion(self)


    def isBinary(self) -> "SbBool":
        """isBinary(SoInput self) -> SbBool"""
        return _coin.SoInput_isBinary(self)


    def get(self, c: 'char &') -> "SbBool":
        """get(SoInput self, char & c) -> SbBool"""
        return _coin.SoInput_get(self, c)


    def getASCIIBuffer(self, c: 'char &') -> "SbBool":
        """getASCIIBuffer(SoInput self, char & c) -> SbBool"""
        return _coin.SoInput_getASCIIBuffer(self, c)


    def getASCIIFile(self, c: 'char &') -> "SbBool":
        """getASCIIFile(SoInput self, char & c) -> SbBool"""
        return _coin.SoInput_getASCIIFile(self, c)


    def readHex(self, l: 'uint32_t &') -> "SbBool":
        """readHex(SoInput self, uint32_t & l) -> SbBool"""
        return _coin.SoInput_readHex(self, l)


    def read(self, *args) -> "SbBool":
        """
        read(SoInput self, char & c) -> SbBool
        read(SoInput self, char & c, SbBool skip) -> SbBool
        read(SoInput self, SbString s) -> SbBool
        read(SoInput self, SbName n, SbBool validIdent=0) -> SbBool
        read(SoInput self, SbName n) -> SbBool
        read(SoInput self, int & i) -> SbBool
        read(SoInput self, unsigned int & i) -> SbBool
        read(SoInput self, short & s) -> SbBool
        read(SoInput self, unsigned short & s) -> SbBool
        read(SoInput self, float & f) -> SbBool
        read(SoInput self, double & d) -> SbBool
        """
        return _coin.SoInput_read(self, *args)


    def readByte(self, *args) -> "SbBool":
        """
        readByte(SoInput self, int8_t & b) -> SbBool
        readByte(SoInput self, uint8_t & b) -> SbBool
        """
        return _coin.SoInput_readByte(self, *args)


    def readBinaryArray(self, *args) -> "SbBool":
        """
        readBinaryArray(SoInput self, unsigned char * c, int length) -> SbBool
        readBinaryArray(SoInput self, int32_t * l, int length) -> SbBool
        readBinaryArray(SoInput self, float * f, int length) -> SbBool
        readBinaryArray(SoInput self, double * d, int length) -> SbBool
        """
        return _coin.SoInput_readBinaryArray(self, *args)


    def eof(self) -> "SbBool":
        """eof(SoInput self) -> SbBool"""
        return _coin.SoInput_eof(self)


    def isFileVRML1(self) -> "SbBool":
        """isFileVRML1(SoInput self) -> SbBool"""
        return _coin.SoInput_isFileVRML1(self)


    def isFileVRML2(self) -> "SbBool":
        """isFileVRML2(SoInput self) -> SbBool"""
        return _coin.SoInput_isFileVRML2(self)


    def resetFilePointer(self, fptr: 'FILE *') -> "void":
        """resetFilePointer(SoInput self, FILE * fptr)"""
        return _coin.SoInput_resetFilePointer(self, fptr)


    def getLocationString(self, string: 'SbString') -> "void":
        """getLocationString(SoInput self, SbString string)"""
        return _coin.SoInput_getLocationString(self, string)


    def putBack(self, *args) -> "void":
        """
        putBack(SoInput self, char const c)
        putBack(SoInput self, char const * str)
        """
        return _coin.SoInput_putBack(self, *args)


    def addReference(self, name: 'SbName', base: 'SoBase', addToGlobalDict: 'SbBool'=1) -> "void":
        """
        addReference(SoInput self, SbName name, SoBase base, SbBool addToGlobalDict=1)
        addReference(SoInput self, SbName name, SoBase base)
        """
        return _coin.SoInput_addReference(self, name, base, addToGlobalDict)


    def removeReference(self, name: 'SbName') -> "void":
        """removeReference(SoInput self, SbName name)"""
        return _coin.SoInput_removeReference(self, name)


    def findReference(self, name: 'SbName') -> "SoBase *":
        """findReference(SoInput self, SbName name) -> SoBase"""
        return _coin.SoInput_findReference(self, name)


    def addDirectoryFirst(dirName: 'char const *') -> "void":
        """addDirectoryFirst(char const * dirName)"""
        return _coin.SoInput_addDirectoryFirst(dirName)

    addDirectoryFirst = staticmethod(addDirectoryFirst)

    def addDirectoryLast(dirName: 'char const *') -> "void":
        """addDirectoryLast(char const * dirName)"""
        return _coin.SoInput_addDirectoryLast(dirName)

    addDirectoryLast = staticmethod(addDirectoryLast)

    def addEnvDirectoriesFirst(*args) -> "void":
        """
        addEnvDirectoriesFirst(char const * envVarName, char const * separator)
        addEnvDirectoriesFirst(char const * envVarName)
        """
        return _coin.SoInput_addEnvDirectoriesFirst(*args)

    addEnvDirectoriesFirst = staticmethod(addEnvDirectoriesFirst)

    def addEnvDirectoriesLast(*args) -> "void":
        """
        addEnvDirectoriesLast(char const * envVarName, char const * separator)
        addEnvDirectoriesLast(char const * envVarName)
        """
        return _coin.SoInput_addEnvDirectoriesLast(*args)

    addEnvDirectoriesLast = staticmethod(addEnvDirectoriesLast)

    def removeDirectory(dirName: 'char const *') -> "void":
        """removeDirectory(char const * dirName)"""
        return _coin.SoInput_removeDirectory(dirName)

    removeDirectory = staticmethod(removeDirectory)

    def clearDirectories() -> "void":
        """clearDirectories()"""
        return _coin.SoInput_clearDirectories()

    clearDirectories = staticmethod(clearDirectories)

    def getDirectories() -> "SbStringList const &":
        """getDirectories() -> SbStringList"""
        return _coin.SoInput_getDirectories()

    getDirectories = staticmethod(getDirectories)

    def init() -> "void":
        """init()"""
        return _coin.SoInput_init()

    init = staticmethod(init)

    def getPathname(*args) -> "SbString":
        """
        getPathname(char const *const filename) -> SbString
        getPathname(SbString s) -> SbString
        """
        return _coin.SoInput_getPathname(*args)

    getPathname = staticmethod(getPathname)

    def getBasename(*args) -> "SbString":
        """
        getBasename(char const *const filename) -> SbString
        getBasename(SbString s) -> SbString
        """
        return _coin.SoInput_getBasename(*args)

    getBasename = staticmethod(getBasename)

    def searchForFile(basename: 'SbString', directories: 'SbStringList', subdirectories: 'SbStringList') -> "SbString":
        """searchForFile(SbString basename, SbStringList directories, SbStringList subdirectories) -> SbString"""
        return _coin.SoInput_searchForFile(basename, directories, subdirectories)

    searchForFile = staticmethod(searchForFile)
SoInput_swigregister = _coin.SoInput_swigregister
SoInput_swigregister(SoInput)

def SoInput_addDirectoryFirst(dirName: 'char const *') -> "void":
    """SoInput_addDirectoryFirst(char const * dirName)"""
    return _coin.SoInput_addDirectoryFirst(dirName)

def SoInput_addDirectoryLast(dirName: 'char const *') -> "void":
    """SoInput_addDirectoryLast(char const * dirName)"""
    return _coin.SoInput_addDirectoryLast(dirName)

def SoInput_addEnvDirectoriesFirst(*args) -> "void":
    """
    addEnvDirectoriesFirst(char const * envVarName, char const * separator)
    SoInput_addEnvDirectoriesFirst(char const * envVarName)
    """
    return _coin.SoInput_addEnvDirectoriesFirst(*args)

def SoInput_addEnvDirectoriesLast(*args) -> "void":
    """
    addEnvDirectoriesLast(char const * envVarName, char const * separator)
    SoInput_addEnvDirectoriesLast(char const * envVarName)
    """
    return _coin.SoInput_addEnvDirectoriesLast(*args)

def SoInput_removeDirectory(dirName: 'char const *') -> "void":
    """SoInput_removeDirectory(char const * dirName)"""
    return _coin.SoInput_removeDirectory(dirName)

def SoInput_clearDirectories() -> "void":
    """SoInput_clearDirectories()"""
    return _coin.SoInput_clearDirectories()

def SoInput_getDirectories() -> "SbStringList const &":
    """SoInput_getDirectories() -> SbStringList"""
    return _coin.SoInput_getDirectories()

def SoInput_init() -> "void":
    """SoInput_init()"""
    return _coin.SoInput_init()

def SoInput_getPathname(*args) -> "SbString":
    """
    getPathname(char const *const filename) -> SbString
    SoInput_getPathname(SbString s) -> SbString
    """
    return _coin.SoInput_getPathname(*args)

def SoInput_getBasename(*args) -> "SbString":
    """
    getBasename(char const *const filename) -> SbString
    SoInput_getBasename(SbString s) -> SbString
    """
    return _coin.SoInput_getBasename(*args)

def SoInput_searchForFile(basename: 'SbString', directories: 'SbStringList', subdirectories: 'SbStringList') -> "SbString":
    """SoInput_searchForFile(SbString basename, SbStringList directories, SbStringList subdirectories) -> SbString"""
    return _coin.SoInput_searchForFile(basename, directories, subdirectories)

class SoOutput(object):
    """Proxy of C++ SoOutput class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    COUNT_REFS = _coin.SoOutput_COUNT_REFS
    WRITE = _coin.SoOutput_WRITE
    ADDRESSES = _coin.SoOutput_ADDRESSES
    REF_COUNTS = _coin.SoOutput_REF_COUNTS

    def __init__(self, *args):
        """
        __init__(SoOutput self) -> SoOutput
        __init__(SoOutput self, SoOutput dictOut) -> SoOutput
        """
        this = _coin.new_SoOutput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoOutput
    __del__ = lambda self: None

    def setFilePointer(self, newFP: 'FILE *') -> "void":
        """setFilePointer(SoOutput self, FILE * newFP)"""
        return _coin.SoOutput_setFilePointer(self, newFP)


    def getFilePointer(self) -> "FILE *":
        """getFilePointer(SoOutput self) -> FILE *"""
        return _coin.SoOutput_getFilePointer(self)


    def openFile(self, fileName: 'char const *const') -> "SbBool":
        """openFile(SoOutput self, char const *const fileName) -> SbBool"""
        return _coin.SoOutput_openFile(self, fileName)


    def closeFile(self) -> "void":
        """closeFile(SoOutput self)"""
        return _coin.SoOutput_closeFile(self)


    def setCompression(self, compmethod: 'SbName', level: 'float const'=0.5) -> "SbBool":
        """
        setCompression(SoOutput self, SbName compmethod, float const level=0.5) -> SbBool
        setCompression(SoOutput self, SbName compmethod) -> SbBool
        """
        return _coin.SoOutput_setCompression(self, compmethod, level)


    def getAvailableCompressionMethods(num: 'unsigned int &') -> "SbName const *":
        """getAvailableCompressionMethods(unsigned int & num) -> SbName"""
        return _coin.SoOutput_getAvailableCompressionMethods(num)

    getAvailableCompressionMethods = staticmethod(getAvailableCompressionMethods)

    def setBuffer(self, bufPointer: 'void *', initSize: 'size_t', reallocFunc: 'SoOutputReallocCB *', offset: 'int32_t'=0) -> "void":
        """
        setBuffer(SoOutput self, void * bufPointer, size_t initSize, SoOutputReallocCB * reallocFunc, int32_t offset=0)
        setBuffer(SoOutput self, void * bufPointer, size_t initSize, SoOutputReallocCB * reallocFunc)
        """
        return _coin.SoOutput_setBuffer(self, bufPointer, initSize, reallocFunc, offset)


    def getBuffer(self, bufPointer: 'void *&', nBytes: 'size_t &') -> "SbBool":
        """getBuffer(SoOutput self, void *& bufPointer, size_t & nBytes) -> SbBool"""
        return _coin.SoOutput_getBuffer(self, bufPointer, nBytes)


    def getBufferSize(self) -> "size_t":
        """getBufferSize(SoOutput self) -> size_t"""
        return _coin.SoOutput_getBufferSize(self)


    def resetBuffer(self) -> "void":
        """resetBuffer(SoOutput self)"""
        return _coin.SoOutput_resetBuffer(self)


    def setBinary(self, flag: 'SbBool const') -> "void":
        """setBinary(SoOutput self, SbBool const flag)"""
        return _coin.SoOutput_setBinary(self, flag)


    def isBinary(self) -> "SbBool":
        """isBinary(SoOutput self) -> SbBool"""
        return _coin.SoOutput_isBinary(self)


    def setHeaderString(self, str: 'SbString') -> "void":
        """setHeaderString(SoOutput self, SbString str)"""
        return _coin.SoOutput_setHeaderString(self, str)


    def resetHeaderString(self) -> "void":
        """resetHeaderString(SoOutput self)"""
        return _coin.SoOutput_resetHeaderString(self)


    def setFloatPrecision(self, precision: 'int const') -> "void":
        """setFloatPrecision(SoOutput self, int const precision)"""
        return _coin.SoOutput_setFloatPrecision(self, precision)


    def setStage(self, stage: 'SoOutput::Stage') -> "void":
        """setStage(SoOutput self, SoOutput::Stage stage)"""
        return _coin.SoOutput_setStage(self, stage)


    def getStage(self) -> "SoOutput::Stage":
        """getStage(SoOutput self) -> SoOutput::Stage"""
        return _coin.SoOutput_getStage(self)


    def incrementIndent(self, levels: 'int const'=1) -> "void":
        """
        incrementIndent(SoOutput self, int const levels=1)
        incrementIndent(SoOutput self)
        """
        return _coin.SoOutput_incrementIndent(self, levels)


    def decrementIndent(self, levels: 'int const'=1) -> "void":
        """
        decrementIndent(SoOutput self, int const levels=1)
        decrementIndent(SoOutput self)
        """
        return _coin.SoOutput_decrementIndent(self, levels)


    def write(self, *args) -> "void":
        """
        write(SoOutput self, char const c)
        write(SoOutput self, char const * s)
        write(SoOutput self, SbString s)
        write(SoOutput self, SbName n)
        write(SoOutput self, int const i)
        write(SoOutput self, unsigned int const i)
        write(SoOutput self, short const s)
        write(SoOutput self, unsigned short const s)
        write(SoOutput self, float const f)
        write(SoOutput self, double const d)
        """
        return _coin.SoOutput_write(self, *args)


    def writeBinaryArray(self, *args) -> "void":
        """
        writeBinaryArray(SoOutput self, unsigned char const * c, int const length)
        writeBinaryArray(SoOutput self, int32_t const *const l, int const length)
        writeBinaryArray(SoOutput self, float const *const f, int const length)
        writeBinaryArray(SoOutput self, double const *const d, int const length)
        """
        return _coin.SoOutput_writeBinaryArray(self, *args)


    def indent(self) -> "void":
        """indent(SoOutput self)"""
        return _coin.SoOutput_indent(self)


    def reset(self) -> "void":
        """reset(SoOutput self)"""
        return _coin.SoOutput_reset(self)


    def setCompact(self, flag: 'SbBool') -> "void":
        """setCompact(SoOutput self, SbBool flag)"""
        return _coin.SoOutput_setCompact(self, flag)


    def isCompact(self) -> "SbBool":
        """isCompact(SoOutput self) -> SbBool"""
        return _coin.SoOutput_isCompact(self)


    def setAnnotation(self, bits: 'uint32_t') -> "void":
        """setAnnotation(SoOutput self, uint32_t bits)"""
        return _coin.SoOutput_setAnnotation(self, bits)


    def getAnnotation(self) -> "uint32_t":
        """getAnnotation(SoOutput self) -> uint32_t"""
        return _coin.SoOutput_getAnnotation(self)


    def getDefaultASCIIHeader() -> "SbString":
        """getDefaultASCIIHeader() -> SbString"""
        return _coin.SoOutput_getDefaultASCIIHeader()

    getDefaultASCIIHeader = staticmethod(getDefaultASCIIHeader)

    def getDefaultBinaryHeader() -> "SbString":
        """getDefaultBinaryHeader() -> SbString"""
        return _coin.SoOutput_getDefaultBinaryHeader()

    getDefaultBinaryHeader = staticmethod(getDefaultBinaryHeader)

    def addReference(self, base: 'SoBase') -> "int":
        """addReference(SoOutput self, SoBase base) -> int"""
        return _coin.SoOutput_addReference(self, base)


    def findReference(self, base: 'SoBase') -> "int":
        """findReference(SoOutput self, SoBase base) -> int"""
        return _coin.SoOutput_findReference(self, base)


    def setReference(self, base: 'SoBase', refid: 'int') -> "void":
        """setReference(SoOutput self, SoBase base, int refid)"""
        return _coin.SoOutput_setReference(self, base, refid)


    def addDEFNode(self, name: 'SbName') -> "void":
        """addDEFNode(SoOutput self, SbName name)"""
        return _coin.SoOutput_addDEFNode(self, name)


    def lookupDEFNode(self, name: 'SbName') -> "SbBool":
        """lookupDEFNode(SoOutput self, SbName name) -> SbBool"""
        return _coin.SoOutput_lookupDEFNode(self, name)


    def removeDEFNode(self, name: 'SbName') -> "void":
        """removeDEFNode(SoOutput self, SbName name)"""
        return _coin.SoOutput_removeDEFNode(self, name)


    def pushProto(self, proto: 'SoProto') -> "void":
        """pushProto(SoOutput self, SoProto proto)"""
        return _coin.SoOutput_pushProto(self, proto)


    def getCurrentProto(self) -> "SoProto *":
        """getCurrentProto(SoOutput self) -> SoProto"""
        return _coin.SoOutput_getCurrentProto(self)


    def popProto(self) -> "void":
        """popProto(SoOutput self)"""
        return _coin.SoOutput_popProto(self)


    def addRoute(self, arg2: 'SoFieldContainer', fromfield: 'SbName', to: 'SoFieldContainer', tofield: 'SbName') -> "void":
        """addRoute(SoOutput self, SoFieldContainer arg2, SbName fromfield, SoFieldContainer to, SbName tofield)"""
        return _coin.SoOutput_addRoute(self, arg2, fromfield, to, tofield)


    def resolveRoutes(self) -> "void":
        """resolveRoutes(SoOutput self)"""
        return _coin.SoOutput_resolveRoutes(self)

SoOutput_swigregister = _coin.SoOutput_swigregister
SoOutput_swigregister(SoOutput)

def SoOutput_getAvailableCompressionMethods(num: 'unsigned int &') -> "SbName const *":
    """SoOutput_getAvailableCompressionMethods(unsigned int & num) -> SbName"""
    return _coin.SoOutput_getAvailableCompressionMethods(num)

def SoOutput_getDefaultASCIIHeader() -> "SbString":
    """SoOutput_getDefaultASCIIHeader() -> SbString"""
    return _coin.SoOutput_getDefaultASCIIHeader()

def SoOutput_getDefaultBinaryHeader() -> "SbString":
    """SoOutput_getDefaultBinaryHeader() -> SbString"""
    return _coin.SoOutput_getDefaultBinaryHeader()

class SoSFEnum(SoSField):
    """Proxy of C++ SoSFEnum class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFEnum self) -> SoSFEnum"""
        this = _coin.new_SoSFEnum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFEnum
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFEnum_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFEnum_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFEnum self) -> SoType"""
        return _coin.SoSFEnum_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFEnum self, SoField field)"""
        return _coin.SoSFEnum_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFEnum self, SoField field) -> SbBool"""
        return _coin.SoSFEnum_isSame(self, field)


    def getValue(self) -> "int":
        """getValue(SoSFEnum self) -> int"""
        return _coin.SoSFEnum_getValue(self)


    def __eq__(self, field: 'SoSFEnum') -> "int":
        """__eq__(SoSFEnum self, SoSFEnum field) -> int"""
        return _coin.SoSFEnum___eq__(self, field)


    def __ne__(self, field: 'SoSFEnum') -> "int":
        """__ne__(SoSFEnum self, SoSFEnum field) -> int"""
        return _coin.SoSFEnum___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFEnum_initClass()

    initClass = staticmethod(initClass)

    def setEnums(self, num: 'int const', vals: 'int const *', names: 'SbName') -> "void":
        """setEnums(SoSFEnum self, int const num, int const * vals, SbName names)"""
        return _coin.SoSFEnum_setEnums(self, num, vals, names)


    def getNumEnums(self) -> "int":
        """getNumEnums(SoSFEnum self) -> int"""
        return _coin.SoSFEnum_getNumEnums(self)


    def getEnum(self, idx: 'int const', name: 'SbName') -> "int":
        """getEnum(SoSFEnum self, int const idx, SbName name) -> int"""
        return _coin.SoSFEnum_getEnum(self, idx, name)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFEnum self, int newvalue)
        setValue(SoSFEnum self, SbName name)
        setValue(SoSFEnum self, SoSFEnum other)
        """
        return _coin.SoSFEnum_setValue(self, *args)

SoSFEnum_swigregister = _coin.SoSFEnum_swigregister
SoSFEnum_swigregister(SoSFEnum)

def SoSFEnum_createInstance() -> "void *":
    """SoSFEnum_createInstance() -> void *"""
    return _coin.SoSFEnum_createInstance()

def SoSFEnum_getClassTypeId() -> "SoType":
    """SoSFEnum_getClassTypeId() -> SoType"""
    return _coin.SoSFEnum_getClassTypeId()

def SoSFEnum_initClass() -> "void":
    """SoSFEnum_initClass()"""
    return _coin.SoSFEnum_initClass()

class SoSFFloat(SoSField):
    """Proxy of C++ SoSFFloat class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFFloat self) -> SoSFFloat"""
        this = _coin.new_SoSFFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFFloat
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFFloat_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFFloat_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFFloat self) -> SoType"""
        return _coin.SoSFFloat_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFFloat self, SoField field)"""
        return _coin.SoSFFloat_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFFloat self, SoField field) -> SbBool"""
        return _coin.SoSFFloat_isSame(self, field)


    def getValue(self) -> "float":
        """getValue(SoSFFloat self) -> float"""
        return _coin.SoSFFloat_getValue(self)


    def __eq__(self, field: 'SoSFFloat') -> "int":
        """__eq__(SoSFFloat self, SoSFFloat field) -> int"""
        return _coin.SoSFFloat___eq__(self, field)


    def __ne__(self, field: 'SoSFFloat') -> "int":
        """__ne__(SoSFFloat self, SoSFFloat field) -> int"""
        return _coin.SoSFFloat___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFFloat_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFFloat self, float newvalue)
        setValue(SoSFFloat self, SoSFFloat other)
        """
        return _coin.SoSFFloat_setValue(self, *args)

SoSFFloat_swigregister = _coin.SoSFFloat_swigregister
SoSFFloat_swigregister(SoSFFloat)

def SoSFFloat_createInstance() -> "void *":
    """SoSFFloat_createInstance() -> void *"""
    return _coin.SoSFFloat_createInstance()

def SoSFFloat_getClassTypeId() -> "SoType":
    """SoSFFloat_getClassTypeId() -> SoType"""
    return _coin.SoSFFloat_getClassTypeId()

def SoSFFloat_initClass() -> "void":
    """SoSFFloat_initClass()"""
    return _coin.SoSFFloat_initClass()

class SoComplexityTypeElement(SoInt32Element):
    """Proxy of C++ SoComplexityTypeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComplexityTypeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoComplexityTypeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComplexityTypeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComplexityTypeElement_initClass()

    initClass = staticmethod(initClass)
    OBJECT_SPACE = _coin.SoComplexityTypeElement_OBJECT_SPACE
    SCREEN_SPACE = _coin.SoComplexityTypeElement_SCREEN_SPACE
    BOUNDING_BOX = _coin.SoComplexityTypeElement_BOUNDING_BOX

    def init(self, state: 'SoState') -> "void":
        """init(SoComplexityTypeElement self, SoState state)"""
        return _coin.SoComplexityTypeElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoComplexityTypeElement::Type const type)
        set(SoState state, SoComplexityTypeElement::Type const type)
        """
        return _coin.SoComplexityTypeElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoComplexityTypeElement::Type":
        """get(SoState state) -> SoComplexityTypeElement::Type"""
        return _coin.SoComplexityTypeElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoComplexityTypeElement::Type":
        """getDefault() -> SoComplexityTypeElement::Type"""
        return _coin.SoComplexityTypeElement_getDefault()

    getDefault = staticmethod(getDefault)
SoComplexityTypeElement_swigregister = _coin.SoComplexityTypeElement_swigregister
SoComplexityTypeElement_swigregister(SoComplexityTypeElement)

def SoComplexityTypeElement_getClassTypeId() -> "SoType":
    """SoComplexityTypeElement_getClassTypeId() -> SoType"""
    return _coin.SoComplexityTypeElement_getClassTypeId()

def SoComplexityTypeElement_getClassStackIndex() -> "int":
    """SoComplexityTypeElement_getClassStackIndex() -> int"""
    return _coin.SoComplexityTypeElement_getClassStackIndex()

def SoComplexityTypeElement_createInstance() -> "void *":
    """SoComplexityTypeElement_createInstance() -> void *"""
    return _coin.SoComplexityTypeElement_createInstance()

def SoComplexityTypeElement_initClass() -> "void":
    """SoComplexityTypeElement_initClass()"""
    return _coin.SoComplexityTypeElement_initClass()

def SoComplexityTypeElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoComplexityTypeElement::Type const type)
    SoComplexityTypeElement_set(SoState state, SoComplexityTypeElement::Type const type)
    """
    return _coin.SoComplexityTypeElement_set(*args)

def SoComplexityTypeElement_get(state: 'SoState') -> "SoComplexityTypeElement::Type":
    """SoComplexityTypeElement_get(SoState state) -> SoComplexityTypeElement::Type"""
    return _coin.SoComplexityTypeElement_get(state)

def SoComplexityTypeElement_getDefault() -> "SoComplexityTypeElement::Type":
    """SoComplexityTypeElement_getDefault() -> SoComplexityTypeElement::Type"""
    return _coin.SoComplexityTypeElement_getDefault()

class SoComplexity(SoNode):
    """Proxy of C++ SoComplexity class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComplexity_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComplexity self) -> SoType"""
        return _coin.SoComplexity_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComplexity_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoComplexity self) -> SoComplexity"""
        this = _coin.new_SoComplexity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OBJECT_SPACE = _coin.SoComplexity_OBJECT_SPACE
    SCREEN_SPACE = _coin.SoComplexity_SCREEN_SPACE
    BOUNDING_BOX = _coin.SoComplexity_BOUNDING_BOX
    type = _swig_property(_coin.SoComplexity_type_get, _coin.SoComplexity_type_set)
    value = _swig_property(_coin.SoComplexity_value_get, _coin.SoComplexity_value_set)
    textureQuality = _swig_property(_coin.SoComplexity_textureQuality_get, _coin.SoComplexity_textureQuality_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoComplexity self, SoAction action)"""
        return _coin.SoComplexity_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoComplexity self, SoCallbackAction action)"""
        return _coin.SoComplexity_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoComplexity self, SoGetBoundingBoxAction action)"""
        return _coin.SoComplexity_getBoundingBox(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoComplexity self, SoGLRenderAction action)"""
        return _coin.SoComplexity_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoComplexity self, SoPickAction action)"""
        return _coin.SoComplexity_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoComplexity self, SoGetPrimitiveCountAction action)"""
        return _coin.SoComplexity_getPrimitiveCount(self, action)

SoComplexity_swigregister = _coin.SoComplexity_swigregister
SoComplexity_swigregister(SoComplexity)

def SoComplexity_getClassTypeId() -> "SoType":
    """SoComplexity_getClassTypeId() -> SoType"""
    return _coin.SoComplexity_getClassTypeId()

def SoComplexity_initClass() -> "void":
    """SoComplexity_initClass()"""
    return _coin.SoComplexity_initClass()

class SoDrawStyleElement(SoInt32Element):
    """Proxy of C++ SoDrawStyleElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDrawStyleElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoDrawStyleElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDrawStyleElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDrawStyleElement_initClass()

    initClass = staticmethod(initClass)
    FILLED = _coin.SoDrawStyleElement_FILLED
    LINES = _coin.SoDrawStyleElement_LINES
    POINTS = _coin.SoDrawStyleElement_POINTS
    INVISIBLE = _coin.SoDrawStyleElement_INVISIBLE

    def init(self, state: 'SoState') -> "void":
        """init(SoDrawStyleElement self, SoState state)"""
        return _coin.SoDrawStyleElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoDrawStyleElement::Style const style)
        set(SoState state, SoDrawStyleElement::Style const style)
        """
        return _coin.SoDrawStyleElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoDrawStyleElement::Style":
        """get(SoState state) -> SoDrawStyleElement::Style"""
        return _coin.SoDrawStyleElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoDrawStyleElement::Style":
        """getDefault() -> SoDrawStyleElement::Style"""
        return _coin.SoDrawStyleElement_getDefault()

    getDefault = staticmethod(getDefault)
SoDrawStyleElement_swigregister = _coin.SoDrawStyleElement_swigregister
SoDrawStyleElement_swigregister(SoDrawStyleElement)

def SoDrawStyleElement_getClassTypeId() -> "SoType":
    """SoDrawStyleElement_getClassTypeId() -> SoType"""
    return _coin.SoDrawStyleElement_getClassTypeId()

def SoDrawStyleElement_getClassStackIndex() -> "int":
    """SoDrawStyleElement_getClassStackIndex() -> int"""
    return _coin.SoDrawStyleElement_getClassStackIndex()

def SoDrawStyleElement_createInstance() -> "void *":
    """SoDrawStyleElement_createInstance() -> void *"""
    return _coin.SoDrawStyleElement_createInstance()

def SoDrawStyleElement_initClass() -> "void":
    """SoDrawStyleElement_initClass()"""
    return _coin.SoDrawStyleElement_initClass()

def SoDrawStyleElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoDrawStyleElement::Style const style)
    SoDrawStyleElement_set(SoState state, SoDrawStyleElement::Style const style)
    """
    return _coin.SoDrawStyleElement_set(*args)

def SoDrawStyleElement_get(state: 'SoState') -> "SoDrawStyleElement::Style":
    """SoDrawStyleElement_get(SoState state) -> SoDrawStyleElement::Style"""
    return _coin.SoDrawStyleElement_get(state)

def SoDrawStyleElement_getDefault() -> "SoDrawStyleElement::Style":
    """SoDrawStyleElement_getDefault() -> SoDrawStyleElement::Style"""
    return _coin.SoDrawStyleElement_getDefault()

class SoSFUShort(SoSField):
    """Proxy of C++ SoSFUShort class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFUShort self) -> SoSFUShort"""
        this = _coin.new_SoSFUShort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFUShort
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFUShort_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFUShort_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFUShort self) -> SoType"""
        return _coin.SoSFUShort_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFUShort self, SoField field)"""
        return _coin.SoSFUShort_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFUShort self, SoField field) -> SbBool"""
        return _coin.SoSFUShort_isSame(self, field)


    def getValue(self) -> "unsigned short":
        """getValue(SoSFUShort self) -> unsigned short"""
        return _coin.SoSFUShort_getValue(self)


    def __eq__(self, field: 'SoSFUShort') -> "int":
        """__eq__(SoSFUShort self, SoSFUShort field) -> int"""
        return _coin.SoSFUShort___eq__(self, field)


    def __ne__(self, field: 'SoSFUShort') -> "int":
        """__ne__(SoSFUShort self, SoSFUShort field) -> int"""
        return _coin.SoSFUShort___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFUShort_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFUShort self, unsigned short newvalue)
        setValue(SoSFUShort self, SoSFUShort other)
        """
        return _coin.SoSFUShort_setValue(self, *args)

SoSFUShort_swigregister = _coin.SoSFUShort_swigregister
SoSFUShort_swigregister(SoSFUShort)

def SoSFUShort_createInstance() -> "void *":
    """SoSFUShort_createInstance() -> void *"""
    return _coin.SoSFUShort_createInstance()

def SoSFUShort_getClassTypeId() -> "SoType":
    """SoSFUShort_getClassTypeId() -> SoType"""
    return _coin.SoSFUShort_getClassTypeId()

def SoSFUShort_initClass() -> "void":
    """SoSFUShort_initClass()"""
    return _coin.SoSFUShort_initClass()

class SoSFInt32(SoSField):
    """Proxy of C++ SoSFInt32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFInt32 self) -> SoSFInt32"""
        this = _coin.new_SoSFInt32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFInt32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFInt32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFInt32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFInt32 self) -> SoType"""
        return _coin.SoSFInt32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFInt32 self, SoField field)"""
        return _coin.SoSFInt32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFInt32 self, SoField field) -> SbBool"""
        return _coin.SoSFInt32_isSame(self, field)


    def getValue(self) -> "int32_t":
        """getValue(SoSFInt32 self) -> int32_t"""
        return _coin.SoSFInt32_getValue(self)


    def __eq__(self, field: 'SoSFInt32') -> "int":
        """__eq__(SoSFInt32 self, SoSFInt32 field) -> int"""
        return _coin.SoSFInt32___eq__(self, field)


    def __ne__(self, field: 'SoSFInt32') -> "int":
        """__ne__(SoSFInt32 self, SoSFInt32 field) -> int"""
        return _coin.SoSFInt32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFInt32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFInt32 self, int32_t newvalue)
        setValue(SoSFInt32 self, SoSFInt32 other)
        """
        return _coin.SoSFInt32_setValue(self, *args)

SoSFInt32_swigregister = _coin.SoSFInt32_swigregister
SoSFInt32_swigregister(SoSFInt32)

def SoSFInt32_createInstance() -> "void *":
    """SoSFInt32_createInstance() -> void *"""
    return _coin.SoSFInt32_createInstance()

def SoSFInt32_getClassTypeId() -> "SoType":
    """SoSFInt32_getClassTypeId() -> SoType"""
    return _coin.SoSFInt32_getClassTypeId()

def SoSFInt32_initClass() -> "void":
    """SoSFInt32_initClass()"""
    return _coin.SoSFInt32_initClass()

class SoDrawStyle(SoNode):
    """Proxy of C++ SoDrawStyle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDrawStyle_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDrawStyle self) -> SoType"""
        return _coin.SoDrawStyle_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDrawStyle_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDrawStyle self) -> SoDrawStyle"""
        this = _coin.new_SoDrawStyle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    FILLED = _coin.SoDrawStyle_FILLED
    LINES = _coin.SoDrawStyle_LINES
    POINTS = _coin.SoDrawStyle_POINTS
    INVISIBLE = _coin.SoDrawStyle_INVISIBLE
    style = _swig_property(_coin.SoDrawStyle_style_get, _coin.SoDrawStyle_style_set)
    pointSize = _swig_property(_coin.SoDrawStyle_pointSize_get, _coin.SoDrawStyle_pointSize_set)
    lineWidth = _swig_property(_coin.SoDrawStyle_lineWidth_get, _coin.SoDrawStyle_lineWidth_set)
    linePattern = _swig_property(_coin.SoDrawStyle_linePattern_get, _coin.SoDrawStyle_linePattern_set)
    linePatternScaleFactor = _swig_property(_coin.SoDrawStyle_linePatternScaleFactor_get, _coin.SoDrawStyle_linePatternScaleFactor_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoDrawStyle self, SoAction action)"""
        return _coin.SoDrawStyle_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoDrawStyle self, SoGLRenderAction action)"""
        return _coin.SoDrawStyle_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoDrawStyle self, SoCallbackAction action)"""
        return _coin.SoDrawStyle_callback(self, action)

SoDrawStyle_swigregister = _coin.SoDrawStyle_swigregister
SoDrawStyle_swigregister(SoDrawStyle)

def SoDrawStyle_getClassTypeId() -> "SoType":
    """SoDrawStyle_getClassTypeId() -> SoType"""
    return _coin.SoDrawStyle_getClassTypeId()

def SoDrawStyle_initClass() -> "void":
    """SoDrawStyle_initClass()"""
    return _coin.SoDrawStyle_initClass()

class SbByteBuffer(object):
    """Proxy of C++ SbByteBuffer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbByteBuffer self, char const * buffer) -> SbByteBuffer
        __init__(SbByteBuffer self, SbByteBuffer buffer) -> SbByteBuffer
        __init__(SbByteBuffer self, size_t size=0, char const * buffer=None) -> SbByteBuffer
        __init__(SbByteBuffer self, size_t size=0) -> SbByteBuffer
        __init__(SbByteBuffer self) -> SbByteBuffer
        __init__(SbByteBuffer self, size_t size, unsigned char const * buffer) -> SbByteBuffer
        """
        this = _coin.new_SbByteBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbByteBuffer
    __del__ = lambda self: None

    def isValid(self) -> "SbBool":
        """isValid(SbByteBuffer self) -> SbBool"""
        return _coin.SbByteBuffer_isValid(self)


    def size(self) -> "size_t":
        """size(SbByteBuffer self) -> size_t"""
        return _coin.SbByteBuffer_size(self)


    def empty(self) -> "SbBool":
        """empty(SbByteBuffer self) -> SbBool"""
        return _coin.SbByteBuffer_empty(self)


    def __eq__(self, that: 'SbByteBuffer') -> "SbBool":
        """__eq__(SbByteBuffer self, SbByteBuffer that) -> SbBool"""
        return _coin.SbByteBuffer___eq__(self, that)


    def __iadd__(self, buf: 'SbByteBuffer') -> "SbByteBuffer &":
        """__iadd__(SbByteBuffer self, SbByteBuffer buf) -> SbByteBuffer"""
        return _coin.SbByteBuffer___iadd__(self, buf)


    def push(self, buf: 'SbByteBuffer') -> "void":
        """push(SbByteBuffer self, SbByteBuffer buf)"""
        return _coin.SbByteBuffer_push(self, buf)


    def constData(self) -> "char const *":
        """constData(SbByteBuffer self) -> char const *"""
        return _coin.SbByteBuffer_constData(self)


    def data(self) -> "char *":
        """data(SbByteBuffer self) -> char *"""
        return _coin.SbByteBuffer_data(self)


    def invalidBuffer() -> "SbByteBuffer &":
        """invalidBuffer() -> SbByteBuffer"""
        return _coin.SbByteBuffer_invalidBuffer()

    invalidBuffer = staticmethod(invalidBuffer)

    def makeUnique(self) -> "void":
        """makeUnique(SbByteBuffer self)"""
        return _coin.SbByteBuffer_makeUnique(self)

SbByteBuffer_swigregister = _coin.SbByteBuffer_swigregister
SbByteBuffer_swigregister(SbByteBuffer)

def SbByteBuffer_invalidBuffer() -> "SbByteBuffer &":
    """SbByteBuffer_invalidBuffer() -> SbByteBuffer"""
    return _coin.SbByteBuffer_invalidBuffer()

class SbVec3f(object):
    """Proxy of C++ SbVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec3f self) -> SbVec3f
        __init__(SbVec3f self, float const [3] v) -> SbVec3f
        __init__(SbVec3f self, float x, float y, float z) -> SbVec3f
        __init__(SbVec3f self, SbVec3d v) -> SbVec3f
        __init__(SbVec3f self, SbVec3b v) -> SbVec3f
        __init__(SbVec3f self, SbVec3s v) -> SbVec3f
        __init__(SbVec3f self, SbVec3i32 v) -> SbVec3f
        __init__(SbVec3f self, SbPlane p0, SbPlane p1, SbPlane p2) -> SbVec3f
        """
        this = _coin.new_SbVec3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec3f &":
        """
        setValue(SbVec3f self, float const [3] v) -> SbVec3f
        setValue(SbVec3f self, float x, float y, float z) -> SbVec3f
        setValue(SbVec3f self, SbVec3f barycentric, SbVec3f v0, SbVec3f v1, SbVec3f v2) -> SbVec3f
        setValue(SbVec3f self, SbVec3d v) -> SbVec3f
        setValue(SbVec3f self, SbVec3b v) -> SbVec3f
        setValue(SbVec3f self, SbVec3s v) -> SbVec3f
        setValue(SbVec3f self, SbVec3i32 v) -> SbVec3f
        """
        return _coin.SbVec3f_setValue(self, *args)


    def getValue(self) -> "float const *":
        """getValue(SbVec3f self) -> float const *"""
        return _coin.SbVec3f_getValue(self)


    def equals(self, v: 'SbVec3f', tolerance: 'float') -> "SbBool":
        """equals(SbVec3f self, SbVec3f v, float tolerance) -> SbBool"""
        return _coin.SbVec3f_equals(self, v, tolerance)


    def cross(self, v: 'SbVec3f') -> "SbVec3f":
        """cross(SbVec3f self, SbVec3f v) -> SbVec3f"""
        return _coin.SbVec3f_cross(self, v)


    def dot(self, v: 'SbVec3f') -> "float":
        """dot(SbVec3f self, SbVec3f v) -> float"""
        return _coin.SbVec3f_dot(self, v)


    def getClosestAxis(self) -> "SbVec3f":
        """getClosestAxis(SbVec3f self) -> SbVec3f"""
        return _coin.SbVec3f_getClosestAxis(self)


    def length(self) -> "float":
        """length(SbVec3f self) -> float"""
        return _coin.SbVec3f_length(self)


    def sqrLength(self) -> "float":
        """sqrLength(SbVec3f self) -> float"""
        return _coin.SbVec3f_sqrLength(self)


    def normalize(self) -> "float":
        """normalize(SbVec3f self) -> float"""
        return _coin.SbVec3f_normalize(self)


    def negate(self) -> "void":
        """negate(SbVec3f self)"""
        return _coin.SbVec3f_negate(self)


    def __imul__(self, d: 'float') -> "SbVec3f &":
        """__imul__(SbVec3f self, float d) -> SbVec3f"""
        return _coin.SbVec3f___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec3f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec3f') -> "SbVec3f &":
        """__iadd__(SbVec3f self, SbVec3f v) -> SbVec3f"""
        return _coin.SbVec3f___iadd__(self, v)


    def __isub__(self, v: 'SbVec3f') -> "SbVec3f &":
        """__isub__(SbVec3f self, SbVec3f v) -> SbVec3f"""
        return _coin.SbVec3f___isub__(self, v)


    def __neg__(self) -> "SbVec3f":
        """__neg__(SbVec3f self) -> SbVec3f"""
        return _coin.SbVec3f___neg__(self)


    def toString(self) -> "SbString":
        """toString(SbVec3f self) -> SbString"""
        return _coin.SbVec3f_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbVec3f self, SbString str) -> SbBool"""
        return _coin.SbVec3f_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec3f self, FILE * fp)"""
        return _coin.SbVec3f_output(self, fp)


    def __add__(self, u: 'SbVec3f') -> "SbVec3f":
        """__add__(SbVec3f self, SbVec3f u) -> SbVec3f"""
        return _coin.SbVec3f___add__(self, u)


    def __sub__(self, u: 'SbVec3f') -> "SbVec3f":
        """__sub__(SbVec3f self, SbVec3f u) -> SbVec3f"""
        return _coin.SbVec3f___sub__(self, u)


    def __mul__(self, *args) -> "SbVec3f":
        """
        __mul__(SbVec3f self, float const d) -> SbVec3f
        __mul__(SbVec3f self, SbMatrix m) -> SbVec3f
        """
        return _coin.SbVec3f___mul__(self, *args)


    def __rmul__(self, d: 'float const') -> "SbVec3f":
        """__rmul__(SbVec3f self, float const d) -> SbVec3f"""
        return _coin.SbVec3f___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbVec3f":
        """__div__(SbVec3f self, float const d) -> SbVec3f"""
        return _coin.SbVec3f___div__(self, d)


    def __truediv__(self, d: 'float const') -> "SbVec3f":
        """__truediv__(SbVec3f self, float const d) -> SbVec3f"""
        return _coin.SbVec3f___truediv__(self, d)


    def __eq__(self, u: 'SbVec3f') -> "int":
        """__eq__(SbVec3f self, SbVec3f u) -> int"""
        return _coin.SbVec3f___eq__(self, u)


    def __nq__(self, u: 'SbVec3f') -> "int":
        """__nq__(SbVec3f self, SbVec3f u) -> int"""
        return _coin.SbVec3f___nq__(self, u)


    def __getitem__(self, i: 'int') -> "float":
        """__getitem__(SbVec3f self, int i) -> float"""
        return _coin.SbVec3f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'float') -> "void":
        """__setitem__(SbVec3f self, int i, float value)"""
        return _coin.SbVec3f___setitem__(self, i, value)


    def __iter__(self):
       for i in range(3):
          yield self[i]

    def __len__(self):
          return 3

    __swig_destroy__ = _coin.delete_SbVec3f
    __del__ = lambda self: None
SbVec3f_swigregister = _coin.SbVec3f_swigregister
SbVec3f_swigregister(SbVec3f)

class SbColor(SbVec3f):
    """Proxy of C++ SbColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbColor self) -> SbColor
        __init__(SbColor self, SbVec3f v) -> SbColor
        __init__(SbColor self, float const *const rgb) -> SbColor
        __init__(SbColor self, float const r, float const g, float const b) -> SbColor
        """
        this = _coin.new_SbColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setHSVValue(self, *args) -> "SbColor &":
        """
        setHSVValue(SbColor self, float h, float s, float v) -> SbColor
        setHSVValue(SbColor self, float const [3] hsv) -> SbColor
        """
        return _coin.SbColor_setHSVValue(self, *args)


    def getHSVValue(self) -> "void":
        """getHSVValue(SbColor self)"""
        return _coin.SbColor_getHSVValue(self)


    def setPackedValue(self, rgba: 'uint32_t const', transparency: 'float &') -> "SbColor &":
        """setPackedValue(SbColor self, uint32_t const rgba, float & transparency) -> SbColor"""
        return _coin.SbColor_setPackedValue(self, rgba, transparency)


    def getPackedValue(self, transparency: 'float const'=0.0) -> "uint32_t":
        """
        getPackedValue(SbColor self, float const transparency=0.0) -> uint32_t
        getPackedValue(SbColor self) -> uint32_t
        """
        return _coin.SbColor_getPackedValue(self, transparency)


    def __add__(self, u: 'SbColor') -> "SbColor":
        """__add__(SbColor self, SbColor u) -> SbColor"""
        return _coin.SbColor___add__(self, u)


    def __sub__(self, u: 'SbColor') -> "SbColor":
        """__sub__(SbColor self, SbColor u) -> SbColor"""
        return _coin.SbColor___sub__(self, u)


    def __mul__(self, d: 'float const') -> "SbColor":
        """__mul__(SbColor self, float const d) -> SbColor"""
        return _coin.SbColor___mul__(self, d)


    def __rmul__(self, d: 'float const') -> "SbColor":
        """__rmul__(SbColor self, float const d) -> SbColor"""
        return _coin.SbColor___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbColor":
        """__div__(SbColor self, float const d) -> SbColor"""
        return _coin.SbColor___div__(self, d)


    def __eq__(self, u: 'SbColor') -> "int":
        """__eq__(SbColor self, SbColor u) -> int"""
        return _coin.SbColor___eq__(self, u)


    def __nq__(self, u: 'SbColor') -> "int":
        """__nq__(SbColor self, SbColor u) -> int"""
        return _coin.SbColor___nq__(self, u)


    def __getitem__(self, i: 'int') -> "float":
        """__getitem__(SbColor self, int i) -> float"""
        return _coin.SbColor___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'float') -> "void":
        """__setitem__(SbColor self, int i, float value)"""
        return _coin.SbColor___setitem__(self, i, value)

    __swig_destroy__ = _coin.delete_SbColor
    __del__ = lambda self: None
SbColor_swigregister = _coin.SbColor_swigregister
SbColor_swigregister(SbColor)

SO_LAZY_SHINY_THRESHOLD = _coin.SO_LAZY_SHINY_THRESHOLD
class SoLazyElement(SoElement):
    """Proxy of C++ SoLazyElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLazyElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLazyElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLazyElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLazyElement_initClass()

    initClass = staticmethod(initClass)
    LIGHT_MODEL_CASE = _coin.SoLazyElement_LIGHT_MODEL_CASE
    COLOR_MATERIAL_CASE = _coin.SoLazyElement_COLOR_MATERIAL_CASE
    DIFFUSE_CASE = _coin.SoLazyElement_DIFFUSE_CASE
    AMBIENT_CASE = _coin.SoLazyElement_AMBIENT_CASE
    EMISSIVE_CASE = _coin.SoLazyElement_EMISSIVE_CASE
    SPECULAR_CASE = _coin.SoLazyElement_SPECULAR_CASE
    SHININESS_CASE = _coin.SoLazyElement_SHININESS_CASE
    BLENDING_CASE = _coin.SoLazyElement_BLENDING_CASE
    TRANSPARENCY_CASE = _coin.SoLazyElement_TRANSPARENCY_CASE
    VERTEXORDERING_CASE = _coin.SoLazyElement_VERTEXORDERING_CASE
    TWOSIDE_CASE = _coin.SoLazyElement_TWOSIDE_CASE
    CULLING_CASE = _coin.SoLazyElement_CULLING_CASE
    SHADE_MODEL_CASE = _coin.SoLazyElement_SHADE_MODEL_CASE
    ALPHATEST_CASE = _coin.SoLazyElement_ALPHATEST_CASE
    GLIMAGE_CASE = _coin.SoLazyElement_GLIMAGE_CASE
    LAZYCASES_LAST = _coin.SoLazyElement_LAZYCASES_LAST
    LIGHT_MODEL_MASK = _coin.SoLazyElement_LIGHT_MODEL_MASK
    COLOR_MATERIAL_MASK = _coin.SoLazyElement_COLOR_MATERIAL_MASK
    DIFFUSE_MASK = _coin.SoLazyElement_DIFFUSE_MASK
    AMBIENT_MASK = _coin.SoLazyElement_AMBIENT_MASK
    EMISSIVE_MASK = _coin.SoLazyElement_EMISSIVE_MASK
    SPECULAR_MASK = _coin.SoLazyElement_SPECULAR_MASK
    SHININESS_MASK = _coin.SoLazyElement_SHININESS_MASK
    TRANSPARENCY_MASK = _coin.SoLazyElement_TRANSPARENCY_MASK
    BLENDING_MASK = _coin.SoLazyElement_BLENDING_MASK
    VERTEXORDERING_MASK = _coin.SoLazyElement_VERTEXORDERING_MASK
    TWOSIDE_MASK = _coin.SoLazyElement_TWOSIDE_MASK
    CULLING_MASK = _coin.SoLazyElement_CULLING_MASK
    SHADE_MODEL_MASK = _coin.SoLazyElement_SHADE_MODEL_MASK
    ALPHATEST_MASK = _coin.SoLazyElement_ALPHATEST_MASK
    GLIMAGE_MASK = _coin.SoLazyElement_GLIMAGE_MASK
    ALL_MASK = _coin.SoLazyElement_ALL_MASK
    OTHER_COLOR_MASK = _coin.SoLazyElement_OTHER_COLOR_MASK
    ALL_COLOR_MASK = _coin.SoLazyElement_ALL_COLOR_MASK
    NO_COLOR_MASK = _coin.SoLazyElement_NO_COLOR_MASK
    ALL_BUT_DIFFUSE_MASK = _coin.SoLazyElement_ALL_BUT_DIFFUSE_MASK
    DIFFUSE_ONLY_MASK = _coin.SoLazyElement_DIFFUSE_ONLY_MASK
    BASE_COLOR = _coin.SoLazyElement_BASE_COLOR
    PHONG = _coin.SoLazyElement_PHONG
    CW = _coin.SoLazyElement_CW
    CCW = _coin.SoLazyElement_CCW

    def init(self, state: 'SoState') -> "void":
        """init(SoLazyElement self, SoState state)"""
        return _coin.SoLazyElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoLazyElement self, SoState state)"""
        return _coin.SoLazyElement_push(self, state)


    def matches(self, arg2: 'SoElement') -> "SbBool":
        """matches(SoLazyElement self, SoElement arg2) -> SbBool"""
        return _coin.SoLazyElement_matches(self, arg2)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoLazyElement self) -> SoElement"""
        return _coin.SoLazyElement_copyMatchInfo(self)


    def setToDefault(state: 'SoState') -> "void":
        """setToDefault(SoState state)"""
        return _coin.SoLazyElement_setToDefault(state)

    setToDefault = staticmethod(setToDefault)

    def setDiffuse(state: 'SoState', node: 'SoNode', numcolors: 'int32_t', colors: 'SbColor', packer: 'SoColorPacker') -> "void":
        """setDiffuse(SoState state, SoNode node, int32_t numcolors, SbColor colors, SoColorPacker packer)"""
        return _coin.SoLazyElement_setDiffuse(state, node, numcolors, colors, packer)

    setDiffuse = staticmethod(setDiffuse)

    def setTransparency(state: 'SoState', node: 'SoNode', numvalues: 'int32_t', transparency: 'float const *', packer: 'SoColorPacker') -> "void":
        """setTransparency(SoState state, SoNode node, int32_t numvalues, float const * transparency, SoColorPacker packer)"""
        return _coin.SoLazyElement_setTransparency(state, node, numvalues, transparency, packer)

    setTransparency = staticmethod(setTransparency)

    def setColorIndices(state: 'SoState', node: 'SoNode', numindices: 'int32_t', indices: 'int32_t const *') -> "void":
        """setColorIndices(SoState state, SoNode node, int32_t numindices, int32_t const * indices)"""
        return _coin.SoLazyElement_setColorIndices(state, node, numindices, indices)

    setColorIndices = staticmethod(setColorIndices)

    def setAmbient(state: 'SoState', color: 'SbColor') -> "void":
        """setAmbient(SoState state, SbColor color)"""
        return _coin.SoLazyElement_setAmbient(state, color)

    setAmbient = staticmethod(setAmbient)

    def setEmissive(state: 'SoState', color: 'SbColor') -> "void":
        """setEmissive(SoState state, SbColor color)"""
        return _coin.SoLazyElement_setEmissive(state, color)

    setEmissive = staticmethod(setEmissive)

    def setSpecular(state: 'SoState', color: 'SbColor') -> "void":
        """setSpecular(SoState state, SbColor color)"""
        return _coin.SoLazyElement_setSpecular(state, color)

    setSpecular = staticmethod(setSpecular)

    def setShininess(state: 'SoState', value: 'float') -> "void":
        """setShininess(SoState state, float value)"""
        return _coin.SoLazyElement_setShininess(state, value)

    setShininess = staticmethod(setShininess)

    def setColorMaterial(state: 'SoState', value: 'SbBool') -> "void":
        """setColorMaterial(SoState state, SbBool value)"""
        return _coin.SoLazyElement_setColorMaterial(state, value)

    setColorMaterial = staticmethod(setColorMaterial)

    def enableBlending(state: 'SoState', sfactor: 'int', dfactor: 'int') -> "void":
        """enableBlending(SoState state, int sfactor, int dfactor)"""
        return _coin.SoLazyElement_enableBlending(state, sfactor, dfactor)

    enableBlending = staticmethod(enableBlending)

    def enableSeparateBlending(state: 'SoState', sfactor: 'int', dfactor: 'int', alpha_sfactor: 'int', alpha_dfactor: 'int') -> "void":
        """enableSeparateBlending(SoState state, int sfactor, int dfactor, int alpha_sfactor, int alpha_dfactor)"""
        return _coin.SoLazyElement_enableSeparateBlending(state, sfactor, dfactor, alpha_sfactor, alpha_dfactor)

    enableSeparateBlending = staticmethod(enableSeparateBlending)

    def disableBlending(state: 'SoState') -> "void":
        """disableBlending(SoState state)"""
        return _coin.SoLazyElement_disableBlending(state)

    disableBlending = staticmethod(disableBlending)

    def setLightModel(state: 'SoState', model: 'int32_t const') -> "void":
        """setLightModel(SoState state, int32_t const model)"""
        return _coin.SoLazyElement_setLightModel(state, model)

    setLightModel = staticmethod(setLightModel)

    def setVertexOrdering(state: 'SoState', ordering: 'SoLazyElement::VertexOrdering') -> "void":
        """setVertexOrdering(SoState state, SoLazyElement::VertexOrdering ordering)"""
        return _coin.SoLazyElement_setVertexOrdering(state, ordering)

    setVertexOrdering = staticmethod(setVertexOrdering)

    def setBackfaceCulling(state: 'SoState', onoff: 'SbBool') -> "void":
        """setBackfaceCulling(SoState state, SbBool onoff)"""
        return _coin.SoLazyElement_setBackfaceCulling(state, onoff)

    setBackfaceCulling = staticmethod(setBackfaceCulling)

    def setTwosideLighting(state: 'SoState', onoff: 'SbBool') -> "void":
        """setTwosideLighting(SoState state, SbBool onoff)"""
        return _coin.SoLazyElement_setTwosideLighting(state, onoff)

    setTwosideLighting = staticmethod(setTwosideLighting)

    def setShadeModel(state: 'SoState', flatshading: 'SbBool') -> "void":
        """setShadeModel(SoState state, SbBool flatshading)"""
        return _coin.SoLazyElement_setShadeModel(state, flatshading)

    setShadeModel = staticmethod(setShadeModel)

    def setAlphaTest(state: 'SoState', func: 'int', value: 'float') -> "void":
        """setAlphaTest(SoState state, int func, float value)"""
        return _coin.SoLazyElement_setAlphaTest(state, func, value)

    setAlphaTest = staticmethod(setAlphaTest)

    def getDiffuse(state: 'SoState', index: 'int') -> "SbColor const &":
        """getDiffuse(SoState state, int index) -> SbColor"""
        return _coin.SoLazyElement_getDiffuse(state, index)

    getDiffuse = staticmethod(getDiffuse)

    def getTransparency(arg1: 'SoState', index: 'int') -> "float":
        """getTransparency(SoState arg1, int index) -> float"""
        return _coin.SoLazyElement_getTransparency(arg1, index)

    getTransparency = staticmethod(getTransparency)

    def getPackedColors(arg1: 'SoState') -> "uint32_t const *":
        """getPackedColors(SoState arg1) -> uint32_t const *"""
        return _coin.SoLazyElement_getPackedColors(arg1)

    getPackedColors = staticmethod(getPackedColors)

    def getColorIndices(arg1: 'SoState') -> "int32_t const *":
        """getColorIndices(SoState arg1) -> int32_t const *"""
        return _coin.SoLazyElement_getColorIndices(arg1)

    getColorIndices = staticmethod(getColorIndices)

    def getColorIndex(arg1: 'SoState', num: 'int') -> "int32_t":
        """getColorIndex(SoState arg1, int num) -> int32_t"""
        return _coin.SoLazyElement_getColorIndex(arg1, num)

    getColorIndex = staticmethod(getColorIndex)

    def getAmbient(arg1: 'SoState') -> "SbColor const &":
        """getAmbient(SoState arg1) -> SbColor"""
        return _coin.SoLazyElement_getAmbient(arg1)

    getAmbient = staticmethod(getAmbient)

    def getEmissive(arg1: 'SoState') -> "SbColor const &":
        """getEmissive(SoState arg1) -> SbColor"""
        return _coin.SoLazyElement_getEmissive(arg1)

    getEmissive = staticmethod(getEmissive)

    def getSpecular(arg1: 'SoState') -> "SbColor const &":
        """getSpecular(SoState arg1) -> SbColor"""
        return _coin.SoLazyElement_getSpecular(arg1)

    getSpecular = staticmethod(getSpecular)

    def getShininess(arg1: 'SoState') -> "float":
        """getShininess(SoState arg1) -> float"""
        return _coin.SoLazyElement_getShininess(arg1)

    getShininess = staticmethod(getShininess)

    def getColorMaterial(arg1: 'SoState') -> "SbBool":
        """getColorMaterial(SoState arg1) -> SbBool"""
        return _coin.SoLazyElement_getColorMaterial(arg1)

    getColorMaterial = staticmethod(getColorMaterial)

    def getBlending(arg1: 'SoState', sfactor: 'int &', dfactor: 'int &') -> "SbBool":
        """getBlending(SoState arg1, int & sfactor, int & dfactor) -> SbBool"""
        return _coin.SoLazyElement_getBlending(arg1, sfactor, dfactor)

    getBlending = staticmethod(getBlending)

    def getAlphaBlending(arg1: 'SoState', sfactor: 'int &', dfactor: 'int &') -> "SbBool":
        """getAlphaBlending(SoState arg1, int & sfactor, int & dfactor) -> SbBool"""
        return _coin.SoLazyElement_getAlphaBlending(arg1, sfactor, dfactor)

    getAlphaBlending = staticmethod(getAlphaBlending)

    def getLightModel(arg1: 'SoState') -> "int32_t":
        """getLightModel(SoState arg1) -> int32_t"""
        return _coin.SoLazyElement_getLightModel(arg1)

    getLightModel = staticmethod(getLightModel)

    def getAlphaTest(state: 'SoState', value: 'float &') -> "int":
        """getAlphaTest(SoState state, float & value) -> int"""
        return _coin.SoLazyElement_getAlphaTest(state, value)

    getAlphaTest = staticmethod(getAlphaTest)

    def getTwoSidedLighting(state: 'SoState') -> "SbBool":
        """getTwoSidedLighting(SoState state) -> SbBool"""
        return _coin.SoLazyElement_getTwoSidedLighting(state)

    getTwoSidedLighting = staticmethod(getTwoSidedLighting)

    def getNumDiffuse(self) -> "int32_t":
        """getNumDiffuse(SoLazyElement self) -> int32_t"""
        return _coin.SoLazyElement_getNumDiffuse(self)


    def getNumTransparencies(self) -> "int32_t":
        """getNumTransparencies(SoLazyElement self) -> int32_t"""
        return _coin.SoLazyElement_getNumTransparencies(self)


    def getNumColorIndices(self) -> "int32_t":
        """getNumColorIndices(SoLazyElement self) -> int32_t"""
        return _coin.SoLazyElement_getNumColorIndices(self)


    def isPacked(self) -> "SbBool":
        """isPacked(SoLazyElement self) -> SbBool"""
        return _coin.SoLazyElement_isPacked(self)


    def isTransparent(self) -> "SbBool":
        """isTransparent(SoLazyElement self) -> SbBool"""
        return _coin.SoLazyElement_isTransparent(self)


    def getInstance(state: 'SoState') -> "SoLazyElement *":
        """getInstance(SoState state) -> SoLazyElement"""
        return _coin.SoLazyElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getDefaultAmbientIntensity() -> "float":
        """getDefaultAmbientIntensity() -> float"""
        return _coin.SoLazyElement_getDefaultAmbientIntensity()

    getDefaultAmbientIntensity = staticmethod(getDefaultAmbientIntensity)

    def getDefaultDiffuse() -> "SbColor":
        """getDefaultDiffuse() -> SbColor"""
        return _coin.SoLazyElement_getDefaultDiffuse()

    getDefaultDiffuse = staticmethod(getDefaultDiffuse)

    def getDefaultAmbient() -> "SbColor":
        """getDefaultAmbient() -> SbColor"""
        return _coin.SoLazyElement_getDefaultAmbient()

    getDefaultAmbient = staticmethod(getDefaultAmbient)

    def getDefaultSpecular() -> "SbColor":
        """getDefaultSpecular() -> SbColor"""
        return _coin.SoLazyElement_getDefaultSpecular()

    getDefaultSpecular = staticmethod(getDefaultSpecular)

    def getDefaultEmissive() -> "SbColor":
        """getDefaultEmissive() -> SbColor"""
        return _coin.SoLazyElement_getDefaultEmissive()

    getDefaultEmissive = staticmethod(getDefaultEmissive)

    def getDefaultShininess() -> "float":
        """getDefaultShininess() -> float"""
        return _coin.SoLazyElement_getDefaultShininess()

    getDefaultShininess = staticmethod(getDefaultShininess)

    def getDefaultPacked() -> "uint32_t":
        """getDefaultPacked() -> uint32_t"""
        return _coin.SoLazyElement_getDefaultPacked()

    getDefaultPacked = staticmethod(getDefaultPacked)

    def getDefaultTransparency() -> "float":
        """getDefaultTransparency() -> float"""
        return _coin.SoLazyElement_getDefaultTransparency()

    getDefaultTransparency = staticmethod(getDefaultTransparency)

    def getDefaultLightModel() -> "int32_t":
        """getDefaultLightModel() -> int32_t"""
        return _coin.SoLazyElement_getDefaultLightModel()

    getDefaultLightModel = staticmethod(getDefaultLightModel)

    def getDefaultColorIndex() -> "int32_t":
        """getDefaultColorIndex() -> int32_t"""
        return _coin.SoLazyElement_getDefaultColorIndex()

    getDefaultColorIndex = staticmethod(getDefaultColorIndex)

    def setMaterials(state: 'SoState', node: 'SoNode', bitmask: 'uint32_t', cPacker: 'SoColorPacker', diffuse: 'SbColor', numdiffuse: 'int const', transp: 'float const *', numtransp: 'int const', ambient: 'SbColor', emissive: 'SbColor', specular: 'SbColor', shininess: 'float const', istransparent: 'SbBool const') -> "void":
        """setMaterials(SoState state, SoNode node, uint32_t bitmask, SoColorPacker cPacker, SbColor diffuse, int const numdiffuse, float const * transp, int const numtransp, SbColor ambient, SbColor emissive, SbColor specular, float const shininess, SbBool const istransparent)"""
        return _coin.SoLazyElement_setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)

    setMaterials = staticmethod(setMaterials)

    def getWInstance(state: 'SoState') -> "SoLazyElement *":
        """getWInstance(SoState state) -> SoLazyElement"""
        return _coin.SoLazyElement_getWInstance(state)

    getWInstance = staticmethod(getWInstance)

    def getPackedPointer(self) -> "uint32_t const *":
        """getPackedPointer(SoLazyElement self) -> uint32_t const *"""
        return _coin.SoLazyElement_getPackedPointer(self)


    def getDiffusePointer(self) -> "SbColor const *":
        """getDiffusePointer(SoLazyElement self) -> SbColor"""
        return _coin.SoLazyElement_getDiffusePointer(self)


    def getColorIndexPointer(self) -> "int32_t const *":
        """getColorIndexPointer(SoLazyElement self) -> int32_t const *"""
        return _coin.SoLazyElement_getColorIndexPointer(self)


    def getTransparencyPointer(self) -> "float const *":
        """getTransparencyPointer(SoLazyElement self) -> float const *"""
        return _coin.SoLazyElement_getTransparencyPointer(self)


    def setTransparencyType(state: 'SoState', type: 'int32_t') -> "void":
        """setTransparencyType(SoState state, int32_t type)"""
        return _coin.SoLazyElement_setTransparencyType(state, type)

    setTransparencyType = staticmethod(setTransparencyType)
SoLazyElement_swigregister = _coin.SoLazyElement_swigregister
SoLazyElement_swigregister(SoLazyElement)

def SoLazyElement_getClassTypeId() -> "SoType":
    """SoLazyElement_getClassTypeId() -> SoType"""
    return _coin.SoLazyElement_getClassTypeId()

def SoLazyElement_getClassStackIndex() -> "int":
    """SoLazyElement_getClassStackIndex() -> int"""
    return _coin.SoLazyElement_getClassStackIndex()

def SoLazyElement_createInstance() -> "void *":
    """SoLazyElement_createInstance() -> void *"""
    return _coin.SoLazyElement_createInstance()

def SoLazyElement_initClass() -> "void":
    """SoLazyElement_initClass()"""
    return _coin.SoLazyElement_initClass()

def SoLazyElement_setToDefault(state: 'SoState') -> "void":
    """SoLazyElement_setToDefault(SoState state)"""
    return _coin.SoLazyElement_setToDefault(state)

def SoLazyElement_setDiffuse(state: 'SoState', node: 'SoNode', numcolors: 'int32_t', colors: 'SbColor', packer: 'SoColorPacker') -> "void":
    """SoLazyElement_setDiffuse(SoState state, SoNode node, int32_t numcolors, SbColor colors, SoColorPacker packer)"""
    return _coin.SoLazyElement_setDiffuse(state, node, numcolors, colors, packer)

def SoLazyElement_setTransparency(state: 'SoState', node: 'SoNode', numvalues: 'int32_t', transparency: 'float const *', packer: 'SoColorPacker') -> "void":
    """SoLazyElement_setTransparency(SoState state, SoNode node, int32_t numvalues, float const * transparency, SoColorPacker packer)"""
    return _coin.SoLazyElement_setTransparency(state, node, numvalues, transparency, packer)

def SoLazyElement_setColorIndices(state: 'SoState', node: 'SoNode', numindices: 'int32_t', indices: 'int32_t const *') -> "void":
    """SoLazyElement_setColorIndices(SoState state, SoNode node, int32_t numindices, int32_t const * indices)"""
    return _coin.SoLazyElement_setColorIndices(state, node, numindices, indices)

def SoLazyElement_setAmbient(state: 'SoState', color: 'SbColor') -> "void":
    """SoLazyElement_setAmbient(SoState state, SbColor color)"""
    return _coin.SoLazyElement_setAmbient(state, color)

def SoLazyElement_setEmissive(state: 'SoState', color: 'SbColor') -> "void":
    """SoLazyElement_setEmissive(SoState state, SbColor color)"""
    return _coin.SoLazyElement_setEmissive(state, color)

def SoLazyElement_setSpecular(state: 'SoState', color: 'SbColor') -> "void":
    """SoLazyElement_setSpecular(SoState state, SbColor color)"""
    return _coin.SoLazyElement_setSpecular(state, color)

def SoLazyElement_setShininess(state: 'SoState', value: 'float') -> "void":
    """SoLazyElement_setShininess(SoState state, float value)"""
    return _coin.SoLazyElement_setShininess(state, value)

def SoLazyElement_setColorMaterial(state: 'SoState', value: 'SbBool') -> "void":
    """SoLazyElement_setColorMaterial(SoState state, SbBool value)"""
    return _coin.SoLazyElement_setColorMaterial(state, value)

def SoLazyElement_enableBlending(state: 'SoState', sfactor: 'int', dfactor: 'int') -> "void":
    """SoLazyElement_enableBlending(SoState state, int sfactor, int dfactor)"""
    return _coin.SoLazyElement_enableBlending(state, sfactor, dfactor)

def SoLazyElement_enableSeparateBlending(state: 'SoState', sfactor: 'int', dfactor: 'int', alpha_sfactor: 'int', alpha_dfactor: 'int') -> "void":
    """SoLazyElement_enableSeparateBlending(SoState state, int sfactor, int dfactor, int alpha_sfactor, int alpha_dfactor)"""
    return _coin.SoLazyElement_enableSeparateBlending(state, sfactor, dfactor, alpha_sfactor, alpha_dfactor)

def SoLazyElement_disableBlending(state: 'SoState') -> "void":
    """SoLazyElement_disableBlending(SoState state)"""
    return _coin.SoLazyElement_disableBlending(state)

def SoLazyElement_setLightModel(state: 'SoState', model: 'int32_t const') -> "void":
    """SoLazyElement_setLightModel(SoState state, int32_t const model)"""
    return _coin.SoLazyElement_setLightModel(state, model)

def SoLazyElement_setVertexOrdering(state: 'SoState', ordering: 'SoLazyElement::VertexOrdering') -> "void":
    """SoLazyElement_setVertexOrdering(SoState state, SoLazyElement::VertexOrdering ordering)"""
    return _coin.SoLazyElement_setVertexOrdering(state, ordering)

def SoLazyElement_setBackfaceCulling(state: 'SoState', onoff: 'SbBool') -> "void":
    """SoLazyElement_setBackfaceCulling(SoState state, SbBool onoff)"""
    return _coin.SoLazyElement_setBackfaceCulling(state, onoff)

def SoLazyElement_setTwosideLighting(state: 'SoState', onoff: 'SbBool') -> "void":
    """SoLazyElement_setTwosideLighting(SoState state, SbBool onoff)"""
    return _coin.SoLazyElement_setTwosideLighting(state, onoff)

def SoLazyElement_setShadeModel(state: 'SoState', flatshading: 'SbBool') -> "void":
    """SoLazyElement_setShadeModel(SoState state, SbBool flatshading)"""
    return _coin.SoLazyElement_setShadeModel(state, flatshading)

def SoLazyElement_setAlphaTest(state: 'SoState', func: 'int', value: 'float') -> "void":
    """SoLazyElement_setAlphaTest(SoState state, int func, float value)"""
    return _coin.SoLazyElement_setAlphaTest(state, func, value)

def SoLazyElement_getDiffuse(state: 'SoState', index: 'int') -> "SbColor const &":
    """SoLazyElement_getDiffuse(SoState state, int index) -> SbColor"""
    return _coin.SoLazyElement_getDiffuse(state, index)

def SoLazyElement_getTransparency(arg2: 'SoState', index: 'int') -> "float":
    """SoLazyElement_getTransparency(SoState arg2, int index) -> float"""
    return _coin.SoLazyElement_getTransparency(arg2, index)

def SoLazyElement_getPackedColors(arg2: 'SoState') -> "uint32_t const *":
    """SoLazyElement_getPackedColors(SoState arg2) -> uint32_t const *"""
    return _coin.SoLazyElement_getPackedColors(arg2)

def SoLazyElement_getColorIndices(arg2: 'SoState') -> "int32_t const *":
    """SoLazyElement_getColorIndices(SoState arg2) -> int32_t const *"""
    return _coin.SoLazyElement_getColorIndices(arg2)

def SoLazyElement_getColorIndex(arg2: 'SoState', num: 'int') -> "int32_t":
    """SoLazyElement_getColorIndex(SoState arg2, int num) -> int32_t"""
    return _coin.SoLazyElement_getColorIndex(arg2, num)

def SoLazyElement_getAmbient(arg2: 'SoState') -> "SbColor const &":
    """SoLazyElement_getAmbient(SoState arg2) -> SbColor"""
    return _coin.SoLazyElement_getAmbient(arg2)

def SoLazyElement_getEmissive(arg2: 'SoState') -> "SbColor const &":
    """SoLazyElement_getEmissive(SoState arg2) -> SbColor"""
    return _coin.SoLazyElement_getEmissive(arg2)

def SoLazyElement_getSpecular(arg2: 'SoState') -> "SbColor const &":
    """SoLazyElement_getSpecular(SoState arg2) -> SbColor"""
    return _coin.SoLazyElement_getSpecular(arg2)

def SoLazyElement_getShininess(arg2: 'SoState') -> "float":
    """SoLazyElement_getShininess(SoState arg2) -> float"""
    return _coin.SoLazyElement_getShininess(arg2)

def SoLazyElement_getColorMaterial(arg2: 'SoState') -> "SbBool":
    """SoLazyElement_getColorMaterial(SoState arg2) -> SbBool"""
    return _coin.SoLazyElement_getColorMaterial(arg2)

def SoLazyElement_getBlending(arg2: 'SoState', sfactor: 'int &', dfactor: 'int &') -> "SbBool":
    """SoLazyElement_getBlending(SoState arg2, int & sfactor, int & dfactor) -> SbBool"""
    return _coin.SoLazyElement_getBlending(arg2, sfactor, dfactor)

def SoLazyElement_getAlphaBlending(arg2: 'SoState', sfactor: 'int &', dfactor: 'int &') -> "SbBool":
    """SoLazyElement_getAlphaBlending(SoState arg2, int & sfactor, int & dfactor) -> SbBool"""
    return _coin.SoLazyElement_getAlphaBlending(arg2, sfactor, dfactor)

def SoLazyElement_getLightModel(arg2: 'SoState') -> "int32_t":
    """SoLazyElement_getLightModel(SoState arg2) -> int32_t"""
    return _coin.SoLazyElement_getLightModel(arg2)

def SoLazyElement_getAlphaTest(state: 'SoState', value: 'float &') -> "int":
    """SoLazyElement_getAlphaTest(SoState state, float & value) -> int"""
    return _coin.SoLazyElement_getAlphaTest(state, value)

def SoLazyElement_getTwoSidedLighting(state: 'SoState') -> "SbBool":
    """SoLazyElement_getTwoSidedLighting(SoState state) -> SbBool"""
    return _coin.SoLazyElement_getTwoSidedLighting(state)

def SoLazyElement_getInstance(state: 'SoState') -> "SoLazyElement *":
    """SoLazyElement_getInstance(SoState state) -> SoLazyElement"""
    return _coin.SoLazyElement_getInstance(state)

def SoLazyElement_getDefaultAmbientIntensity() -> "float":
    """SoLazyElement_getDefaultAmbientIntensity() -> float"""
    return _coin.SoLazyElement_getDefaultAmbientIntensity()

def SoLazyElement_getDefaultDiffuse() -> "SbColor":
    """SoLazyElement_getDefaultDiffuse() -> SbColor"""
    return _coin.SoLazyElement_getDefaultDiffuse()

def SoLazyElement_getDefaultAmbient() -> "SbColor":
    """SoLazyElement_getDefaultAmbient() -> SbColor"""
    return _coin.SoLazyElement_getDefaultAmbient()

def SoLazyElement_getDefaultSpecular() -> "SbColor":
    """SoLazyElement_getDefaultSpecular() -> SbColor"""
    return _coin.SoLazyElement_getDefaultSpecular()

def SoLazyElement_getDefaultEmissive() -> "SbColor":
    """SoLazyElement_getDefaultEmissive() -> SbColor"""
    return _coin.SoLazyElement_getDefaultEmissive()

def SoLazyElement_getDefaultShininess() -> "float":
    """SoLazyElement_getDefaultShininess() -> float"""
    return _coin.SoLazyElement_getDefaultShininess()

def SoLazyElement_getDefaultPacked() -> "uint32_t":
    """SoLazyElement_getDefaultPacked() -> uint32_t"""
    return _coin.SoLazyElement_getDefaultPacked()

def SoLazyElement_getDefaultTransparency() -> "float":
    """SoLazyElement_getDefaultTransparency() -> float"""
    return _coin.SoLazyElement_getDefaultTransparency()

def SoLazyElement_getDefaultLightModel() -> "int32_t":
    """SoLazyElement_getDefaultLightModel() -> int32_t"""
    return _coin.SoLazyElement_getDefaultLightModel()

def SoLazyElement_getDefaultColorIndex() -> "int32_t":
    """SoLazyElement_getDefaultColorIndex() -> int32_t"""
    return _coin.SoLazyElement_getDefaultColorIndex()

def SoLazyElement_setMaterials(state: 'SoState', node: 'SoNode', bitmask: 'uint32_t', cPacker: 'SoColorPacker', diffuse: 'SbColor', numdiffuse: 'int const', transp: 'float const *', numtransp: 'int const', ambient: 'SbColor', emissive: 'SbColor', specular: 'SbColor', shininess: 'float const', istransparent: 'SbBool const') -> "void":
    """SoLazyElement_setMaterials(SoState state, SoNode node, uint32_t bitmask, SoColorPacker cPacker, SbColor diffuse, int const numdiffuse, float const * transp, int const numtransp, SbColor ambient, SbColor emissive, SbColor specular, float const shininess, SbBool const istransparent)"""
    return _coin.SoLazyElement_setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)

def SoLazyElement_getWInstance(state: 'SoState') -> "SoLazyElement *":
    """SoLazyElement_getWInstance(SoState state) -> SoLazyElement"""
    return _coin.SoLazyElement_getWInstance(state)

def SoLazyElement_setTransparencyType(state: 'SoState', type: 'int32_t') -> "void":
    """SoLazyElement_setTransparencyType(SoState state, int32_t type)"""
    return _coin.SoLazyElement_setTransparencyType(state, type)

class SoColorPacker(object):
    """Proxy of C++ SoColorPacker class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoColorPacker self) -> SoColorPacker"""
        this = _coin.new_SoColorPacker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoColorPacker
    __del__ = lambda self: None

    def getPackedColors(self) -> "uint32_t *":
        """getPackedColors(SoColorPacker self) -> uint32_t *"""
        return _coin.SoColorPacker_getPackedColors(self)


    def diffuseMatch(self, nodeid: 'SbUniqueId const') -> "SbBool":
        """diffuseMatch(SoColorPacker self, SbUniqueId const nodeid) -> SbBool"""
        return _coin.SoColorPacker_diffuseMatch(self, nodeid)


    def transpMatch(self, nodeid: 'SbUniqueId const') -> "SbBool":
        """transpMatch(SoColorPacker self, SbUniqueId const nodeid) -> SbBool"""
        return _coin.SoColorPacker_transpMatch(self, nodeid)


    def setNodeIds(self, diffuse: 'SbUniqueId const', transp: 'SbUniqueId const') -> "void":
        """setNodeIds(SoColorPacker self, SbUniqueId const diffuse, SbUniqueId const transp)"""
        return _coin.SoColorPacker_setNodeIds(self, diffuse, transp)


    def getSize(self) -> "int32_t":
        """getSize(SoColorPacker self) -> int32_t"""
        return _coin.SoColorPacker_getSize(self)


    def reallocate(self, size: 'int32_t const') -> "void":
        """reallocate(SoColorPacker self, int32_t const size)"""
        return _coin.SoColorPacker_reallocate(self, size)


    def getDiffuseId(self) -> "SbUniqueId":
        """getDiffuseId(SoColorPacker self) -> SbUniqueId"""
        return _coin.SoColorPacker_getDiffuseId(self)


    def getTranspId(self) -> "SbUniqueId":
        """getTranspId(SoColorPacker self) -> SbUniqueId"""
        return _coin.SoColorPacker_getTranspId(self)

SoColorPacker_swigregister = _coin.SoColorPacker_swigregister
SoColorPacker_swigregister(SoColorPacker)

class SoLightModel(SoNode):
    """Proxy of C++ SoLightModel class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLightModel_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLightModel self) -> SoType"""
        return _coin.SoLightModel_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLightModel_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLightModel self) -> SoLightModel"""
        this = _coin.new_SoLightModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    BASE_COLOR = _coin.SoLightModel_BASE_COLOR
    PHONG = _coin.SoLightModel_PHONG
    model = _swig_property(_coin.SoLightModel_model_get, _coin.SoLightModel_model_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoLightModel self, SoAction action)"""
        return _coin.SoLightModel_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoLightModel self, SoGLRenderAction action)"""
        return _coin.SoLightModel_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoLightModel self, SoCallbackAction action)"""
        return _coin.SoLightModel_callback(self, action)

SoLightModel_swigregister = _coin.SoLightModel_swigregister
SoLightModel_swigregister(SoLightModel)

def SoLightModel_getClassTypeId() -> "SoType":
    """SoLightModel_getClassTypeId() -> SoType"""
    return _coin.SoLightModel_getClassTypeId()

def SoLightModel_initClass() -> "void":
    """SoLightModel_initClass()"""
    return _coin.SoLightModel_initClass()

class SoMaterialBindingElement(SoInt32Element):
    """Proxy of C++ SoMaterialBindingElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMaterialBindingElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoMaterialBindingElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMaterialBindingElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMaterialBindingElement_initClass()

    initClass = staticmethod(initClass)
    OVERALL = _coin.SoMaterialBindingElement_OVERALL
    PER_PART = _coin.SoMaterialBindingElement_PER_PART
    PER_PART_INDEXED = _coin.SoMaterialBindingElement_PER_PART_INDEXED
    PER_FACE = _coin.SoMaterialBindingElement_PER_FACE
    PER_FACE_INDEXED = _coin.SoMaterialBindingElement_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoMaterialBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoMaterialBindingElement_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoMaterialBindingElement_DEFAULT
    NONE = _coin.SoMaterialBindingElement_NONE

    def init(self, state: 'SoState') -> "void":
        """init(SoMaterialBindingElement self, SoState state)"""
        return _coin.SoMaterialBindingElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoMaterialBindingElement::Binding const binding)
        set(SoState state, SoMaterialBindingElement::Binding const binding)
        """
        return _coin.SoMaterialBindingElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoMaterialBindingElement::Binding":
        """get(SoState state) -> SoMaterialBindingElement::Binding"""
        return _coin.SoMaterialBindingElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoMaterialBindingElement::Binding":
        """getDefault() -> SoMaterialBindingElement::Binding"""
        return _coin.SoMaterialBindingElement_getDefault()

    getDefault = staticmethod(getDefault)
SoMaterialBindingElement_swigregister = _coin.SoMaterialBindingElement_swigregister
SoMaterialBindingElement_swigregister(SoMaterialBindingElement)

def SoMaterialBindingElement_getClassTypeId() -> "SoType":
    """SoMaterialBindingElement_getClassTypeId() -> SoType"""
    return _coin.SoMaterialBindingElement_getClassTypeId()

def SoMaterialBindingElement_getClassStackIndex() -> "int":
    """SoMaterialBindingElement_getClassStackIndex() -> int"""
    return _coin.SoMaterialBindingElement_getClassStackIndex()

def SoMaterialBindingElement_createInstance() -> "void *":
    """SoMaterialBindingElement_createInstance() -> void *"""
    return _coin.SoMaterialBindingElement_createInstance()

def SoMaterialBindingElement_initClass() -> "void":
    """SoMaterialBindingElement_initClass()"""
    return _coin.SoMaterialBindingElement_initClass()

def SoMaterialBindingElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoMaterialBindingElement::Binding const binding)
    SoMaterialBindingElement_set(SoState state, SoMaterialBindingElement::Binding const binding)
    """
    return _coin.SoMaterialBindingElement_set(*args)

def SoMaterialBindingElement_get(state: 'SoState') -> "SoMaterialBindingElement::Binding":
    """SoMaterialBindingElement_get(SoState state) -> SoMaterialBindingElement::Binding"""
    return _coin.SoMaterialBindingElement_get(state)

def SoMaterialBindingElement_getDefault() -> "SoMaterialBindingElement::Binding":
    """SoMaterialBindingElement_getDefault() -> SoMaterialBindingElement::Binding"""
    return _coin.SoMaterialBindingElement_getDefault()

class SoMaterialBinding(SoNode):
    """Proxy of C++ SoMaterialBinding class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMaterialBinding_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMaterialBinding self) -> SoType"""
        return _coin.SoMaterialBinding_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMaterialBinding_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMaterialBinding self) -> SoMaterialBinding"""
        this = _coin.new_SoMaterialBinding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OVERALL = _coin.SoMaterialBinding_OVERALL
    PER_PART = _coin.SoMaterialBinding_PER_PART
    PER_PART_INDEXED = _coin.SoMaterialBinding_PER_PART_INDEXED
    PER_FACE = _coin.SoMaterialBinding_PER_FACE
    PER_FACE_INDEXED = _coin.SoMaterialBinding_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoMaterialBinding_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoMaterialBinding_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoMaterialBinding_DEFAULT
    NONE = _coin.SoMaterialBinding_NONE
    value = _swig_property(_coin.SoMaterialBinding_value_get, _coin.SoMaterialBinding_value_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoMaterialBinding self, SoAction action)"""
        return _coin.SoMaterialBinding_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoMaterialBinding self, SoGLRenderAction action)"""
        return _coin.SoMaterialBinding_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoMaterialBinding self, SoCallbackAction action)"""
        return _coin.SoMaterialBinding_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoMaterialBinding self, SoPickAction action)"""
        return _coin.SoMaterialBinding_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoMaterialBinding self, SoGetPrimitiveCountAction action)"""
        return _coin.SoMaterialBinding_getPrimitiveCount(self, action)

SoMaterialBinding_swigregister = _coin.SoMaterialBinding_swigregister
SoMaterialBinding_swigregister(SoMaterialBinding)

def SoMaterialBinding_getClassTypeId() -> "SoType":
    """SoMaterialBinding_getClassTypeId() -> SoType"""
    return _coin.SoMaterialBinding_getClassTypeId()

def SoMaterialBinding_initClass() -> "void":
    """SoMaterialBinding_initClass()"""
    return _coin.SoMaterialBinding_initClass()

class SoNormalBindingElement(SoInt32Element):
    """Proxy of C++ SoNormalBindingElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNormalBindingElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoNormalBindingElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoNormalBindingElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNormalBindingElement_initClass()

    initClass = staticmethod(initClass)
    OVERALL = _coin.SoNormalBindingElement_OVERALL
    PER_PART = _coin.SoNormalBindingElement_PER_PART
    PER_PART_INDEXED = _coin.SoNormalBindingElement_PER_PART_INDEXED
    PER_FACE = _coin.SoNormalBindingElement_PER_FACE
    PER_FACE_INDEXED = _coin.SoNormalBindingElement_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoNormalBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoNormalBindingElement_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoNormalBindingElement_DEFAULT
    NONE = _coin.SoNormalBindingElement_NONE

    def init(self, state: 'SoState') -> "void":
        """init(SoNormalBindingElement self, SoState state)"""
        return _coin.SoNormalBindingElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoNormalBindingElement::Binding const binding)
        set(SoState state, SoNormalBindingElement::Binding const binding)
        """
        return _coin.SoNormalBindingElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoNormalBindingElement::Binding":
        """get(SoState state) -> SoNormalBindingElement::Binding"""
        return _coin.SoNormalBindingElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoNormalBindingElement::Binding":
        """getDefault() -> SoNormalBindingElement::Binding"""
        return _coin.SoNormalBindingElement_getDefault()

    getDefault = staticmethod(getDefault)
SoNormalBindingElement_swigregister = _coin.SoNormalBindingElement_swigregister
SoNormalBindingElement_swigregister(SoNormalBindingElement)

def SoNormalBindingElement_getClassTypeId() -> "SoType":
    """SoNormalBindingElement_getClassTypeId() -> SoType"""
    return _coin.SoNormalBindingElement_getClassTypeId()

def SoNormalBindingElement_getClassStackIndex() -> "int":
    """SoNormalBindingElement_getClassStackIndex() -> int"""
    return _coin.SoNormalBindingElement_getClassStackIndex()

def SoNormalBindingElement_createInstance() -> "void *":
    """SoNormalBindingElement_createInstance() -> void *"""
    return _coin.SoNormalBindingElement_createInstance()

def SoNormalBindingElement_initClass() -> "void":
    """SoNormalBindingElement_initClass()"""
    return _coin.SoNormalBindingElement_initClass()

def SoNormalBindingElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoNormalBindingElement::Binding const binding)
    SoNormalBindingElement_set(SoState state, SoNormalBindingElement::Binding const binding)
    """
    return _coin.SoNormalBindingElement_set(*args)

def SoNormalBindingElement_get(state: 'SoState') -> "SoNormalBindingElement::Binding":
    """SoNormalBindingElement_get(SoState state) -> SoNormalBindingElement::Binding"""
    return _coin.SoNormalBindingElement_get(state)

def SoNormalBindingElement_getDefault() -> "SoNormalBindingElement::Binding":
    """SoNormalBindingElement_getDefault() -> SoNormalBindingElement::Binding"""
    return _coin.SoNormalBindingElement_getDefault()

class SoNormalBinding(SoNode):
    """Proxy of C++ SoNormalBinding class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNormalBinding_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNormalBinding self) -> SoType"""
        return _coin.SoNormalBinding_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNormalBinding_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNormalBinding self) -> SoNormalBinding"""
        this = _coin.new_SoNormalBinding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OVERALL = _coin.SoNormalBinding_OVERALL
    PER_PART = _coin.SoNormalBinding_PER_PART
    PER_PART_INDEXED = _coin.SoNormalBinding_PER_PART_INDEXED
    PER_FACE = _coin.SoNormalBinding_PER_FACE
    PER_FACE_INDEXED = _coin.SoNormalBinding_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoNormalBinding_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoNormalBinding_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoNormalBinding_DEFAULT
    NONE = _coin.SoNormalBinding_NONE
    value = _swig_property(_coin.SoNormalBinding_value_get, _coin.SoNormalBinding_value_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoNormalBinding self, SoAction action)"""
        return _coin.SoNormalBinding_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNormalBinding self, SoGLRenderAction action)"""
        return _coin.SoNormalBinding_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoNormalBinding self, SoCallbackAction action)"""
        return _coin.SoNormalBinding_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoNormalBinding self, SoPickAction action)"""
        return _coin.SoNormalBinding_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNormalBinding self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNormalBinding_getPrimitiveCount(self, action)

SoNormalBinding_swigregister = _coin.SoNormalBinding_swigregister
SoNormalBinding_swigregister(SoNormalBinding)

def SoNormalBinding_getClassTypeId() -> "SoType":
    """SoNormalBinding_getClassTypeId() -> SoType"""
    return _coin.SoNormalBinding_getClassTypeId()

def SoNormalBinding_initClass() -> "void":
    """SoNormalBinding_initClass()"""
    return _coin.SoNormalBinding_initClass()

class SoPickStyleElement(SoInt32Element):
    """Proxy of C++ SoPickStyleElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPickStyleElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoPickStyleElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoPickStyleElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPickStyleElement_initClass()

    initClass = staticmethod(initClass)
    SHAPE = _coin.SoPickStyleElement_SHAPE
    BOUNDING_BOX = _coin.SoPickStyleElement_BOUNDING_BOX
    UNPICKABLE = _coin.SoPickStyleElement_UNPICKABLE
    SHAPE_ON_TOP = _coin.SoPickStyleElement_SHAPE_ON_TOP
    BOUNDING_BOX_ON_TOP = _coin.SoPickStyleElement_BOUNDING_BOX_ON_TOP
    SHAPE_FRONTFACES = _coin.SoPickStyleElement_SHAPE_FRONTFACES

    def init(self, state: 'SoState') -> "void":
        """init(SoPickStyleElement self, SoState state)"""
        return _coin.SoPickStyleElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int32_t const style)
        set(SoState state, SoPickStyleElement::Style const style)
        """
        return _coin.SoPickStyleElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoPickStyleElement::Style":
        """get(SoState state) -> SoPickStyleElement::Style"""
        return _coin.SoPickStyleElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoPickStyleElement::Style":
        """getDefault() -> SoPickStyleElement::Style"""
        return _coin.SoPickStyleElement_getDefault()

    getDefault = staticmethod(getDefault)
SoPickStyleElement_swigregister = _coin.SoPickStyleElement_swigregister
SoPickStyleElement_swigregister(SoPickStyleElement)

def SoPickStyleElement_getClassTypeId() -> "SoType":
    """SoPickStyleElement_getClassTypeId() -> SoType"""
    return _coin.SoPickStyleElement_getClassTypeId()

def SoPickStyleElement_getClassStackIndex() -> "int":
    """SoPickStyleElement_getClassStackIndex() -> int"""
    return _coin.SoPickStyleElement_getClassStackIndex()

def SoPickStyleElement_createInstance() -> "void *":
    """SoPickStyleElement_createInstance() -> void *"""
    return _coin.SoPickStyleElement_createInstance()

def SoPickStyleElement_initClass() -> "void":
    """SoPickStyleElement_initClass()"""
    return _coin.SoPickStyleElement_initClass()

def SoPickStyleElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int32_t const style)
    SoPickStyleElement_set(SoState state, SoPickStyleElement::Style const style)
    """
    return _coin.SoPickStyleElement_set(*args)

def SoPickStyleElement_get(state: 'SoState') -> "SoPickStyleElement::Style":
    """SoPickStyleElement_get(SoState state) -> SoPickStyleElement::Style"""
    return _coin.SoPickStyleElement_get(state)

def SoPickStyleElement_getDefault() -> "SoPickStyleElement::Style":
    """SoPickStyleElement_getDefault() -> SoPickStyleElement::Style"""
    return _coin.SoPickStyleElement_getDefault()

class SoPickStyle(SoNode):
    """Proxy of C++ SoPickStyle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPickStyle_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPickStyle self) -> SoType"""
        return _coin.SoPickStyle_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPickStyle_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPickStyle self) -> SoPickStyle"""
        this = _coin.new_SoPickStyle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SHAPE = _coin.SoPickStyle_SHAPE
    BOUNDING_BOX = _coin.SoPickStyle_BOUNDING_BOX
    UNPICKABLE = _coin.SoPickStyle_UNPICKABLE
    SHAPE_ON_TOP = _coin.SoPickStyle_SHAPE_ON_TOP
    BOUNDING_BOX_ON_TOP = _coin.SoPickStyle_BOUNDING_BOX_ON_TOP
    SHAPE_FRONTFACES = _coin.SoPickStyle_SHAPE_FRONTFACES
    style = _swig_property(_coin.SoPickStyle_style_get, _coin.SoPickStyle_style_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoPickStyle self, SoAction action)"""
        return _coin.SoPickStyle_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoPickStyle self, SoCallbackAction action)"""
        return _coin.SoPickStyle_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoPickStyle self, SoPickAction action)"""
        return _coin.SoPickStyle_pick(self, action)

SoPickStyle_swigregister = _coin.SoPickStyle_swigregister
SoPickStyle_swigregister(SoPickStyle)

def SoPickStyle_getClassTypeId() -> "SoType":
    """SoPickStyle_getClassTypeId() -> SoType"""
    return _coin.SoPickStyle_getClassTypeId()

def SoPickStyle_initClass() -> "void":
    """SoPickStyle_initClass()"""
    return _coin.SoPickStyle_initClass()

class SoShapeHintsElement(SoElement):
    """Proxy of C++ SoShapeHintsElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShapeHintsElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoShapeHintsElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoShapeHintsElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShapeHintsElement_initClass()

    initClass = staticmethod(initClass)
    UNKNOWN_ORDERING = _coin.SoShapeHintsElement_UNKNOWN_ORDERING
    CLOCKWISE = _coin.SoShapeHintsElement_CLOCKWISE
    COUNTERCLOCKWISE = _coin.SoShapeHintsElement_COUNTERCLOCKWISE
    ORDERING_AS_IS = _coin.SoShapeHintsElement_ORDERING_AS_IS
    UNKNOWN_SHAPE_TYPE = _coin.SoShapeHintsElement_UNKNOWN_SHAPE_TYPE
    SOLID = _coin.SoShapeHintsElement_SOLID
    SHAPE_TYPE_AS_IS = _coin.SoShapeHintsElement_SHAPE_TYPE_AS_IS
    UNKNOWN_FACE_TYPE = _coin.SoShapeHintsElement_UNKNOWN_FACE_TYPE
    CONVEX = _coin.SoShapeHintsElement_CONVEX
    FACE_TYPE_AS_IS = _coin.SoShapeHintsElement_FACE_TYPE_AS_IS

    def init(self, state: 'SoState') -> "void":
        """init(SoShapeHintsElement self, SoState state)"""
        return _coin.SoShapeHintsElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoShapeHintsElement self, SoState state)"""
        return _coin.SoShapeHintsElement_push(self, state)


    def pop(self, state: 'SoState', prevtopelement: 'SoElement') -> "void":
        """pop(SoShapeHintsElement self, SoState state, SoElement prevtopelement)"""
        return _coin.SoShapeHintsElement_pop(self, state, prevtopelement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoShapeHintsElement self, SoElement element) -> SbBool"""
        return _coin.SoShapeHintsElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoShapeHintsElement self) -> SoElement"""
        return _coin.SoShapeHintsElement_copyMatchInfo(self)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoShapeHintsElement::VertexOrdering const vertexOrdering, SoShapeHintsElement::ShapeType const shapeType, SoShapeHintsElement::FaceType const faceType)
        set(SoState state, SoShapeHintsElement::VertexOrdering const vertexOrdering, SoShapeHintsElement::ShapeType const shapeType, SoShapeHintsElement::FaceType const faceType)
        """
        return _coin.SoShapeHintsElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState', vertexOrdering: 'SoShapeHintsElement::VertexOrdering &', shapeType: 'SoShapeHintsElement::ShapeType &', faceType: 'SoShapeHintsElement::FaceType &') -> "void":
        """get(SoState state, SoShapeHintsElement::VertexOrdering & vertexOrdering, SoShapeHintsElement::ShapeType & shapeType, SoShapeHintsElement::FaceType & faceType)"""
        return _coin.SoShapeHintsElement_get(state, vertexOrdering, shapeType, faceType)

    get = staticmethod(get)

    def getVertexOrdering(state: 'SoState') -> "SoShapeHintsElement::VertexOrdering":
        """getVertexOrdering(SoState state) -> SoShapeHintsElement::VertexOrdering"""
        return _coin.SoShapeHintsElement_getVertexOrdering(state)

    getVertexOrdering = staticmethod(getVertexOrdering)

    def getShapeType(state: 'SoState') -> "SoShapeHintsElement::ShapeType":
        """getShapeType(SoState state) -> SoShapeHintsElement::ShapeType"""
        return _coin.SoShapeHintsElement_getShapeType(state)

    getShapeType = staticmethod(getShapeType)

    def getFaceType(state: 'SoState') -> "SoShapeHintsElement::FaceType":
        """getFaceType(SoState state) -> SoShapeHintsElement::FaceType"""
        return _coin.SoShapeHintsElement_getFaceType(state)

    getFaceType = staticmethod(getFaceType)

    def getDefaultVertexOrdering() -> "SoShapeHintsElement::VertexOrdering":
        """getDefaultVertexOrdering() -> SoShapeHintsElement::VertexOrdering"""
        return _coin.SoShapeHintsElement_getDefaultVertexOrdering()

    getDefaultVertexOrdering = staticmethod(getDefaultVertexOrdering)

    def getDefaultShapeType() -> "SoShapeHintsElement::ShapeType":
        """getDefaultShapeType() -> SoShapeHintsElement::ShapeType"""
        return _coin.SoShapeHintsElement_getDefaultShapeType()

    getDefaultShapeType = staticmethod(getDefaultShapeType)

    def getDefaultFaceType() -> "SoShapeHintsElement::FaceType":
        """getDefaultFaceType() -> SoShapeHintsElement::FaceType"""
        return _coin.SoShapeHintsElement_getDefaultFaceType()

    getDefaultFaceType = staticmethod(getDefaultFaceType)

    def output(self, file: 'FILE *') -> "void":
        """output(SoShapeHintsElement self, FILE * file)"""
        return _coin.SoShapeHintsElement_output(self, file)

SoShapeHintsElement_swigregister = _coin.SoShapeHintsElement_swigregister
SoShapeHintsElement_swigregister(SoShapeHintsElement)

def SoShapeHintsElement_getClassTypeId() -> "SoType":
    """SoShapeHintsElement_getClassTypeId() -> SoType"""
    return _coin.SoShapeHintsElement_getClassTypeId()

def SoShapeHintsElement_getClassStackIndex() -> "int":
    """SoShapeHintsElement_getClassStackIndex() -> int"""
    return _coin.SoShapeHintsElement_getClassStackIndex()

def SoShapeHintsElement_createInstance() -> "void *":
    """SoShapeHintsElement_createInstance() -> void *"""
    return _coin.SoShapeHintsElement_createInstance()

def SoShapeHintsElement_initClass() -> "void":
    """SoShapeHintsElement_initClass()"""
    return _coin.SoShapeHintsElement_initClass()

def SoShapeHintsElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoShapeHintsElement::VertexOrdering const vertexOrdering, SoShapeHintsElement::ShapeType const shapeType, SoShapeHintsElement::FaceType const faceType)
    SoShapeHintsElement_set(SoState state, SoShapeHintsElement::VertexOrdering const vertexOrdering, SoShapeHintsElement::ShapeType const shapeType, SoShapeHintsElement::FaceType const faceType)
    """
    return _coin.SoShapeHintsElement_set(*args)

def SoShapeHintsElement_get(state: 'SoState', vertexOrdering: 'SoShapeHintsElement::VertexOrdering &', shapeType: 'SoShapeHintsElement::ShapeType &', faceType: 'SoShapeHintsElement::FaceType &') -> "void":
    """SoShapeHintsElement_get(SoState state, SoShapeHintsElement::VertexOrdering & vertexOrdering, SoShapeHintsElement::ShapeType & shapeType, SoShapeHintsElement::FaceType & faceType)"""
    return _coin.SoShapeHintsElement_get(state, vertexOrdering, shapeType, faceType)

def SoShapeHintsElement_getVertexOrdering(state: 'SoState') -> "SoShapeHintsElement::VertexOrdering":
    """SoShapeHintsElement_getVertexOrdering(SoState state) -> SoShapeHintsElement::VertexOrdering"""
    return _coin.SoShapeHintsElement_getVertexOrdering(state)

def SoShapeHintsElement_getShapeType(state: 'SoState') -> "SoShapeHintsElement::ShapeType":
    """SoShapeHintsElement_getShapeType(SoState state) -> SoShapeHintsElement::ShapeType"""
    return _coin.SoShapeHintsElement_getShapeType(state)

def SoShapeHintsElement_getFaceType(state: 'SoState') -> "SoShapeHintsElement::FaceType":
    """SoShapeHintsElement_getFaceType(SoState state) -> SoShapeHintsElement::FaceType"""
    return _coin.SoShapeHintsElement_getFaceType(state)

def SoShapeHintsElement_getDefaultVertexOrdering() -> "SoShapeHintsElement::VertexOrdering":
    """SoShapeHintsElement_getDefaultVertexOrdering() -> SoShapeHintsElement::VertexOrdering"""
    return _coin.SoShapeHintsElement_getDefaultVertexOrdering()

def SoShapeHintsElement_getDefaultShapeType() -> "SoShapeHintsElement::ShapeType":
    """SoShapeHintsElement_getDefaultShapeType() -> SoShapeHintsElement::ShapeType"""
    return _coin.SoShapeHintsElement_getDefaultShapeType()

def SoShapeHintsElement_getDefaultFaceType() -> "SoShapeHintsElement::FaceType":
    """SoShapeHintsElement_getDefaultFaceType() -> SoShapeHintsElement::FaceType"""
    return _coin.SoShapeHintsElement_getDefaultFaceType()

class SoSFBool(SoSField):
    """Proxy of C++ SoSFBool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBool self) -> SoSFBool"""
        this = _coin.new_SoSFBool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBool
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBool_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBool_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBool self) -> SoType"""
        return _coin.SoSFBool_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBool self, SoField field)"""
        return _coin.SoSFBool_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBool self, SoField field) -> SbBool"""
        return _coin.SoSFBool_isSame(self, field)


    def getValue(self) -> "SbBool":
        """getValue(SoSFBool self) -> SbBool"""
        return _coin.SoSFBool_getValue(self)


    def __eq__(self, field: 'SoSFBool') -> "int":
        """__eq__(SoSFBool self, SoSFBool field) -> int"""
        return _coin.SoSFBool___eq__(self, field)


    def __ne__(self, field: 'SoSFBool') -> "int":
        """__ne__(SoSFBool self, SoSFBool field) -> int"""
        return _coin.SoSFBool___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBool_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBool self, SbBool newvalue)
        setValue(SoSFBool self, SoSFBool other)
        """
        return _coin.SoSFBool_setValue(self, *args)

SoSFBool_swigregister = _coin.SoSFBool_swigregister
SoSFBool_swigregister(SoSFBool)

def SoSFBool_createInstance() -> "void *":
    """SoSFBool_createInstance() -> void *"""
    return _coin.SoSFBool_createInstance()

def SoSFBool_getClassTypeId() -> "SoType":
    """SoSFBool_getClassTypeId() -> SoType"""
    return _coin.SoSFBool_getClassTypeId()

def SoSFBool_initClass() -> "void":
    """SoSFBool_initClass()"""
    return _coin.SoSFBool_initClass()

class SoShapeHints(SoNode):
    """Proxy of C++ SoShapeHints class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShapeHints_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShapeHints self) -> SoType"""
        return _coin.SoShapeHints_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShapeHints_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoShapeHints self) -> SoShapeHints"""
        this = _coin.new_SoShapeHints()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    UNKNOWN_ORDERING = _coin.SoShapeHints_UNKNOWN_ORDERING
    CLOCKWISE = _coin.SoShapeHints_CLOCKWISE
    COUNTERCLOCKWISE = _coin.SoShapeHints_COUNTERCLOCKWISE
    UNKNOWN_SHAPE_TYPE = _coin.SoShapeHints_UNKNOWN_SHAPE_TYPE
    SOLID = _coin.SoShapeHints_SOLID
    UNKNOWN_FACE_TYPE = _coin.SoShapeHints_UNKNOWN_FACE_TYPE
    CONVEX = _coin.SoShapeHints_CONVEX
    NO_WINDING_TYPE = _coin.SoShapeHints_NO_WINDING_TYPE
    vertexOrdering = _swig_property(_coin.SoShapeHints_vertexOrdering_get, _coin.SoShapeHints_vertexOrdering_set)
    shapeType = _swig_property(_coin.SoShapeHints_shapeType_get, _coin.SoShapeHints_shapeType_set)
    faceType = _swig_property(_coin.SoShapeHints_faceType_get, _coin.SoShapeHints_faceType_set)
    windingType = _swig_property(_coin.SoShapeHints_windingType_get, _coin.SoShapeHints_windingType_set)
    useVBO = _swig_property(_coin.SoShapeHints_useVBO_get, _coin.SoShapeHints_useVBO_set)
    creaseAngle = _swig_property(_coin.SoShapeHints_creaseAngle_get, _coin.SoShapeHints_creaseAngle_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoShapeHints self, SoAction action)"""
        return _coin.SoShapeHints_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoShapeHints self, SoGLRenderAction action)"""
        return _coin.SoShapeHints_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoShapeHints self, SoCallbackAction action)"""
        return _coin.SoShapeHints_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoShapeHints self, SoGetBoundingBoxAction action)"""
        return _coin.SoShapeHints_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoShapeHints self, SoPickAction action)"""
        return _coin.SoShapeHints_pick(self, action)

SoShapeHints_swigregister = _coin.SoShapeHints_swigregister
SoShapeHints_swigregister(SoShapeHints)

def SoShapeHints_getClassTypeId() -> "SoType":
    """SoShapeHints_getClassTypeId() -> SoType"""
    return _coin.SoShapeHints_getClassTypeId()

def SoShapeHints_initClass() -> "void":
    """SoShapeHints_initClass()"""
    return _coin.SoShapeHints_initClass()

class SoTexture(SoNode):
    """Proxy of C++ SoTexture class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture self) -> SoType"""
        return _coin.SoTexture_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture_initClass()

    initClass = staticmethod(initClass)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoTexture_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTexture self, SoAction action)"""
        return _coin.SoTexture_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTexture self, SoGLRenderAction action)"""
        return _coin.SoTexture_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTexture self, SoCallbackAction action)"""
        return _coin.SoTexture_callback(self, action)

SoTexture_swigregister = _coin.SoTexture_swigregister
SoTexture_swigregister(SoTexture)

def SoTexture_getClassTypeId() -> "SoType":
    """SoTexture_getClassTypeId() -> SoType"""
    return _coin.SoTexture_getClassTypeId()

def SoTexture_initClass() -> "void":
    """SoTexture_initClass()"""
    return _coin.SoTexture_initClass()

def SoTexture_cleanupClass() -> "void":
    """SoTexture_cleanupClass()"""
    return _coin.SoTexture_cleanupClass()

class SoSFImage(SoSField):
    """Proxy of C++ SoSFImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFImage self) -> SoSFImage"""
        this = _coin.new_SoSFImage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFImage
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFImage_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFImage_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFImage self) -> SoType"""
        return _coin.SoSFImage_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFImage self, SoField field)"""
        return _coin.SoSFImage_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFImage self, SoField field) -> SbBool"""
        return _coin.SoSFImage_isSame(self, field)

    COPY = _coin.SoSFImage_COPY
    NO_COPY = _coin.SoSFImage_NO_COPY
    NO_COPY_AND_DELETE = _coin.SoSFImage_NO_COPY_AND_DELETE
    NO_COPY_AND_FREE = _coin.SoSFImage_NO_COPY_AND_FREE

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFImage_initClass()

    initClass = staticmethod(initClass)

    def getValue(self, *args) -> "SbImage const &":
        """
        getValue(SoSFImage self) -> unsigned char const
        getValue(SoSFImage self) -> SbImage
        """
        return _coin.SoSFImage_getValue(self, *args)


    def __eq__(self, field: 'SoSFImage') -> "int":
        """__eq__(SoSFImage self, SoSFImage field) -> int"""
        return _coin.SoSFImage___eq__(self, field)


    def __ne__(self, field: 'SoSFImage') -> "int":
        """__ne__(SoSFImage self, SoSFImage field) -> int"""
        return _coin.SoSFImage___ne__(self, field)


    def startEditing(self) -> "unsigned char *":
        """startEditing(SoSFImage self) -> unsigned char *"""
        return _coin.SoSFImage_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoSFImage self)"""
        return _coin.SoSFImage_finishEditing(self)


    def setSubValue(self, dims: 'SbVec2s', offset: 'SbVec2s', pixels: 'unsigned char *') -> "void":
        """setSubValue(SoSFImage self, SbVec2s dims, SbVec2s offset, unsigned char * pixels)"""
        return _coin.SoSFImage_setSubValue(self, dims, offset, pixels)


    def setSubValues(self, dims: 'SbVec2s', offsets: 'SbVec2s', num: 'int', pixelblocks: 'unsigned char **') -> "void":
        """setSubValues(SoSFImage self, SbVec2s dims, SbVec2s offsets, int num, unsigned char ** pixelblocks)"""
        return _coin.SoSFImage_setSubValues(self, dims, offsets, num, pixelblocks)


    def getSubTexture(self, idx: 'int', dims: 'SbVec2s', offset: 'SbVec2s') -> "unsigned char *":
        """getSubTexture(SoSFImage self, int idx, SbVec2s dims, SbVec2s offset) -> unsigned char *"""
        return _coin.SoSFImage_getSubTexture(self, idx, dims, offset)


    def hasSubTextures(self, numsubtextures: 'int &') -> "SbBool":
        """hasSubTextures(SoSFImage self, int & numsubtextures) -> SbBool"""
        return _coin.SoSFImage_hasSubTextures(self, numsubtextures)


    def setNeverWrite(self, flag: 'SbBool') -> "void":
        """setNeverWrite(SoSFImage self, SbBool flag)"""
        return _coin.SoSFImage_setNeverWrite(self, flag)


    def isNeverWrite(self) -> "SbBool":
        """isNeverWrite(SoSFImage self) -> SbBool"""
        return _coin.SoSFImage_isNeverWrite(self)


    def hasTransparency(self) -> "SbBool":
        """hasTransparency(SoSFImage self) -> SbBool"""
        return _coin.SoSFImage_hasTransparency(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFImage self, SbVec2s size, int const nc, unsigned char const * pixels, SoSFImage::CopyPolicy copypolicy)
        setValue(SoSFImage self, SbVec2s size, int const nc, unsigned char const * pixels)
        setValue(SoSFImage self, SbVec2s size, int const nc, PyObject * pixels)
        setValue(SoSFImage self, SoSFImage other)
        """
        return _coin.SoSFImage_setValue(self, *args)

SoSFImage_swigregister = _coin.SoSFImage_swigregister
SoSFImage_swigregister(SoSFImage)

def SoSFImage_createInstance() -> "void *":
    """SoSFImage_createInstance() -> void *"""
    return _coin.SoSFImage_createInstance()

def SoSFImage_getClassTypeId() -> "SoType":
    """SoSFImage_getClassTypeId() -> SoType"""
    return _coin.SoSFImage_getClassTypeId()

def SoSFImage_initClass() -> "void":
    """SoSFImage_initClass()"""
    return _coin.SoSFImage_initClass()

class SoSFString(SoSField):
    """Proxy of C++ SoSFString class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFString self) -> SoSFString"""
        this = _coin.new_SoSFString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFString
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFString_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFString_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFString self) -> SoType"""
        return _coin.SoSFString_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFString self, SoField field)"""
        return _coin.SoSFString_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFString self, SoField field) -> SbBool"""
        return _coin.SoSFString_isSame(self, field)


    def getValue(self) -> "SbString const &":
        """getValue(SoSFString self) -> SbString"""
        return _coin.SoSFString_getValue(self)


    def __eq__(self, field: 'SoSFString') -> "int":
        """__eq__(SoSFString self, SoSFString field) -> int"""
        return _coin.SoSFString___eq__(self, field)


    def __ne__(self, field: 'SoSFString') -> "int":
        """__ne__(SoSFString self, SoSFString field) -> int"""
        return _coin.SoSFString___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFString_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFString self, SbString newvalue)
        setValue(SoSFString self, char const * str)
        setValue(SoSFString self, SoSFString other)
        """
        return _coin.SoSFString_setValue(self, *args)

SoSFString_swigregister = _coin.SoSFString_swigregister
SoSFString_swigregister(SoSFString)

def SoSFString_createInstance() -> "void *":
    """SoSFString_createInstance() -> void *"""
    return _coin.SoSFString_createInstance()

def SoSFString_getClassTypeId() -> "SoType":
    """SoSFString_getClassTypeId() -> SoType"""
    return _coin.SoSFString_getClassTypeId()

def SoSFString_initClass() -> "void":
    """SoSFString_initClass()"""
    return _coin.SoSFString_initClass()

class SoSFColor(SoSField):
    """Proxy of C++ SoSFColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFColor self) -> SoSFColor"""
        this = _coin.new_SoSFColor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFColor
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFColor_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFColor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFColor self) -> SoType"""
        return _coin.SoSFColor_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFColor self, SoField field)"""
        return _coin.SoSFColor_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFColor self, SoField field) -> SbBool"""
        return _coin.SoSFColor_isSame(self, field)


    def getValue(self) -> "SbColor const &":
        """getValue(SoSFColor self) -> SbColor"""
        return _coin.SoSFColor_getValue(self)


    def __eq__(self, field: 'SoSFColor') -> "int":
        """__eq__(SoSFColor self, SoSFColor field) -> int"""
        return _coin.SoSFColor___eq__(self, field)


    def __ne__(self, field: 'SoSFColor') -> "int":
        """__ne__(SoSFColor self, SoSFColor field) -> int"""
        return _coin.SoSFColor___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFColor_initClass()

    initClass = staticmethod(initClass)

    def setHSVValue(self, *args) -> "void":
        """
        setHSVValue(SoSFColor self, float h, float s, float v)
        setHSVValue(SoSFColor self, float const [3] hsv)
        """
        return _coin.SoSFColor_setHSVValue(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFColor self, SbColor newvalue)
        setValue(SoSFColor self, SbVec3f vec)
        setValue(SoSFColor self, float red, float green, float blue)
        setValue(SoSFColor self, float const [3] rgb)
        setValue(SoSFColor self, SoSFColor other)
        """
        return _coin.SoSFColor_setValue(self, *args)

SoSFColor_swigregister = _coin.SoSFColor_swigregister
SoSFColor_swigregister(SoSFColor)

def SoSFColor_createInstance() -> "void *":
    """SoSFColor_createInstance() -> void *"""
    return _coin.SoSFColor_createInstance()

def SoSFColor_getClassTypeId() -> "SoType":
    """SoSFColor_getClassTypeId() -> SoType"""
    return _coin.SoSFColor_getClassTypeId()

def SoSFColor_initClass() -> "void":
    """SoSFColor_initClass()"""
    return _coin.SoSFColor_initClass()

class SoReplacedElement(SoElement):
    """Proxy of C++ SoReplacedElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoReplacedElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoReplacedElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoReplacedElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoReplacedElement self, SoState state)"""
        return _coin.SoReplacedElement_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoReplacedElement self, SoElement element) -> SbBool"""
        return _coin.SoReplacedElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoReplacedElement self) -> SoElement"""
        return _coin.SoReplacedElement_copyMatchInfo(self)


    def getNodeId(self) -> "SbUniqueId":
        """getNodeId(SoReplacedElement self) -> SbUniqueId"""
        return _coin.SoReplacedElement_getNodeId(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SoReplacedElement self, FILE * file)"""
        return _coin.SoReplacedElement_output(self, file)

SoReplacedElement_swigregister = _coin.SoReplacedElement_swigregister
SoReplacedElement_swigregister(SoReplacedElement)

def SoReplacedElement_getClassTypeId() -> "SoType":
    """SoReplacedElement_getClassTypeId() -> SoType"""
    return _coin.SoReplacedElement_getClassTypeId()

def SoReplacedElement_getClassStackIndex() -> "int":
    """SoReplacedElement_getClassStackIndex() -> int"""
    return _coin.SoReplacedElement_getClassStackIndex()

def SoReplacedElement_initClass() -> "void":
    """SoReplacedElement_initClass()"""
    return _coin.SoReplacedElement_initClass()

class SbVec3s(object):
    """Proxy of C++ SbVec3s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec3s self) -> SbVec3s
        __init__(SbVec3s self, short const [3] v) -> SbVec3s
        __init__(SbVec3s self, short x, short y, short z) -> SbVec3s
        __init__(SbVec3s self, SbVec3us const & v) -> SbVec3s
        __init__(SbVec3s self, SbVec3b v) -> SbVec3s
        __init__(SbVec3s self, SbVec3i32 v) -> SbVec3s
        __init__(SbVec3s self, SbVec3f v) -> SbVec3s
        __init__(SbVec3s self, SbVec3d v) -> SbVec3s
        """
        this = _coin.new_SbVec3s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec3s &":
        """
        setValue(SbVec3s self, short const [3] v) -> SbVec3s
        setValue(SbVec3s self, short x, short y, short z) -> SbVec3s
        setValue(SbVec3s self, SbVec3us const & v) -> SbVec3s
        setValue(SbVec3s self, SbVec3b v) -> SbVec3s
        setValue(SbVec3s self, SbVec3i32 v) -> SbVec3s
        setValue(SbVec3s self, SbVec3f v) -> SbVec3s
        setValue(SbVec3s self, SbVec3d v) -> SbVec3s
        """
        return _coin.SbVec3s_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec3s self) -> short const
        getValue(SbVec3s self)
        """
        return _coin.SbVec3s_getValue(self, *args)


    def dot(self, v: 'SbVec3s') -> "int32_t":
        """dot(SbVec3s self, SbVec3s v) -> int32_t"""
        return _coin.SbVec3s_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec3s self)"""
        return _coin.SbVec3s_negate(self)


    def __imul__(self, *args) -> "SbVec3s &":
        """
        __imul__(SbVec3s self, int d) -> SbVec3s
        __imul__(SbVec3s self, double d) -> SbVec3s
        """
        return _coin.SbVec3s___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec3s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec3s') -> "SbVec3s &":
        """__iadd__(SbVec3s self, SbVec3s v) -> SbVec3s"""
        return _coin.SbVec3s___iadd__(self, v)


    def __isub__(self, v: 'SbVec3s') -> "SbVec3s &":
        """__isub__(SbVec3s self, SbVec3s v) -> SbVec3s"""
        return _coin.SbVec3s___isub__(self, v)


    def __neg__(self) -> "SbVec3s":
        """__neg__(SbVec3s self) -> SbVec3s"""
        return _coin.SbVec3s___neg__(self)


    def toString(self) -> "SbString":
        """toString(SbVec3s self) -> SbString"""
        return _coin.SbVec3s_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbVec3s self, SbString str) -> SbBool"""
        return _coin.SbVec3s_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec3s self, FILE * fp)"""
        return _coin.SbVec3s_output(self, fp)


    def __add__(self, u: 'SbVec3s') -> "SbVec3s":
        """__add__(SbVec3s self, SbVec3s u) -> SbVec3s"""
        return _coin.SbVec3s___add__(self, u)


    def __sub__(self, u: 'SbVec3s') -> "SbVec3s":
        """__sub__(SbVec3s self, SbVec3s u) -> SbVec3s"""
        return _coin.SbVec3s___sub__(self, u)


    def __mul__(self, d: 'double const') -> "SbVec3s":
        """__mul__(SbVec3s self, double const d) -> SbVec3s"""
        return _coin.SbVec3s___mul__(self, d)


    def __rmul__(self, d: 'double const') -> "SbVec3s":
        """__rmul__(SbVec3s self, double const d) -> SbVec3s"""
        return _coin.SbVec3s___rmul__(self, d)


    def __div__(self, d: 'double const') -> "SbVec3s":
        """__div__(SbVec3s self, double const d) -> SbVec3s"""
        return _coin.SbVec3s___div__(self, d)


    def __truediv__(self, d: 'double const') -> "SbVec3s":
        """__truediv__(SbVec3s self, double const d) -> SbVec3s"""
        return _coin.SbVec3s___truediv__(self, d)


    def __eq__(self, u: 'SbVec3s') -> "int":
        """__eq__(SbVec3s self, SbVec3s u) -> int"""
        return _coin.SbVec3s___eq__(self, u)


    def __nq__(self, u: 'SbVec3s') -> "int":
        """__nq__(SbVec3s self, SbVec3s u) -> int"""
        return _coin.SbVec3s___nq__(self, u)


    def __getitem__(self, i: 'int') -> "short":
        """__getitem__(SbVec3s self, int i) -> short"""
        return _coin.SbVec3s___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'short') -> "void":
        """__setitem__(SbVec3s self, int i, short value)"""
        return _coin.SbVec3s___setitem__(self, i, value)


    def __iter__(self):
       for i in range(3):
          yield self[i]

    def __len__(self):
          return 3

    __swig_destroy__ = _coin.delete_SbVec3s
    __del__ = lambda self: None
SbVec3s_swigregister = _coin.SbVec3s_swigregister
SbVec3s_swigregister(SbVec3s)

class SoMultiTextureImageElement(SoElement):
    """Proxy of C++ SoMultiTextureImageElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMultiTextureImageElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoMultiTextureImageElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMultiTextureImageElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMultiTextureImageElement_initClass()

    initClass = staticmethod(initClass)
    BLEND = _coin.SoMultiTextureImageElement_BLEND
    MODULATE = _coin.SoMultiTextureImageElement_MODULATE
    DECAL = _coin.SoMultiTextureImageElement_DECAL
    REPLACE = _coin.SoMultiTextureImageElement_REPLACE
    CLAMP = _coin.SoMultiTextureImageElement_CLAMP
    REPEAT = _coin.SoMultiTextureImageElement_REPEAT
    CLAMP_TO_BORDER = _coin.SoMultiTextureImageElement_CLAMP_TO_BORDER

    def init(self, state: 'SoState') -> "void":
        """init(SoMultiTextureImageElement self, SoState state)"""
        return _coin.SoMultiTextureImageElement_init(self, state)


    def setDefault(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        setDefault(SoState state, SoNode node, int const unit=0)
        setDefault(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureImageElement_setDefault(state, node, unit)

    setDefault = staticmethod(setDefault)

    def getBlendColor(state: 'SoState', unit: 'int const'=0) -> "SbColor const &":
        """
        getBlendColor(SoState state, int const unit=0) -> SbColor
        getBlendColor(SoState state) -> SbColor
        """
        return _coin.SoMultiTextureImageElement_getBlendColor(state, unit)

    getBlendColor = staticmethod(getBlendColor)

    def getModel(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Model":
        """
        getModel(SoState state, int const unit=0) -> SoMultiTextureImageElement::Model
        getModel(SoState state) -> SoMultiTextureImageElement::Model
        """
        return _coin.SoMultiTextureImageElement_getModel(state, unit)

    getModel = staticmethod(getModel)

    def getWrapS(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
        """
        getWrapS(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
        getWrapS(SoState state) -> SoMultiTextureImageElement::Wrap
        """
        return _coin.SoMultiTextureImageElement_getWrapS(state, unit)

    getWrapS = staticmethod(getWrapS)

    def getWrapT(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
        """
        getWrapT(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
        getWrapT(SoState state) -> SoMultiTextureImageElement::Wrap
        """
        return _coin.SoMultiTextureImageElement_getWrapT(state, unit)

    getWrapT = staticmethod(getWrapT)

    def getWrapR(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
        """
        getWrapR(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
        getWrapR(SoState state) -> SoMultiTextureImageElement::Wrap
        """
        return _coin.SoMultiTextureImageElement_getWrapR(state, unit)

    getWrapR = staticmethod(getWrapR)

    def containsTransparency(state: 'SoState') -> "SbBool":
        """containsTransparency(SoState state) -> SbBool"""
        return _coin.SoMultiTextureImageElement_containsTransparency(state)

    containsTransparency = staticmethod(containsTransparency)

    def getDefault(*args) -> "unsigned char const *":
        """
        getDefault(SbVec2s size, int & numComponents) -> unsigned char const
        getDefault(SbVec3s size, int & numComponents) -> unsigned char const *
        """
        return _coin.SoMultiTextureImageElement_getDefault(*args)

    getDefault = staticmethod(getDefault)

    def push(self, state: 'SoState') -> "void":
        """push(SoMultiTextureImageElement self, SoState state)"""
        return _coin.SoMultiTextureImageElement_push(self, state)


    def matches(self, elem: 'SoElement') -> "SbBool":
        """matches(SoMultiTextureImageElement self, SoElement elem) -> SbBool"""
        return _coin.SoMultiTextureImageElement_matches(self, elem)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoMultiTextureImageElement self) -> SoElement"""
        return _coin.SoMultiTextureImageElement_copyMatchInfo(self)


    def setElt(self, *args) -> "void":
        """
        setElt(SoMultiTextureImageElement self, int const unit, SbUniqueId const nodeid, SbVec2s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        setElt(SoMultiTextureImageElement self, int const unit, SbUniqueId const nodeid, SbVec3s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Wrap const wrapR, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        """
        return _coin.SoMultiTextureImageElement_setElt(self, *args)


    def hasTransparency(self, unit: 'int const'=0) -> "SbBool":
        """
        hasTransparency(SoMultiTextureImageElement self, int const unit=0) -> SbBool
        hasTransparency(SoMultiTextureImageElement self) -> SbBool
        """
        return _coin.SoMultiTextureImageElement_hasTransparency(self, unit)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int const unit, SbVec2s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        set(SoState state, SoNode node, int const unit, SbVec3s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Wrap const wrapR, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        set(SoState state, SoNode node, SbVec2s size, int const numComponents, unsigned char const * bytes, int const wrapS, int const wrapT, int const model, SbColor blendColor)
        set(SoState state, SoNode node, SbVec2s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        set(SoState state, SoNode node, SbVec3s size, int const numComponents, unsigned char const * bytes, int const wrapS, int const wrapT, int const wrapR, int const model, SbColor blendColor)
        set(SoState state, SoNode node, SbVec3s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Wrap const wrapR, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        """
        return _coin.SoMultiTextureImageElement_set(*args)

    set = staticmethod(set)

    def get(*args) -> "unsigned char const *":
        """
        get(SoState state, int const unit, SbVec2s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
        get(SoState state, int const unit, SbVec3s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Wrap & wrapR, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
        get(SoState state, SbVec2s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
        get(SoState state, SbVec3s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Wrap & wrapR, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
        get(SoState state, SbVec2s size, int & numComponents, int & wrapS, int & wrapT, int & model, SbColor blendColor) -> unsigned char const
        get(SoState state, SbVec3s size, int & numComponents, int & wrapS, int & wrapT, int & wrapR, int & model, SbColor blendColor) -> unsigned char const *
        """
        return _coin.SoMultiTextureImageElement_get(*args)

    get = staticmethod(get)

    def getImage(*args) -> "unsigned char const *":
        """
        getImage(SoState state, int const unit, SbVec2s size, int & numComponents) -> unsigned char const
        getImage(SoState state, int const unit, SbVec3s size, int & numComponents) -> unsigned char const
        getImage(SoState state, SbVec2s size, int & numComponents) -> unsigned char const
        getImage(SoState state, SbVec3s size, int & numComponents) -> unsigned char const *
        """
        return _coin.SoMultiTextureImageElement_getImage(*args)

    getImage = staticmethod(getImage)
SoMultiTextureImageElement_swigregister = _coin.SoMultiTextureImageElement_swigregister
SoMultiTextureImageElement_swigregister(SoMultiTextureImageElement)

def SoMultiTextureImageElement_getClassTypeId() -> "SoType":
    """SoMultiTextureImageElement_getClassTypeId() -> SoType"""
    return _coin.SoMultiTextureImageElement_getClassTypeId()

def SoMultiTextureImageElement_getClassStackIndex() -> "int":
    """SoMultiTextureImageElement_getClassStackIndex() -> int"""
    return _coin.SoMultiTextureImageElement_getClassStackIndex()

def SoMultiTextureImageElement_createInstance() -> "void *":
    """SoMultiTextureImageElement_createInstance() -> void *"""
    return _coin.SoMultiTextureImageElement_createInstance()

def SoMultiTextureImageElement_initClass() -> "void":
    """SoMultiTextureImageElement_initClass()"""
    return _coin.SoMultiTextureImageElement_initClass()

def SoMultiTextureImageElement_setDefault(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    setDefault(SoState state, SoNode node, int const unit=0)
    SoMultiTextureImageElement_setDefault(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureImageElement_setDefault(state, node, unit)

def SoMultiTextureImageElement_getBlendColor(state: 'SoState', unit: 'int const'=0) -> "SbColor const &":
    """
    getBlendColor(SoState state, int const unit=0) -> SbColor
    SoMultiTextureImageElement_getBlendColor(SoState state) -> SbColor
    """
    return _coin.SoMultiTextureImageElement_getBlendColor(state, unit)

def SoMultiTextureImageElement_getModel(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Model":
    """
    getModel(SoState state, int const unit=0) -> SoMultiTextureImageElement::Model
    SoMultiTextureImageElement_getModel(SoState state) -> SoMultiTextureImageElement::Model
    """
    return _coin.SoMultiTextureImageElement_getModel(state, unit)

def SoMultiTextureImageElement_getWrapS(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
    """
    getWrapS(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
    SoMultiTextureImageElement_getWrapS(SoState state) -> SoMultiTextureImageElement::Wrap
    """
    return _coin.SoMultiTextureImageElement_getWrapS(state, unit)

def SoMultiTextureImageElement_getWrapT(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
    """
    getWrapT(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
    SoMultiTextureImageElement_getWrapT(SoState state) -> SoMultiTextureImageElement::Wrap
    """
    return _coin.SoMultiTextureImageElement_getWrapT(state, unit)

def SoMultiTextureImageElement_getWrapR(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureImageElement::Wrap":
    """
    getWrapR(SoState state, int const unit=0) -> SoMultiTextureImageElement::Wrap
    SoMultiTextureImageElement_getWrapR(SoState state) -> SoMultiTextureImageElement::Wrap
    """
    return _coin.SoMultiTextureImageElement_getWrapR(state, unit)

def SoMultiTextureImageElement_containsTransparency(state: 'SoState') -> "SbBool":
    """SoMultiTextureImageElement_containsTransparency(SoState state) -> SbBool"""
    return _coin.SoMultiTextureImageElement_containsTransparency(state)

def SoMultiTextureImageElement_getDefault(*args) -> "unsigned char const *":
    """
    getDefault(SbVec2s size, int & numComponents) -> unsigned char const
    SoMultiTextureImageElement_getDefault(SbVec3s size, int & numComponents) -> unsigned char const *
    """
    return _coin.SoMultiTextureImageElement_getDefault(*args)

def SoMultiTextureImageElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int const unit, SbVec2s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    set(SoState state, SoNode node, int const unit, SbVec3s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Wrap const wrapR, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    set(SoState state, SoNode node, SbVec2s size, int const numComponents, unsigned char const * bytes, int const wrapS, int const wrapT, int const model, SbColor blendColor)
    set(SoState state, SoNode node, SbVec2s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    set(SoState state, SoNode node, SbVec3s size, int const numComponents, unsigned char const * bytes, int const wrapS, int const wrapT, int const wrapR, int const model, SbColor blendColor)
    SoMultiTextureImageElement_set(SoState state, SoNode node, SbVec3s size, int const numComponents, unsigned char const * bytes, SoMultiTextureImageElement::Wrap const wrapS, SoMultiTextureImageElement::Wrap const wrapT, SoMultiTextureImageElement::Wrap const wrapR, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    """
    return _coin.SoMultiTextureImageElement_set(*args)

def SoMultiTextureImageElement_get(*args) -> "unsigned char const *":
    """
    get(SoState state, int const unit, SbVec2s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
    get(SoState state, int const unit, SbVec3s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Wrap & wrapR, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
    get(SoState state, SbVec2s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
    get(SoState state, SbVec3s size, int & numComponents, SoMultiTextureImageElement::Wrap & wrapS, SoMultiTextureImageElement::Wrap & wrapT, SoMultiTextureImageElement::Wrap & wrapR, SoMultiTextureImageElement::Model & model, SbColor blendColor) -> unsigned char const
    get(SoState state, SbVec2s size, int & numComponents, int & wrapS, int & wrapT, int & model, SbColor blendColor) -> unsigned char const
    SoMultiTextureImageElement_get(SoState state, SbVec3s size, int & numComponents, int & wrapS, int & wrapT, int & wrapR, int & model, SbColor blendColor) -> unsigned char const *
    """
    return _coin.SoMultiTextureImageElement_get(*args)

def SoMultiTextureImageElement_getImage(*args) -> "unsigned char const *":
    """
    getImage(SoState state, int const unit, SbVec2s size, int & numComponents) -> unsigned char const
    getImage(SoState state, int const unit, SbVec3s size, int & numComponents) -> unsigned char const
    getImage(SoState state, SbVec2s size, int & numComponents) -> unsigned char const
    SoMultiTextureImageElement_getImage(SoState state, SbVec3s size, int & numComponents) -> unsigned char const *
    """
    return _coin.SoMultiTextureImageElement_getImage(*args)

class SoTexture2(SoTexture):
    """Proxy of C++ SoTexture2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture2_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture2 self) -> SoType"""
        return _coin.SoTexture2_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture2_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTexture2 self) -> SoTexture2"""
        this = _coin.new_SoTexture2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    MODULATE = _coin.SoTexture2_MODULATE
    DECAL = _coin.SoTexture2_DECAL
    BLEND = _coin.SoTexture2_BLEND
    REPLACE = _coin.SoTexture2_REPLACE
    REPEAT = _coin.SoTexture2_REPEAT
    CLAMP = _coin.SoTexture2_CLAMP
    filename = _swig_property(_coin.SoTexture2_filename_get, _coin.SoTexture2_filename_set)
    image = _swig_property(_coin.SoTexture2_image_get, _coin.SoTexture2_image_set)
    wrapS = _swig_property(_coin.SoTexture2_wrapS_get, _coin.SoTexture2_wrapS_set)
    wrapT = _swig_property(_coin.SoTexture2_wrapT_get, _coin.SoTexture2_wrapT_set)
    model = _swig_property(_coin.SoTexture2_model_get, _coin.SoTexture2_model_set)
    blendColor = _swig_property(_coin.SoTexture2_blendColor_get, _coin.SoTexture2_blendColor_set)
    enableCompressedTexture = _swig_property(_coin.SoTexture2_enableCompressedTexture_get, _coin.SoTexture2_enableCompressedTexture_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTexture2 self, SoAction action)"""
        return _coin.SoTexture2_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTexture2 self, SoGLRenderAction action)"""
        return _coin.SoTexture2_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTexture2 self, SoCallbackAction action)"""
        return _coin.SoTexture2_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoTexture2 self, SoRayPickAction action)"""
        return _coin.SoTexture2_rayPick(self, action)


    def readImage(fname: 'SbString', w: 'int &', h: 'int &', nc: 'int &', bytes: 'unsigned char *&') -> "SbBool":
        """readImage(SbString fname, int & w, int & h, int & nc, unsigned char *& bytes) -> SbBool"""
        return _coin.SoTexture2_readImage(fname, w, h, nc, bytes)

    readImage = staticmethod(readImage)
SoTexture2_swigregister = _coin.SoTexture2_swigregister
SoTexture2_swigregister(SoTexture2)

def SoTexture2_getClassTypeId() -> "SoType":
    """SoTexture2_getClassTypeId() -> SoType"""
    return _coin.SoTexture2_getClassTypeId()

def SoTexture2_initClass() -> "void":
    """SoTexture2_initClass()"""
    return _coin.SoTexture2_initClass()

def SoTexture2_readImage(fname: 'SbString', w: 'int &', h: 'int &', nc: 'int &', bytes: 'unsigned char *&') -> "SbBool":
    """SoTexture2_readImage(SbString fname, int & w, int & h, int & nc, unsigned char *& bytes) -> SbBool"""
    return _coin.SoTexture2_readImage(fname, w, h, nc, bytes)

class SoTextureCoordinateBindingElement(SoInt32Element):
    """Proxy of C++ SoTextureCoordinateBindingElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateBindingElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextureCoordinateBindingElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextureCoordinateBindingElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateBindingElement_initClass()

    initClass = staticmethod(initClass)
    PER_VERTEX = _coin.SoTextureCoordinateBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoTextureCoordinateBindingElement_PER_VERTEX_INDEXED

    def init(self, state: 'SoState') -> "void":
        """init(SoTextureCoordinateBindingElement self, SoState state)"""
        return _coin.SoTextureCoordinateBindingElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoTextureCoordinateBindingElement::Binding const binding)
        set(SoState state, SoTextureCoordinateBindingElement::Binding const binding)
        """
        return _coin.SoTextureCoordinateBindingElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoTextureCoordinateBindingElement::Binding":
        """get(SoState state) -> SoTextureCoordinateBindingElement::Binding"""
        return _coin.SoTextureCoordinateBindingElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoTextureCoordinateBindingElement::Binding":
        """getDefault() -> SoTextureCoordinateBindingElement::Binding"""
        return _coin.SoTextureCoordinateBindingElement_getDefault()

    getDefault = staticmethod(getDefault)
SoTextureCoordinateBindingElement_swigregister = _coin.SoTextureCoordinateBindingElement_swigregister
SoTextureCoordinateBindingElement_swigregister(SoTextureCoordinateBindingElement)

def SoTextureCoordinateBindingElement_getClassTypeId() -> "SoType":
    """SoTextureCoordinateBindingElement_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateBindingElement_getClassTypeId()

def SoTextureCoordinateBindingElement_getClassStackIndex() -> "int":
    """SoTextureCoordinateBindingElement_getClassStackIndex() -> int"""
    return _coin.SoTextureCoordinateBindingElement_getClassStackIndex()

def SoTextureCoordinateBindingElement_createInstance() -> "void *":
    """SoTextureCoordinateBindingElement_createInstance() -> void *"""
    return _coin.SoTextureCoordinateBindingElement_createInstance()

def SoTextureCoordinateBindingElement_initClass() -> "void":
    """SoTextureCoordinateBindingElement_initClass()"""
    return _coin.SoTextureCoordinateBindingElement_initClass()

def SoTextureCoordinateBindingElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoTextureCoordinateBindingElement::Binding const binding)
    SoTextureCoordinateBindingElement_set(SoState state, SoTextureCoordinateBindingElement::Binding const binding)
    """
    return _coin.SoTextureCoordinateBindingElement_set(*args)

def SoTextureCoordinateBindingElement_get(state: 'SoState') -> "SoTextureCoordinateBindingElement::Binding":
    """SoTextureCoordinateBindingElement_get(SoState state) -> SoTextureCoordinateBindingElement::Binding"""
    return _coin.SoTextureCoordinateBindingElement_get(state)

def SoTextureCoordinateBindingElement_getDefault() -> "SoTextureCoordinateBindingElement::Binding":
    """SoTextureCoordinateBindingElement_getDefault() -> SoTextureCoordinateBindingElement::Binding"""
    return _coin.SoTextureCoordinateBindingElement_getDefault()

class SoTextureCoordinateBinding(SoNode):
    """Proxy of C++ SoTextureCoordinateBinding class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateBinding_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateBinding self) -> SoType"""
        return _coin.SoTextureCoordinateBinding_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateBinding_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateBinding self) -> SoTextureCoordinateBinding"""
        this = _coin.new_SoTextureCoordinateBinding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    PER_VERTEX = _coin.SoTextureCoordinateBinding_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoTextureCoordinateBinding_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoTextureCoordinateBinding_DEFAULT
    value = _swig_property(_coin.SoTextureCoordinateBinding_value_get, _coin.SoTextureCoordinateBinding_value_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateBinding self, SoAction action)"""
        return _coin.SoTextureCoordinateBinding_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateBinding self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateBinding_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateBinding self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateBinding_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateBinding self, SoPickAction action)"""
        return _coin.SoTextureCoordinateBinding_pick(self, action)

SoTextureCoordinateBinding_swigregister = _coin.SoTextureCoordinateBinding_swigregister
SoTextureCoordinateBinding_swigregister(SoTextureCoordinateBinding)

def SoTextureCoordinateBinding_getClassTypeId() -> "SoType":
    """SoTextureCoordinateBinding_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateBinding_getClassTypeId()

def SoTextureCoordinateBinding_initClass() -> "void":
    """SoTextureCoordinateBinding_initClass()"""
    return _coin.SoTextureCoordinateBinding_initClass()

class SoTransformation(SoNode):
    """Proxy of C++ SoTransformation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformation self) -> SoType"""
        return _coin.SoTransformation_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformation_initClass()

    initClass = staticmethod(initClass)
SoTransformation_swigregister = _coin.SoTransformation_swigregister
SoTransformation_swigregister(SoTransformation)

def SoTransformation_getClassTypeId() -> "SoType":
    """SoTransformation_getClassTypeId() -> SoType"""
    return _coin.SoTransformation_getClassTypeId()

def SoTransformation_initClass() -> "void":
    """SoTransformation_initClass()"""
    return _coin.SoTransformation_initClass()

class SoUnits(SoTransformation):
    """Proxy of C++ SoUnits class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoUnits_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoUnits self) -> SoType"""
        return _coin.SoUnits_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoUnits_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoUnits self) -> SoUnits"""
        this = _coin.new_SoUnits()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    METERS = _coin.SoUnits_METERS
    CENTIMETERS = _coin.SoUnits_CENTIMETERS
    MILLIMETERS = _coin.SoUnits_MILLIMETERS
    MICROMETERS = _coin.SoUnits_MICROMETERS
    MICRONS = _coin.SoUnits_MICRONS
    NANOMETERS = _coin.SoUnits_NANOMETERS
    ANGSTROMS = _coin.SoUnits_ANGSTROMS
    KILOMETERS = _coin.SoUnits_KILOMETERS
    FEET = _coin.SoUnits_FEET
    INCHES = _coin.SoUnits_INCHES
    POINTS = _coin.SoUnits_POINTS
    YARDS = _coin.SoUnits_YARDS
    MILES = _coin.SoUnits_MILES
    NAUTICAL_MILES = _coin.SoUnits_NAUTICAL_MILES
    units = _swig_property(_coin.SoUnits_units_get, _coin.SoUnits_units_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoUnits self, SoAction action)"""
        return _coin.SoUnits_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoUnits self, SoCallbackAction action)"""
        return _coin.SoUnits_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoUnits self, SoGetBoundingBoxAction action)"""
        return _coin.SoUnits_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoUnits self, SoGetMatrixAction action)"""
        return _coin.SoUnits_getMatrix(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoUnits self, SoGLRenderAction action)"""
        return _coin.SoUnits_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoUnits self, SoPickAction action)"""
        return _coin.SoUnits_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoUnits self, SoGetPrimitiveCountAction action)"""
        return _coin.SoUnits_getPrimitiveCount(self, action)

SoUnits_swigregister = _coin.SoUnits_swigregister
SoUnits_swigregister(SoUnits)

def SoUnits_getClassTypeId() -> "SoType":
    """SoUnits_getClassTypeId() -> SoType"""
    return _coin.SoUnits_getClassTypeId()

def SoUnits_initClass() -> "void":
    """SoUnits_initClass()"""
    return _coin.SoUnits_initClass()

class SoCallbackAction(SoAction):
    """Proxy of C++ SoCallbackAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCallbackAction self) -> SoType"""
        return _coin.SoCallbackAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCallbackAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoCallbackAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoCallbackAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCallbackAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoCallbackAction self) -> SoCallbackAction
        __init__(SoCallbackAction self, SbViewportRegion vp) -> SoCallbackAction
        """
        this = _coin.new_SoCallbackAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoCallbackAction
    __del__ = lambda self: None

    def setViewportRegion(self, vp: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoCallbackAction self, SbViewportRegion vp)"""
        return _coin.SoCallbackAction_setViewportRegion(self, vp)

    CONTINUE = _coin.SoCallbackAction_CONTINUE
    ABORT = _coin.SoCallbackAction_ABORT
    PRUNE = _coin.SoCallbackAction_PRUNE

    def getDecimationType(self) -> "SoDecimationTypeElement::Type":
        """getDecimationType(SoCallbackAction self) -> SoDecimationTypeElement::Type"""
        return _coin.SoCallbackAction_getDecimationType(self)


    def getDecimationPercentage(self) -> "float":
        """getDecimationPercentage(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getDecimationPercentage(self)


    def getComplexity(self) -> "float":
        """getComplexity(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getComplexity(self)


    def getComplexityType(self) -> "SoComplexity::Type":
        """getComplexityType(SoCallbackAction self) -> SoComplexity::Type"""
        return _coin.SoCallbackAction_getComplexityType(self)


    def getNumCoordinates(self) -> "int32_t":
        """getNumCoordinates(SoCallbackAction self) -> int32_t"""
        return _coin.SoCallbackAction_getNumCoordinates(self)


    def getCoordinate3(self, index: 'int const') -> "SbVec3f const &":
        """getCoordinate3(SoCallbackAction self, int const index) -> SbVec3f"""
        return _coin.SoCallbackAction_getCoordinate3(self, index)


    def getCoordinate4(self, index: 'int const') -> "SbVec4f const &":
        """getCoordinate4(SoCallbackAction self, int const index) -> SbVec4f"""
        return _coin.SoCallbackAction_getCoordinate4(self, index)


    def getDrawStyle(self) -> "SoDrawStyle::Style":
        """getDrawStyle(SoCallbackAction self) -> SoDrawStyle::Style"""
        return _coin.SoCallbackAction_getDrawStyle(self)


    def getLinePattern(self) -> "unsigned short":
        """getLinePattern(SoCallbackAction self) -> unsigned short"""
        return _coin.SoCallbackAction_getLinePattern(self)


    def getLineWidth(self) -> "float":
        """getLineWidth(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getLineWidth(self)


    def getPointSize(self) -> "float":
        """getPointSize(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getPointSize(self)


    def getFontName(self) -> "SbName const &":
        """getFontName(SoCallbackAction self) -> SbName"""
        return _coin.SoCallbackAction_getFontName(self)


    def getFontSize(self) -> "float":
        """getFontSize(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getFontSize(self)


    def getLightModel(self) -> "SoLightModel::Model":
        """getLightModel(SoCallbackAction self) -> SoLightModel::Model"""
        return _coin.SoCallbackAction_getLightModel(self)


    def getLightAttenuation(self) -> "SbVec3f const &":
        """getLightAttenuation(SoCallbackAction self) -> SbVec3f"""
        return _coin.SoCallbackAction_getLightAttenuation(self)


    def getMaterialBinding(self) -> "SoMaterialBinding::Binding":
        """getMaterialBinding(SoCallbackAction self) -> SoMaterialBinding::Binding"""
        return _coin.SoCallbackAction_getMaterialBinding(self)


    def getNumNormals(self) -> "uint32_t":
        """getNumNormals(SoCallbackAction self) -> uint32_t"""
        return _coin.SoCallbackAction_getNumNormals(self)


    def getNormal(self, index: 'int const') -> "SbVec3f const &":
        """getNormal(SoCallbackAction self, int const index) -> SbVec3f"""
        return _coin.SoCallbackAction_getNormal(self, index)


    def getNormalBinding(self) -> "SoNormalBinding::Binding":
        """getNormalBinding(SoCallbackAction self) -> SoNormalBinding::Binding"""
        return _coin.SoCallbackAction_getNormalBinding(self)


    def getNumProfileCoordinates(self) -> "int32_t":
        """getNumProfileCoordinates(SoCallbackAction self) -> int32_t"""
        return _coin.SoCallbackAction_getNumProfileCoordinates(self)


    def getProfileCoordinate2(self, index: 'int const') -> "SbVec2f const &":
        """getProfileCoordinate2(SoCallbackAction self, int const index) -> SbVec2f"""
        return _coin.SoCallbackAction_getProfileCoordinate2(self, index)


    def getProfileCoordinate3(self, index: 'int const') -> "SbVec3f const &":
        """getProfileCoordinate3(SoCallbackAction self, int const index) -> SbVec3f"""
        return _coin.SoCallbackAction_getProfileCoordinate3(self, index)


    def getProfile(self) -> "SoNodeList const &":
        """getProfile(SoCallbackAction self) -> SoNodeList"""
        return _coin.SoCallbackAction_getProfile(self)


    def getVertexOrdering(self) -> "SoShapeHints::VertexOrdering":
        """getVertexOrdering(SoCallbackAction self) -> SoShapeHints::VertexOrdering"""
        return _coin.SoCallbackAction_getVertexOrdering(self)


    def getShapeType(self) -> "SoShapeHints::ShapeType":
        """getShapeType(SoCallbackAction self) -> SoShapeHints::ShapeType"""
        return _coin.SoCallbackAction_getShapeType(self)


    def getFaceType(self) -> "SoShapeHints::FaceType":
        """getFaceType(SoCallbackAction self) -> SoShapeHints::FaceType"""
        return _coin.SoCallbackAction_getFaceType(self)


    def getCreaseAngle(self) -> "float":
        """getCreaseAngle(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getCreaseAngle(self)


    def getNumTextureCoordinates(self) -> "int32_t":
        """getNumTextureCoordinates(SoCallbackAction self) -> int32_t"""
        return _coin.SoCallbackAction_getNumTextureCoordinates(self)


    def getTextureCoordinate2(self, index: 'int const') -> "SbVec2f const &":
        """getTextureCoordinate2(SoCallbackAction self, int const index) -> SbVec2f"""
        return _coin.SoCallbackAction_getTextureCoordinate2(self, index)


    def getTextureCoordinate3(self, index: 'int const') -> "SbVec3f const &":
        """getTextureCoordinate3(SoCallbackAction self, int const index) -> SbVec3f"""
        return _coin.SoCallbackAction_getTextureCoordinate3(self, index)


    def getTextureCoordinate4(self, index: 'int const') -> "SbVec4f const &":
        """getTextureCoordinate4(SoCallbackAction self, int const index) -> SbVec4f"""
        return _coin.SoCallbackAction_getTextureCoordinate4(self, index)


    def getTextureCoordinateBinding(self) -> "SoTextureCoordinateBinding::Binding":
        """getTextureCoordinateBinding(SoCallbackAction self) -> SoTextureCoordinateBinding::Binding"""
        return _coin.SoCallbackAction_getTextureCoordinateBinding(self)


    def getTextureBlendColor(self) -> "SbColor const &":
        """getTextureBlendColor(SoCallbackAction self) -> SbColor"""
        return _coin.SoCallbackAction_getTextureBlendColor(self)


    def getTextureImage(self, *args) -> "unsigned char const *":
        """
        getTextureImage(SoCallbackAction self, SbVec2s size, int & numcomps) -> unsigned char const
        getTextureImage(SoCallbackAction self, SbVec3s size, int & numcomps) -> unsigned char const *
        """
        return _coin.SoCallbackAction_getTextureImage(self, *args)


    def getTextureMatrix(self) -> "SbMatrix const &":
        """getTextureMatrix(SoCallbackAction self) -> SbMatrix"""
        return _coin.SoCallbackAction_getTextureMatrix(self)


    def getTextureModel(self) -> "SoTexture2::Model":
        """getTextureModel(SoCallbackAction self) -> SoTexture2::Model"""
        return _coin.SoCallbackAction_getTextureModel(self)


    def getTextureWrapS(self) -> "SoTexture2::Wrap":
        """getTextureWrapS(SoCallbackAction self) -> SoTexture2::Wrap"""
        return _coin.SoCallbackAction_getTextureWrapS(self)


    def getTextureWrapT(self) -> "SoTexture2::Wrap":
        """getTextureWrapT(SoCallbackAction self) -> SoTexture2::Wrap"""
        return _coin.SoCallbackAction_getTextureWrapT(self)


    def getTextureWrapR(self) -> "SoTexture2::Wrap":
        """getTextureWrapR(SoCallbackAction self) -> SoTexture2::Wrap"""
        return _coin.SoCallbackAction_getTextureWrapR(self)


    def getModelMatrix(self) -> "SbMatrix const &":
        """getModelMatrix(SoCallbackAction self) -> SbMatrix"""
        return _coin.SoCallbackAction_getModelMatrix(self)


    def getUnits(self) -> "SoUnits::Units":
        """getUnits(SoCallbackAction self) -> SoUnits::Units"""
        return _coin.SoCallbackAction_getUnits(self)


    def getFocalDistance(self) -> "float":
        """getFocalDistance(SoCallbackAction self) -> float"""
        return _coin.SoCallbackAction_getFocalDistance(self)


    def getProjectionMatrix(self) -> "SbMatrix const &":
        """getProjectionMatrix(SoCallbackAction self) -> SbMatrix"""
        return _coin.SoCallbackAction_getProjectionMatrix(self)


    def getViewingMatrix(self) -> "SbMatrix const &":
        """getViewingMatrix(SoCallbackAction self) -> SbMatrix"""
        return _coin.SoCallbackAction_getViewingMatrix(self)


    def getViewVolume(self) -> "SbViewVolume const &":
        """getViewVolume(SoCallbackAction self) -> SbViewVolume"""
        return _coin.SoCallbackAction_getViewVolume(self)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoCallbackAction self) -> SbViewportRegion"""
        return _coin.SoCallbackAction_getViewportRegion(self)


    def getPickStyle(self) -> "SoPickStyle::Style":
        """getPickStyle(SoCallbackAction self) -> SoPickStyle::Style"""
        return _coin.SoCallbackAction_getPickStyle(self)


    def getSwitch(self) -> "int32_t":
        """getSwitch(SoCallbackAction self) -> int32_t"""
        return _coin.SoCallbackAction_getSwitch(self)


    def getCurrentResponse(self) -> "SoCallbackAction::Response":
        """getCurrentResponse(SoCallbackAction self) -> SoCallbackAction::Response"""
        return _coin.SoCallbackAction_getCurrentResponse(self)


    def invokePreCallbacks(self, node: 'SoNode') -> "void":
        """invokePreCallbacks(SoCallbackAction self, SoNode node)"""
        return _coin.SoCallbackAction_invokePreCallbacks(self, node)


    def invokePostCallbacks(self, node: 'SoNode') -> "void":
        """invokePostCallbacks(SoCallbackAction self, SoNode node)"""
        return _coin.SoCallbackAction_invokePostCallbacks(self, node)


    def invokeTriangleCallbacks(self, shape: 'SoShape', v1: 'SoPrimitiveVertex', v2: 'SoPrimitiveVertex', v3: 'SoPrimitiveVertex') -> "void":
        """invokeTriangleCallbacks(SoCallbackAction self, SoShape shape, SoPrimitiveVertex v1, SoPrimitiveVertex v2, SoPrimitiveVertex v3)"""
        return _coin.SoCallbackAction_invokeTriangleCallbacks(self, shape, v1, v2, v3)


    def invokeLineSegmentCallbacks(self, shape: 'SoShape', v1: 'SoPrimitiveVertex', v2: 'SoPrimitiveVertex') -> "void":
        """invokeLineSegmentCallbacks(SoCallbackAction self, SoShape shape, SoPrimitiveVertex v1, SoPrimitiveVertex v2)"""
        return _coin.SoCallbackAction_invokeLineSegmentCallbacks(self, shape, v1, v2)


    def invokePointCallbacks(self, shape: 'SoShape', v: 'SoPrimitiveVertex') -> "void":
        """invokePointCallbacks(SoCallbackAction self, SoShape shape, SoPrimitiveVertex v)"""
        return _coin.SoCallbackAction_invokePointCallbacks(self, shape, v)


    def shouldGeneratePrimitives(self, shape: 'SoShape') -> "SbBool":
        """shouldGeneratePrimitives(SoCallbackAction self, SoShape shape) -> SbBool"""
        return _coin.SoCallbackAction_shouldGeneratePrimitives(self, shape)


    def getCurPathTail(self) -> "SoNode *":
        """getCurPathTail(SoCallbackAction self) -> SoNode"""
        return _coin.SoCallbackAction_getCurPathTail(self)


    def setCurrentNode(self, node: 'SoNode') -> "void":
        """setCurrentNode(SoCallbackAction self, SoNode node)"""
        return _coin.SoCallbackAction_setCurrentNode(self, node)


    def setCallbackAll(self, callbackall: 'SbBool') -> "void":
        """setCallbackAll(SoCallbackAction self, SbBool callbackall)"""
        return _coin.SoCallbackAction_setCallbackAll(self, callbackall)


    def isCallbackAll(self) -> "SbBool":
        """isCallbackAll(SoCallbackAction self) -> SbBool"""
        return _coin.SoCallbackAction_isCallbackAll(self)


    def getMaterial(self, index: 'int const'=0) -> "PyObject *":
        """
        getMaterial(SoCallbackAction self, int const index=0) -> PyObject
        getMaterial(SoCallbackAction self) -> PyObject *
        """
        return _coin.SoCallbackAction_getMaterial(self, index)


    def addPreCallback(self, *args) -> "void":
        """
        addPreCallback(SoCallbackAction self, SoType type, SoCallbackAction::SoCallbackActionCB * cb, void * userdata)
        addPreCallback(SoCallbackAction self, SoType type, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addPreCallback(self, *args)


    def addPostCallback(self, *args) -> "void":
        """
        addPostCallback(SoCallbackAction self, SoType type, SoCallbackAction::SoCallbackActionCB * cb, void * userdata)
        addPostCallback(SoCallbackAction self, SoType type, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addPostCallback(self, *args)


    def addPreTailCallback(self, *args) -> "void":
        """
        addPreTailCallback(SoCallbackAction self, SoCallbackAction::SoCallbackActionCB * cb, void * userdata)
        addPreTailCallback(SoCallbackAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addPreTailCallback(self, *args)


    def addPostTailCallback(self, *args) -> "void":
        """
        addPostTailCallback(SoCallbackAction self, SoCallbackAction::SoCallbackActionCB * cb, void * userdata)
        addPostTailCallback(SoCallbackAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addPostTailCallback(self, *args)


    def addTriangleCallback(self, *args) -> "void":
        """
        addTriangleCallback(SoCallbackAction self, SoType type, SoTriangleCB * cb, void * userdata)
        addTriangleCallback(SoCallbackAction self, SoType type, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addTriangleCallback(self, *args)


    def addLineSegmentCallback(self, *args) -> "void":
        """
        addLineSegmentCallback(SoCallbackAction self, SoType type, SoLineSegmentCB * cb, void * userdata)
        addLineSegmentCallback(SoCallbackAction self, SoType type, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addLineSegmentCallback(self, *args)


    def addPointCallback(self, *args) -> "void":
        """
        addPointCallback(SoCallbackAction self, SoType type, SoPointCB * cb, void * userdata)
        addPointCallback(SoCallbackAction self, SoType type, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoCallbackAction_addPointCallback(self, *args)

SoCallbackAction_swigregister = _coin.SoCallbackAction_swigregister
SoCallbackAction_swigregister(SoCallbackAction)

def SoCallbackAction_getClassTypeId() -> "SoType":
    """SoCallbackAction_getClassTypeId() -> SoType"""
    return _coin.SoCallbackAction_getClassTypeId()

def SoCallbackAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoCallbackAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoCallbackAction_addMethod(type, method)

def SoCallbackAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoCallbackAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoCallbackAction_enableElement(type, stackindex)

def SoCallbackAction_initClass() -> "void":
    """SoCallbackAction_initClass()"""
    return _coin.SoCallbackAction_initClass()

class SbViewportRegion(object):
    """Proxy of C++ SbViewportRegion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbViewportRegion self) -> SbViewportRegion
        __init__(SbViewportRegion self, short width, short height) -> SbViewportRegion
        __init__(SbViewportRegion self, SbVec2s winSize) -> SbViewportRegion
        __init__(SbViewportRegion self, SbViewportRegion vpReg) -> SbViewportRegion
        """
        this = _coin.new_SbViewportRegion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setWindowSize(self, *args) -> "void":
        """
        setWindowSize(SbViewportRegion self, short width, short height)
        setWindowSize(SbViewportRegion self, SbVec2s winSize)
        """
        return _coin.SbViewportRegion_setWindowSize(self, *args)


    def setViewport(self, *args) -> "void":
        """
        setViewport(SbViewportRegion self, float left, float bottom, float width, float height)
        setViewport(SbViewportRegion self, SbVec2f origin, SbVec2f size)
        """
        return _coin.SbViewportRegion_setViewport(self, *args)


    def setViewportPixels(self, *args) -> "void":
        """
        setViewportPixels(SbViewportRegion self, short left, short bottom, short width, short height)
        setViewportPixels(SbViewportRegion self, SbVec2s origin, SbVec2s size)
        """
        return _coin.SbViewportRegion_setViewportPixels(self, *args)


    def getWindowSize(self) -> "SbVec2s const &":
        """getWindowSize(SbViewportRegion self) -> SbVec2s"""
        return _coin.SbViewportRegion_getWindowSize(self)


    def getViewportOrigin(self) -> "SbVec2f const &":
        """getViewportOrigin(SbViewportRegion self) -> SbVec2f"""
        return _coin.SbViewportRegion_getViewportOrigin(self)


    def getViewportOriginPixels(self) -> "SbVec2s const &":
        """getViewportOriginPixels(SbViewportRegion self) -> SbVec2s"""
        return _coin.SbViewportRegion_getViewportOriginPixels(self)


    def getViewportSize(self) -> "SbVec2f const &":
        """getViewportSize(SbViewportRegion self) -> SbVec2f"""
        return _coin.SbViewportRegion_getViewportSize(self)


    def getViewportSizePixels(self) -> "SbVec2s const &":
        """getViewportSizePixels(SbViewportRegion self) -> SbVec2s"""
        return _coin.SbViewportRegion_getViewportSizePixels(self)


    def getViewportAspectRatio(self) -> "float":
        """getViewportAspectRatio(SbViewportRegion self) -> float"""
        return _coin.SbViewportRegion_getViewportAspectRatio(self)


    def scaleWidth(self, ratio: 'float') -> "void":
        """scaleWidth(SbViewportRegion self, float ratio)"""
        return _coin.SbViewportRegion_scaleWidth(self, ratio)


    def scaleHeight(self, ratio: 'float') -> "void":
        """scaleHeight(SbViewportRegion self, float ratio)"""
        return _coin.SbViewportRegion_scaleHeight(self, ratio)


    def setPixelsPerInch(self, ppi: 'float') -> "void":
        """setPixelsPerInch(SbViewportRegion self, float ppi)"""
        return _coin.SbViewportRegion_setPixelsPerInch(self, ppi)


    def getPixelsPerInch(self) -> "float":
        """getPixelsPerInch(SbViewportRegion self) -> float"""
        return _coin.SbViewportRegion_getPixelsPerInch(self)


    def getPixelsPerPoint(self) -> "float":
        """getPixelsPerPoint(SbViewportRegion self) -> float"""
        return _coin.SbViewportRegion_getPixelsPerPoint(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbViewportRegion self, FILE * file)"""
        return _coin.SbViewportRegion_output(self, file)


    def __eq__(self, u: 'SbViewportRegion') -> "int":
        """__eq__(SbViewportRegion self, SbViewportRegion u) -> int"""
        return _coin.SbViewportRegion___eq__(self, u)


    def __ne__(self, u: 'SbViewportRegion') -> "int":
        """__ne__(SbViewportRegion self, SbViewportRegion u) -> int"""
        return _coin.SbViewportRegion___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbViewportRegion
    __del__ = lambda self: None
SbViewportRegion_swigregister = _coin.SbViewportRegion_swigregister
SbViewportRegion_swigregister(SbViewportRegion)

class SoGLRenderAction(SoAction):
    """Proxy of C++ SoGLRenderAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGLRenderAction self) -> SoType"""
        return _coin.SoGLRenderAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLRenderAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoGLRenderAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoGLRenderAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLRenderAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, viewportregion: 'SbViewportRegion'):
        """__init__(SoGLRenderAction self, SbViewportRegion viewportregion) -> SoGLRenderAction"""
        this = _coin.new_SoGLRenderAction(viewportregion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoGLRenderAction
    __del__ = lambda self: None
    SCREEN_DOOR = _coin.SoGLRenderAction_SCREEN_DOOR
    ADD = _coin.SoGLRenderAction_ADD
    DELAYED_ADD = _coin.SoGLRenderAction_DELAYED_ADD
    SORTED_OBJECT_ADD = _coin.SoGLRenderAction_SORTED_OBJECT_ADD
    BLEND = _coin.SoGLRenderAction_BLEND
    DELAYED_BLEND = _coin.SoGLRenderAction_DELAYED_BLEND
    SORTED_OBJECT_BLEND = _coin.SoGLRenderAction_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = _coin.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = _coin.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = _coin.SoGLRenderAction_NONE
    SORTED_LAYERS_BLEND = _coin.SoGLRenderAction_SORTED_LAYERS_BLEND
    ONE_PASS = _coin.SoGLRenderAction_ONE_PASS
    NONSOLID_SEPARATE_BACKFACE_PASS = _coin.SoGLRenderAction_NONSOLID_SEPARATE_BACKFACE_PASS
    CONTINUE = _coin.SoGLRenderAction_CONTINUE
    ABORT = _coin.SoGLRenderAction_ABORT
    PRUNE = _coin.SoGLRenderAction_PRUNE
    DELAY = _coin.SoGLRenderAction_DELAY
    BBOX_CENTER = _coin.SoGLRenderAction_BBOX_CENTER
    BBOX_CLOSEST_CORNER = _coin.SoGLRenderAction_BBOX_CLOSEST_CORNER
    BBOX_FARTHEST_CORNER = _coin.SoGLRenderAction_BBOX_FARTHEST_CORNER
    CUSTOM_CALLBACK = _coin.SoGLRenderAction_CUSTOM_CALLBACK

    def setViewportRegion(self, newregion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoGLRenderAction self, SbViewportRegion newregion)"""
        return _coin.SoGLRenderAction_setViewportRegion(self, newregion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoGLRenderAction self) -> SbViewportRegion"""
        return _coin.SoGLRenderAction_getViewportRegion(self)


    def setUpdateArea(self, origin: 'SbVec2f', size: 'SbVec2f') -> "void":
        """setUpdateArea(SoGLRenderAction self, SbVec2f origin, SbVec2f size)"""
        return _coin.SoGLRenderAction_setUpdateArea(self, origin, size)


    def getUpdateArea(self, origin: 'SbVec2f', size: 'SbVec2f') -> "void":
        """getUpdateArea(SoGLRenderAction self, SbVec2f origin, SbVec2f size)"""
        return _coin.SoGLRenderAction_getUpdateArea(self, origin, size)


    def getAbortCallback(self, func_out: 'SoGLRenderAction::SoGLRenderAbortCB *&', userdata_out: 'void *&') -> "void":
        """getAbortCallback(SoGLRenderAction self, SoGLRenderAction::SoGLRenderAbortCB *& func_out, void *& userdata_out)"""
        return _coin.SoGLRenderAction_getAbortCallback(self, func_out, userdata_out)


    def setTransparencyType(self, type: 'SoGLRenderAction::TransparencyType const') -> "void":
        """setTransparencyType(SoGLRenderAction self, SoGLRenderAction::TransparencyType const type)"""
        return _coin.SoGLRenderAction_setTransparencyType(self, type)


    def getTransparencyType(self) -> "SoGLRenderAction::TransparencyType":
        """getTransparencyType(SoGLRenderAction self) -> SoGLRenderAction::TransparencyType"""
        return _coin.SoGLRenderAction_getTransparencyType(self)


    def setTransparentDelayedObjectRenderType(self, type: 'SoGLRenderAction::TransparentDelayedObjectRenderType') -> "void":
        """setTransparentDelayedObjectRenderType(SoGLRenderAction self, SoGLRenderAction::TransparentDelayedObjectRenderType type)"""
        return _coin.SoGLRenderAction_setTransparentDelayedObjectRenderType(self, type)


    def getTransparentDelayedObjectRenderType(self) -> "SoGLRenderAction::TransparentDelayedObjectRenderType":
        """getTransparentDelayedObjectRenderType(SoGLRenderAction self) -> SoGLRenderAction::TransparentDelayedObjectRenderType"""
        return _coin.SoGLRenderAction_getTransparentDelayedObjectRenderType(self)


    def setSmoothing(self, smooth: 'SbBool const') -> "void":
        """setSmoothing(SoGLRenderAction self, SbBool const smooth)"""
        return _coin.SoGLRenderAction_setSmoothing(self, smooth)


    def isSmoothing(self) -> "SbBool":
        """isSmoothing(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_isSmoothing(self)


    def setNumPasses(self, num: 'int const') -> "void":
        """setNumPasses(SoGLRenderAction self, int const num)"""
        return _coin.SoGLRenderAction_setNumPasses(self, num)


    def getNumPasses(self) -> "int":
        """getNumPasses(SoGLRenderAction self) -> int"""
        return _coin.SoGLRenderAction_getNumPasses(self)


    def setPassUpdate(self, flag: 'SbBool const') -> "void":
        """setPassUpdate(SoGLRenderAction self, SbBool const flag)"""
        return _coin.SoGLRenderAction_setPassUpdate(self, flag)


    def isPassUpdate(self) -> "SbBool":
        """isPassUpdate(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_isPassUpdate(self)


    def setCacheContext(self, context: 'uint32_t const') -> "void":
        """setCacheContext(SoGLRenderAction self, uint32_t const context)"""
        return _coin.SoGLRenderAction_setCacheContext(self, context)


    def getCacheContext(self) -> "uint32_t":
        """getCacheContext(SoGLRenderAction self) -> uint32_t"""
        return _coin.SoGLRenderAction_getCacheContext(self)


    def addDelayedPath(self, path: 'SoPath') -> "void":
        """addDelayedPath(SoGLRenderAction self, SoPath path)"""
        return _coin.SoGLRenderAction_addDelayedPath(self, path)


    def isRenderingDelayedPaths(self) -> "SbBool":
        """isRenderingDelayedPaths(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_isRenderingDelayedPaths(self)


    def handleTransparency(self, istransparent: 'SbBool'=0) -> "SbBool":
        """
        handleTransparency(SoGLRenderAction self, SbBool istransparent=0) -> SbBool
        handleTransparency(SoGLRenderAction self) -> SbBool
        """
        return _coin.SoGLRenderAction_handleTransparency(self, istransparent)


    def setCurPass(self, passnum: 'int const', numpasses: 'int const') -> "void":
        """setCurPass(SoGLRenderAction self, int const passnum, int const numpasses)"""
        return _coin.SoGLRenderAction_setCurPass(self, passnum, numpasses)


    def getCurPass(self) -> "int":
        """getCurPass(SoGLRenderAction self) -> int"""
        return _coin.SoGLRenderAction_getCurPass(self)


    def abortNow(self) -> "SbBool":
        """abortNow(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_abortNow(self)


    def setRenderingIsRemote(self, isremote: 'SbBool') -> "void":
        """setRenderingIsRemote(SoGLRenderAction self, SbBool isremote)"""
        return _coin.SoGLRenderAction_setRenderingIsRemote(self, isremote)


    def getRenderingIsRemote(self) -> "SbBool":
        """getRenderingIsRemote(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_getRenderingIsRemote(self)


    def invalidateState(self) -> "void":
        """invalidateState(SoGLRenderAction self)"""
        return _coin.SoGLRenderAction_invalidateState(self)


    def setSortedLayersNumPasses(self, num: 'int') -> "void":
        """setSortedLayersNumPasses(SoGLRenderAction self, int num)"""
        return _coin.SoGLRenderAction_setSortedLayersNumPasses(self, num)


    def getSortedLayersNumPasses(self) -> "int":
        """getSortedLayersNumPasses(SoGLRenderAction self) -> int"""
        return _coin.SoGLRenderAction_getSortedLayersNumPasses(self)


    def setSortedObjectOrderStrategy(self, strategy: 'SoGLRenderAction::SortedObjectOrderStrategy const', cb: 'SoGLSortedObjectOrderCB *'=None, closure: 'void *'=None) -> "void":
        """
        setSortedObjectOrderStrategy(SoGLRenderAction self, SoGLRenderAction::SortedObjectOrderStrategy const strategy, SoGLSortedObjectOrderCB * cb=None, void * closure=None)
        setSortedObjectOrderStrategy(SoGLRenderAction self, SoGLRenderAction::SortedObjectOrderStrategy const strategy, SoGLSortedObjectOrderCB * cb=None)
        setSortedObjectOrderStrategy(SoGLRenderAction self, SoGLRenderAction::SortedObjectOrderStrategy const strategy)
        """
        return _coin.SoGLRenderAction_setSortedObjectOrderStrategy(self, strategy, cb, closure)


    def setDelayedObjDepthWrite(self, write: 'SbBool') -> "void":
        """setDelayedObjDepthWrite(SoGLRenderAction self, SbBool write)"""
        return _coin.SoGLRenderAction_setDelayedObjDepthWrite(self, write)


    def getDelayedObjDepthWrite(self) -> "SbBool":
        """getDelayedObjDepthWrite(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_getDelayedObjDepthWrite(self)


    def isRenderingTranspPaths(self) -> "SbBool":
        """isRenderingTranspPaths(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_isRenderingTranspPaths(self)


    def isRenderingTranspBackfaces(self) -> "SbBool":
        """isRenderingTranspBackfaces(SoGLRenderAction self) -> SbBool"""
        return _coin.SoGLRenderAction_isRenderingTranspBackfaces(self)


    def setPassCallback(self, *args) -> "void":
        """
        setPassCallback(SoGLRenderAction self, SoGLRenderPassCB *const func, void *const userdata)
        setPassCallback(SoGLRenderAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoGLRenderAction_setPassCallback(self, *args)


    def setAbortCallback(self, *args) -> "void":
        """
        setAbortCallback(SoGLRenderAction self, SoGLRenderAction::SoGLRenderAbortCB *const func, void *const userdata)
        setAbortCallback(SoGLRenderAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoGLRenderAction_setAbortCallback(self, *args)


    def addPreRenderCallback(self, *args) -> "void":
        """
        addPreRenderCallback(SoGLRenderAction self, SoGLPreRenderCB * func, void * userdata)
        addPreRenderCallback(SoGLRenderAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoGLRenderAction_addPreRenderCallback(self, *args)


    def removePreRenderCallback(self, *args) -> "void":
        """
        removePreRenderCallback(SoGLRenderAction self, SoGLPreRenderCB * func, void * userdata)
        removePreRenderCallback(SoGLRenderAction self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.SoGLRenderAction_removePreRenderCallback(self, *args)


    def constructFromAction(action: 'SoAction') -> "SoGLRenderAction *":
        """constructFromAction(SoAction action) -> SoGLRenderAction"""
        return _coin.SoGLRenderAction_constructFromAction(action)

    constructFromAction = staticmethod(constructFromAction)
SoGLRenderAction_swigregister = _coin.SoGLRenderAction_swigregister
SoGLRenderAction_swigregister(SoGLRenderAction)

def SoGLRenderAction_getClassTypeId() -> "SoType":
    """SoGLRenderAction_getClassTypeId() -> SoType"""
    return _coin.SoGLRenderAction_getClassTypeId()

def SoGLRenderAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoGLRenderAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoGLRenderAction_addMethod(type, method)

def SoGLRenderAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoGLRenderAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoGLRenderAction_enableElement(type, stackindex)

def SoGLRenderAction_initClass() -> "void":
    """SoGLRenderAction_initClass()"""
    return _coin.SoGLRenderAction_initClass()

def SoGLRenderAction_constructFromAction(action: 'SoAction') -> "SoGLRenderAction *":
    """SoGLRenderAction_constructFromAction(SoAction action) -> SoGLRenderAction"""
    return _coin.SoGLRenderAction_constructFromAction(action)

class SoBoxHighlightRenderAction(SoGLRenderAction):
    """Proxy of C++ SoBoxHighlightRenderAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBoxHighlightRenderAction self) -> SoType"""
        return _coin.SoBoxHighlightRenderAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBoxHighlightRenderAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoBoxHighlightRenderAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoBoxHighlightRenderAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBoxHighlightRenderAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoBoxHighlightRenderAction self) -> SoBoxHighlightRenderAction
        __init__(SoBoxHighlightRenderAction self, SbViewportRegion viewportregion) -> SoBoxHighlightRenderAction
        """
        this = _coin.new_SoBoxHighlightRenderAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoBoxHighlightRenderAction
    __del__ = lambda self: None

    def apply(self, *args) -> "void":
        """
        apply(SoBoxHighlightRenderAction self, SoNode node)
        apply(SoBoxHighlightRenderAction self, SoPath path)
        apply(SoBoxHighlightRenderAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoBoxHighlightRenderAction self, SoPathList pathlist)
        """
        return _coin.SoBoxHighlightRenderAction_apply(self, *args)


    def setVisible(self, visible: 'SbBool const') -> "void":
        """setVisible(SoBoxHighlightRenderAction self, SbBool const visible)"""
        return _coin.SoBoxHighlightRenderAction_setVisible(self, visible)


    def isVisible(self) -> "SbBool":
        """isVisible(SoBoxHighlightRenderAction self) -> SbBool"""
        return _coin.SoBoxHighlightRenderAction_isVisible(self)


    def setColor(self, color: 'SbColor') -> "void":
        """setColor(SoBoxHighlightRenderAction self, SbColor color)"""
        return _coin.SoBoxHighlightRenderAction_setColor(self, color)


    def getColor(self) -> "SbColor const &":
        """getColor(SoBoxHighlightRenderAction self) -> SbColor"""
        return _coin.SoBoxHighlightRenderAction_getColor(self)


    def setLinePattern(self, pattern: 'unsigned short') -> "void":
        """setLinePattern(SoBoxHighlightRenderAction self, unsigned short pattern)"""
        return _coin.SoBoxHighlightRenderAction_setLinePattern(self, pattern)


    def getLinePattern(self) -> "unsigned short":
        """getLinePattern(SoBoxHighlightRenderAction self) -> unsigned short"""
        return _coin.SoBoxHighlightRenderAction_getLinePattern(self)


    def setLineWidth(self, width: 'float const') -> "void":
        """setLineWidth(SoBoxHighlightRenderAction self, float const width)"""
        return _coin.SoBoxHighlightRenderAction_setLineWidth(self, width)


    def getLineWidth(self) -> "float":
        """getLineWidth(SoBoxHighlightRenderAction self) -> float"""
        return _coin.SoBoxHighlightRenderAction_getLineWidth(self)

SoBoxHighlightRenderAction_swigregister = _coin.SoBoxHighlightRenderAction_swigregister
SoBoxHighlightRenderAction_swigregister(SoBoxHighlightRenderAction)

def SoBoxHighlightRenderAction_getClassTypeId() -> "SoType":
    """SoBoxHighlightRenderAction_getClassTypeId() -> SoType"""
    return _coin.SoBoxHighlightRenderAction_getClassTypeId()

def SoBoxHighlightRenderAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoBoxHighlightRenderAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoBoxHighlightRenderAction_addMethod(type, method)

def SoBoxHighlightRenderAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoBoxHighlightRenderAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoBoxHighlightRenderAction_enableElement(type, stackindex)

def SoBoxHighlightRenderAction_initClass() -> "void":
    """SoBoxHighlightRenderAction_initClass()"""
    return _coin.SoBoxHighlightRenderAction_initClass()

class SoLineHighlightRenderAction(SoGLRenderAction):
    """Proxy of C++ SoLineHighlightRenderAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLineHighlightRenderAction self) -> SoType"""
        return _coin.SoLineHighlightRenderAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLineHighlightRenderAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoLineHighlightRenderAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoLineHighlightRenderAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLineHighlightRenderAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoLineHighlightRenderAction self) -> SoLineHighlightRenderAction
        __init__(SoLineHighlightRenderAction self, SbViewportRegion viewportregion) -> SoLineHighlightRenderAction
        """
        this = _coin.new_SoLineHighlightRenderAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoLineHighlightRenderAction
    __del__ = lambda self: None

    def apply(self, *args) -> "void":
        """
        apply(SoLineHighlightRenderAction self, SoNode node)
        apply(SoLineHighlightRenderAction self, SoPath path)
        apply(SoLineHighlightRenderAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoLineHighlightRenderAction self, SoPathList pathlist)
        """
        return _coin.SoLineHighlightRenderAction_apply(self, *args)


    def setVisible(self, visible: 'SbBool const') -> "void":
        """setVisible(SoLineHighlightRenderAction self, SbBool const visible)"""
        return _coin.SoLineHighlightRenderAction_setVisible(self, visible)


    def isVisible(self) -> "SbBool":
        """isVisible(SoLineHighlightRenderAction self) -> SbBool"""
        return _coin.SoLineHighlightRenderAction_isVisible(self)


    def setColor(self, color: 'SbColor') -> "void":
        """setColor(SoLineHighlightRenderAction self, SbColor color)"""
        return _coin.SoLineHighlightRenderAction_setColor(self, color)


    def getColor(self) -> "SbColor const &":
        """getColor(SoLineHighlightRenderAction self) -> SbColor"""
        return _coin.SoLineHighlightRenderAction_getColor(self)


    def setLinePattern(self, pattern: 'uint16_t') -> "void":
        """setLinePattern(SoLineHighlightRenderAction self, uint16_t pattern)"""
        return _coin.SoLineHighlightRenderAction_setLinePattern(self, pattern)


    def getLinePattern(self) -> "uint16_t":
        """getLinePattern(SoLineHighlightRenderAction self) -> uint16_t"""
        return _coin.SoLineHighlightRenderAction_getLinePattern(self)


    def setLineWidth(self, width: 'float const') -> "void":
        """setLineWidth(SoLineHighlightRenderAction self, float const width)"""
        return _coin.SoLineHighlightRenderAction_setLineWidth(self, width)


    def getLineWidth(self) -> "float":
        """getLineWidth(SoLineHighlightRenderAction self) -> float"""
        return _coin.SoLineHighlightRenderAction_getLineWidth(self)

SoLineHighlightRenderAction_swigregister = _coin.SoLineHighlightRenderAction_swigregister
SoLineHighlightRenderAction_swigregister(SoLineHighlightRenderAction)

def SoLineHighlightRenderAction_getClassTypeId() -> "SoType":
    """SoLineHighlightRenderAction_getClassTypeId() -> SoType"""
    return _coin.SoLineHighlightRenderAction_getClassTypeId()

def SoLineHighlightRenderAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoLineHighlightRenderAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoLineHighlightRenderAction_addMethod(type, method)

def SoLineHighlightRenderAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoLineHighlightRenderAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoLineHighlightRenderAction_enableElement(type, stackindex)

def SoLineHighlightRenderAction_initClass() -> "void":
    """SoLineHighlightRenderAction_initClass()"""
    return _coin.SoLineHighlightRenderAction_initClass()

class SbBox3f(object):
    """Proxy of C++ SbBox3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox3f self) -> SbBox3f
        __init__(SbBox3f self, float xmin, float ymin, float zmin, float xmax, float ymax, float zmax) -> SbBox3f
        __init__(SbBox3f self, SbVec3f minpoint, SbVec3f maxpoint) -> SbBox3f
        __init__(SbBox3f self, SbBox3d box) -> SbBox3f
        __init__(SbBox3f self, SbBox3s box) -> SbBox3f
        __init__(SbBox3f self, SbBox3i32 box) -> SbBox3f
        """
        this = _coin.new_SbBox3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox3f &":
        """
        setBounds(SbBox3f self, float xmin, float ymin, float zmin, float xmax, float ymax, float zmax) -> SbBox3f
        setBounds(SbBox3f self, SbVec3f minpoint, SbVec3f maxpoint) -> SbBox3f
        setBounds(SbBox3f self, SbBox3d box) -> SbBox3f
        setBounds(SbBox3f self, SbBox3s box) -> SbBox3f
        setBounds(SbBox3f self, SbBox3i32 box) -> SbBox3f
        """
        return _coin.SbBox3f_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox3f self, float & xmin, float & ymin, float & zmin, float & xmax, float & ymax, float & zmax)
        getBounds(SbBox3f self, SbVec3f minpoint, SbVec3f maxpoint)
        """
        return _coin.SbBox3f_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec3f &":
        """
        getMin(SbBox3f self) -> SbVec3f
        getMin(SbBox3f self) -> SbVec3f
        """
        return _coin.SbBox3f_getMin(self, *args)


    def getMax(self, *args) -> "SbVec3f &":
        """
        getMax(SbBox3f self) -> SbVec3f
        getMax(SbBox3f self) -> SbVec3f
        """
        return _coin.SbBox3f_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox3f self, SbVec3f pt)
        extendBy(SbBox3f self, SbBox3f box)
        """
        return _coin.SbBox3f_extendBy(self, *args)


    def transform(self, matrix: 'SbMatrix') -> "void":
        """transform(SbBox3f self, SbMatrix matrix)"""
        return _coin.SbBox3f_transform(self, matrix)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox3f self)"""
        return _coin.SbBox3f_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox3f self) -> SbBool"""
        return _coin.SbBox3f_isEmpty(self)


    def hasVolume(self) -> "SbBool":
        """hasVolume(SbBox3f self) -> SbBool"""
        return _coin.SbBox3f_hasVolume(self)


    def getVolume(self) -> "float":
        """getVolume(SbBox3f self) -> float"""
        return _coin.SbBox3f_getVolume(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox3f self, SbVec3f pt) -> SbBool
        intersect(SbBox3f self, SbBox3f box) -> SbBool
        """
        return _coin.SbBox3f_intersect(self, *args)


    def getClosestPoint(self, point: 'SbVec3f') -> "SbVec3f":
        """getClosestPoint(SbBox3f self, SbVec3f point) -> SbVec3f"""
        return _coin.SbBox3f_getClosestPoint(self, point)


    def outside(self, mvp: 'SbMatrix', cullbits: 'int &') -> "SbBool":
        """outside(SbBox3f self, SbMatrix mvp, int & cullbits) -> SbBool"""
        return _coin.SbBox3f_outside(self, mvp, cullbits)


    def getCenter(self) -> "SbVec3f":
        """getCenter(SbBox3f self) -> SbVec3f"""
        return _coin.SbBox3f_getCenter(self)


    def getOrigin(self, originX: 'float &', originY: 'float &', originZ: 'float &') -> "void":
        """getOrigin(SbBox3f self, float & originX, float & originY, float & originZ)"""
        return _coin.SbBox3f_getOrigin(self, originX, originY, originZ)


    def getSize(self, *args) -> "SbVec3f":
        """
        getSize(SbBox3f self, float & sizeX, float & sizeY, float & sizeZ)
        getSize(SbBox3f self) -> SbVec3f
        """
        return _coin.SbBox3f_getSize(self, *args)


    def getSpan(self, dir: 'SbVec3f', dmin: 'float &', dmax: 'float &') -> "void":
        """getSpan(SbBox3f self, SbVec3f dir, float & dmin, float & dmax)"""
        return _coin.SbBox3f_getSpan(self, dir, dmin, dmax)


    def output(self, file: 'FILE *') -> "void":
        """output(SbBox3f self, FILE * file)"""
        return _coin.SbBox3f_output(self, file)


    def __eq__(self, u: 'SbBox3f') -> "int":
        """__eq__(SbBox3f self, SbBox3f u) -> int"""
        return _coin.SbBox3f___eq__(self, u)


    def __ne__(self, u: 'SbBox3f') -> "int":
        """__ne__(SbBox3f self, SbBox3f u) -> int"""
        return _coin.SbBox3f___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbBox3f
    __del__ = lambda self: None
SbBox3f_swigregister = _coin.SbBox3f_swigregister
SbBox3f_swigregister(SbBox3f)

class SbMatrix(object):
    """Proxy of C++ SbMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbMatrix self) -> SbMatrix
        __init__(SbMatrix self, float const a11, float const a12, float const a13, float const a14, float const a21, float const a22, float const a23, float const a24, float const a31, float const a32, float const a33, float const a34, float const a41, float const a42, float const a43, float const a44) -> SbMatrix
        __init__(SbMatrix self, SbMat const & matrix) -> SbMatrix
        __init__(SbMatrix self, SbMat const * matrix) -> SbMatrix
        __init__(SbMatrix self, SbDPMatrix matrix) -> SbMatrix
        """
        this = _coin.new_SbMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbMatrix
    __del__ = lambda self: None

    def setValue(self, *args) -> "void":
        """
        setValue(SbMatrix self, SbMat const & m)
        setValue(SbMatrix self, SbDPMatrix m)
        setValue(SbMatrix self, float const * pMat)
        """
        return _coin.SbMatrix_setValue(self, *args)


    def makeIdentity(self) -> "void":
        """makeIdentity(SbMatrix self)"""
        return _coin.SbMatrix_makeIdentity(self)


    def setRotate(self, q: 'SbRotation') -> "void":
        """setRotate(SbMatrix self, SbRotation q)"""
        return _coin.SbMatrix_setRotate(self, q)


    def inverse(self) -> "SbMatrix":
        """inverse(SbMatrix self) -> SbMatrix"""
        return _coin.SbMatrix_inverse(self)


    def det3(self, *args) -> "float":
        """
        det3(SbMatrix self, int r1, int r2, int r3, int c1, int c2, int c3) -> float
        det3(SbMatrix self) -> float
        """
        return _coin.SbMatrix_det3(self, *args)


    def det4(self) -> "float":
        """det4(SbMatrix self) -> float"""
        return _coin.SbMatrix_det4(self)


    def equals(self, m: 'SbMatrix', tolerance: 'float') -> "SbBool":
        """equals(SbMatrix self, SbMatrix m, float tolerance) -> SbBool"""
        return _coin.SbMatrix_equals(self, m, tolerance)


    def getValue(self, *args) -> "void":
        """
        getValue(SbMatrix self) -> SbMat const
        getValue(SbMatrix self, SbMat & m)
        """
        return _coin.SbMatrix_getValue(self, *args)


    def identity() -> "SbMatrix":
        """identity() -> SbMatrix"""
        return _coin.SbMatrix_identity()

    identity = staticmethod(identity)

    def setScale(self, *args) -> "void":
        """
        setScale(SbMatrix self, float const s)
        setScale(SbMatrix self, SbVec3f s)
        """
        return _coin.SbMatrix_setScale(self, *args)


    def setTranslate(self, t: 'SbVec3f') -> "void":
        """setTranslate(SbMatrix self, SbVec3f t)"""
        return _coin.SbMatrix_setTranslate(self, t)


    def setTransform(self, *args) -> "void":
        """
        setTransform(SbMatrix self, SbVec3f t, SbRotation r, SbVec3f s)
        setTransform(SbMatrix self, SbVec3f t, SbRotation r, SbVec3f s, SbRotation so)
        setTransform(SbMatrix self, SbVec3f translation, SbRotation rotation, SbVec3f scaleFactor, SbRotation scaleOrientation, SbVec3f center)
        """
        return _coin.SbMatrix_setTransform(self, *args)


    def factor(self, r: 'SbMatrix', s: 'SbVec3f', u: 'SbMatrix', t: 'SbVec3f', proj: 'SbMatrix') -> "SbBool":
        """factor(SbMatrix self, SbMatrix r, SbVec3f s, SbMatrix u, SbVec3f t, SbMatrix proj) -> SbBool"""
        return _coin.SbMatrix_factor(self, r, s, u, t, proj)


    def LUDecomposition(self, index: 'int [4]', d: 'float &') -> "SbBool":
        """LUDecomposition(SbMatrix self, int [4] index, float & d) -> SbBool"""
        return _coin.SbMatrix_LUDecomposition(self, index, d)


    def LUBackSubstitution(self, index: 'int [4]', b: 'float [4]') -> "void":
        """LUBackSubstitution(SbMatrix self, int [4] index, float [4] b)"""
        return _coin.SbMatrix_LUBackSubstitution(self, index, b)


    def transpose(self) -> "SbMatrix":
        """transpose(SbMatrix self) -> SbMatrix"""
        return _coin.SbMatrix_transpose(self)


    def multRight(self, m: 'SbMatrix') -> "SbMatrix &":
        """multRight(SbMatrix self, SbMatrix m) -> SbMatrix"""
        return _coin.SbMatrix_multRight(self, m)


    def multLeft(self, m: 'SbMatrix') -> "SbMatrix &":
        """multLeft(SbMatrix self, SbMatrix m) -> SbMatrix"""
        return _coin.SbMatrix_multLeft(self, m)


    def multMatrixVec(self, src: 'SbVec3f') -> "void":
        """multMatrixVec(SbMatrix self, SbVec3f src)"""
        return _coin.SbMatrix_multMatrixVec(self, src)


    def multDirMatrix(self, src: 'SbVec3f') -> "void":
        """multDirMatrix(SbMatrix self, SbVec3f src)"""
        return _coin.SbMatrix_multDirMatrix(self, src)


    def multLineMatrix(self, src: 'SbLine', dst: 'SbLine') -> "void":
        """multLineMatrix(SbMatrix self, SbLine src, SbLine dst)"""
        return _coin.SbMatrix_multLineMatrix(self, src, dst)


    def multVecMatrix(self, *args) -> "void":
        """
        multVecMatrix(SbMatrix self, SbVec3f src)
        multVecMatrix(SbMatrix self, SbVec4f src)
        """
        return _coin.SbMatrix_multVecMatrix(self, *args)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbMatrix self, FILE * fp)"""
        return _coin.SbMatrix_output(self, fp)


    def __imul__(self, m: 'SbMatrix') -> "SbMatrix &":
        """__imul__(SbMatrix self, SbMatrix m) -> SbMatrix"""
        return _coin.SbMatrix___imul__(self, m)


    def getTransform(self, *args) -> "PyObject *":
        """
        getTransform(SbMatrix self, SbVec3f t, SbRotation r, SbVec3f s, SbRotation so)
        getTransform(SbMatrix self) -> PyObject
        getTransform(SbMatrix self, SbVec3f center) -> PyObject *
        """
        return _coin.SbMatrix_getTransform(self, *args)


    def __mul__(self, *args) -> "SbVec3f":
        """
        __mul__(SbMatrix self, SbMatrix u) -> SbMatrix
        __mul__(SbMatrix self, SbVec3f u) -> SbVec3f
        """
        return _coin.SbMatrix___mul__(self, *args)


    def __rmul__(self, u: 'SbVec3f') -> "SbVec3f":
        """__rmul__(SbMatrix self, SbVec3f u) -> SbVec3f"""
        return _coin.SbMatrix___rmul__(self, u)


    def __eq__(self, u: 'SbMatrix') -> "int":
        """__eq__(SbMatrix self, SbMatrix u) -> int"""
        return _coin.SbMatrix___eq__(self, u)


    def __ne__(self, u: 'SbMatrix') -> "int":
        """__ne__(SbMatrix self, SbMatrix u) -> int"""
        return _coin.SbMatrix___ne__(self, u)


    def __getitem__(self, i: 'int') -> "float const *":
        """__getitem__(SbMatrix self, int i) -> float const *"""
        return _coin.SbMatrix___getitem__(self, i)

SbMatrix_swigregister = _coin.SbMatrix_swigregister
SbMatrix_swigregister(SbMatrix)

def SbMatrix_identity() -> "SbMatrix":
    """SbMatrix_identity() -> SbMatrix"""
    return _coin.SbMatrix_identity()

class SbXfBox3f(SbBox3f):
    """Proxy of C++ SbXfBox3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbXfBox3f self) -> SbXfBox3f
        __init__(SbXfBox3f self, SbVec3f boxmin, SbVec3f boxmax) -> SbXfBox3f
        __init__(SbXfBox3f self, SbBox3f box) -> SbXfBox3f
        """
        this = _coin.new_SbXfBox3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbXfBox3f
    __del__ = lambda self: None

    def setTransform(self, m: 'SbMatrix') -> "void":
        """setTransform(SbXfBox3f self, SbMatrix m)"""
        return _coin.SbXfBox3f_setTransform(self, m)


    def getTransform(self) -> "SbMatrix const &":
        """getTransform(SbXfBox3f self) -> SbMatrix"""
        return _coin.SbXfBox3f_getTransform(self)


    def getInverse(self) -> "SbMatrix const &":
        """getInverse(SbXfBox3f self) -> SbMatrix"""
        return _coin.SbXfBox3f_getInverse(self)


    def getCenter(self) -> "SbVec3f":
        """getCenter(SbXfBox3f self) -> SbVec3f"""
        return _coin.SbXfBox3f_getCenter(self)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbXfBox3f self, SbVec3f pt)
        extendBy(SbXfBox3f self, SbBox3f bb)
        extendBy(SbXfBox3f self, SbXfBox3f bb)
        """
        return _coin.SbXfBox3f_extendBy(self, *args)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbXfBox3f self, SbVec3f pt) -> SbBool
        intersect(SbXfBox3f self, SbBox3f bb) -> SbBool
        intersect(SbXfBox3f self, SbXfBox3f bb) -> SbBool
        """
        return _coin.SbXfBox3f_intersect(self, *args)


    def getSpan(self, direction: 'SbVec3f', dMin: 'float &', dMax: 'float &') -> "void":
        """getSpan(SbXfBox3f self, SbVec3f direction, float & dMin, float & dMax)"""
        return _coin.SbXfBox3f_getSpan(self, direction, dMin, dMax)


    def project(self) -> "SbBox3f":
        """project(SbXfBox3f self) -> SbBox3f"""
        return _coin.SbXfBox3f_project(self)


    def transform(self, m: 'SbMatrix') -> "void":
        """transform(SbXfBox3f self, SbMatrix m)"""
        return _coin.SbXfBox3f_transform(self, m)


    def getVolume(self) -> "float":
        """getVolume(SbXfBox3f self) -> float"""
        return _coin.SbXfBox3f_getVolume(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbXfBox3f self, FILE * file)"""
        return _coin.SbXfBox3f_output(self, file)


    def __eq__(self, u: 'SbXfBox3f') -> "int":
        """__eq__(SbXfBox3f self, SbXfBox3f u) -> int"""
        return _coin.SbXfBox3f___eq__(self, u)


    def __ne__(self, u: 'SbXfBox3f') -> "int":
        """__ne__(SbXfBox3f self, SbXfBox3f u) -> int"""
        return _coin.SbXfBox3f___ne__(self, u)

SbXfBox3f_swigregister = _coin.SbXfBox3f_swigregister
SbXfBox3f_swigregister(SbXfBox3f)

class SoGetBoundingBoxAction(SoAction):
    """Proxy of C++ SoGetBoundingBoxAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGetBoundingBoxAction self) -> SoType"""
        return _coin.SoGetBoundingBoxAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGetBoundingBoxAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoGetBoundingBoxAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoGetBoundingBoxAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGetBoundingBoxAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, vp: 'SbViewportRegion'):
        """__init__(SoGetBoundingBoxAction self, SbViewportRegion vp) -> SoGetBoundingBoxAction"""
        this = _coin.new_SoGetBoundingBoxAction(vp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoGetBoundingBoxAction
    __del__ = lambda self: None
    TRANSFORM = _coin.SoGetBoundingBoxAction_TRANSFORM
    BBOX = _coin.SoGetBoundingBoxAction_BBOX
    ALL = _coin.SoGetBoundingBoxAction_ALL

    def setViewportRegion(self, newregion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoGetBoundingBoxAction self, SbViewportRegion newregion)"""
        return _coin.SoGetBoundingBoxAction_setViewportRegion(self, newregion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoGetBoundingBoxAction self) -> SbViewportRegion"""
        return _coin.SoGetBoundingBoxAction_getViewportRegion(self)


    def getBoundingBox(self) -> "SbBox3f":
        """getBoundingBox(SoGetBoundingBoxAction self) -> SbBox3f"""
        return _coin.SoGetBoundingBoxAction_getBoundingBox(self)


    def getXfBoundingBox(self) -> "SbXfBox3f &":
        """getXfBoundingBox(SoGetBoundingBoxAction self) -> SbXfBox3f"""
        return _coin.SoGetBoundingBoxAction_getXfBoundingBox(self)


    def getCenter(self) -> "SbVec3f const &":
        """getCenter(SoGetBoundingBoxAction self) -> SbVec3f"""
        return _coin.SoGetBoundingBoxAction_getCenter(self)


    def setInCameraSpace(self, flag: 'SbBool const') -> "void":
        """setInCameraSpace(SoGetBoundingBoxAction self, SbBool const flag)"""
        return _coin.SoGetBoundingBoxAction_setInCameraSpace(self, flag)


    def isInCameraSpace(self) -> "SbBool":
        """isInCameraSpace(SoGetBoundingBoxAction self) -> SbBool"""
        return _coin.SoGetBoundingBoxAction_isInCameraSpace(self)


    def setResetPath(self, *args) -> "void":
        """
        setResetPath(SoGetBoundingBoxAction self, SoPath path, SbBool const resetbefore=1, SoGetBoundingBoxAction::ResetType const what)
        setResetPath(SoGetBoundingBoxAction self, SoPath path, SbBool const resetbefore=1)
        setResetPath(SoGetBoundingBoxAction self, SoPath path)
        """
        return _coin.SoGetBoundingBoxAction_setResetPath(self, *args)


    def getResetPath(self) -> "SoPath const *":
        """getResetPath(SoGetBoundingBoxAction self) -> SoPath"""
        return _coin.SoGetBoundingBoxAction_getResetPath(self)


    def isResetPath(self) -> "SbBool":
        """isResetPath(SoGetBoundingBoxAction self) -> SbBool"""
        return _coin.SoGetBoundingBoxAction_isResetPath(self)


    def isResetBefore(self) -> "SbBool":
        """isResetBefore(SoGetBoundingBoxAction self) -> SbBool"""
        return _coin.SoGetBoundingBoxAction_isResetBefore(self)


    def getWhatReset(self) -> "SoGetBoundingBoxAction::ResetType":
        """getWhatReset(SoGetBoundingBoxAction self) -> SoGetBoundingBoxAction::ResetType"""
        return _coin.SoGetBoundingBoxAction_getWhatReset(self)


    def checkResetBefore(self) -> "void":
        """checkResetBefore(SoGetBoundingBoxAction self)"""
        return _coin.SoGetBoundingBoxAction_checkResetBefore(self)


    def checkResetAfter(self) -> "void":
        """checkResetAfter(SoGetBoundingBoxAction self)"""
        return _coin.SoGetBoundingBoxAction_checkResetAfter(self)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SoGetBoundingBoxAction self, SbBox3f box)
        extendBy(SoGetBoundingBoxAction self, SbXfBox3f box)
        """
        return _coin.SoGetBoundingBoxAction_extendBy(self, *args)


    def setCenter(self, center: 'SbVec3f', transformcenter: 'SbBool const') -> "void":
        """setCenter(SoGetBoundingBoxAction self, SbVec3f center, SbBool const transformcenter)"""
        return _coin.SoGetBoundingBoxAction_setCenter(self, center, transformcenter)


    def isCenterSet(self) -> "SbBool":
        """isCenterSet(SoGetBoundingBoxAction self) -> SbBool"""
        return _coin.SoGetBoundingBoxAction_isCenterSet(self)


    def resetCenter(self) -> "void":
        """resetCenter(SoGetBoundingBoxAction self)"""
        return _coin.SoGetBoundingBoxAction_resetCenter(self)

SoGetBoundingBoxAction_swigregister = _coin.SoGetBoundingBoxAction_swigregister
SoGetBoundingBoxAction_swigregister(SoGetBoundingBoxAction)

def SoGetBoundingBoxAction_getClassTypeId() -> "SoType":
    """SoGetBoundingBoxAction_getClassTypeId() -> SoType"""
    return _coin.SoGetBoundingBoxAction_getClassTypeId()

def SoGetBoundingBoxAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoGetBoundingBoxAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoGetBoundingBoxAction_addMethod(type, method)

def SoGetBoundingBoxAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoGetBoundingBoxAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoGetBoundingBoxAction_enableElement(type, stackindex)

def SoGetBoundingBoxAction_initClass() -> "void":
    """SoGetBoundingBoxAction_initClass()"""
    return _coin.SoGetBoundingBoxAction_initClass()

class SbVec4f(object):
    """Proxy of C++ SbVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4f self) -> SbVec4f
        __init__(SbVec4f self, float const [4] v) -> SbVec4f
        __init__(SbVec4f self, float x, float y, float z, float w) -> SbVec4f
        __init__(SbVec4f self, SbVec4d v) -> SbVec4f
        __init__(SbVec4f self, SbVec4b v) -> SbVec4f
        __init__(SbVec4f self, SbVec4s v) -> SbVec4f
        __init__(SbVec4f self, SbVec4i32 v) -> SbVec4f
        """
        this = _coin.new_SbVec4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4f &":
        """
        setValue(SbVec4f self, float const [4] v) -> SbVec4f
        setValue(SbVec4f self, float x, float y, float z, float w) -> SbVec4f
        setValue(SbVec4f self, SbVec4d v) -> SbVec4f
        setValue(SbVec4f self, SbVec4b v) -> SbVec4f
        setValue(SbVec4f self, SbVec4s v) -> SbVec4f
        setValue(SbVec4f self, SbVec4i32 v) -> SbVec4f
        """
        return _coin.SbVec4f_setValue(self, *args)


    def getValue(self) -> "float const *":
        """getValue(SbVec4f self) -> float const *"""
        return _coin.SbVec4f_getValue(self)


    def equals(self, v: 'SbVec4f', tolerance: 'float') -> "SbBool":
        """equals(SbVec4f self, SbVec4f v, float tolerance) -> SbBool"""
        return _coin.SbVec4f_equals(self, v, tolerance)


    def dot(self, v: 'SbVec4f') -> "float":
        """dot(SbVec4f self, SbVec4f v) -> float"""
        return _coin.SbVec4f_dot(self, v)


    def getReal(self, v: 'SbVec3f') -> "void":
        """getReal(SbVec4f self, SbVec3f v)"""
        return _coin.SbVec4f_getReal(self, v)


    def length(self) -> "float":
        """length(SbVec4f self) -> float"""
        return _coin.SbVec4f_length(self)


    def sqrLength(self) -> "float":
        """sqrLength(SbVec4f self) -> float"""
        return _coin.SbVec4f_sqrLength(self)


    def negate(self) -> "void":
        """negate(SbVec4f self)"""
        return _coin.SbVec4f_negate(self)


    def normalize(self) -> "float":
        """normalize(SbVec4f self) -> float"""
        return _coin.SbVec4f_normalize(self)


    def __imul__(self, d: 'float') -> "SbVec4f &":
        """__imul__(SbVec4f self, float d) -> SbVec4f"""
        return _coin.SbVec4f___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec4f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4f') -> "SbVec4f &":
        """__iadd__(SbVec4f self, SbVec4f v) -> SbVec4f"""
        return _coin.SbVec4f___iadd__(self, v)


    def __isub__(self, v: 'SbVec4f') -> "SbVec4f &":
        """__isub__(SbVec4f self, SbVec4f v) -> SbVec4f"""
        return _coin.SbVec4f___isub__(self, v)


    def __neg__(self) -> "SbVec4f":
        """__neg__(SbVec4f self) -> SbVec4f"""
        return _coin.SbVec4f___neg__(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec4f self, FILE * fp)"""
        return _coin.SbVec4f_output(self, fp)


    def __add__(self, u: 'SbVec4f') -> "SbVec4f":
        """__add__(SbVec4f self, SbVec4f u) -> SbVec4f"""
        return _coin.SbVec4f___add__(self, u)


    def __sub__(self, u: 'SbVec4f') -> "SbVec4f":
        """__sub__(SbVec4f self, SbVec4f u) -> SbVec4f"""
        return _coin.SbVec4f___sub__(self, u)


    def __mul__(self, *args) -> "SbVec4f":
        """
        __mul__(SbVec4f self, float const d) -> SbVec4f
        __mul__(SbVec4f self, SbMatrix m) -> SbVec4f
        """
        return _coin.SbVec4f___mul__(self, *args)


    def __rmul__(self, d: 'float const') -> "SbVec4f":
        """__rmul__(SbVec4f self, float const d) -> SbVec4f"""
        return _coin.SbVec4f___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbVec4f":
        """__div__(SbVec4f self, float const d) -> SbVec4f"""
        return _coin.SbVec4f___div__(self, d)


    def __truediv__(self, d: 'float const') -> "SbVec4f":
        """__truediv__(SbVec4f self, float const d) -> SbVec4f"""
        return _coin.SbVec4f___truediv__(self, d)


    def __eq__(self, u: 'SbVec4f') -> "int":
        """__eq__(SbVec4f self, SbVec4f u) -> int"""
        return _coin.SbVec4f___eq__(self, u)


    def __nq__(self, u: 'SbVec4f') -> "int":
        """__nq__(SbVec4f self, SbVec4f u) -> int"""
        return _coin.SbVec4f___nq__(self, u)


    def __getitem__(self, i: 'int') -> "float":
        """__getitem__(SbVec4f self, int i) -> float"""
        return _coin.SbVec4f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'float') -> "void":
        """__setitem__(SbVec4f self, int i, float value)"""
        return _coin.SbVec4f___setitem__(self, i, value)


    def __iter__(self):
       for i in range(4):
          yield self[i]

    def __len__(self):
          return 4

    __swig_destroy__ = _coin.delete_SbVec4f
    __del__ = lambda self: None
SbVec4f_swigregister = _coin.SbVec4f_swigregister
SbVec4f_swigregister(SbVec4f)

class SbRotation(object):
    """Proxy of C++ SbRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbRotation self) -> SbRotation
        __init__(SbRotation self, SbVec3f axis, float const radians) -> SbRotation
        __init__(SbRotation self, float const [4] q) -> SbRotation
        __init__(SbRotation self, float const q0, float const q1, float const q2, float const q3) -> SbRotation
        __init__(SbRotation self, SbMatrix m) -> SbRotation
        __init__(SbRotation self, SbVec3f rotateFrom, SbVec3f rotateTo) -> SbRotation
        """
        this = _coin.new_SbRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getValue(self) -> "float const *":
        """getValue(SbRotation self) -> float const *"""
        return _coin.SbRotation_getValue(self)


    def getAxisAngle(self) -> "void":
        """getAxisAngle(SbRotation self)"""
        return _coin.SbRotation_getAxisAngle(self)


    def getMatrix(self) -> "void":
        """getMatrix(SbRotation self)"""
        return _coin.SbRotation_getMatrix(self)


    def invert(self) -> "SbRotation &":
        """invert(SbRotation self) -> SbRotation"""
        return _coin.SbRotation_invert(self)


    def inverse(self) -> "SbRotation":
        """inverse(SbRotation self) -> SbRotation"""
        return _coin.SbRotation_inverse(self)


    def setValue(self, *args) -> "SbRotation &":
        """
        setValue(SbRotation self, float const q0, float const q1, float const q2, float const q3) -> SbRotation
        setValue(SbRotation self, float const [4] q) -> SbRotation
        setValue(SbRotation self, SbMatrix m) -> SbRotation
        setValue(SbRotation self, SbVec3f axis, float const radians) -> SbRotation
        setValue(SbRotation self, SbVec3f rotateFrom, SbVec3f rotateTo) -> SbRotation
        """
        return _coin.SbRotation_setValue(self, *args)


    def __imul__(self, *args) -> "SbRotation &":
        """
        __imul__(SbRotation self, SbRotation q) -> SbRotation
        __imul__(SbRotation self, float const s) -> SbRotation
        """
        return _coin.SbRotation___imul__(self, *args)


    def equals(self, r: 'SbRotation', tolerance: 'float') -> "SbBool":
        """equals(SbRotation self, SbRotation r, float tolerance) -> SbBool"""
        return _coin.SbRotation_equals(self, r, tolerance)


    def multVec(self, src: 'SbVec3f') -> "void":
        """multVec(SbRotation self, SbVec3f src)"""
        return _coin.SbRotation_multVec(self, src)


    def scaleAngle(self, scaleFactor: 'float const') -> "void":
        """scaleAngle(SbRotation self, float const scaleFactor)"""
        return _coin.SbRotation_scaleAngle(self, scaleFactor)


    def slerp(rot0: 'SbRotation', rot1: 'SbRotation', t: 'float') -> "SbRotation":
        """slerp(SbRotation rot0, SbRotation rot1, float t) -> SbRotation"""
        return _coin.SbRotation_slerp(rot0, rot1, t)

    slerp = staticmethod(slerp)

    def identity() -> "SbRotation":
        """identity() -> SbRotation"""
        return _coin.SbRotation_identity()

    identity = staticmethod(identity)

    def toString(self) -> "SbString":
        """toString(SbRotation self) -> SbString"""
        return _coin.SbRotation_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbRotation self, SbString str) -> SbBool"""
        return _coin.SbRotation_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbRotation self, FILE * fp)"""
        return _coin.SbRotation_output(self, fp)


    def __mul__(self, *args) -> "SbVec3f":
        """
        __mul__(SbRotation self, SbRotation u) -> SbRotation
        __mul__(SbRotation self, double const d) -> SbRotation
        __mul__(SbRotation self, SbVec3f v) -> SbVec3f
        """
        return _coin.SbRotation___mul__(self, *args)


    def __eq__(self, u: 'SbRotation') -> "int":
        """__eq__(SbRotation self, SbRotation u) -> int"""
        return _coin.SbRotation___eq__(self, u)


    def __nq__(self, u: 'SbRotation') -> "int":
        """__nq__(SbRotation self, SbRotation u) -> int"""
        return _coin.SbRotation___nq__(self, u)


    def __imul__(self, other):
        return self * other

    __swig_destroy__ = _coin.delete_SbRotation
    __del__ = lambda self: None
SbRotation_swigregister = _coin.SbRotation_swigregister
SbRotation_swigregister(SbRotation)

def SbRotation_slerp(rot0: 'SbRotation', rot1: 'SbRotation', t: 'float') -> "SbRotation":
    """SbRotation_slerp(SbRotation rot0, SbRotation rot1, float t) -> SbRotation"""
    return _coin.SbRotation_slerp(rot0, rot1, t)

def SbRotation_identity() -> "SbRotation":
    """SbRotation_identity() -> SbRotation"""
    return _coin.SbRotation_identity()

class SoGetMatrixAction(SoAction):
    """Proxy of C++ SoGetMatrixAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGetMatrixAction self) -> SoType"""
        return _coin.SoGetMatrixAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGetMatrixAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoGetMatrixAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoGetMatrixAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGetMatrixAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, region: 'SbViewportRegion'):
        """__init__(SoGetMatrixAction self, SbViewportRegion region) -> SoGetMatrixAction"""
        this = _coin.new_SoGetMatrixAction(region)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoGetMatrixAction
    __del__ = lambda self: None

    def setViewportRegion(self, region: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoGetMatrixAction self, SbViewportRegion region)"""
        return _coin.SoGetMatrixAction_setViewportRegion(self, region)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoGetMatrixAction self) -> SbViewportRegion"""
        return _coin.SoGetMatrixAction_getViewportRegion(self)


    def getMatrix(self) -> "SbMatrix &":
        """getMatrix(SoGetMatrixAction self) -> SbMatrix"""
        return _coin.SoGetMatrixAction_getMatrix(self)


    def getInverse(self) -> "SbMatrix &":
        """getInverse(SoGetMatrixAction self) -> SbMatrix"""
        return _coin.SoGetMatrixAction_getInverse(self)


    def getTextureMatrix(self) -> "SbMatrix &":
        """getTextureMatrix(SoGetMatrixAction self) -> SbMatrix"""
        return _coin.SoGetMatrixAction_getTextureMatrix(self)


    def getTextureInverse(self) -> "SbMatrix &":
        """getTextureInverse(SoGetMatrixAction self) -> SbMatrix"""
        return _coin.SoGetMatrixAction_getTextureInverse(self)

SoGetMatrixAction_swigregister = _coin.SoGetMatrixAction_swigregister
SoGetMatrixAction_swigregister(SoGetMatrixAction)

def SoGetMatrixAction_getClassTypeId() -> "SoType":
    """SoGetMatrixAction_getClassTypeId() -> SoType"""
    return _coin.SoGetMatrixAction_getClassTypeId()

def SoGetMatrixAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoGetMatrixAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoGetMatrixAction_addMethod(type, method)

def SoGetMatrixAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoGetMatrixAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoGetMatrixAction_enableElement(type, stackindex)

def SoGetMatrixAction_initClass() -> "void":
    """SoGetMatrixAction_initClass()"""
    return _coin.SoGetMatrixAction_initClass()

class SoGetPrimitiveCountAction(SoAction):
    """Proxy of C++ SoGetPrimitiveCountAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGetPrimitiveCountAction self) -> SoType"""
        return _coin.SoGetPrimitiveCountAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGetPrimitiveCountAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoGetPrimitiveCountAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoGetPrimitiveCountAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGetPrimitiveCountAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoGetPrimitiveCountAction self) -> SoGetPrimitiveCountAction
        __init__(SoGetPrimitiveCountAction self, SbViewportRegion vp) -> SoGetPrimitiveCountAction
        """
        this = _coin.new_SoGetPrimitiveCountAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoGetPrimitiveCountAction
    __del__ = lambda self: None

    def getTriangleCount(self) -> "int":
        """getTriangleCount(SoGetPrimitiveCountAction self) -> int"""
        return _coin.SoGetPrimitiveCountAction_getTriangleCount(self)


    def getLineCount(self) -> "int":
        """getLineCount(SoGetPrimitiveCountAction self) -> int"""
        return _coin.SoGetPrimitiveCountAction_getLineCount(self)


    def getPointCount(self) -> "int":
        """getPointCount(SoGetPrimitiveCountAction self) -> int"""
        return _coin.SoGetPrimitiveCountAction_getPointCount(self)


    def getTextCount(self) -> "int":
        """getTextCount(SoGetPrimitiveCountAction self) -> int"""
        return _coin.SoGetPrimitiveCountAction_getTextCount(self)


    def getImageCount(self) -> "int":
        """getImageCount(SoGetPrimitiveCountAction self) -> int"""
        return _coin.SoGetPrimitiveCountAction_getImageCount(self)


    def containsNoPrimitives(self) -> "SbBool":
        """containsNoPrimitives(SoGetPrimitiveCountAction self) -> SbBool"""
        return _coin.SoGetPrimitiveCountAction_containsNoPrimitives(self)


    def containsNonTriangleShapes(self) -> "SbBool":
        """containsNonTriangleShapes(SoGetPrimitiveCountAction self) -> SbBool"""
        return _coin.SoGetPrimitiveCountAction_containsNonTriangleShapes(self)


    def is3DTextCountedAsTriangles(self) -> "SbBool":
        """is3DTextCountedAsTriangles(SoGetPrimitiveCountAction self) -> SbBool"""
        return _coin.SoGetPrimitiveCountAction_is3DTextCountedAsTriangles(self)


    def setCount3DTextAsTriangles(self, flag: 'SbBool const') -> "void":
        """setCount3DTextAsTriangles(SoGetPrimitiveCountAction self, SbBool const flag)"""
        return _coin.SoGetPrimitiveCountAction_setCount3DTextAsTriangles(self, flag)


    def canApproximateCount(self) -> "SbBool":
        """canApproximateCount(SoGetPrimitiveCountAction self) -> SbBool"""
        return _coin.SoGetPrimitiveCountAction_canApproximateCount(self)


    def setCanApproximate(self, flag: 'SbBool const') -> "void":
        """setCanApproximate(SoGetPrimitiveCountAction self, SbBool const flag)"""
        return _coin.SoGetPrimitiveCountAction_setCanApproximate(self, flag)


    def setDecimationValue(self, type: 'SoDecimationTypeElement::Type', percentage: 'float'=1.0) -> "void":
        """
        setDecimationValue(SoGetPrimitiveCountAction self, SoDecimationTypeElement::Type type, float percentage=1.0)
        setDecimationValue(SoGetPrimitiveCountAction self, SoDecimationTypeElement::Type type)
        """
        return _coin.SoGetPrimitiveCountAction_setDecimationValue(self, type, percentage)


    def getDecimationType(self) -> "SoDecimationTypeElement::Type":
        """getDecimationType(SoGetPrimitiveCountAction self) -> SoDecimationTypeElement::Type"""
        return _coin.SoGetPrimitiveCountAction_getDecimationType(self)


    def getDecimationPercentage(self) -> "float":
        """getDecimationPercentage(SoGetPrimitiveCountAction self) -> float"""
        return _coin.SoGetPrimitiveCountAction_getDecimationPercentage(self)


    def addNumTriangles(self, num: 'int const') -> "void":
        """addNumTriangles(SoGetPrimitiveCountAction self, int const num)"""
        return _coin.SoGetPrimitiveCountAction_addNumTriangles(self, num)


    def addNumLines(self, num: 'int const') -> "void":
        """addNumLines(SoGetPrimitiveCountAction self, int const num)"""
        return _coin.SoGetPrimitiveCountAction_addNumLines(self, num)


    def addNumPoints(self, num: 'int const') -> "void":
        """addNumPoints(SoGetPrimitiveCountAction self, int const num)"""
        return _coin.SoGetPrimitiveCountAction_addNumPoints(self, num)


    def addNumText(self, num: 'int const') -> "void":
        """addNumText(SoGetPrimitiveCountAction self, int const num)"""
        return _coin.SoGetPrimitiveCountAction_addNumText(self, num)


    def addNumImage(self, num: 'int const') -> "void":
        """addNumImage(SoGetPrimitiveCountAction self, int const num)"""
        return _coin.SoGetPrimitiveCountAction_addNumImage(self, num)


    def incNumTriangles(self) -> "void":
        """incNumTriangles(SoGetPrimitiveCountAction self)"""
        return _coin.SoGetPrimitiveCountAction_incNumTriangles(self)


    def incNumLines(self) -> "void":
        """incNumLines(SoGetPrimitiveCountAction self)"""
        return _coin.SoGetPrimitiveCountAction_incNumLines(self)


    def incNumPoints(self) -> "void":
        """incNumPoints(SoGetPrimitiveCountAction self)"""
        return _coin.SoGetPrimitiveCountAction_incNumPoints(self)


    def incNumText(self) -> "void":
        """incNumText(SoGetPrimitiveCountAction self)"""
        return _coin.SoGetPrimitiveCountAction_incNumText(self)


    def incNumImage(self) -> "void":
        """incNumImage(SoGetPrimitiveCountAction self)"""
        return _coin.SoGetPrimitiveCountAction_incNumImage(self)

SoGetPrimitiveCountAction_swigregister = _coin.SoGetPrimitiveCountAction_swigregister
SoGetPrimitiveCountAction_swigregister(SoGetPrimitiveCountAction)

def SoGetPrimitiveCountAction_getClassTypeId() -> "SoType":
    """SoGetPrimitiveCountAction_getClassTypeId() -> SoType"""
    return _coin.SoGetPrimitiveCountAction_getClassTypeId()

def SoGetPrimitiveCountAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoGetPrimitiveCountAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoGetPrimitiveCountAction_addMethod(type, method)

def SoGetPrimitiveCountAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoGetPrimitiveCountAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoGetPrimitiveCountAction_enableElement(type, stackindex)

def SoGetPrimitiveCountAction_initClass() -> "void":
    """SoGetPrimitiveCountAction_initClass()"""
    return _coin.SoGetPrimitiveCountAction_initClass()

class SoHandleEventAction(SoAction):
    """Proxy of C++ SoHandleEventAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoHandleEventAction self) -> SoType"""
        return _coin.SoHandleEventAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoHandleEventAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoHandleEventAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoHandleEventAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoHandleEventAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, viewportregion: 'SbViewportRegion'):
        """__init__(SoHandleEventAction self, SbViewportRegion viewportregion) -> SoHandleEventAction"""
        this = _coin.new_SoHandleEventAction(viewportregion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoHandleEventAction
    __del__ = lambda self: None

    def setViewportRegion(self, newregion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoHandleEventAction self, SbViewportRegion newregion)"""
        return _coin.SoHandleEventAction_setViewportRegion(self, newregion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoHandleEventAction self) -> SbViewportRegion"""
        return _coin.SoHandleEventAction_getViewportRegion(self)


    def setEvent(self, ev: 'SoEvent') -> "void":
        """setEvent(SoHandleEventAction self, SoEvent ev)"""
        return _coin.SoHandleEventAction_setEvent(self, ev)


    def getEvent(self) -> "SoEvent const *":
        """getEvent(SoHandleEventAction self) -> SoEvent"""
        return _coin.SoHandleEventAction_getEvent(self)


    def setHandled(self) -> "void":
        """setHandled(SoHandleEventAction self)"""
        return _coin.SoHandleEventAction_setHandled(self)


    def isHandled(self) -> "SbBool":
        """isHandled(SoHandleEventAction self) -> SbBool"""
        return _coin.SoHandleEventAction_isHandled(self)


    def setGrabber(self, node: 'SoNode') -> "void":
        """setGrabber(SoHandleEventAction self, SoNode node)"""
        return _coin.SoHandleEventAction_setGrabber(self, node)


    def releaseGrabber(self) -> "void":
        """releaseGrabber(SoHandleEventAction self)"""
        return _coin.SoHandleEventAction_releaseGrabber(self)


    def getGrabber(self) -> "SoNode *":
        """getGrabber(SoHandleEventAction self) -> SoNode"""
        return _coin.SoHandleEventAction_getGrabber(self)


    def setPickRoot(self, node: 'SoNode') -> "void":
        """setPickRoot(SoHandleEventAction self, SoNode node)"""
        return _coin.SoHandleEventAction_setPickRoot(self, node)


    def getPickRoot(self) -> "SoNode *":
        """getPickRoot(SoHandleEventAction self) -> SoNode"""
        return _coin.SoHandleEventAction_getPickRoot(self)


    def setPickRadius(self, radiusinpixels: 'float const') -> "void":
        """setPickRadius(SoHandleEventAction self, float const radiusinpixels)"""
        return _coin.SoHandleEventAction_setPickRadius(self, radiusinpixels)


    def getPickRadius(self) -> "float":
        """getPickRadius(SoHandleEventAction self) -> float"""
        return _coin.SoHandleEventAction_getPickRadius(self)


    def getPickedPoint(self) -> "SoPickedPoint const *":
        """getPickedPoint(SoHandleEventAction self) -> SoPickedPoint"""
        return _coin.SoHandleEventAction_getPickedPoint(self)


    def getPickedPointList(self) -> "SoPickedPointList const &":
        """getPickedPointList(SoHandleEventAction self) -> SoPickedPointList"""
        return _coin.SoHandleEventAction_getPickedPointList(self)

SoHandleEventAction_swigregister = _coin.SoHandleEventAction_swigregister
SoHandleEventAction_swigregister(SoHandleEventAction)

def SoHandleEventAction_getClassTypeId() -> "SoType":
    """SoHandleEventAction_getClassTypeId() -> SoType"""
    return _coin.SoHandleEventAction_getClassTypeId()

def SoHandleEventAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoHandleEventAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoHandleEventAction_addMethod(type, method)

def SoHandleEventAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoHandleEventAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoHandleEventAction_enableElement(type, stackindex)

def SoHandleEventAction_initClass() -> "void":
    """SoHandleEventAction_initClass()"""
    return _coin.SoHandleEventAction_initClass()

class SoPickAction(SoAction):
    """Proxy of C++ SoPickAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPickAction self) -> SoType"""
        return _coin.SoPickAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPickAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoPickAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoPickAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPickAction_initClass()

    initClass = staticmethod(initClass)

    def setViewportRegion(self, newregion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoPickAction self, SbViewportRegion newregion)"""
        return _coin.SoPickAction_setViewportRegion(self, newregion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoPickAction self) -> SbViewportRegion"""
        return _coin.SoPickAction_getViewportRegion(self)


    def enableCulling(self, flag: 'SbBool const') -> "void":
        """enableCulling(SoPickAction self, SbBool const flag)"""
        return _coin.SoPickAction_enableCulling(self, flag)


    def isCullingEnabled(self) -> "SbBool":
        """isCullingEnabled(SoPickAction self) -> SbBool"""
        return _coin.SoPickAction_isCullingEnabled(self)

SoPickAction_swigregister = _coin.SoPickAction_swigregister
SoPickAction_swigregister(SoPickAction)

def SoPickAction_getClassTypeId() -> "SoType":
    """SoPickAction_getClassTypeId() -> SoType"""
    return _coin.SoPickAction_getClassTypeId()

def SoPickAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoPickAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoPickAction_addMethod(type, method)

def SoPickAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoPickAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoPickAction_enableElement(type, stackindex)

def SoPickAction_initClass() -> "void":
    """SoPickAction_initClass()"""
    return _coin.SoPickAction_initClass()

class SoRayPickAction(SoPickAction):
    """Proxy of C++ SoRayPickAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRayPickAction self) -> SoType"""
        return _coin.SoRayPickAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRayPickAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoRayPickAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoRayPickAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def __init__(self, viewportregion: 'SbViewportRegion'):
        """__init__(SoRayPickAction self, SbViewportRegion viewportregion) -> SoRayPickAction"""
        this = _coin.new_SoRayPickAction(viewportregion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoRayPickAction
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRayPickAction_initClass()

    initClass = staticmethod(initClass)

    def setPoint(self, viewportPoint: 'SbVec2s') -> "void":
        """setPoint(SoRayPickAction self, SbVec2s viewportPoint)"""
        return _coin.SoRayPickAction_setPoint(self, viewportPoint)


    def setNormalizedPoint(self, normpoint: 'SbVec2f') -> "void":
        """setNormalizedPoint(SoRayPickAction self, SbVec2f normpoint)"""
        return _coin.SoRayPickAction_setNormalizedPoint(self, normpoint)


    def setRadius(self, radiusinpixels: 'float const') -> "void":
        """setRadius(SoRayPickAction self, float const radiusinpixels)"""
        return _coin.SoRayPickAction_setRadius(self, radiusinpixels)


    def getRadius(self) -> "float":
        """getRadius(SoRayPickAction self) -> float"""
        return _coin.SoRayPickAction_getRadius(self)


    def setRay(self, start: 'SbVec3f', direction: 'SbVec3f', neardistance: 'float'=-1.0, fardistance: 'float'=-1.0) -> "void":
        """
        setRay(SoRayPickAction self, SbVec3f start, SbVec3f direction, float neardistance=-1.0, float fardistance=-1.0)
        setRay(SoRayPickAction self, SbVec3f start, SbVec3f direction, float neardistance=-1.0)
        setRay(SoRayPickAction self, SbVec3f start, SbVec3f direction)
        """
        return _coin.SoRayPickAction_setRay(self, start, direction, neardistance, fardistance)


    def setPickAll(self, flag: 'SbBool const') -> "void":
        """setPickAll(SoRayPickAction self, SbBool const flag)"""
        return _coin.SoRayPickAction_setPickAll(self, flag)


    def isPickAll(self) -> "SbBool":
        """isPickAll(SoRayPickAction self) -> SbBool"""
        return _coin.SoRayPickAction_isPickAll(self)


    def getPickedPointList(self) -> "SoPickedPointList const &":
        """getPickedPointList(SoRayPickAction self) -> SoPickedPointList"""
        return _coin.SoRayPickAction_getPickedPointList(self)


    def getPickedPoint(self, index: 'int const'=0) -> "SoPickedPoint *":
        """
        getPickedPoint(SoRayPickAction self, int const index=0) -> SoPickedPoint
        getPickedPoint(SoRayPickAction self) -> SoPickedPoint
        """
        return _coin.SoRayPickAction_getPickedPoint(self, index)


    def computeWorldSpaceRay(self) -> "void":
        """computeWorldSpaceRay(SoRayPickAction self)"""
        return _coin.SoRayPickAction_computeWorldSpaceRay(self)


    def hasWorldSpaceRay(self) -> "SbBool":
        """hasWorldSpaceRay(SoRayPickAction self) -> SbBool"""
        return _coin.SoRayPickAction_hasWorldSpaceRay(self)


    def setObjectSpace(self, *args) -> "void":
        """
        setObjectSpace(SoRayPickAction self)
        setObjectSpace(SoRayPickAction self)
        """
        return _coin.SoRayPickAction_setObjectSpace(self, *args)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SoRayPickAction self, SbVec3f v0, SbVec3f v1, SbVec3f v2, SbVec3f intersection, SbVec3f barycentric, SbBool & front) -> SbBool
        intersect(SoRayPickAction self, SbVec3f v0, SbVec3f v1, SbVec3f intersection) -> SbBool
        intersect(SoRayPickAction self, SbVec3f point) -> SbBool
        intersect(SoRayPickAction self, SbBox3f box, SbBool const usefullviewvolume=1) -> SbBool
        intersect(SoRayPickAction self, SbBox3f box) -> SbBool
        intersect(SoRayPickAction self, SbBox3f box, SbVec3f intersection, SbBool const usefullviewvolume=1) -> SbBool
        intersect(SoRayPickAction self, SbBox3f box, SbVec3f intersection) -> SbBool
        """
        return _coin.SoRayPickAction_intersect(self, *args)


    def getViewVolume(self) -> "SbViewVolume const &":
        """getViewVolume(SoRayPickAction self) -> SbViewVolume"""
        return _coin.SoRayPickAction_getViewVolume(self)


    def getLine(self) -> "SbLine const &":
        """getLine(SoRayPickAction self) -> SbLine"""
        return _coin.SoRayPickAction_getLine(self)


    def isBetweenPlanes(self, intersection: 'SbVec3f') -> "SbBool":
        """isBetweenPlanes(SoRayPickAction self, SbVec3f intersection) -> SbBool"""
        return _coin.SoRayPickAction_isBetweenPlanes(self, intersection)


    def addIntersection(self, objectspacepoint: 'SbVec3f', frontpick: 'SbBool'=1) -> "SoPickedPoint *":
        """
        addIntersection(SoRayPickAction self, SbVec3f objectspacepoint, SbBool frontpick=1) -> SoPickedPoint
        addIntersection(SoRayPickAction self, SbVec3f objectspacepoint) -> SoPickedPoint
        """
        return _coin.SoRayPickAction_addIntersection(self, objectspacepoint, frontpick)


    def reset(self) -> "void":
        """reset(SoRayPickAction self)"""
        return _coin.SoRayPickAction_reset(self)

SoRayPickAction_swigregister = _coin.SoRayPickAction_swigregister
SoRayPickAction_swigregister(SoRayPickAction)

def SoRayPickAction_getClassTypeId() -> "SoType":
    """SoRayPickAction_getClassTypeId() -> SoType"""
    return _coin.SoRayPickAction_getClassTypeId()

def SoRayPickAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoRayPickAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoRayPickAction_addMethod(type, method)

def SoRayPickAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoRayPickAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoRayPickAction_enableElement(type, stackindex)

def SoRayPickAction_initClass() -> "void":
    """SoRayPickAction_initClass()"""
    return _coin.SoRayPickAction_initClass()

class SoSearchAction(SoAction):
    """Proxy of C++ SoSearchAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSearchAction self) -> SoType"""
        return _coin.SoSearchAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSearchAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoSearchAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoSearchAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSearchAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSearchAction self) -> SoSearchAction"""
        this = _coin.new_SoSearchAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSearchAction
    __del__ = lambda self: None
    NODE = _coin.SoSearchAction_NODE
    TYPE = _coin.SoSearchAction_TYPE
    NAME = _coin.SoSearchAction_NAME
    FIRST = _coin.SoSearchAction_FIRST
    LAST = _coin.SoSearchAction_LAST
    ALL = _coin.SoSearchAction_ALL

    def setNode(self, node: 'SoNode') -> "void":
        """setNode(SoSearchAction self, SoNode node)"""
        return _coin.SoSearchAction_setNode(self, node)


    def getNode(self) -> "SoNode *":
        """getNode(SoSearchAction self) -> SoNode"""
        return _coin.SoSearchAction_getNode(self)


    def setType(self, type: 'SoType', chkderived: 'SbBool const'=1) -> "void":
        """
        setType(SoSearchAction self, SoType type, SbBool const chkderived=1)
        setType(SoSearchAction self, SoType type)
        """
        return _coin.SoSearchAction_setType(self, type, chkderived)


    def getType(self, chkderived: 'SbBool &') -> "SoType":
        """getType(SoSearchAction self, SbBool & chkderived) -> SoType"""
        return _coin.SoSearchAction_getType(self, chkderived)


    def setName(self, name: 'SbName') -> "void":
        """setName(SoSearchAction self, SbName name)"""
        return _coin.SoSearchAction_setName(self, name)


    def getName(self) -> "SbName":
        """getName(SoSearchAction self) -> SbName"""
        return _coin.SoSearchAction_getName(self)


    def setFind(self, what: 'int const') -> "void":
        """setFind(SoSearchAction self, int const what)"""
        return _coin.SoSearchAction_setFind(self, what)


    def getFind(self) -> "int":
        """getFind(SoSearchAction self) -> int"""
        return _coin.SoSearchAction_getFind(self)


    def setInterest(self, interest: 'SoSearchAction::Interest const') -> "void":
        """setInterest(SoSearchAction self, SoSearchAction::Interest const interest)"""
        return _coin.SoSearchAction_setInterest(self, interest)


    def getInterest(self) -> "SoSearchAction::Interest":
        """getInterest(SoSearchAction self) -> SoSearchAction::Interest"""
        return _coin.SoSearchAction_getInterest(self)


    def setSearchingAll(self, searchall: 'SbBool const') -> "void":
        """setSearchingAll(SoSearchAction self, SbBool const searchall)"""
        return _coin.SoSearchAction_setSearchingAll(self, searchall)


    def isSearchingAll(self) -> "SbBool":
        """isSearchingAll(SoSearchAction self) -> SbBool"""
        return _coin.SoSearchAction_isSearchingAll(self)


    def getPath(self) -> "SoPath *":
        """getPath(SoSearchAction self) -> SoPath"""
        return _coin.SoSearchAction_getPath(self)


    def getPaths(self) -> "SoPathList &":
        """getPaths(SoSearchAction self) -> SoPathList"""
        return _coin.SoSearchAction_getPaths(self)


    def reset(self) -> "void":
        """reset(SoSearchAction self)"""
        return _coin.SoSearchAction_reset(self)


    def setFound(self) -> "void":
        """setFound(SoSearchAction self)"""
        return _coin.SoSearchAction_setFound(self)


    def isFound(self) -> "SbBool":
        """isFound(SoSearchAction self) -> SbBool"""
        return _coin.SoSearchAction_isFound(self)


    def addPath(self, path: 'SoPath') -> "void":
        """addPath(SoSearchAction self, SoPath path)"""
        return _coin.SoSearchAction_addPath(self, path)

    duringSearchAll = _swig_property(_coin.SoSearchAction_duringSearchAll_get, _coin.SoSearchAction_duringSearchAll_set)
SoSearchAction_swigregister = _coin.SoSearchAction_swigregister
SoSearchAction_swigregister(SoSearchAction)

def SoSearchAction_getClassTypeId() -> "SoType":
    """SoSearchAction_getClassTypeId() -> SoType"""
    return _coin.SoSearchAction_getClassTypeId()

def SoSearchAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoSearchAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoSearchAction_addMethod(type, method)

def SoSearchAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoSearchAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoSearchAction_enableElement(type, stackindex)

def SoSearchAction_initClass() -> "void":
    """SoSearchAction_initClass()"""
    return _coin.SoSearchAction_initClass()
cvar = _coin.cvar

class SoSimplifyAction(SoAction):
    """Proxy of C++ SoSimplifyAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSimplifyAction self) -> SoType"""
        return _coin.SoSimplifyAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSimplifyAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoSimplifyAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoSimplifyAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSimplifyAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSimplifyAction self) -> SoSimplifyAction"""
        this = _coin.new_SoSimplifyAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSimplifyAction
    __del__ = lambda self: None

    def apply(self, *args) -> "void":
        """
        apply(SoSimplifyAction self, SoNode root)
        apply(SoSimplifyAction self, SoPath path)
        apply(SoSimplifyAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoSimplifyAction self, SoPathList pathlist)
        """
        return _coin.SoSimplifyAction_apply(self, *args)

SoSimplifyAction_swigregister = _coin.SoSimplifyAction_swigregister
SoSimplifyAction_swigregister(SoSimplifyAction)

def SoSimplifyAction_getClassTypeId() -> "SoType":
    """SoSimplifyAction_getClassTypeId() -> SoType"""
    return _coin.SoSimplifyAction_getClassTypeId()

def SoSimplifyAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoSimplifyAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoSimplifyAction_addMethod(type, method)

def SoSimplifyAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoSimplifyAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoSimplifyAction_enableElement(type, stackindex)

def SoSimplifyAction_initClass() -> "void":
    """SoSimplifyAction_initClass()"""
    return _coin.SoSimplifyAction_initClass()

class SoReorganizeAction(SoSimplifyAction):
    """Proxy of C++ SoReorganizeAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoReorganizeAction self) -> SoType"""
        return _coin.SoReorganizeAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoReorganizeAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoReorganizeAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoReorganizeAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoReorganizeAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, simplifier: 'SoSimplifier *'=None):
        """
        __init__(SoReorganizeAction self, SoSimplifier * simplifier=None) -> SoReorganizeAction
        __init__(SoReorganizeAction self) -> SoReorganizeAction
        """
        this = _coin.new_SoReorganizeAction(simplifier)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoReorganizeAction
    __del__ = lambda self: None

    def getSimplifiedSceneGraph(self) -> "SoSeparator *":
        """getSimplifiedSceneGraph(SoReorganizeAction self) -> SoSeparator"""
        return _coin.SoReorganizeAction_getSimplifiedSceneGraph(self)


    def generateNormals(self, onoff: 'SbBool') -> "void":
        """generateNormals(SoReorganizeAction self, SbBool onoff)"""
        return _coin.SoReorganizeAction_generateNormals(self, onoff)


    def areNormalGenerated(self) -> "SbBool":
        """areNormalGenerated(SoReorganizeAction self) -> SbBool"""
        return _coin.SoReorganizeAction_areNormalGenerated(self)


    def generateTriangleStrips(self, onoff: 'SbBool') -> "void":
        """generateTriangleStrips(SoReorganizeAction self, SbBool onoff)"""
        return _coin.SoReorganizeAction_generateTriangleStrips(self, onoff)


    def areTriangleStripGenerated(self) -> "SbBool":
        """areTriangleStripGenerated(SoReorganizeAction self) -> SbBool"""
        return _coin.SoReorganizeAction_areTriangleStripGenerated(self)


    def generateTexCoords(self, onoff: 'SbBool') -> "void":
        """generateTexCoords(SoReorganizeAction self, SbBool onoff)"""
        return _coin.SoReorganizeAction_generateTexCoords(self, onoff)


    def areTexCoordsGenerated(self) -> "SbBool":
        """areTexCoordsGenerated(SoReorganizeAction self) -> SbBool"""
        return _coin.SoReorganizeAction_areTexCoordsGenerated(self)


    def generateVPNodes(self, onoff: 'SbBool') -> "void":
        """generateVPNodes(SoReorganizeAction self, SbBool onoff)"""
        return _coin.SoReorganizeAction_generateVPNodes(self, onoff)


    def areVPNodesGenerated(self) -> "SbBool":
        """areVPNodesGenerated(SoReorganizeAction self) -> SbBool"""
        return _coin.SoReorganizeAction_areVPNodesGenerated(self)


    def matchIndexArrays(self, onoff: 'SbBool') -> "void":
        """matchIndexArrays(SoReorganizeAction self, SbBool onoff)"""
        return _coin.SoReorganizeAction_matchIndexArrays(self, onoff)


    def areIndexArraysMatched(self) -> "SbBool":
        """areIndexArraysMatched(SoReorganizeAction self) -> SbBool"""
        return _coin.SoReorganizeAction_areIndexArraysMatched(self)


    def getSimplifier(self) -> "SoSimplifier *":
        """getSimplifier(SoReorganizeAction self) -> SoSimplifier *"""
        return _coin.SoReorganizeAction_getSimplifier(self)


    def apply(self, *args) -> "void":
        """
        apply(SoReorganizeAction self, SoNode root)
        apply(SoReorganizeAction self, SoPath path)
        apply(SoReorganizeAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoReorganizeAction self, SoPathList pathlist)
        """
        return _coin.SoReorganizeAction_apply(self, *args)


    def startReport(msg: 'char const *') -> "void":
        """startReport(char const * msg)"""
        return _coin.SoReorganizeAction_startReport(msg)

    startReport = staticmethod(startReport)

    def finishReport() -> "void":
        """finishReport()"""
        return _coin.SoReorganizeAction_finishReport()

    finishReport = staticmethod(finishReport)
SoReorganizeAction_swigregister = _coin.SoReorganizeAction_swigregister
SoReorganizeAction_swigregister(SoReorganizeAction)

def SoReorganizeAction_getClassTypeId() -> "SoType":
    """SoReorganizeAction_getClassTypeId() -> SoType"""
    return _coin.SoReorganizeAction_getClassTypeId()

def SoReorganizeAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoReorganizeAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoReorganizeAction_addMethod(type, method)

def SoReorganizeAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoReorganizeAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoReorganizeAction_enableElement(type, stackindex)

def SoReorganizeAction_initClass() -> "void":
    """SoReorganizeAction_initClass()"""
    return _coin.SoReorganizeAction_initClass()

def SoReorganizeAction_startReport(msg: 'char const *') -> "void":
    """SoReorganizeAction_startReport(char const * msg)"""
    return _coin.SoReorganizeAction_startReport(msg)

def SoReorganizeAction_finishReport() -> "void":
    """SoReorganizeAction_finishReport()"""
    return _coin.SoReorganizeAction_finishReport()

class SoWriteAction(SoAction):
    """Proxy of C++ SoWriteAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoWriteAction self) -> SoType"""
        return _coin.SoWriteAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoWriteAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoWriteAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoWriteAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def __init__(self, *args):
        """
        __init__(SoWriteAction self) -> SoWriteAction
        __init__(SoWriteAction self, SoOutput out) -> SoWriteAction
        """
        this = _coin.new_SoWriteAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoWriteAction
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoWriteAction_initClass()

    initClass = staticmethod(initClass)

    def getOutput(self) -> "SoOutput *":
        """getOutput(SoWriteAction self) -> SoOutput"""
        return _coin.SoWriteAction_getOutput(self)


    def continueToApply(self, *args) -> "void":
        """
        continueToApply(SoWriteAction self, SoNode node)
        continueToApply(SoWriteAction self, SoPath path)
        """
        return _coin.SoWriteAction_continueToApply(self, *args)

SoWriteAction_swigregister = _coin.SoWriteAction_swigregister
SoWriteAction_swigregister(SoWriteAction)

def SoWriteAction_getClassTypeId() -> "SoType":
    """SoWriteAction_getClassTypeId() -> SoType"""
    return _coin.SoWriteAction_getClassTypeId()

def SoWriteAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoWriteAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoWriteAction_addMethod(type, method)

def SoWriteAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoWriteAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoWriteAction_enableElement(type, stackindex)

def SoWriteAction_initClass() -> "void":
    """SoWriteAction_initClass()"""
    return _coin.SoWriteAction_initClass()

class SoAudioRenderAction(SoAction):
    """Proxy of C++ SoAudioRenderAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAudioRenderAction self) -> SoType"""
        return _coin.SoAudioRenderAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAudioRenderAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoAudioRenderAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoAudioRenderAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAudioRenderAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoAudioRenderAction self) -> SoAudioRenderAction"""
        this = _coin.new_SoAudioRenderAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoAudioRenderAction
    __del__ = lambda self: None

    def callDoAction(action: 'SoAction', node: 'SoNode') -> "void":
        """callDoAction(SoAction action, SoNode node)"""
        return _coin.SoAudioRenderAction_callDoAction(action, node)

    callDoAction = staticmethod(callDoAction)

    def callAudioRender(action: 'SoAction', node: 'SoNode') -> "void":
        """callAudioRender(SoAction action, SoNode node)"""
        return _coin.SoAudioRenderAction_callAudioRender(action, node)

    callAudioRender = staticmethod(callAudioRender)
SoAudioRenderAction_swigregister = _coin.SoAudioRenderAction_swigregister
SoAudioRenderAction_swigregister(SoAudioRenderAction)

def SoAudioRenderAction_getClassTypeId() -> "SoType":
    """SoAudioRenderAction_getClassTypeId() -> SoType"""
    return _coin.SoAudioRenderAction_getClassTypeId()

def SoAudioRenderAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoAudioRenderAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoAudioRenderAction_addMethod(type, method)

def SoAudioRenderAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoAudioRenderAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoAudioRenderAction_enableElement(type, stackindex)

def SoAudioRenderAction_initClass() -> "void":
    """SoAudioRenderAction_initClass()"""
    return _coin.SoAudioRenderAction_initClass()

def SoAudioRenderAction_callDoAction(action: 'SoAction', node: 'SoNode') -> "void":
    """SoAudioRenderAction_callDoAction(SoAction action, SoNode node)"""
    return _coin.SoAudioRenderAction_callDoAction(action, node)

def SoAudioRenderAction_callAudioRender(action: 'SoAction', node: 'SoNode') -> "void":
    """SoAudioRenderAction_callAudioRender(SoAction action, SoNode node)"""
    return _coin.SoAudioRenderAction_callAudioRender(action, node)

class SoIntersectingPrimitive(object):
    """Proxy of C++ SoIntersectingPrimitive class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    path = _swig_property(_coin.SoIntersectingPrimitive_path_get, _coin.SoIntersectingPrimitive_path_set)
    SEGMENT = _coin.SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = _coin.SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = _coin.SoIntersectingPrimitive_TRIANGLE
    type = _swig_property(_coin.SoIntersectingPrimitive_type_get, _coin.SoIntersectingPrimitive_type_set)
    vertex = _swig_property(_coin.SoIntersectingPrimitive_vertex_get, _coin.SoIntersectingPrimitive_vertex_set)
    xf_vertex = _swig_property(_coin.SoIntersectingPrimitive_xf_vertex_get, _coin.SoIntersectingPrimitive_xf_vertex_set)

    def __init__(self):
        """__init__(SoIntersectingPrimitive self) -> SoIntersectingPrimitive"""
        this = _coin.new_SoIntersectingPrimitive()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoIntersectingPrimitive
    __del__ = lambda self: None
SoIntersectingPrimitive_swigregister = _coin.SoIntersectingPrimitive_swigregister
SoIntersectingPrimitive_swigregister(SoIntersectingPrimitive)

class SoIntersectionDetectionAction(SoAction):
    """Proxy of C++ SoIntersectionDetectionAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIntersectionDetectionAction self) -> SoType"""
        return _coin.SoIntersectionDetectionAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIntersectionDetectionAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoIntersectionDetectionAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoIntersectionDetectionAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIntersectionDetectionAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIntersectionDetectionAction self) -> SoIntersectionDetectionAction"""
        this = _coin.new_SoIntersectionDetectionAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoIntersectionDetectionAction
    __del__ = lambda self: None
    NEXT_PRIMITIVE = _coin.SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = _coin.SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = _coin.SoIntersectionDetectionAction_ABORT

    def setIntersectionDetectionEpsilon(self, epsilon: 'float') -> "void":
        """setIntersectionDetectionEpsilon(SoIntersectionDetectionAction self, float epsilon)"""
        return _coin.SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(self, epsilon)


    def getIntersectionDetectionEpsilon(self) -> "float":
        """getIntersectionDetectionEpsilon(SoIntersectionDetectionAction self) -> float"""
        return _coin.SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(self)


    def setIntersectionEpsilon(epsilon: 'float') -> "void":
        """setIntersectionEpsilon(float epsilon)"""
        return _coin.SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

    setIntersectionEpsilon = staticmethod(setIntersectionEpsilon)

    def getIntersectionEpsilon() -> "float":
        """getIntersectionEpsilon() -> float"""
        return _coin.SoIntersectionDetectionAction_getIntersectionEpsilon()

    getIntersectionEpsilon = staticmethod(getIntersectionEpsilon)

    def setTypeEnabled(self, type: 'SoType', enable: 'SbBool') -> "void":
        """setTypeEnabled(SoIntersectionDetectionAction self, SoType type, SbBool enable)"""
        return _coin.SoIntersectionDetectionAction_setTypeEnabled(self, type, enable)


    def isTypeEnabled(self, type: 'SoType', checkgroups: 'SbBool'=0) -> "SbBool":
        """
        isTypeEnabled(SoIntersectionDetectionAction self, SoType type, SbBool checkgroups=0) -> SbBool
        isTypeEnabled(SoIntersectionDetectionAction self, SoType type) -> SbBool
        """
        return _coin.SoIntersectionDetectionAction_isTypeEnabled(self, type, checkgroups)


    def setManipsEnabled(self, enable: 'SbBool') -> "void":
        """setManipsEnabled(SoIntersectionDetectionAction self, SbBool enable)"""
        return _coin.SoIntersectionDetectionAction_setManipsEnabled(self, enable)


    def isManipsEnabled(self) -> "SbBool":
        """isManipsEnabled(SoIntersectionDetectionAction self) -> SbBool"""
        return _coin.SoIntersectionDetectionAction_isManipsEnabled(self)


    def setDraggersEnabled(self, enable: 'SbBool') -> "void":
        """setDraggersEnabled(SoIntersectionDetectionAction self, SbBool enable)"""
        return _coin.SoIntersectionDetectionAction_setDraggersEnabled(self, enable)


    def isDraggersEnabled(self) -> "SbBool":
        """isDraggersEnabled(SoIntersectionDetectionAction self) -> SbBool"""
        return _coin.SoIntersectionDetectionAction_isDraggersEnabled(self)


    def setShapeInternalsEnabled(self, enable: 'SbBool') -> "void":
        """setShapeInternalsEnabled(SoIntersectionDetectionAction self, SbBool enable)"""
        return _coin.SoIntersectionDetectionAction_setShapeInternalsEnabled(self, enable)


    def isShapeInternalsEnabled(self) -> "SbBool":
        """isShapeInternalsEnabled(SoIntersectionDetectionAction self) -> SbBool"""
        return _coin.SoIntersectionDetectionAction_isShapeInternalsEnabled(self)


    def apply(self, *args) -> "void":
        """
        apply(SoIntersectionDetectionAction self, SoNode node)
        apply(SoIntersectionDetectionAction self, SoPath path)
        apply(SoIntersectionDetectionAction self, SoPathList paths, SbBool obeysRules=0)
        apply(SoIntersectionDetectionAction self, SoPathList paths)
        """
        return _coin.SoIntersectionDetectionAction_apply(self, *args)


    def addVisitationCallback(self, *args) -> "void":
        """
        addVisitationCallback(SoIntersectionDetectionAction self, SoType type, SoIntersectionDetectionAction::SoIntersectionVisitationCB * cb, void * closure)
        addVisitationCallback(SoIntersectionDetectionAction self, SoType type, PyObject * pyfunc, PyObject * closure)
        """
        return _coin.SoIntersectionDetectionAction_addVisitationCallback(self, *args)


    def removeVisitationCallback(self, *args) -> "void":
        """
        removeVisitationCallback(SoIntersectionDetectionAction self, SoType type, SoIntersectionDetectionAction::SoIntersectionVisitationCB * cb, void * closure)
        removeVisitationCallback(SoIntersectionDetectionAction self, SoType type, PyObject * pyfunc, PyObject * closure)
        """
        return _coin.SoIntersectionDetectionAction_removeVisitationCallback(self, *args)


    def setFilterCallback(self, *args) -> "void":
        """
        setFilterCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionFilterCB * cb, void * closure=None)
        setFilterCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionFilterCB * cb)
        setFilterCallback(SoIntersectionDetectionAction self, PyObject * pyfunc, PyObject * closure=None)
        setFilterCallback(SoIntersectionDetectionAction self, PyObject * pyfunc)
        """
        return _coin.SoIntersectionDetectionAction_setFilterCallback(self, *args)


    def addIntersectionCallback(self, *args) -> "void":
        """
        addIntersectionCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionCB * cb, void * closure=None)
        addIntersectionCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionCB * cb)
        addIntersectionCallback(SoIntersectionDetectionAction self, PyObject * pyfunc, PyObject * closure=None)
        addIntersectionCallback(SoIntersectionDetectionAction self, PyObject * pyfunc)
        """
        return _coin.SoIntersectionDetectionAction_addIntersectionCallback(self, *args)


    def removeIntersectionCallback(self, *args) -> "void":
        """
        removeIntersectionCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionCB * cb, void * closure=None)
        removeIntersectionCallback(SoIntersectionDetectionAction self, SoIntersectionDetectionAction::SoIntersectionCB * cb)
        removeIntersectionCallback(SoIntersectionDetectionAction self, PyObject * pyfunc, PyObject * closure=None)
        removeIntersectionCallback(SoIntersectionDetectionAction self, PyObject * pyfunc)
        """
        return _coin.SoIntersectionDetectionAction_removeIntersectionCallback(self, *args)

SoIntersectionDetectionAction_swigregister = _coin.SoIntersectionDetectionAction_swigregister
SoIntersectionDetectionAction_swigregister(SoIntersectionDetectionAction)

def SoIntersectionDetectionAction_getClassTypeId() -> "SoType":
    """SoIntersectionDetectionAction_getClassTypeId() -> SoType"""
    return _coin.SoIntersectionDetectionAction_getClassTypeId()

def SoIntersectionDetectionAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoIntersectionDetectionAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoIntersectionDetectionAction_addMethod(type, method)

def SoIntersectionDetectionAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoIntersectionDetectionAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoIntersectionDetectionAction_enableElement(type, stackindex)

def SoIntersectionDetectionAction_initClass() -> "void":
    """SoIntersectionDetectionAction_initClass()"""
    return _coin.SoIntersectionDetectionAction_initClass()

def SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon: 'float') -> "void":
    """SoIntersectionDetectionAction_setIntersectionEpsilon(float epsilon)"""
    return _coin.SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

def SoIntersectionDetectionAction_getIntersectionEpsilon() -> "float":
    """SoIntersectionDetectionAction_getIntersectionEpsilon() -> float"""
    return _coin.SoIntersectionDetectionAction_getIntersectionEpsilon()

class SoToVRMLAction(SoAction):
    """Proxy of C++ SoToVRMLAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoToVRMLAction self) -> SoType"""
        return _coin.SoToVRMLAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoToVRMLAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoToVRMLAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoToVRMLAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoToVRMLAction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoToVRMLAction self) -> SoToVRMLAction"""
        this = _coin.new_SoToVRMLAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoToVRMLAction
    __del__ = lambda self: None

    def apply(self, *args) -> "void":
        """
        apply(SoToVRMLAction self, SoNode node)
        apply(SoToVRMLAction self, SoPath path)
        apply(SoToVRMLAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoToVRMLAction self, SoPathList pathlist)
        """
        return _coin.SoToVRMLAction_apply(self, *args)


    def getVRMLSceneGraph(self) -> "SoNode *":
        """getVRMLSceneGraph(SoToVRMLAction self) -> SoNode"""
        return _coin.SoToVRMLAction_getVRMLSceneGraph(self)


    def expandSoFile(self, flag: 'SbBool') -> "void":
        """expandSoFile(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_expandSoFile(self, flag)


    def areSoFileExpanded(self) -> "SbBool":
        """areSoFileExpanded(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_areSoFileExpanded(self)


    def setUrlName(self, name: 'SbString') -> "void":
        """setUrlName(SoToVRMLAction self, SbString name)"""
        return _coin.SoToVRMLAction_setUrlName(self, name)


    def getUrlName(self) -> "SbString":
        """getUrlName(SoToVRMLAction self) -> SbString"""
        return _coin.SoToVRMLAction_getUrlName(self)


    def writeTexCoords(self, flag: 'SbBool') -> "void":
        """writeTexCoords(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_writeTexCoords(self, flag)


    def areTexCoordWritten(self) -> "SbBool":
        """areTexCoordWritten(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_areTexCoordWritten(self)


    def expandTexture2Node(self, flag: 'SbBool') -> "void":
        """expandTexture2Node(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_expandTexture2Node(self, flag)


    def areTexture2NodeExpanded(self) -> "SbBool":
        """areTexture2NodeExpanded(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_areTexture2NodeExpanded(self)


    def keepUnknownNodes(self, flag: 'SbBool') -> "void":
        """keepUnknownNodes(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_keepUnknownNodes(self, flag)


    def areUnknownNodeKept(self) -> "SbBool":
        """areUnknownNodeKept(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_areUnknownNodeKept(self)


    def convertInlineNodes(self, flag: 'SbBool') -> "void":
        """convertInlineNodes(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_convertInlineNodes(self, flag)


    def doConvertInlineNodes(self) -> "SbBool":
        """doConvertInlineNodes(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_doConvertInlineNodes(self)


    def conditionalConversion(self, flag: 'SbBool') -> "void":
        """conditionalConversion(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_conditionalConversion(self, flag)


    def doConditionalConversion(self) -> "SbBool":
        """doConditionalConversion(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_doConditionalConversion(self)


    def setVerbosity(self, flag: 'SbBool') -> "void":
        """setVerbosity(SoToVRMLAction self, SbBool flag)"""
        return _coin.SoToVRMLAction_setVerbosity(self, flag)


    def isVerbose(self) -> "SbBool":
        """isVerbose(SoToVRMLAction self) -> SbBool"""
        return _coin.SoToVRMLAction_isVerbose(self)

SoToVRMLAction_swigregister = _coin.SoToVRMLAction_swigregister
SoToVRMLAction_swigregister(SoToVRMLAction)

def SoToVRMLAction_getClassTypeId() -> "SoType":
    """SoToVRMLAction_getClassTypeId() -> SoType"""
    return _coin.SoToVRMLAction_getClassTypeId()

def SoToVRMLAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoToVRMLAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoToVRMLAction_addMethod(type, method)

def SoToVRMLAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoToVRMLAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoToVRMLAction_enableElement(type, stackindex)

def SoToVRMLAction_initClass() -> "void":
    """SoToVRMLAction_initClass()"""
    return _coin.SoToVRMLAction_initClass()

class SoToVRML2Action(SoToVRMLAction):
    """Proxy of C++ SoToVRML2Action class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoToVRML2Action self) -> SoType"""
        return _coin.SoToVRML2Action_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoToVRML2Action_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoToVRML2Action_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoToVRML2Action_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoToVRML2Action_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoToVRML2Action self) -> SoToVRML2Action"""
        this = _coin.new_SoToVRML2Action()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoToVRML2Action
    __del__ = lambda self: None

    def apply(self, *args) -> "void":
        """
        apply(SoToVRML2Action self, SoNode node)
        apply(SoToVRML2Action self, SoPath path)
        apply(SoToVRML2Action self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoToVRML2Action self, SoPathList pathlist)
        """
        return _coin.SoToVRML2Action_apply(self, *args)


    def getVRML2SceneGraph(self) -> "SoVRMLGroup *":
        """getVRML2SceneGraph(SoToVRML2Action self) -> SoVRMLGroup"""
        return _coin.SoToVRML2Action_getVRML2SceneGraph(self)


    def reuseAppearanceNodes(self, appearance: 'SbBool') -> "void":
        """reuseAppearanceNodes(SoToVRML2Action self, SbBool appearance)"""
        return _coin.SoToVRML2Action_reuseAppearanceNodes(self, appearance)


    def doReuseAppearanceNodes(self) -> "SbBool":
        """doReuseAppearanceNodes(SoToVRML2Action self) -> SbBool"""
        return _coin.SoToVRML2Action_doReuseAppearanceNodes(self)


    def reusePropertyNodes(self, property: 'SbBool') -> "void":
        """reusePropertyNodes(SoToVRML2Action self, SbBool property)"""
        return _coin.SoToVRML2Action_reusePropertyNodes(self, property)


    def doReusePropertyNodes(self) -> "SbBool":
        """doReusePropertyNodes(SoToVRML2Action self) -> SbBool"""
        return _coin.SoToVRML2Action_doReusePropertyNodes(self)


    def reuseGeometryNodes(self, geometry: 'SbBool') -> "void":
        """reuseGeometryNodes(SoToVRML2Action self, SbBool geometry)"""
        return _coin.SoToVRML2Action_reuseGeometryNodes(self, geometry)


    def doReuseGeometryNodes(self) -> "SbBool":
        """doReuseGeometryNodes(SoToVRML2Action self) -> SbBool"""
        return _coin.SoToVRML2Action_doReuseGeometryNodes(self)

SoToVRML2Action_swigregister = _coin.SoToVRML2Action_swigregister
SoToVRML2Action_swigregister(SoToVRML2Action)

def SoToVRML2Action_getClassTypeId() -> "SoType":
    """SoToVRML2Action_getClassTypeId() -> SoType"""
    return _coin.SoToVRML2Action_getClassTypeId()

def SoToVRML2Action_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoToVRML2Action_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoToVRML2Action_addMethod(type, method)

def SoToVRML2Action_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoToVRML2Action_enableElement(SoType type, int const stackindex)"""
    return _coin.SoToVRML2Action_enableElement(type, stackindex)

def SoToVRML2Action_initClass() -> "void":
    """SoToVRML2Action_initClass()"""
    return _coin.SoToVRML2Action_initClass()

class SoHardCopy(object):
    """Proxy of C++ SoHardCopy class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def init() -> "void":
        """init()"""
        return _coin.SoHardCopy_init()

    init = staticmethod(init)

    def getProductName() -> "char const *":
        """getProductName() -> char const *"""
        return _coin.SoHardCopy_getProductName()

    getProductName = staticmethod(getProductName)

    def getVersion() -> "char const *":
        """getVersion() -> char const *"""
        return _coin.SoHardCopy_getVersion()

    getVersion = staticmethod(getVersion)

    def __init__(self):
        """__init__(SoHardCopy self) -> SoHardCopy"""
        this = _coin.new_SoHardCopy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoHardCopy
    __del__ = lambda self: None
SoHardCopy_swigregister = _coin.SoHardCopy_swigregister
SoHardCopy_swigregister(SoHardCopy)

def SoHardCopy_init() -> "void":
    """SoHardCopy_init()"""
    return _coin.SoHardCopy_init()

def SoHardCopy_getProductName() -> "char const *":
    """SoHardCopy_getProductName() -> char const *"""
    return _coin.SoHardCopy_getProductName()

def SoHardCopy_getVersion() -> "char const *":
    """SoHardCopy_getVersion() -> char const *"""
    return _coin.SoHardCopy_getVersion()

class SoVectorOutput(object):
    """Proxy of C++ SoVectorOutput class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoVectorOutput self) -> SoVectorOutput"""
        this = _coin.new_SoVectorOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoVectorOutput
    __del__ = lambda self: None

    def openFile(self, filename: 'char const *') -> "SbBool":
        """openFile(SoVectorOutput self, char const * filename) -> SbBool"""
        return _coin.SoVectorOutput_openFile(self, filename)


    def closeFile(self) -> "void":
        """closeFile(SoVectorOutput self)"""
        return _coin.SoVectorOutput_closeFile(self)


    def getFilePointer(self) -> "FILE *":
        """getFilePointer(SoVectorOutput self) -> FILE *"""
        return _coin.SoVectorOutput_getFilePointer(self)

SoVectorOutput_swigregister = _coin.SoVectorOutput_swigregister
SoVectorOutput_swigregister(SoVectorOutput)

class SoPSVectorOutput(SoVectorOutput):
    """Proxy of C++ SoPSVectorOutput class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoPSVectorOutput self) -> SoPSVectorOutput"""
        this = _coin.new_SoPSVectorOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPSVectorOutput
    __del__ = lambda self: None

    def setColored(self, flag: 'SbBool'=1) -> "void":
        """
        setColored(SoPSVectorOutput self, SbBool flag=1)
        setColored(SoPSVectorOutput self)
        """
        return _coin.SoPSVectorOutput_setColored(self, flag)


    def getColored(self) -> "SbBool":
        """getColored(SoPSVectorOutput self) -> SbBool"""
        return _coin.SoPSVectorOutput_getColored(self)

SoPSVectorOutput_swigregister = _coin.SoPSVectorOutput_swigregister
SoPSVectorOutput_swigregister(SoPSVectorOutput)

class SoVectorizeAction(SoCallbackAction):
    """Proxy of C++ SoVectorizeAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVectorizeAction self) -> SoType"""
        return _coin.SoVectorizeAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVectorizeAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoVectorizeAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoVectorizeAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)
    __swig_destroy__ = _coin.delete_SoVectorizeAction
    __del__ = lambda self: None

    def getOutput(self) -> "SoVectorOutput *":
        """getOutput(SoVectorizeAction self) -> SoVectorOutput"""
        return _coin.SoVectorizeAction_getOutput(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVectorizeAction_initClass()

    initClass = staticmethod(initClass)
    INCH = _coin.SoVectorizeAction_INCH
    MM = _coin.SoVectorizeAction_MM
    METER = _coin.SoVectorizeAction_METER
    PORTRAIT = _coin.SoVectorizeAction_PORTRAIT
    LANDSCAPE = _coin.SoVectorizeAction_LANDSCAPE
    A0 = _coin.SoVectorizeAction_A0
    A1 = _coin.SoVectorizeAction_A1
    A2 = _coin.SoVectorizeAction_A2
    A3 = _coin.SoVectorizeAction_A3
    A4 = _coin.SoVectorizeAction_A4
    A5 = _coin.SoVectorizeAction_A5
    A6 = _coin.SoVectorizeAction_A6
    A7 = _coin.SoVectorizeAction_A7
    A8 = _coin.SoVectorizeAction_A8
    A9 = _coin.SoVectorizeAction_A9
    A10 = _coin.SoVectorizeAction_A10

    def apply(self, *args) -> "void":
        """
        apply(SoVectorizeAction self, SoNode node)
        apply(SoVectorizeAction self, SoPath path)
        apply(SoVectorizeAction self, SoPathList pathlist, SbBool obeysrules=0)
        apply(SoVectorizeAction self, SoPathList pathlist)
        """
        return _coin.SoVectorizeAction_apply(self, *args)


    def beginStandardPage(self, pagesize: 'SoVectorizeAction::PageSize const &', border: 'float const'=10.0) -> "void":
        """
        beginStandardPage(SoVectorizeAction self, SoVectorizeAction::PageSize const & pagesize, float const border=10.0)
        beginStandardPage(SoVectorizeAction self, SoVectorizeAction::PageSize const & pagesize)
        """
        return _coin.SoVectorizeAction_beginStandardPage(self, pagesize, border)


    def beginPage(self, *args) -> "void":
        """
        beginPage(SoVectorizeAction self, SbVec2f startpagepos, SbVec2f pagesize, SoVectorizeAction::DimensionUnit u)
        beginPage(SoVectorizeAction self, SbVec2f startpagepos, SbVec2f pagesize)
        """
        return _coin.SoVectorizeAction_beginPage(self, *args)


    def endPage(self) -> "void":
        """endPage(SoVectorizeAction self)"""
        return _coin.SoVectorizeAction_endPage(self)


    def calibrate(self, vp: 'SbViewportRegion') -> "void":
        """calibrate(SoVectorizeAction self, SbViewportRegion vp)"""
        return _coin.SoVectorizeAction_calibrate(self, vp)


    def beginViewport(self, *args) -> "void":
        """
        beginViewport(SoVectorizeAction self, SbVec2f startpos, SbVec2f size, SoVectorizeAction::DimensionUnit u)
        beginViewport(SoVectorizeAction self, SbVec2f startpos, SbVec2f size)
        beginViewport(SoVectorizeAction self, SbVec2f startpos)
        beginViewport(SoVectorizeAction self)
        """
        return _coin.SoVectorizeAction_beginViewport(self, *args)


    def endViewport(self) -> "void":
        """endViewport(SoVectorizeAction self)"""
        return _coin.SoVectorizeAction_endViewport(self)


    def setOrientation(self, o: 'SoVectorizeAction::Orientation') -> "void":
        """setOrientation(SoVectorizeAction self, SoVectorizeAction::Orientation o)"""
        return _coin.SoVectorizeAction_setOrientation(self, o)


    def getOrientation(self) -> "SoVectorizeAction::Orientation":
        """getOrientation(SoVectorizeAction self) -> SoVectorizeAction::Orientation"""
        return _coin.SoVectorizeAction_getOrientation(self)


    def setBackgroundColor(self, *args) -> "void":
        """
        setBackgroundColor(SoVectorizeAction self, SbBool bg, SbColor col)
        setBackgroundColor(SoVectorizeAction self, SbBool bg)
        """
        return _coin.SoVectorizeAction_setBackgroundColor(self, *args)


    def getBackgroundColor(self, col: 'SbColor') -> "SbBool":
        """getBackgroundColor(SoVectorizeAction self, SbColor col) -> SbBool"""
        return _coin.SoVectorizeAction_getBackgroundColor(self, col)


    def setNominalWidth(self, *args) -> "void":
        """
        setNominalWidth(SoVectorizeAction self, float w, SoVectorizeAction::DimensionUnit u)
        setNominalWidth(SoVectorizeAction self, float w)
        """
        return _coin.SoVectorizeAction_setNominalWidth(self, *args)


    def getNominalWidth(self, *args) -> "float":
        """
        getNominalWidth(SoVectorizeAction self, SoVectorizeAction::DimensionUnit u) -> float
        getNominalWidth(SoVectorizeAction self) -> float
        """
        return _coin.SoVectorizeAction_getNominalWidth(self, *args)


    def setPixelImageSize(self, *args) -> "void":
        """
        setPixelImageSize(SoVectorizeAction self, float w, SoVectorizeAction::DimensionUnit u)
        setPixelImageSize(SoVectorizeAction self, float w)
        """
        return _coin.SoVectorizeAction_setPixelImageSize(self, *args)


    def getPixelImageSize(self, *args) -> "float":
        """
        getPixelImageSize(SoVectorizeAction self, SoVectorizeAction::DimensionUnit u) -> float
        getPixelImageSize(SoVectorizeAction self) -> float
        """
        return _coin.SoVectorizeAction_getPixelImageSize(self, *args)

    CIRCLE = _coin.SoVectorizeAction_CIRCLE
    SQUARE = _coin.SoVectorizeAction_SQUARE

    def setPointStyle(self, style: 'SoVectorizeAction::PointStyle const &') -> "void":
        """setPointStyle(SoVectorizeAction self, SoVectorizeAction::PointStyle const & style)"""
        return _coin.SoVectorizeAction_setPointStyle(self, style)


    def getPointStyle(self) -> "SoVectorizeAction::PointStyle":
        """getPointStyle(SoVectorizeAction self) -> SoVectorizeAction::PointStyle"""
        return _coin.SoVectorizeAction_getPointStyle(self)


    def getPageStartpos(self) -> "SbVec2f const &":
        """getPageStartpos(SoVectorizeAction self) -> SbVec2f"""
        return _coin.SoVectorizeAction_getPageStartpos(self)


    def getPageSize(self) -> "SbVec2f const &":
        """getPageSize(SoVectorizeAction self) -> SbVec2f"""
        return _coin.SoVectorizeAction_getPageSize(self)

    REVERSE_ONLY_BLACK_AND_WHITE = _coin.SoVectorizeAction_REVERSE_ONLY_BLACK_AND_WHITE
    AS_IS = _coin.SoVectorizeAction_AS_IS
    REVERSE = _coin.SoVectorizeAction_REVERSE
    NO_JOIN = _coin.SoVectorizeAction_NO_JOIN
    MITERED_JOIN = _coin.SoVectorizeAction_MITERED_JOIN
    MITERED_BEVELED_JOIN = _coin.SoVectorizeAction_MITERED_BEVELED_JOIN
    BEVELED_JOIN = _coin.SoVectorizeAction_BEVELED_JOIN
    TRIANGULAR_JOIN = _coin.SoVectorizeAction_TRIANGULAR_JOIN
    ROUNDED_JOIN = _coin.SoVectorizeAction_ROUNDED_JOIN
    BUTT_END = _coin.SoVectorizeAction_BUTT_END
    SQUARE_END = _coin.SoVectorizeAction_SQUARE_END
    TRIANGULAR_END = _coin.SoVectorizeAction_TRIANGULAR_END
    ROUND_END = _coin.SoVectorizeAction_ROUND_END
    NO_HLHSR = _coin.SoVectorizeAction_NO_HLHSR
    HLHSR_SIMPLE_PAINTER = _coin.SoVectorizeAction_HLHSR_SIMPLE_PAINTER
    HLHSR_PAINTER = _coin.SoVectorizeAction_HLHSR_PAINTER
    HLHSR_PAINTER_SURFACE_REMOVAL = _coin.SoVectorizeAction_HLHSR_PAINTER_SURFACE_REMOVAL
    HIDDEN_LINES_REMOVAL = _coin.SoVectorizeAction_HIDDEN_LINES_REMOVAL

    def setDrawingDimensions(self, *args) -> "void":
        """
        setDrawingDimensions(SoVectorizeAction self, SbVec2f d, SoVectorizeAction::DimensionUnit u)
        setDrawingDimensions(SoVectorizeAction self, SbVec2f d)
        setDrawingDimensions(SoVectorizeAction self, float w, float h, SoVectorizeAction::DimensionUnit u)
        setDrawingDimensions(SoVectorizeAction self, float w, float h)
        """
        return _coin.SoVectorizeAction_setDrawingDimensions(self, *args)


    def getDrawingDimensions(self, *args) -> "SbVec2f":
        """
        getDrawingDimensions(SoVectorizeAction self, SoVectorizeAction::DimensionUnit u) -> SbVec2f
        getDrawingDimensions(SoVectorizeAction self) -> SbVec2f
        """
        return _coin.SoVectorizeAction_getDrawingDimensions(self, *args)


    def setStartPosition(self, *args) -> "void":
        """
        setStartPosition(SoVectorizeAction self, SbVec2f p, SoVectorizeAction::DimensionUnit u)
        setStartPosition(SoVectorizeAction self, SbVec2f p)
        setStartPosition(SoVectorizeAction self, float x, float y, SoVectorizeAction::DimensionUnit u)
        setStartPosition(SoVectorizeAction self, float x, float y)
        """
        return _coin.SoVectorizeAction_setStartPosition(self, *args)


    def getStartPosition(self, *args) -> "SbVec2f":
        """
        getStartPosition(SoVectorizeAction self, SoVectorizeAction::DimensionUnit u) -> SbVec2f
        getStartPosition(SoVectorizeAction self) -> SbVec2f
        """
        return _coin.SoVectorizeAction_getStartPosition(self, *args)


    def setColorTranslationMethod(self, method: 'SoVectorizeAction::ColorTranslationMethod') -> "void":
        """setColorTranslationMethod(SoVectorizeAction self, SoVectorizeAction::ColorTranslationMethod method)"""
        return _coin.SoVectorizeAction_setColorTranslationMethod(self, method)


    def getColorTranslationMethod(self) -> "SoVectorizeAction::ColorTranslationMethod":
        """getColorTranslationMethod(SoVectorizeAction self) -> SoVectorizeAction::ColorTranslationMethod"""
        return _coin.SoVectorizeAction_getColorTranslationMethod(self)


    def setLineEndStyle(self, style: 'SoVectorizeAction::EndLineStyle') -> "void":
        """setLineEndStyle(SoVectorizeAction self, SoVectorizeAction::EndLineStyle style)"""
        return _coin.SoVectorizeAction_setLineEndStyle(self, style)


    def getLineEndStyle(self) -> "SoVectorizeAction::EndLineStyle":
        """getLineEndStyle(SoVectorizeAction self) -> SoVectorizeAction::EndLineStyle"""
        return _coin.SoVectorizeAction_getLineEndStyle(self)


    def setLineJoinsStyle(self, style: 'SoVectorizeAction::JoinLineStyle') -> "void":
        """setLineJoinsStyle(SoVectorizeAction self, SoVectorizeAction::JoinLineStyle style)"""
        return _coin.SoVectorizeAction_setLineJoinsStyle(self, style)


    def getLineJoinsStyle(self) -> "SoVectorizeAction::JoinLineStyle":
        """getLineJoinsStyle(SoVectorizeAction self) -> SoVectorizeAction::JoinLineStyle"""
        return _coin.SoVectorizeAction_getLineJoinsStyle(self)


    def setHLHSRMode(self, mode: 'SoVectorizeAction::HLHSRMode') -> "void":
        """setHLHSRMode(SoVectorizeAction self, SoVectorizeAction::HLHSRMode mode)"""
        return _coin.SoVectorizeAction_setHLHSRMode(self, mode)


    def getHLHSRMode(self) -> "SoVectorizeAction::HLHSRMode":
        """getHLHSRMode(SoVectorizeAction self) -> SoVectorizeAction::HLHSRMode"""
        return _coin.SoVectorizeAction_getHLHSRMode(self)


    def setBorder(self, *args) -> "void":
        """
        setBorder(SoVectorizeAction self, float width)
        setBorder(SoVectorizeAction self, float width, SbColor color)
        """
        return _coin.SoVectorizeAction_setBorder(self, *args)


    def setMiterLimit(self, limit: 'float') -> "void":
        """setMiterLimit(SoVectorizeAction self, float limit)"""
        return _coin.SoVectorizeAction_setMiterLimit(self, limit)


    def getMiterLimit(self) -> "float":
        """getMiterLimit(SoVectorizeAction self) -> float"""
        return _coin.SoVectorizeAction_getMiterLimit(self)


    def setPenDescription(self, *args) -> "void":
        """
        setPenDescription(SoVectorizeAction self, int num_pens, SbColor colors=None, float const * widths=None, SoVectorizeAction::DimensionUnit u)
        setPenDescription(SoVectorizeAction self, int num_pens, SbColor colors=None, float const * widths=None)
        setPenDescription(SoVectorizeAction self, int num_pens, SbColor colors=None)
        setPenDescription(SoVectorizeAction self, int num_pens)
        """
        return _coin.SoVectorizeAction_setPenDescription(self, *args)


    def getPenDescription(self, *args) -> "void":
        """
        getPenDescription(SoVectorizeAction self, SbColor colors, float * widths, SoVectorizeAction::DimensionUnit u)
        getPenDescription(SoVectorizeAction self, SbColor colors, float * widths)
        """
        return _coin.SoVectorizeAction_getPenDescription(self, *args)


    def getPenNum(self) -> "int":
        """getPenNum(SoVectorizeAction self) -> int"""
        return _coin.SoVectorizeAction_getPenNum(self)


    def setColorPriority(self, priority: 'SbBool') -> "void":
        """setColorPriority(SoVectorizeAction self, SbBool priority)"""
        return _coin.SoVectorizeAction_setColorPriority(self, priority)


    def getColorPriority(self) -> "SbBool":
        """getColorPriority(SoVectorizeAction self) -> SbBool"""
        return _coin.SoVectorizeAction_getColorPriority(self)


    def enableLighting(self, flag: 'SbBool') -> "void":
        """enableLighting(SoVectorizeAction self, SbBool flag)"""
        return _coin.SoVectorizeAction_enableLighting(self, flag)


    def isLightingEnabled(self) -> "SbBool":
        """isLightingEnabled(SoVectorizeAction self) -> SbBool"""
        return _coin.SoVectorizeAction_isLightingEnabled(self)

SoVectorizeAction_swigregister = _coin.SoVectorizeAction_swigregister
SoVectorizeAction_swigregister(SoVectorizeAction)

def SoVectorizeAction_getClassTypeId() -> "SoType":
    """SoVectorizeAction_getClassTypeId() -> SoType"""
    return _coin.SoVectorizeAction_getClassTypeId()

def SoVectorizeAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoVectorizeAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoVectorizeAction_addMethod(type, method)

def SoVectorizeAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoVectorizeAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoVectorizeAction_enableElement(type, stackindex)

def SoVectorizeAction_initClass() -> "void":
    """SoVectorizeAction_initClass()"""
    return _coin.SoVectorizeAction_initClass()

class SoMultiTextureCoordinateElement(SoElement):
    """Proxy of C++ SoMultiTextureCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMultiTextureCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoMultiTextureCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMultiTextureCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMultiTextureCoordinateElement_initClass()

    initClass = staticmethod(initClass)
    NONE = _coin.SoMultiTextureCoordinateElement_NONE
    TEXGEN = _coin.SoMultiTextureCoordinateElement_TEXGEN
    EXPLICIT = _coin.SoMultiTextureCoordinateElement_EXPLICIT
    FUNCTION = _coin.SoMultiTextureCoordinateElement_FUNCTION
    DEFAULT = _coin.SoMultiTextureCoordinateElement_DEFAULT

    def init(self, state: 'SoState') -> "void":
        """init(SoMultiTextureCoordinateElement self, SoState state)"""
        return _coin.SoMultiTextureCoordinateElement_init(self, state)


    def setDefault(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        setDefault(SoState state, SoNode node, int const unit=0)
        setDefault(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureCoordinateElement_setDefault(state, node, unit)

    setDefault = staticmethod(setDefault)

    def getType(self, *args) -> "SoMultiTextureCoordinateElement::CoordType":
        """
        getType(SoMultiTextureCoordinateElement self, SoState state, int const unit=0) -> SoMultiTextureCoordinateElement::CoordType
        getType(SoMultiTextureCoordinateElement self, SoState state) -> SoMultiTextureCoordinateElement::CoordType
        getType(SoMultiTextureCoordinateElement self, int const unit=0) -> SoMultiTextureCoordinateElement::CoordType
        getType(SoMultiTextureCoordinateElement self) -> SoMultiTextureCoordinateElement::CoordType
        """
        return _coin.SoMultiTextureCoordinateElement_getType(self, *args)


    def getInstance(state: 'SoState') -> "SoMultiTextureCoordinateElement const *":
        """getInstance(SoState state) -> SoMultiTextureCoordinateElement"""
        return _coin.SoMultiTextureCoordinateElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self, unit: 'int const'=0) -> "int32_t":
        """
        getNum(SoMultiTextureCoordinateElement self, int const unit=0) -> int32_t
        getNum(SoMultiTextureCoordinateElement self) -> int32_t
        """
        return _coin.SoMultiTextureCoordinateElement_getNum(self, unit)


    def is2D(self, unit: 'int const'=0) -> "SbBool":
        """
        is2D(SoMultiTextureCoordinateElement self, int const unit=0) -> SbBool
        is2D(SoMultiTextureCoordinateElement self) -> SbBool
        """
        return _coin.SoMultiTextureCoordinateElement_is2D(self, unit)


    def getDimension(self, unit: 'int const'=0) -> "int32_t":
        """
        getDimension(SoMultiTextureCoordinateElement self, int const unit=0) -> int32_t
        getDimension(SoMultiTextureCoordinateElement self) -> int32_t
        """
        return _coin.SoMultiTextureCoordinateElement_getDimension(self, unit)


    def getArrayPtr2(self, unit: 'int const'=0) -> "SbVec2f const *":
        """
        getArrayPtr2(SoMultiTextureCoordinateElement self, int const unit=0) -> SbVec2f
        getArrayPtr2(SoMultiTextureCoordinateElement self) -> SbVec2f
        """
        return _coin.SoMultiTextureCoordinateElement_getArrayPtr2(self, unit)


    def getArrayPtr3(self, unit: 'int const'=0) -> "SbVec3f const *":
        """
        getArrayPtr3(SoMultiTextureCoordinateElement self, int const unit=0) -> SbVec3f
        getArrayPtr3(SoMultiTextureCoordinateElement self) -> SbVec3f
        """
        return _coin.SoMultiTextureCoordinateElement_getArrayPtr3(self, unit)


    def getArrayPtr4(self, unit: 'int const'=0) -> "SbVec4f const *":
        """
        getArrayPtr4(SoMultiTextureCoordinateElement self, int const unit=0) -> SbVec4f
        getArrayPtr4(SoMultiTextureCoordinateElement self) -> SbVec4f
        """
        return _coin.SoMultiTextureCoordinateElement_getArrayPtr4(self, unit)


    def push(self, state: 'SoState') -> "void":
        """push(SoMultiTextureCoordinateElement self, SoState state)"""
        return _coin.SoMultiTextureCoordinateElement_push(self, state)


    def matches(self, elem: 'SoElement') -> "SbBool":
        """matches(SoMultiTextureCoordinateElement self, SoElement elem) -> SbBool"""
        return _coin.SoMultiTextureCoordinateElement_matches(self, elem)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoMultiTextureCoordinateElement self) -> SoElement"""
        return _coin.SoMultiTextureCoordinateElement_copyMatchInfo(self)


    def get(self, *args) -> "SbVec4f const &":
        """
        get(SoMultiTextureCoordinateElement self, int const unit, SbVec3f point, SbVec3f normal) -> SbVec4f
        get(SoMultiTextureCoordinateElement self, SbVec3f point, SbVec3f normal) -> SbVec4f
        """
        return _coin.SoMultiTextureCoordinateElement_get(self, *args)


    def set2(*args) -> "void":
        """
        set2(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec2f coords)
        set2(SoState state, SoNode node, int32_t const numCoords, SbVec2f coords)
        """
        return _coin.SoMultiTextureCoordinateElement_set2(*args)

    set2 = staticmethod(set2)

    def set3(*args) -> "void":
        """
        set3(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec3f coords)
        set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)
        """
        return _coin.SoMultiTextureCoordinateElement_set3(*args)

    set3 = staticmethod(set3)

    def set4(*args) -> "void":
        """
        set4(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec4f coords)
        set4(SoState state, SoNode node, int32_t const numCoords, SbVec4f coords)
        """
        return _coin.SoMultiTextureCoordinateElement_set4(*args)

    set4 = staticmethod(set4)

    def get2(self, *args) -> "SbVec2f const &":
        """
        get2(SoMultiTextureCoordinateElement self, int const unit, int const index) -> SbVec2f
        get2(SoMultiTextureCoordinateElement self, int const index) -> SbVec2f
        """
        return _coin.SoMultiTextureCoordinateElement_get2(self, *args)


    def get3(self, *args) -> "SbVec3f const &":
        """
        get3(SoMultiTextureCoordinateElement self, int const unit, int const index) -> SbVec3f
        get3(SoMultiTextureCoordinateElement self, int const index) -> SbVec3f
        """
        return _coin.SoMultiTextureCoordinateElement_get3(self, *args)


    def get4(self, *args) -> "SbVec4f const &":
        """
        get4(SoMultiTextureCoordinateElement self, int const unit, int const index) -> SbVec4f
        get4(SoMultiTextureCoordinateElement self, int const index) -> SbVec4f
        """
        return _coin.SoMultiTextureCoordinateElement_get4(self, *args)

SoMultiTextureCoordinateElement_swigregister = _coin.SoMultiTextureCoordinateElement_swigregister
SoMultiTextureCoordinateElement_swigregister(SoMultiTextureCoordinateElement)

def SoMultiTextureCoordinateElement_getClassTypeId() -> "SoType":
    """SoMultiTextureCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoMultiTextureCoordinateElement_getClassTypeId()

def SoMultiTextureCoordinateElement_getClassStackIndex() -> "int":
    """SoMultiTextureCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoMultiTextureCoordinateElement_getClassStackIndex()

def SoMultiTextureCoordinateElement_createInstance() -> "void *":
    """SoMultiTextureCoordinateElement_createInstance() -> void *"""
    return _coin.SoMultiTextureCoordinateElement_createInstance()

def SoMultiTextureCoordinateElement_initClass() -> "void":
    """SoMultiTextureCoordinateElement_initClass()"""
    return _coin.SoMultiTextureCoordinateElement_initClass()

def SoMultiTextureCoordinateElement_setDefault(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    setDefault(SoState state, SoNode node, int const unit=0)
    SoMultiTextureCoordinateElement_setDefault(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureCoordinateElement_setDefault(state, node, unit)

def SoMultiTextureCoordinateElement_getInstance(state: 'SoState') -> "SoMultiTextureCoordinateElement const *":
    """SoMultiTextureCoordinateElement_getInstance(SoState state) -> SoMultiTextureCoordinateElement"""
    return _coin.SoMultiTextureCoordinateElement_getInstance(state)

def SoMultiTextureCoordinateElement_set2(*args) -> "void":
    """
    set2(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec2f coords)
    SoMultiTextureCoordinateElement_set2(SoState state, SoNode node, int32_t const numCoords, SbVec2f coords)
    """
    return _coin.SoMultiTextureCoordinateElement_set2(*args)

def SoMultiTextureCoordinateElement_set3(*args) -> "void":
    """
    set3(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec3f coords)
    SoMultiTextureCoordinateElement_set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)
    """
    return _coin.SoMultiTextureCoordinateElement_set3(*args)

def SoMultiTextureCoordinateElement_set4(*args) -> "void":
    """
    set4(SoState state, SoNode node, int const unit, int32_t const numCoords, SbVec4f coords)
    SoMultiTextureCoordinateElement_set4(SoState state, SoNode node, int32_t const numCoords, SbVec4f coords)
    """
    return _coin.SoMultiTextureCoordinateElement_set4(*args)

class SoShape(SoNode):
    """Proxy of C++ SoShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShape self) -> SoType"""
        return _coin.SoShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShape_initClass()

    initClass = staticmethod(initClass)
    TRIANGLE_STRIP = _coin.SoShape_TRIANGLE_STRIP
    TRIANGLE_FAN = _coin.SoShape_TRIANGLE_FAN
    TRIANGLES = _coin.SoShape_TRIANGLES
    POLYGON = _coin.SoShape_POLYGON
    QUADS = _coin.SoShape_QUADS
    QUAD_STRIP = _coin.SoShape_QUAD_STRIP
    POINTS = _coin.SoShape_POINTS
    LINES = _coin.SoShape_LINES
    LINE_STRIP = _coin.SoShape_LINE_STRIP

    def affectsState(self) -> "SbBool":
        """affectsState(SoShape self) -> SbBool"""
        return _coin.SoShape_affectsState(self)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoShape self, SoNotList nl)"""
        return _coin.SoShape_notify(self, nl)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoShape self, SoGetBoundingBoxAction action)"""
        return _coin.SoShape_getBoundingBox(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoShape self, SoGLRenderAction action)"""
        return _coin.SoShape_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoShape self, SoRayPickAction action)"""
        return _coin.SoShape_rayPick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoShape self, SoCallbackAction action)"""
        return _coin.SoShape_callback(self, action)


    def computeBBox(self, action: 'SoAction', box: 'SbBox3f', center: 'SbVec3f') -> "void":
        """computeBBox(SoShape self, SoAction action, SbBox3f box, SbVec3f center)"""
        return _coin.SoShape_computeBBox(self, action, box, center)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoShape self, SoGetPrimitiveCountAction action)"""
        return _coin.SoShape_getPrimitiveCount(self, action)


    def getScreenSize(state: 'SoState', boundingbox: 'SbBox3f', rectsize: 'SbVec2s') -> "void":
        """getScreenSize(SoState state, SbBox3f boundingbox, SbVec2s rectsize)"""
        return _coin.SoShape_getScreenSize(state, boundingbox, rectsize)

    getScreenSize = staticmethod(getScreenSize)

    def getDecimatedComplexity(state: 'SoState', complexity: 'float') -> "float":
        """getDecimatedComplexity(SoState state, float complexity) -> float"""
        return _coin.SoShape_getDecimatedComplexity(state, complexity)

    getDecimatedComplexity = staticmethod(getDecimatedComplexity)

    def getBoundingBoxCache(self) -> "SoBoundingBoxCache const *":
        """getBoundingBoxCache(SoShape self) -> SoBoundingBoxCache"""
        return _coin.SoShape_getBoundingBoxCache(self)

SoShape_swigregister = _coin.SoShape_swigregister
SoShape_swigregister(SoShape)

def SoShape_getClassTypeId() -> "SoType":
    """SoShape_getClassTypeId() -> SoType"""
    return _coin.SoShape_getClassTypeId()

def SoShape_initClass() -> "void":
    """SoShape_initClass()"""
    return _coin.SoShape_initClass()

def SoShape_getScreenSize(state: 'SoState', boundingbox: 'SbBox3f', rectsize: 'SbVec2s') -> "void":
    """SoShape_getScreenSize(SoState state, SbBox3f boundingbox, SbVec2s rectsize)"""
    return _coin.SoShape_getScreenSize(state, boundingbox, rectsize)

def SoShape_getDecimatedComplexity(state: 'SoState', complexity: 'float') -> "float":
    """SoShape_getDecimatedComplexity(SoState state, float complexity) -> float"""
    return _coin.SoShape_getDecimatedComplexity(state, complexity)

class SoImage(SoShape):
    """Proxy of C++ SoImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoImage_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoImage self) -> SoType"""
        return _coin.SoImage_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoImage_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoImage self) -> SoImage"""
        this = _coin.new_SoImage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    BOTTOM = _coin.SoImage_BOTTOM
    HALF = _coin.SoImage_HALF
    TOP = _coin.SoImage_TOP
    LEFT = _coin.SoImage_LEFT
    CENTER = _coin.SoImage_CENTER
    RIGHT = _coin.SoImage_RIGHT
    width = _swig_property(_coin.SoImage_width_get, _coin.SoImage_width_set)
    height = _swig_property(_coin.SoImage_height_get, _coin.SoImage_height_set)
    vertAlignment = _swig_property(_coin.SoImage_vertAlignment_get, _coin.SoImage_vertAlignment_set)
    horAlignment = _swig_property(_coin.SoImage_horAlignment_get, _coin.SoImage_horAlignment_set)
    image = _swig_property(_coin.SoImage_image_get, _coin.SoImage_image_set)
    filename = _swig_property(_coin.SoImage_filename_get, _coin.SoImage_filename_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoImage self, SoGLRenderAction action)"""
        return _coin.SoImage_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoImage self, SoRayPickAction action)"""
        return _coin.SoImage_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoImage self, SoGetPrimitiveCountAction action)"""
        return _coin.SoImage_getPrimitiveCount(self, action)

SoImage_swigregister = _coin.SoImage_swigregister
SoImage_swigregister(SoImage)

def SoImage_getClassTypeId() -> "SoType":
    """SoImage_getClassTypeId() -> SoType"""
    return _coin.SoImage_getClassTypeId()

def SoImage_initClass() -> "void":
    """SoImage_initClass()"""
    return _coin.SoImage_initClass()

class SoVectorizePSAction(SoVectorizeAction):
    """Proxy of C++ SoVectorizePSAction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVectorizePSAction self) -> SoType"""
        return _coin.SoVectorizePSAction_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVectorizePSAction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
        """addMethod(SoType type, SoActionMethod method)"""
        return _coin.SoVectorizePSAction_addMethod(type, method)

    addMethod = staticmethod(addMethod)

    def enableElement(type: 'SoType', stackindex: 'int const') -> "void":
        """enableElement(SoType type, int const stackindex)"""
        return _coin.SoVectorizePSAction_enableElement(type, stackindex)

    enableElement = staticmethod(enableElement)

    def __init__(self):
        """__init__(SoVectorizePSAction self) -> SoVectorizePSAction"""
        this = _coin.new_SoVectorizePSAction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoVectorizePSAction
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVectorizePSAction_initClass()

    initClass = staticmethod(initClass)

    def setDefault2DFont(self, fontname: 'SbString') -> "void":
        """setDefault2DFont(SoVectorizePSAction self, SbString fontname)"""
        return _coin.SoVectorizePSAction_setDefault2DFont(self, fontname)


    def getDefault2DFont(self) -> "SbString const &":
        """getDefault2DFont(SoVectorizePSAction self) -> SbString"""
        return _coin.SoVectorizePSAction_getDefault2DFont(self)


    def setGouraudThreshold(self, eps: 'double const') -> "void":
        """setGouraudThreshold(SoVectorizePSAction self, double const eps)"""
        return _coin.SoVectorizePSAction_setGouraudThreshold(self, eps)


    def getOutput(self) -> "SoPSVectorOutput *":
        """getOutput(SoVectorizePSAction self) -> SoPSVectorOutput"""
        return _coin.SoVectorizePSAction_getOutput(self)


    def getPSOutput(self) -> "SoPSVectorOutput *":
        """getPSOutput(SoVectorizePSAction self) -> SoPSVectorOutput"""
        return _coin.SoVectorizePSAction_getPSOutput(self)

SoVectorizePSAction_swigregister = _coin.SoVectorizePSAction_swigregister
SoVectorizePSAction_swigregister(SoVectorizePSAction)

def SoVectorizePSAction_getClassTypeId() -> "SoType":
    """SoVectorizePSAction_getClassTypeId() -> SoType"""
    return _coin.SoVectorizePSAction_getClassTypeId()

def SoVectorizePSAction_addMethod(type: 'SoType', method: 'SoActionMethod') -> "void":
    """SoVectorizePSAction_addMethod(SoType type, SoActionMethod method)"""
    return _coin.SoVectorizePSAction_addMethod(type, method)

def SoVectorizePSAction_enableElement(type: 'SoType', stackindex: 'int const') -> "void":
    """SoVectorizePSAction_enableElement(SoType type, int const stackindex)"""
    return _coin.SoVectorizePSAction_enableElement(type, stackindex)

def SoVectorizePSAction_initClass() -> "void":
    """SoVectorizePSAction_initClass()"""
    return _coin.SoVectorizePSAction_initClass()

class SoBundle(object):
    """Proxy of C++ SoBundle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SoBundle_swigregister = _coin.SoBundle_swigregister
SoBundle_swigregister(SoBundle)

class SoMaterialBundle(SoBundle):
    """Proxy of C++ SoMaterialBundle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, action: 'SoAction'):
        """__init__(SoMaterialBundle self, SoAction action) -> SoMaterialBundle"""
        this = _coin.new_SoMaterialBundle(action)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMaterialBundle
    __del__ = lambda self: None

    def setUpMultiple(self) -> "void":
        """setUpMultiple(SoMaterialBundle self)"""
        return _coin.SoMaterialBundle_setUpMultiple(self)


    def sendFirst(self) -> "void":
        """sendFirst(SoMaterialBundle self)"""
        return _coin.SoMaterialBundle_sendFirst(self)


    def forceSend(self, index: 'int const') -> "void":
        """forceSend(SoMaterialBundle self, int const index)"""
        return _coin.SoMaterialBundle_forceSend(self, index)


    def isColorOnly(self) -> "SbBool":
        """isColorOnly(SoMaterialBundle self) -> SbBool"""
        return _coin.SoMaterialBundle_isColorOnly(self)


    def send(self, index: 'int const', betweenbeginend: 'SbBool const') -> "void":
        """send(SoMaterialBundle self, int const index, SbBool const betweenbeginend)"""
        return _coin.SoMaterialBundle_send(self, index, betweenbeginend)

SoMaterialBundle_swigregister = _coin.SoMaterialBundle_swigregister
SoMaterialBundle_swigregister(SoMaterialBundle)

class SbBSPTree(object):
    """Proxy of C++ SbBSPTree class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, maxnodepts: 'int const'=64, initsize: 'int const'=4):
        """
        __init__(SbBSPTree self, int const maxnodepts=64, int const initsize=4) -> SbBSPTree
        __init__(SbBSPTree self, int const maxnodepts=64) -> SbBSPTree
        __init__(SbBSPTree self) -> SbBSPTree
        """
        this = _coin.new_SbBSPTree(maxnodepts, initsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbBSPTree
    __del__ = lambda self: None

    def numPoints(self) -> "int":
        """numPoints(SbBSPTree self) -> int"""
        return _coin.SbBSPTree_numPoints(self)


    def getPoint(self, *args) -> "void":
        """
        getPoint(SbBSPTree self, int const idx) -> SbVec3f
        getPoint(SbBSPTree self, int const idx, SbVec3f pt)
        """
        return _coin.SbBSPTree_getPoint(self, *args)


    def getUserData(self, idx: 'int const') -> "void *":
        """getUserData(SbBSPTree self, int const idx) -> void *"""
        return _coin.SbBSPTree_getUserData(self, idx)


    def setUserData(self, idx: 'int const', data: 'void *const') -> "void":
        """setUserData(SbBSPTree self, int const idx, void *const data)"""
        return _coin.SbBSPTree_setUserData(self, idx, data)


    def addPoint(self, pt: 'SbVec3f', userdata: 'void *const'=None) -> "int":
        """
        addPoint(SbBSPTree self, SbVec3f pt, void *const userdata=None) -> int
        addPoint(SbBSPTree self, SbVec3f pt) -> int
        """
        return _coin.SbBSPTree_addPoint(self, pt, userdata)


    def removePoint(self, *args) -> "void":
        """
        removePoint(SbBSPTree self, SbVec3f pt) -> int
        removePoint(SbBSPTree self, int const idx)
        """
        return _coin.SbBSPTree_removePoint(self, *args)


    def findPoint(self, pos: 'SbVec3f') -> "int":
        """findPoint(SbBSPTree self, SbVec3f pos) -> int"""
        return _coin.SbBSPTree_findPoint(self, pos)


    def clear(self, initsize: 'int const'=4) -> "void":
        """
        clear(SbBSPTree self, int const initsize=4)
        clear(SbBSPTree self)
        """
        return _coin.SbBSPTree_clear(self, initsize)


    def getBBox(self) -> "SbBox3f const &":
        """getBBox(SbBSPTree self) -> SbBox3f"""
        return _coin.SbBSPTree_getBBox(self)


    def getPointsArrayPtr(self) -> "SbVec3f const *":
        """getPointsArrayPtr(SbBSPTree self) -> SbVec3f"""
        return _coin.SbBSPTree_getPointsArrayPtr(self)


    def findPoints(self, *args) -> "void":
        """
        findPoints(SbBSPTree self, SbSphere sphere, SbIntList array)
        findPoints(SbBSPTree self, SbSphere sphere, SbList< int > & array)
        """
        return _coin.SbBSPTree_findPoints(self, *args)


    def findClosest(self, *args) -> "int":
        """
        findClosest(SbBSPTree self, SbVec3f pos) -> int
        findClosest(SbBSPTree self, SbSphere sphere, SbIntList array) -> int
        findClosest(SbBSPTree self, SbSphere sphere, SbList< int > & array) -> int
        """
        return _coin.SbBSPTree_findClosest(self, *args)

SbBSPTree_swigregister = _coin.SbBSPTree_swigregister
SbBSPTree_swigregister(SbBSPTree)

class SoNormalGenerator(object):
    """Proxy of C++ SoNormalGenerator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, ccw: 'SbBool const', approxVertices: 'int const'=64):
        """
        __init__(SoNormalGenerator self, SbBool const ccw, int const approxVertices=64) -> SoNormalGenerator
        __init__(SoNormalGenerator self, SbBool const ccw) -> SoNormalGenerator
        """
        this = _coin.new_SoNormalGenerator(ccw, approxVertices)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNormalGenerator
    __del__ = lambda self: None

    def reset(self, ccw: 'SbBool const') -> "void":
        """reset(SoNormalGenerator self, SbBool const ccw)"""
        return _coin.SoNormalGenerator_reset(self, ccw)


    def beginPolygon(self) -> "void":
        """beginPolygon(SoNormalGenerator self)"""
        return _coin.SoNormalGenerator_beginPolygon(self)


    def polygonVertex(self, v: 'SbVec3f') -> "void":
        """polygonVertex(SoNormalGenerator self, SbVec3f v)"""
        return _coin.SoNormalGenerator_polygonVertex(self, v)


    def endPolygon(self) -> "void":
        """endPolygon(SoNormalGenerator self)"""
        return _coin.SoNormalGenerator_endPolygon(self)


    def triangle(self, v0: 'SbVec3f', v1: 'SbVec3f', v2: 'SbVec3f') -> "void":
        """triangle(SoNormalGenerator self, SbVec3f v0, SbVec3f v1, SbVec3f v2)"""
        return _coin.SoNormalGenerator_triangle(self, v0, v1, v2)


    def quad(self, v0: 'SbVec3f', v1: 'SbVec3f', v2: 'SbVec3f', v3: 'SbVec3f') -> "void":
        """quad(SoNormalGenerator self, SbVec3f v0, SbVec3f v1, SbVec3f v2, SbVec3f v3)"""
        return _coin.SoNormalGenerator_quad(self, v0, v1, v2, v3)


    def generate(self, creaseAngle: 'float const', striplens: 'int32_t const *'=None, numstrips: 'int const'=0) -> "void":
        """
        generate(SoNormalGenerator self, float const creaseAngle, int32_t const * striplens=None, int const numstrips=0)
        generate(SoNormalGenerator self, float const creaseAngle, int32_t const * striplens=None)
        generate(SoNormalGenerator self, float const creaseAngle)
        """
        return _coin.SoNormalGenerator_generate(self, creaseAngle, striplens, numstrips)


    def generatePerStrip(self, striplens: 'int32_t const *', numstrips: 'int const') -> "void":
        """generatePerStrip(SoNormalGenerator self, int32_t const * striplens, int const numstrips)"""
        return _coin.SoNormalGenerator_generatePerStrip(self, striplens, numstrips)


    def generatePerFace(self) -> "void":
        """generatePerFace(SoNormalGenerator self)"""
        return _coin.SoNormalGenerator_generatePerFace(self)


    def generateOverall(self) -> "void":
        """generateOverall(SoNormalGenerator self)"""
        return _coin.SoNormalGenerator_generateOverall(self)


    def getNumNormals(self) -> "int":
        """getNumNormals(SoNormalGenerator self) -> int"""
        return _coin.SoNormalGenerator_getNumNormals(self)


    def setNumNormals(self, num: 'int const') -> "void":
        """setNumNormals(SoNormalGenerator self, int const num)"""
        return _coin.SoNormalGenerator_setNumNormals(self, num)


    def getNormals(self) -> "SbVec3f const *":
        """getNormals(SoNormalGenerator self) -> SbVec3f"""
        return _coin.SoNormalGenerator_getNormals(self)


    def getNormal(self, i: 'int32_t const') -> "SbVec3f const &":
        """getNormal(SoNormalGenerator self, int32_t const i) -> SbVec3f"""
        return _coin.SoNormalGenerator_getNormal(self, i)


    def setNormal(self, index: 'int32_t const', normal: 'SbVec3f') -> "void":
        """setNormal(SoNormalGenerator self, int32_t const index, SbVec3f normal)"""
        return _coin.SoNormalGenerator_setNormal(self, index, normal)

SoNormalGenerator_swigregister = _coin.SoNormalGenerator_swigregister
SoNormalGenerator_swigregister(SoNormalGenerator)

class SoNormalElement(SoReplacedElement):
    """Proxy of C++ SoNormalElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNormalElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoNormalElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoNormalElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNormalElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoNormalElement self, SoState state)"""
        return _coin.SoNormalElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numNormals: 'int32_t const', normals: 'SbVec3f', normalsAreUnitLength: 'SbBool const'=0) -> "void":
        """
        set(SoState state, SoNode node, int32_t const numNormals, SbVec3f normals, SbBool const normalsAreUnitLength=0)
        set(SoState state, SoNode node, int32_t const numNormals, SbVec3f normals)
        """
        return _coin.SoNormalElement_set(state, node, numNormals, normals, normalsAreUnitLength)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoNormalElement const *":
        """getInstance(SoState state) -> SoNormalElement"""
        return _coin.SoNormalElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoNormalElement self) -> int32_t"""
        return _coin.SoNormalElement_getNum(self)


    def get(self, index: 'int const') -> "SbVec3f const &":
        """get(SoNormalElement self, int const index) -> SbVec3f"""
        return _coin.SoNormalElement_get(self, index)


    def getArrayPtr(self) -> "SbVec3f const *":
        """getArrayPtr(SoNormalElement self) -> SbVec3f"""
        return _coin.SoNormalElement_getArrayPtr(self)


    def areNormalsUnitLength(self) -> "SbBool":
        """areNormalsUnitLength(SoNormalElement self) -> SbBool"""
        return _coin.SoNormalElement_areNormalsUnitLength(self)

SoNormalElement_swigregister = _coin.SoNormalElement_swigregister
SoNormalElement_swigregister(SoNormalElement)

def SoNormalElement_getClassTypeId() -> "SoType":
    """SoNormalElement_getClassTypeId() -> SoType"""
    return _coin.SoNormalElement_getClassTypeId()

def SoNormalElement_getClassStackIndex() -> "int":
    """SoNormalElement_getClassStackIndex() -> int"""
    return _coin.SoNormalElement_getClassStackIndex()

def SoNormalElement_createInstance() -> "void *":
    """SoNormalElement_createInstance() -> void *"""
    return _coin.SoNormalElement_createInstance()

def SoNormalElement_initClass() -> "void":
    """SoNormalElement_initClass()"""
    return _coin.SoNormalElement_initClass()

def SoNormalElement_set(state: 'SoState', node: 'SoNode', numNormals: 'int32_t const', normals: 'SbVec3f', normalsAreUnitLength: 'SbBool const'=0) -> "void":
    """
    set(SoState state, SoNode node, int32_t const numNormals, SbVec3f normals, SbBool const normalsAreUnitLength=0)
    SoNormalElement_set(SoState state, SoNode node, int32_t const numNormals, SbVec3f normals)
    """
    return _coin.SoNormalElement_set(state, node, numNormals, normals, normalsAreUnitLength)

def SoNormalElement_getInstance(state: 'SoState') -> "SoNormalElement const *":
    """SoNormalElement_getInstance(SoState state) -> SoNormalElement"""
    return _coin.SoNormalElement_getInstance(state)

class SoGLNormalElement(SoNormalElement):
    """Proxy of C++ SoGLNormalElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLNormalElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLNormalElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLNormalElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLNormalElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLNormalElement self, SoState state)"""
        return _coin.SoGLNormalElement_init(self, state)


    def send(self, index: 'int const') -> "void":
        """send(SoGLNormalElement self, int const index)"""
        return _coin.SoGLNormalElement_send(self, index)

SoGLNormalElement_swigregister = _coin.SoGLNormalElement_swigregister
SoGLNormalElement_swigregister(SoGLNormalElement)

def SoGLNormalElement_getClassTypeId() -> "SoType":
    """SoGLNormalElement_getClassTypeId() -> SoType"""
    return _coin.SoGLNormalElement_getClassTypeId()

def SoGLNormalElement_getClassStackIndex() -> "int":
    """SoGLNormalElement_getClassStackIndex() -> int"""
    return _coin.SoGLNormalElement_getClassStackIndex()

def SoGLNormalElement_createInstance() -> "void *":
    """SoGLNormalElement_createInstance() -> void *"""
    return _coin.SoGLNormalElement_createInstance()

def SoGLNormalElement_initClass() -> "void":
    """SoGLNormalElement_initClass()"""
    return _coin.SoGLNormalElement_initClass()

class SoNormalBundle(SoBundle):
    """Proxy of C++ SoNormalBundle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    generator = _swig_property(_coin.SoNormalBundle_generator_get, _coin.SoNormalBundle_generator_set)
SoNormalBundle_swigregister = _coin.SoNormalBundle_swigregister
SoNormalBundle_swigregister(SoNormalBundle)

class SoGLMultiTextureCoordinateElement(SoMultiTextureCoordinateElement):
    """Proxy of C++ SoGLMultiTextureCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLMultiTextureCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLMultiTextureCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLMultiTextureCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLMultiTextureCoordinateElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLMultiTextureCoordinateElement self, SoState state)"""
        return _coin.SoGLMultiTextureCoordinateElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLMultiTextureCoordinateElement self, SoState state)"""
        return _coin.SoGLMultiTextureCoordinateElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLMultiTextureCoordinateElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLMultiTextureCoordinateElement_pop(self, state, prevTopElement)


    def getType(self, unit: 'int const'=0) -> "SoMultiTextureCoordinateElement::CoordType":
        """
        getType(SoGLMultiTextureCoordinateElement self, int const unit=0) -> SoMultiTextureCoordinateElement::CoordType
        getType(SoGLMultiTextureCoordinateElement self) -> SoMultiTextureCoordinateElement::CoordType
        """
        return _coin.SoGLMultiTextureCoordinateElement_getType(self, unit)


    def getInstance(state: 'SoState') -> "SoGLMultiTextureCoordinateElement const *":
        """getInstance(SoState state) -> SoGLMultiTextureCoordinateElement"""
        return _coin.SoGLMultiTextureCoordinateElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def initRender(self, enabled: 'SbBool const *', maxenabled: 'int const') -> "void":
        """initRender(SoGLMultiTextureCoordinateElement self, SbBool const * enabled, int const maxenabled)"""
        return _coin.SoGLMultiTextureCoordinateElement_initRender(self, enabled, maxenabled)


    def send(self, *args) -> "void":
        """
        send(SoGLMultiTextureCoordinateElement self, int const unit, int const index)
        send(SoGLMultiTextureCoordinateElement self, int const unit, int const index, SbVec3f c, SbVec3f n)
        send(SoGLMultiTextureCoordinateElement self, int const index)
        send(SoGLMultiTextureCoordinateElement self, int const index, SbVec3f c, SbVec3f n)
        """
        return _coin.SoGLMultiTextureCoordinateElement_send(self, *args)


    def initMulti(self, state: 'SoState') -> "void":
        """initMulti(SoGLMultiTextureCoordinateElement self, SoState state)"""
        return _coin.SoGLMultiTextureCoordinateElement_initMulti(self, state)

SoGLMultiTextureCoordinateElement_swigregister = _coin.SoGLMultiTextureCoordinateElement_swigregister
SoGLMultiTextureCoordinateElement_swigregister(SoGLMultiTextureCoordinateElement)

def SoGLMultiTextureCoordinateElement_getClassTypeId() -> "SoType":
    """SoGLMultiTextureCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoGLMultiTextureCoordinateElement_getClassTypeId()

def SoGLMultiTextureCoordinateElement_getClassStackIndex() -> "int":
    """SoGLMultiTextureCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoGLMultiTextureCoordinateElement_getClassStackIndex()

def SoGLMultiTextureCoordinateElement_createInstance() -> "void *":
    """SoGLMultiTextureCoordinateElement_createInstance() -> void *"""
    return _coin.SoGLMultiTextureCoordinateElement_createInstance()

def SoGLMultiTextureCoordinateElement_initClass() -> "void":
    """SoGLMultiTextureCoordinateElement_initClass()"""
    return _coin.SoGLMultiTextureCoordinateElement_initClass()

def SoGLMultiTextureCoordinateElement_getInstance(state: 'SoState') -> "SoGLMultiTextureCoordinateElement const *":
    """SoGLMultiTextureCoordinateElement_getInstance(SoState state) -> SoGLMultiTextureCoordinateElement"""
    return _coin.SoGLMultiTextureCoordinateElement_getInstance(state)

class SoTextureCoordinateBundle(SoBundle):
    """Proxy of C++ SoTextureCoordinateBundle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, action: 'SoAction', forRendering: 'SbBool const', setUpDefault: 'SbBool const'=1):
        """
        __init__(SoTextureCoordinateBundle self, SoAction action, SbBool const forRendering, SbBool const setUpDefault=1) -> SoTextureCoordinateBundle
        __init__(SoTextureCoordinateBundle self, SoAction action, SbBool const forRendering) -> SoTextureCoordinateBundle
        """
        this = _coin.new_SoTextureCoordinateBundle(action, forRendering, setUpDefault)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoTextureCoordinateBundle
    __del__ = lambda self: None

    def needCoordinates(self) -> "SbBool":
        """needCoordinates(SoTextureCoordinateBundle self) -> SbBool"""
        return _coin.SoTextureCoordinateBundle_needCoordinates(self)


    def isFunction(self) -> "SbBool":
        """isFunction(SoTextureCoordinateBundle self) -> SbBool"""
        return _coin.SoTextureCoordinateBundle_isFunction(self)


    def get(self, *args) -> "SbVec4f const &":
        """
        get(SoTextureCoordinateBundle self, int const index) -> SbVec4f
        get(SoTextureCoordinateBundle self, SbVec3f point, SbVec3f normal) -> SbVec4f
        """
        return _coin.SoTextureCoordinateBundle_get(self, *args)


    def send(self, *args) -> "void":
        """
        send(SoTextureCoordinateBundle self, int const index)
        send(SoTextureCoordinateBundle self, int const index, SbVec3f point, SbVec3f normal)
        """
        return _coin.SoTextureCoordinateBundle_send(self, *args)


    def needIndices(self) -> "SbBool":
        """needIndices(SoTextureCoordinateBundle self) -> SbBool"""
        return _coin.SoTextureCoordinateBundle_needIndices(self)

SoTextureCoordinateBundle_swigregister = _coin.SoTextureCoordinateBundle_swigregister
SoTextureCoordinateBundle_swigregister(SoTextureCoordinateBundle)

class SoCache(object):
    """Proxy of C++ SoCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, state: 'SoState'):
        """__init__(SoCache self, SoState state) -> SoCache"""
        this = _coin.new_SoCache(state)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ref(self) -> "void":
        """ref(SoCache self)"""
        return _coin.SoCache_ref(self)


    def unref(self, state: 'SoState'=None) -> "void":
        """
        unref(SoCache self, SoState state=None)
        unref(SoCache self)
        """
        return _coin.SoCache_unref(self, state)


    def addElement(self, elem: 'SoElement') -> "void":
        """addElement(SoCache self, SoElement elem)"""
        return _coin.SoCache_addElement(self, elem)


    def addCacheDependency(self, state: 'SoState', cache: 'SoCache') -> "void":
        """addCacheDependency(SoCache self, SoState state, SoCache cache)"""
        return _coin.SoCache_addCacheDependency(self, state, cache)


    def isValid(self, state: 'SoState') -> "SbBool":
        """isValid(SoCache self, SoState state) -> SbBool"""
        return _coin.SoCache_isValid(self, state)


    def getInvalidElement(self, state: 'SoState') -> "SoElement const *":
        """getInvalidElement(SoCache self, SoState state) -> SoElement"""
        return _coin.SoCache_getInvalidElement(self, state)


    def invalidate(self) -> "void":
        """invalidate(SoCache self)"""
        return _coin.SoCache_invalidate(self)

SoCache_swigregister = _coin.SoCache_swigregister
SoCache_swigregister(SoCache)

class SoBoundingBoxCache(SoCache):
    """Proxy of C++ SoBoundingBoxCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, state: 'SoState'):
        """__init__(SoBoundingBoxCache self, SoState state) -> SoBoundingBoxCache"""
        this = _coin.new_SoBoundingBoxCache(state)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoBoundingBoxCache
    __del__ = lambda self: None

    def set(self, boundingbox: 'SbXfBox3f', centerset: 'SbBool', centerpoint: 'SbVec3f') -> "void":
        """set(SoBoundingBoxCache self, SbXfBox3f boundingbox, SbBool centerset, SbVec3f centerpoint)"""
        return _coin.SoBoundingBoxCache_set(self, boundingbox, centerset, centerpoint)


    def getBox(self) -> "SbXfBox3f const &":
        """getBox(SoBoundingBoxCache self) -> SbXfBox3f"""
        return _coin.SoBoundingBoxCache_getBox(self)


    def getProjectedBox(self) -> "SbBox3f const &":
        """getProjectedBox(SoBoundingBoxCache self) -> SbBox3f"""
        return _coin.SoBoundingBoxCache_getProjectedBox(self)


    def isCenterSet(self) -> "SbBool":
        """isCenterSet(SoBoundingBoxCache self) -> SbBool"""
        return _coin.SoBoundingBoxCache_isCenterSet(self)


    def getCenter(self) -> "SbVec3f const &":
        """getCenter(SoBoundingBoxCache self) -> SbVec3f"""
        return _coin.SoBoundingBoxCache_getCenter(self)


    def setHasLinesOrPoints(state: 'SoState') -> "void":
        """setHasLinesOrPoints(SoState state)"""
        return _coin.SoBoundingBoxCache_setHasLinesOrPoints(state)

    setHasLinesOrPoints = staticmethod(setHasLinesOrPoints)

    def hasLinesOrPoints(self) -> "SbBool":
        """hasLinesOrPoints(SoBoundingBoxCache self) -> SbBool"""
        return _coin.SoBoundingBoxCache_hasLinesOrPoints(self)

SoBoundingBoxCache_swigregister = _coin.SoBoundingBoxCache_swigregister
SoBoundingBoxCache_swigregister(SoBoundingBoxCache)

def SoBoundingBoxCache_setHasLinesOrPoints(state: 'SoState') -> "void":
    """SoBoundingBoxCache_setHasLinesOrPoints(SoState state)"""
    return _coin.SoBoundingBoxCache_setHasLinesOrPoints(state)

class SoConvexDataCache(SoCache):
    """Proxy of C++ SoConvexDataCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, state: 'SoState'):
        """__init__(SoConvexDataCache self, SoState state) -> SoConvexDataCache"""
        this = _coin.new_SoConvexDataCache(state)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoConvexDataCache
    __del__ = lambda self: None
    NONE = _coin.SoConvexDataCache_NONE
    PER_FACE = _coin.SoConvexDataCache_PER_FACE
    PER_FACE_INDEXED = _coin.SoConvexDataCache_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoConvexDataCache_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoConvexDataCache_PER_VERTEX_INDEXED

    def generate(self, coords: 'SoCoordinateElement', coordindices: 'int32_t const *', numcoordindices: 'int const', matindices: 'int32_t const *', normindices: 'int32_t const *', texindices: 'int32_t const *', matbinding: 'SoConvexDataCache::Binding const', normbinding: 'SoConvexDataCache::Binding const', texbinding: 'SoConvexDataCache::Binding const') -> "void":
        """generate(SoConvexDataCache self, SoCoordinateElement coords, int32_t const * coordindices, int const numcoordindices, int32_t const * matindices, int32_t const * normindices, int32_t const * texindices, SoConvexDataCache::Binding const matbinding, SoConvexDataCache::Binding const normbinding, SoConvexDataCache::Binding const texbinding)"""
        return _coin.SoConvexDataCache_generate(self, coords, coordindices, numcoordindices, matindices, normindices, texindices, matbinding, normbinding, texbinding)


    def getCoordIndices(self) -> "int32_t const *":
        """getCoordIndices(SoConvexDataCache self) -> int32_t const *"""
        return _coin.SoConvexDataCache_getCoordIndices(self)


    def getNumCoordIndices(self) -> "int":
        """getNumCoordIndices(SoConvexDataCache self) -> int"""
        return _coin.SoConvexDataCache_getNumCoordIndices(self)


    def getMaterialIndices(self) -> "int32_t const *":
        """getMaterialIndices(SoConvexDataCache self) -> int32_t const *"""
        return _coin.SoConvexDataCache_getMaterialIndices(self)


    def getNumMaterialIndices(self) -> "int":
        """getNumMaterialIndices(SoConvexDataCache self) -> int"""
        return _coin.SoConvexDataCache_getNumMaterialIndices(self)


    def getNormalIndices(self) -> "int32_t const *":
        """getNormalIndices(SoConvexDataCache self) -> int32_t const *"""
        return _coin.SoConvexDataCache_getNormalIndices(self)


    def getNumNormalIndices(self) -> "int":
        """getNumNormalIndices(SoConvexDataCache self) -> int"""
        return _coin.SoConvexDataCache_getNumNormalIndices(self)


    def getTexIndices(self) -> "int32_t const *":
        """getTexIndices(SoConvexDataCache self) -> int32_t const *"""
        return _coin.SoConvexDataCache_getTexIndices(self)


    def getNumTexIndices(self) -> "int":
        """getNumTexIndices(SoConvexDataCache self) -> int"""
        return _coin.SoConvexDataCache_getNumTexIndices(self)

SoConvexDataCache_swigregister = _coin.SoConvexDataCache_swigregister
SoConvexDataCache_swigregister(SoConvexDataCache)

class SoGLCacheList(object):
    """Proxy of C++ SoGLCacheList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SoGLCacheList_swigregister = _coin.SoGLCacheList_swigregister
SoGLCacheList_swigregister(SoGLCacheList)

class SoGLLazyElement(SoLazyElement):
    """Proxy of C++ SoGLLazyElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLLazyElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLLazyElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLLazyElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLLazyElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLLazyElement self, SoState state)"""
        return _coin.SoGLLazyElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLLazyElement self, SoState state)"""
        return _coin.SoGLLazyElement_push(self, state)


    def pop(self, state: 'SoState', prevtopelement: 'SoElement') -> "void":
        """pop(SoGLLazyElement self, SoState state, SoElement prevtopelement)"""
        return _coin.SoGLLazyElement_pop(self, state, prevtopelement)


    def sendAllMaterial(state: 'SoState') -> "void":
        """sendAllMaterial(SoState state)"""
        return _coin.SoGLLazyElement_sendAllMaterial(state)

    sendAllMaterial = staticmethod(sendAllMaterial)

    def sendNoMaterial(state: 'SoState') -> "void":
        """sendNoMaterial(SoState state)"""
        return _coin.SoGLLazyElement_sendNoMaterial(state)

    sendNoMaterial = staticmethod(sendNoMaterial)

    def sendOnlyDiffuseColor(state: 'SoState') -> "void":
        """sendOnlyDiffuseColor(SoState state)"""
        return _coin.SoGLLazyElement_sendOnlyDiffuseColor(state)

    sendOnlyDiffuseColor = staticmethod(sendOnlyDiffuseColor)

    def sendLightModel(state: 'SoState', model: 'int32_t const') -> "void":
        """sendLightModel(SoState state, int32_t const model)"""
        return _coin.SoGLLazyElement_sendLightModel(state, model)

    sendLightModel = staticmethod(sendLightModel)

    def sendPackedDiffuse(state: 'SoState', diffuse: 'uint32_t const') -> "void":
        """sendPackedDiffuse(SoState state, uint32_t const diffuse)"""
        return _coin.SoGLLazyElement_sendPackedDiffuse(state, diffuse)

    sendPackedDiffuse = staticmethod(sendPackedDiffuse)

    def sendFlatshading(state: 'SoState', onoff: 'SbBool const') -> "void":
        """sendFlatshading(SoState state, SbBool const onoff)"""
        return _coin.SoGLLazyElement_sendFlatshading(state, onoff)

    sendFlatshading = staticmethod(sendFlatshading)

    def sendVertexOrdering(state: 'SoState', ordering: 'SoLazyElement::VertexOrdering const') -> "void":
        """sendVertexOrdering(SoState state, SoLazyElement::VertexOrdering const ordering)"""
        return _coin.SoGLLazyElement_sendVertexOrdering(state, ordering)

    sendVertexOrdering = staticmethod(sendVertexOrdering)

    def sendTwosideLighting(state: 'SoState', onoff: 'SbBool const') -> "void":
        """sendTwosideLighting(SoState state, SbBool const onoff)"""
        return _coin.SoGLLazyElement_sendTwosideLighting(state, onoff)

    sendTwosideLighting = staticmethod(sendTwosideLighting)

    def sendBackfaceCulling(state: 'SoState', onoff: 'SbBool const') -> "void":
        """sendBackfaceCulling(SoState state, SbBool const onoff)"""
        return _coin.SoGLLazyElement_sendBackfaceCulling(state, onoff)

    sendBackfaceCulling = staticmethod(sendBackfaceCulling)

    def sendDiffuseByIndex(self, index: 'int const') -> "void":
        """sendDiffuseByIndex(SoGLLazyElement self, int const index)"""
        return _coin.SoGLLazyElement_sendDiffuseByIndex(self, index)


    def isColorIndex(state: 'SoState') -> "SbBool":
        """isColorIndex(SoState state) -> SbBool"""
        return _coin.SoGLLazyElement_isColorIndex(state)

    isColorIndex = staticmethod(isColorIndex)

    def getInstance(state: 'SoState') -> "SoGLLazyElement *":
        """getInstance(SoState state) -> SoGLLazyElement"""
        return _coin.SoGLLazyElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def send(self, state: 'SoState', mask: 'uint32_t') -> "void":
        """send(SoGLLazyElement self, SoState state, uint32_t mask)"""
        return _coin.SoGLLazyElement_send(self, state, mask)


    def sendVPPacked(self, state: 'SoState', pcolor: 'unsigned char const *') -> "void":
        """sendVPPacked(SoGLLazyElement self, SoState state, unsigned char const * pcolor)"""
        return _coin.SoGLLazyElement_sendVPPacked(self, state, pcolor)


    def reset(self, state: 'SoState', bitmask: 'uint32_t') -> "void":
        """reset(SoGLLazyElement self, SoState state, uint32_t bitmask)"""
        return _coin.SoGLLazyElement_reset(self, state, bitmask)


    def setDiffuseElt(self, arg2: 'SoNode', numcolors: 'int32_t', colors: 'SbColor', packer: 'SoColorPacker') -> "void":
        """setDiffuseElt(SoGLLazyElement self, SoNode arg2, int32_t numcolors, SbColor colors, SoColorPacker packer)"""
        return _coin.SoGLLazyElement_setDiffuseElt(self, arg2, numcolors, colors, packer)


    def setPackedElt(self, node: 'SoNode', numcolors: 'int32_t', colors: 'uint32_t const *', packedtransparency: 'SbBool const') -> "void":
        """setPackedElt(SoGLLazyElement self, SoNode node, int32_t numcolors, uint32_t const * colors, SbBool const packedtransparency)"""
        return _coin.SoGLLazyElement_setPackedElt(self, node, numcolors, colors, packedtransparency)


    def setColorIndexElt(self, node: 'SoNode', numindices: 'int32_t', indices: 'int32_t const *') -> "void":
        """setColorIndexElt(SoGLLazyElement self, SoNode node, int32_t numindices, int32_t const * indices)"""
        return _coin.SoGLLazyElement_setColorIndexElt(self, node, numindices, indices)


    def setTranspElt(self, node: 'SoNode', numtransp: 'int32_t', transp: 'float const *', packer: 'SoColorPacker') -> "void":
        """setTranspElt(SoGLLazyElement self, SoNode node, int32_t numtransp, float const * transp, SoColorPacker packer)"""
        return _coin.SoGLLazyElement_setTranspElt(self, node, numtransp, transp, packer)


    def setTranspTypeElt(self, type: 'int32_t') -> "void":
        """setTranspTypeElt(SoGLLazyElement self, int32_t type)"""
        return _coin.SoGLLazyElement_setTranspTypeElt(self, type)


    def setAmbientElt(self, color: 'SbColor') -> "void":
        """setAmbientElt(SoGLLazyElement self, SbColor color)"""
        return _coin.SoGLLazyElement_setAmbientElt(self, color)


    def setEmissiveElt(self, color: 'SbColor') -> "void":
        """setEmissiveElt(SoGLLazyElement self, SbColor color)"""
        return _coin.SoGLLazyElement_setEmissiveElt(self, color)


    def setSpecularElt(self, color: 'SbColor') -> "void":
        """setSpecularElt(SoGLLazyElement self, SbColor color)"""
        return _coin.SoGLLazyElement_setSpecularElt(self, color)


    def setShininessElt(self, value: 'float') -> "void":
        """setShininessElt(SoGLLazyElement self, float value)"""
        return _coin.SoGLLazyElement_setShininessElt(self, value)


    def setColorMaterialElt(self, value: 'SbBool') -> "void":
        """setColorMaterialElt(SoGLLazyElement self, SbBool value)"""
        return _coin.SoGLLazyElement_setColorMaterialElt(self, value)


    def enableBlendingElt(self, sfactor: 'int', dfactor: 'int', alpha_sfactor: 'int', alpha_dfactor: 'int') -> "void":
        """enableBlendingElt(SoGLLazyElement self, int sfactor, int dfactor, int alpha_sfactor, int alpha_dfactor)"""
        return _coin.SoGLLazyElement_enableBlendingElt(self, sfactor, dfactor, alpha_sfactor, alpha_dfactor)


    def disableBlendingElt(self) -> "void":
        """disableBlendingElt(SoGLLazyElement self)"""
        return _coin.SoGLLazyElement_disableBlendingElt(self)


    def setLightModelElt(self, state: 'SoState', model: 'int32_t') -> "void":
        """setLightModelElt(SoGLLazyElement self, SoState state, int32_t model)"""
        return _coin.SoGLLazyElement_setLightModelElt(self, state, model)


    def setMaterialElt(self, node: 'SoNode', bitmask: 'uint32_t', packer: 'SoColorPacker', diffuse: 'SbColor', numdiffuse: 'int const', transp: 'float const *', numtransp: 'int const', ambient: 'SbColor', emissive: 'SbColor', specular: 'SbColor', shininess: 'float const', istransparent: 'SbBool const') -> "void":
        """setMaterialElt(SoGLLazyElement self, SoNode node, uint32_t bitmask, SoColorPacker packer, SbColor diffuse, int const numdiffuse, float const * transp, int const numtransp, SbColor ambient, SbColor emissive, SbColor specular, float const shininess, SbBool const istransparent)"""
        return _coin.SoGLLazyElement_setMaterialElt(self, node, bitmask, packer, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)


    def setVertexOrderingElt(self, ordering: 'SoLazyElement::VertexOrdering') -> "void":
        """setVertexOrderingElt(SoGLLazyElement self, SoLazyElement::VertexOrdering ordering)"""
        return _coin.SoGLLazyElement_setVertexOrderingElt(self, ordering)


    def setBackfaceCullingElt(self, onoff: 'SbBool') -> "void":
        """setBackfaceCullingElt(SoGLLazyElement self, SbBool onoff)"""
        return _coin.SoGLLazyElement_setBackfaceCullingElt(self, onoff)


    def setTwosideLightingElt(self, onoff: 'SbBool') -> "void":
        """setTwosideLightingElt(SoGLLazyElement self, SbBool onoff)"""
        return _coin.SoGLLazyElement_setTwosideLightingElt(self, onoff)


    def setShadeModelElt(self, flatshading: 'SbBool') -> "void":
        """setShadeModelElt(SoGLLazyElement self, SbBool flatshading)"""
        return _coin.SoGLLazyElement_setShadeModelElt(self, flatshading)


    def setAlphaTestElt(self, func: 'int', value: 'float') -> "void":
        """setAlphaTestElt(SoGLLazyElement self, int func, float value)"""
        return _coin.SoGLLazyElement_setAlphaTestElt(self, func, value)


    def beginCaching(state: 'SoState', prestate: 'SoGLLazyElement::GLState *', poststate: 'SoGLLazyElement::GLState *') -> "void":
        """beginCaching(SoState state, SoGLLazyElement::GLState * prestate, SoGLLazyElement::GLState * poststate)"""
        return _coin.SoGLLazyElement_beginCaching(state, prestate, poststate)

    beginCaching = staticmethod(beginCaching)

    def endCaching(state: 'SoState') -> "void":
        """endCaching(SoState state)"""
        return _coin.SoGLLazyElement_endCaching(state)

    endCaching = staticmethod(endCaching)

    def preCacheCall(state: 'SoState', prestate: 'SoGLLazyElement::GLState const *') -> "SbBool":
        """preCacheCall(SoState state, SoGLLazyElement::GLState const * prestate) -> SbBool"""
        return _coin.SoGLLazyElement_preCacheCall(state, prestate)

    preCacheCall = staticmethod(preCacheCall)

    def postCacheCall(state: 'SoState', poststate: 'SoGLLazyElement::GLState const *') -> "void":
        """postCacheCall(SoState state, SoGLLazyElement::GLState const * poststate)"""
        return _coin.SoGLLazyElement_postCacheCall(state, poststate)

    postCacheCall = staticmethod(postCacheCall)

    def mergeCacheInfo(state: 'SoState', childprestate: 'SoGLLazyElement::GLState *', childpoststate: 'SoGLLazyElement::GLState *') -> "void":
        """mergeCacheInfo(SoState state, SoGLLazyElement::GLState * childprestate, SoGLLazyElement::GLState * childpoststate)"""
        return _coin.SoGLLazyElement_mergeCacheInfo(state, childprestate, childpoststate)

    mergeCacheInfo = staticmethod(mergeCacheInfo)

    def updateColorVBO(self, vbo: 'SoVBO *') -> "void":
        """updateColorVBO(SoGLLazyElement self, SoVBO * vbo)"""
        return _coin.SoGLLazyElement_updateColorVBO(self, vbo)

SoGLLazyElement_swigregister = _coin.SoGLLazyElement_swigregister
SoGLLazyElement_swigregister(SoGLLazyElement)

def SoGLLazyElement_getClassTypeId() -> "SoType":
    """SoGLLazyElement_getClassTypeId() -> SoType"""
    return _coin.SoGLLazyElement_getClassTypeId()

def SoGLLazyElement_getClassStackIndex() -> "int":
    """SoGLLazyElement_getClassStackIndex() -> int"""
    return _coin.SoGLLazyElement_getClassStackIndex()

def SoGLLazyElement_createInstance() -> "void *":
    """SoGLLazyElement_createInstance() -> void *"""
    return _coin.SoGLLazyElement_createInstance()

def SoGLLazyElement_initClass() -> "void":
    """SoGLLazyElement_initClass()"""
    return _coin.SoGLLazyElement_initClass()

def SoGLLazyElement_sendAllMaterial(state: 'SoState') -> "void":
    """SoGLLazyElement_sendAllMaterial(SoState state)"""
    return _coin.SoGLLazyElement_sendAllMaterial(state)

def SoGLLazyElement_sendNoMaterial(state: 'SoState') -> "void":
    """SoGLLazyElement_sendNoMaterial(SoState state)"""
    return _coin.SoGLLazyElement_sendNoMaterial(state)

def SoGLLazyElement_sendOnlyDiffuseColor(state: 'SoState') -> "void":
    """SoGLLazyElement_sendOnlyDiffuseColor(SoState state)"""
    return _coin.SoGLLazyElement_sendOnlyDiffuseColor(state)

def SoGLLazyElement_sendLightModel(state: 'SoState', model: 'int32_t const') -> "void":
    """SoGLLazyElement_sendLightModel(SoState state, int32_t const model)"""
    return _coin.SoGLLazyElement_sendLightModel(state, model)

def SoGLLazyElement_sendPackedDiffuse(state: 'SoState', diffuse: 'uint32_t const') -> "void":
    """SoGLLazyElement_sendPackedDiffuse(SoState state, uint32_t const diffuse)"""
    return _coin.SoGLLazyElement_sendPackedDiffuse(state, diffuse)

def SoGLLazyElement_sendFlatshading(state: 'SoState', onoff: 'SbBool const') -> "void":
    """SoGLLazyElement_sendFlatshading(SoState state, SbBool const onoff)"""
    return _coin.SoGLLazyElement_sendFlatshading(state, onoff)

def SoGLLazyElement_sendVertexOrdering(state: 'SoState', ordering: 'SoLazyElement::VertexOrdering const') -> "void":
    """SoGLLazyElement_sendVertexOrdering(SoState state, SoLazyElement::VertexOrdering const ordering)"""
    return _coin.SoGLLazyElement_sendVertexOrdering(state, ordering)

def SoGLLazyElement_sendTwosideLighting(state: 'SoState', onoff: 'SbBool const') -> "void":
    """SoGLLazyElement_sendTwosideLighting(SoState state, SbBool const onoff)"""
    return _coin.SoGLLazyElement_sendTwosideLighting(state, onoff)

def SoGLLazyElement_sendBackfaceCulling(state: 'SoState', onoff: 'SbBool const') -> "void":
    """SoGLLazyElement_sendBackfaceCulling(SoState state, SbBool const onoff)"""
    return _coin.SoGLLazyElement_sendBackfaceCulling(state, onoff)

def SoGLLazyElement_isColorIndex(state: 'SoState') -> "SbBool":
    """SoGLLazyElement_isColorIndex(SoState state) -> SbBool"""
    return _coin.SoGLLazyElement_isColorIndex(state)

def SoGLLazyElement_getInstance(state: 'SoState') -> "SoGLLazyElement *":
    """SoGLLazyElement_getInstance(SoState state) -> SoGLLazyElement"""
    return _coin.SoGLLazyElement_getInstance(state)

def SoGLLazyElement_beginCaching(state: 'SoState', prestate: 'SoGLLazyElement::GLState *', poststate: 'SoGLLazyElement::GLState *') -> "void":
    """SoGLLazyElement_beginCaching(SoState state, SoGLLazyElement::GLState * prestate, SoGLLazyElement::GLState * poststate)"""
    return _coin.SoGLLazyElement_beginCaching(state, prestate, poststate)

def SoGLLazyElement_endCaching(state: 'SoState') -> "void":
    """SoGLLazyElement_endCaching(SoState state)"""
    return _coin.SoGLLazyElement_endCaching(state)

def SoGLLazyElement_preCacheCall(state: 'SoState', prestate: 'SoGLLazyElement::GLState const *') -> "SbBool":
    """SoGLLazyElement_preCacheCall(SoState state, SoGLLazyElement::GLState const * prestate) -> SbBool"""
    return _coin.SoGLLazyElement_preCacheCall(state, prestate)

def SoGLLazyElement_postCacheCall(state: 'SoState', poststate: 'SoGLLazyElement::GLState const *') -> "void":
    """SoGLLazyElement_postCacheCall(SoState state, SoGLLazyElement::GLState const * poststate)"""
    return _coin.SoGLLazyElement_postCacheCall(state, poststate)

def SoGLLazyElement_mergeCacheInfo(state: 'SoState', childprestate: 'SoGLLazyElement::GLState *', childpoststate: 'SoGLLazyElement::GLState *') -> "void":
    """SoGLLazyElement_mergeCacheInfo(SoState state, SoGLLazyElement::GLState * childprestate, SoGLLazyElement::GLState * childpoststate)"""
    return _coin.SoGLLazyElement_mergeCacheInfo(state, childprestate, childpoststate)

class SoGLRenderCache(SoCache):
    """Proxy of C++ SoGLRenderCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoGLRenderCache
    __del__ = lambda self: None

    def isValid(self, state: 'SoState') -> "SbBool":
        """isValid(SoGLRenderCache self, SoState state) -> SbBool"""
        return _coin.SoGLRenderCache_isValid(self, state)


    def addNestedCache(self, child: 'SoGLDisplayList') -> "void":
        """addNestedCache(SoGLRenderCache self, SoGLDisplayList child)"""
        return _coin.SoGLRenderCache_addNestedCache(self, child)

SoGLRenderCache_swigregister = _coin.SoGLRenderCache_swigregister
SoGLRenderCache_swigregister(SoGLRenderCache)

class SoNormalCache(SoCache):
    """Proxy of C++ SoNormalCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, state: 'SoState'):
        """__init__(SoNormalCache self, SoState state) -> SoNormalCache"""
        this = _coin.new_SoNormalCache(state)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNormalCache
    __del__ = lambda self: None

    def set(self, *args) -> "void":
        """
        set(SoNormalCache self, int const num, SbVec3f normals)
        set(SoNormalCache self, SoNormalGenerator generator)
        """
        return _coin.SoNormalCache_set(self, *args)


    def getNum(self) -> "int":
        """getNum(SoNormalCache self) -> int"""
        return _coin.SoNormalCache_getNum(self)


    def getNormals(self) -> "SbVec3f const *":
        """getNormals(SoNormalCache self) -> SbVec3f"""
        return _coin.SoNormalCache_getNormals(self)


    def getNumIndices(self) -> "int":
        """getNumIndices(SoNormalCache self) -> int"""
        return _coin.SoNormalCache_getNumIndices(self)


    def getIndices(self) -> "int32_t const *":
        """getIndices(SoNormalCache self) -> int32_t const *"""
        return _coin.SoNormalCache_getIndices(self)


    def generatePerVertex(self, coords: 'SbVec3f', numcoords: 'unsigned int const', coordindices: 'int32_t const *', numcoordindices: 'int const', crease_angle: 'float const', facenormals: 'SbVec3f'=None, numfacenormals: 'int const'=-1, ccw: 'SbBool const'=1, tristrip: 'SbBool const'=0) -> "void":
        """
        generatePerVertex(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoordindices, float const crease_angle, SbVec3f facenormals=None, int const numfacenormals=-1, SbBool const ccw=1, SbBool const tristrip=0)
        generatePerVertex(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoordindices, float const crease_angle, SbVec3f facenormals=None, int const numfacenormals=-1, SbBool const ccw=1)
        generatePerVertex(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoordindices, float const crease_angle, SbVec3f facenormals=None, int const numfacenormals=-1)
        generatePerVertex(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoordindices, float const crease_angle, SbVec3f facenormals=None)
        generatePerVertex(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoordindices, float const crease_angle)
        """
        return _coin.SoNormalCache_generatePerVertex(self, coords, numcoords, coordindices, numcoordindices, crease_angle, facenormals, numfacenormals, ccw, tristrip)


    def generatePerFace(self, coords: 'SbVec3f', numcoords: 'unsigned int const', coordindices: 'int32_t const *', numcoorindices: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerFace(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoorindices, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerFace(self, coords, numcoords, coordindices, numcoorindices, ccw)


    def generatePerFaceStrip(self, coords: 'SbVec3f', numcoords: 'unsigned int const', coordindices: 'int32_t const *', numcoorindices: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerFaceStrip(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoorindices, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerFaceStrip(self, coords, numcoords, coordindices, numcoorindices, ccw)


    def generatePerStrip(self, coords: 'SbVec3f', numcoords: 'unsigned int const', coordindices: 'int32_t const *', numcoorindices: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerStrip(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int32_t const * coordindices, int const numcoorindices, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerStrip(self, coords, numcoords, coordindices, numcoorindices, ccw)


    def generatePerVertexQuad(self, coords: 'SbVec3f', numcoords: 'unsigned int const', vPerRow: 'int const', vPerColumn: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerVertexQuad(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int const vPerRow, int const vPerColumn, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerVertexQuad(self, coords, numcoords, vPerRow, vPerColumn, ccw)


    def generatePerFaceQuad(self, coords: 'SbVec3f', numcoords: 'unsigned int const', vPerRow: 'int const', vPerColumn: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerFaceQuad(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int const vPerRow, int const vPerColumn, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerFaceQuad(self, coords, numcoords, vPerRow, vPerColumn, ccw)


    def generatePerRowQuad(self, coords: 'SbVec3f', numcoords: 'unsigned int const', vPerRow: 'int const', vPerColumn: 'int const', ccw: 'SbBool const') -> "void":
        """generatePerRowQuad(SoNormalCache self, SbVec3f coords, unsigned int const numcoords, int const vPerRow, int const vPerColumn, SbBool const ccw)"""
        return _coin.SoNormalCache_generatePerRowQuad(self, coords, numcoords, vPerRow, vPerColumn, ccw)

SoNormalCache_swigregister = _coin.SoNormalCache_swigregister
SoNormalCache_swigregister(SoNormalCache)

class SoTextureCoordinateCache(SoCache):
    """Proxy of C++ SoTextureCoordinateCache class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, state: 'SoState'):
        """__init__(SoTextureCoordinateCache self, SoState state) -> SoTextureCoordinateCache"""
        this = _coin.new_SoTextureCoordinateCache(state)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoTextureCoordinateCache
    __del__ = lambda self: None

    def generate(self, bbox: 'SbBox3f', vertices: 'SbVec3f', numvertices: 'int const') -> "void":
        """generate(SoTextureCoordinateCache self, SbBox3f bbox, SbVec3f vertices, int const numvertices)"""
        return _coin.SoTextureCoordinateCache_generate(self, bbox, vertices, numvertices)


    def get(self) -> "SbVec2f const *":
        """get(SoTextureCoordinateCache self) -> SbVec2f"""
        return _coin.SoTextureCoordinateCache_get(self)


    def getNum(self) -> "int":
        """getNum(SoTextureCoordinateCache self) -> int"""
        return _coin.SoTextureCoordinateCache_getNum(self)

SoTextureCoordinateCache_swigregister = _coin.SoTextureCoordinateCache_swigregister
SoTextureCoordinateCache_swigregister(SoTextureCoordinateCache)

class SoDetail(object):
    """Proxy of C++ SoDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDetail_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoDetail_initClasses()

    initClasses = staticmethod(initClasses)

    def copy(self) -> "SoDetail *":
        """copy(SoDetail self) -> SoDetail"""
        return _coin.SoDetail_copy(self)


    def getTypeId(self) -> "SoType":
        """getTypeId(SoDetail self) -> SoType"""
        return _coin.SoDetail_getTypeId(self)


    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoDetail self, SoType type) -> SbBool"""
        return _coin.SoDetail_isOfType(self, type)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
SoDetail_swigregister = _coin.SoDetail_swigregister
SoDetail_swigregister(SoDetail)

def SoDetail_initClass() -> "void":
    """SoDetail_initClass()"""
    return _coin.SoDetail_initClass()

def SoDetail_initClasses() -> "void":
    """SoDetail_initClasses()"""
    return _coin.SoDetail_initClasses()

def SoDetail_getClassTypeId() -> "SoType":
    """SoDetail_getClassTypeId() -> SoType"""
    return _coin.SoDetail_getClassTypeId()

class SoConeDetail(SoDetail):
    """Proxy of C++ SoConeDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoConeDetail self) -> SoType"""
        return _coin.SoConeDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoConeDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoConeDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoConeDetail self) -> SoConeDetail"""
        this = _coin.new_SoConeDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoConeDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoConeDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoConeDetail self) -> SoDetail"""
        return _coin.SoConeDetail_copy(self)


    def setPart(self, part: 'int const') -> "void":
        """setPart(SoConeDetail self, int const part)"""
        return _coin.SoConeDetail_setPart(self, part)


    def getPart(self) -> "int":
        """getPart(SoConeDetail self) -> int"""
        return _coin.SoConeDetail_getPart(self)

SoConeDetail_swigregister = _coin.SoConeDetail_swigregister
SoConeDetail_swigregister(SoConeDetail)

def SoConeDetail_getClassTypeId() -> "SoType":
    """SoConeDetail_getClassTypeId() -> SoType"""
    return _coin.SoConeDetail_getClassTypeId()

def SoConeDetail_cleanupClass() -> "void":
    """SoConeDetail_cleanupClass()"""
    return _coin.SoConeDetail_cleanupClass()

def SoConeDetail_initClass() -> "void":
    """SoConeDetail_initClass()"""
    return _coin.SoConeDetail_initClass()

class SoCubeDetail(SoDetail):
    """Proxy of C++ SoCubeDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCubeDetail self) -> SoType"""
        return _coin.SoCubeDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCubeDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoCubeDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoCubeDetail self) -> SoCubeDetail"""
        this = _coin.new_SoCubeDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoCubeDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCubeDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoCubeDetail self) -> SoDetail"""
        return _coin.SoCubeDetail_copy(self)


    def setPart(self, part: 'int const') -> "void":
        """setPart(SoCubeDetail self, int const part)"""
        return _coin.SoCubeDetail_setPart(self, part)


    def getPart(self) -> "int":
        """getPart(SoCubeDetail self) -> int"""
        return _coin.SoCubeDetail_getPart(self)

SoCubeDetail_swigregister = _coin.SoCubeDetail_swigregister
SoCubeDetail_swigregister(SoCubeDetail)

def SoCubeDetail_getClassTypeId() -> "SoType":
    """SoCubeDetail_getClassTypeId() -> SoType"""
    return _coin.SoCubeDetail_getClassTypeId()

def SoCubeDetail_cleanupClass() -> "void":
    """SoCubeDetail_cleanupClass()"""
    return _coin.SoCubeDetail_cleanupClass()

def SoCubeDetail_initClass() -> "void":
    """SoCubeDetail_initClass()"""
    return _coin.SoCubeDetail_initClass()

class SoCylinderDetail(SoDetail):
    """Proxy of C++ SoCylinderDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCylinderDetail self) -> SoType"""
        return _coin.SoCylinderDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCylinderDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoCylinderDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoCylinderDetail self) -> SoCylinderDetail"""
        this = _coin.new_SoCylinderDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoCylinderDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCylinderDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoCylinderDetail self) -> SoDetail"""
        return _coin.SoCylinderDetail_copy(self)


    def setPart(self, part: 'int const') -> "void":
        """setPart(SoCylinderDetail self, int const part)"""
        return _coin.SoCylinderDetail_setPart(self, part)


    def getPart(self) -> "int":
        """getPart(SoCylinderDetail self) -> int"""
        return _coin.SoCylinderDetail_getPart(self)

SoCylinderDetail_swigregister = _coin.SoCylinderDetail_swigregister
SoCylinderDetail_swigregister(SoCylinderDetail)

def SoCylinderDetail_getClassTypeId() -> "SoType":
    """SoCylinderDetail_getClassTypeId() -> SoType"""
    return _coin.SoCylinderDetail_getClassTypeId()

def SoCylinderDetail_cleanupClass() -> "void":
    """SoCylinderDetail_cleanupClass()"""
    return _coin.SoCylinderDetail_cleanupClass()

def SoCylinderDetail_initClass() -> "void":
    """SoCylinderDetail_initClass()"""
    return _coin.SoCylinderDetail_initClass()

class SoPointDetail(SoDetail):
    """Proxy of C++ SoPointDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPointDetail self) -> SoType"""
        return _coin.SoPointDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoPointDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoPointDetail self) -> SoPointDetail"""
        this = _coin.new_SoPointDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPointDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoPointDetail self) -> SoDetail"""
        return _coin.SoPointDetail_copy(self)


    def getCoordinateIndex(self) -> "int":
        """getCoordinateIndex(SoPointDetail self) -> int"""
        return _coin.SoPointDetail_getCoordinateIndex(self)


    def getMaterialIndex(self) -> "int":
        """getMaterialIndex(SoPointDetail self) -> int"""
        return _coin.SoPointDetail_getMaterialIndex(self)


    def getNormalIndex(self) -> "int":
        """getNormalIndex(SoPointDetail self) -> int"""
        return _coin.SoPointDetail_getNormalIndex(self)


    def getTextureCoordIndex(self) -> "int":
        """getTextureCoordIndex(SoPointDetail self) -> int"""
        return _coin.SoPointDetail_getTextureCoordIndex(self)


    def setCoordinateIndex(self, idx: 'int const') -> "void":
        """setCoordinateIndex(SoPointDetail self, int const idx)"""
        return _coin.SoPointDetail_setCoordinateIndex(self, idx)


    def setMaterialIndex(self, idx: 'int const') -> "void":
        """setMaterialIndex(SoPointDetail self, int const idx)"""
        return _coin.SoPointDetail_setMaterialIndex(self, idx)


    def setNormalIndex(self, idx: 'int const') -> "void":
        """setNormalIndex(SoPointDetail self, int const idx)"""
        return _coin.SoPointDetail_setNormalIndex(self, idx)


    def setTextureCoordIndex(self, idx: 'int const') -> "void":
        """setTextureCoordIndex(SoPointDetail self, int const idx)"""
        return _coin.SoPointDetail_setTextureCoordIndex(self, idx)

SoPointDetail_swigregister = _coin.SoPointDetail_swigregister
SoPointDetail_swigregister(SoPointDetail)

def SoPointDetail_getClassTypeId() -> "SoType":
    """SoPointDetail_getClassTypeId() -> SoType"""
    return _coin.SoPointDetail_getClassTypeId()

def SoPointDetail_cleanupClass() -> "void":
    """SoPointDetail_cleanupClass()"""
    return _coin.SoPointDetail_cleanupClass()

def SoPointDetail_initClass() -> "void":
    """SoPointDetail_initClass()"""
    return _coin.SoPointDetail_initClass()

class SoFaceDetail(SoDetail):
    """Proxy of C++ SoFaceDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFaceDetail self) -> SoType"""
        return _coin.SoFaceDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFaceDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoFaceDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoFaceDetail self) -> SoFaceDetail"""
        this = _coin.new_SoFaceDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoFaceDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFaceDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoFaceDetail self) -> SoDetail"""
        return _coin.SoFaceDetail_copy(self)


    def getNumPoints(self) -> "int":
        """getNumPoints(SoFaceDetail self) -> int"""
        return _coin.SoFaceDetail_getNumPoints(self)


    def getPoint(self, idx: 'int const') -> "SoPointDetail const *":
        """getPoint(SoFaceDetail self, int const idx) -> SoPointDetail"""
        return _coin.SoFaceDetail_getPoint(self, idx)


    def getPoints(self) -> "SoPointDetail *":
        """getPoints(SoFaceDetail self) -> SoPointDetail"""
        return _coin.SoFaceDetail_getPoints(self)


    def getFaceIndex(self) -> "int":
        """getFaceIndex(SoFaceDetail self) -> int"""
        return _coin.SoFaceDetail_getFaceIndex(self)


    def getPartIndex(self) -> "int":
        """getPartIndex(SoFaceDetail self) -> int"""
        return _coin.SoFaceDetail_getPartIndex(self)


    def setNumPoints(self, num: 'int const') -> "void":
        """setNumPoints(SoFaceDetail self, int const num)"""
        return _coin.SoFaceDetail_setNumPoints(self, num)


    def setPoint(self, idx: 'int const', detail: 'SoPointDetail') -> "void":
        """setPoint(SoFaceDetail self, int const idx, SoPointDetail detail)"""
        return _coin.SoFaceDetail_setPoint(self, idx, detail)


    def setFaceIndex(self, idx: 'int const') -> "void":
        """setFaceIndex(SoFaceDetail self, int const idx)"""
        return _coin.SoFaceDetail_setFaceIndex(self, idx)


    def setPartIndex(self, idx: 'int const') -> "void":
        """setPartIndex(SoFaceDetail self, int const idx)"""
        return _coin.SoFaceDetail_setPartIndex(self, idx)


    def incFaceIndex(self) -> "void":
        """incFaceIndex(SoFaceDetail self)"""
        return _coin.SoFaceDetail_incFaceIndex(self)


    def incPartIndex(self) -> "void":
        """incPartIndex(SoFaceDetail self)"""
        return _coin.SoFaceDetail_incPartIndex(self)

SoFaceDetail_swigregister = _coin.SoFaceDetail_swigregister
SoFaceDetail_swigregister(SoFaceDetail)

def SoFaceDetail_getClassTypeId() -> "SoType":
    """SoFaceDetail_getClassTypeId() -> SoType"""
    return _coin.SoFaceDetail_getClassTypeId()

def SoFaceDetail_cleanupClass() -> "void":
    """SoFaceDetail_cleanupClass()"""
    return _coin.SoFaceDetail_cleanupClass()

def SoFaceDetail_initClass() -> "void":
    """SoFaceDetail_initClass()"""
    return _coin.SoFaceDetail_initClass()

class SoLineDetail(SoDetail):
    """Proxy of C++ SoLineDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLineDetail self) -> SoType"""
        return _coin.SoLineDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLineDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoLineDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoLineDetail self) -> SoLineDetail"""
        this = _coin.new_SoLineDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoLineDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLineDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoLineDetail self) -> SoDetail"""
        return _coin.SoLineDetail_copy(self)


    def getPoint0(self) -> "SoPointDetail const *":
        """getPoint0(SoLineDetail self) -> SoPointDetail"""
        return _coin.SoLineDetail_getPoint0(self)


    def getPoint1(self) -> "SoPointDetail const *":
        """getPoint1(SoLineDetail self) -> SoPointDetail"""
        return _coin.SoLineDetail_getPoint1(self)


    def getLineIndex(self) -> "int":
        """getLineIndex(SoLineDetail self) -> int"""
        return _coin.SoLineDetail_getLineIndex(self)


    def getPartIndex(self) -> "int":
        """getPartIndex(SoLineDetail self) -> int"""
        return _coin.SoLineDetail_getPartIndex(self)


    def setPoint0(self, detail: 'SoPointDetail') -> "void":
        """setPoint0(SoLineDetail self, SoPointDetail detail)"""
        return _coin.SoLineDetail_setPoint0(self, detail)


    def setPoint1(self, detail: 'SoPointDetail') -> "void":
        """setPoint1(SoLineDetail self, SoPointDetail detail)"""
        return _coin.SoLineDetail_setPoint1(self, detail)


    def setLineIndex(self, idx: 'int const') -> "void":
        """setLineIndex(SoLineDetail self, int const idx)"""
        return _coin.SoLineDetail_setLineIndex(self, idx)


    def setPartIndex(self, idx: 'int const') -> "void":
        """setPartIndex(SoLineDetail self, int const idx)"""
        return _coin.SoLineDetail_setPartIndex(self, idx)


    def incLineIndex(self) -> "void":
        """incLineIndex(SoLineDetail self)"""
        return _coin.SoLineDetail_incLineIndex(self)


    def incPartIndex(self) -> "void":
        """incPartIndex(SoLineDetail self)"""
        return _coin.SoLineDetail_incPartIndex(self)

SoLineDetail_swigregister = _coin.SoLineDetail_swigregister
SoLineDetail_swigregister(SoLineDetail)

def SoLineDetail_getClassTypeId() -> "SoType":
    """SoLineDetail_getClassTypeId() -> SoType"""
    return _coin.SoLineDetail_getClassTypeId()

def SoLineDetail_cleanupClass() -> "void":
    """SoLineDetail_cleanupClass()"""
    return _coin.SoLineDetail_cleanupClass()

def SoLineDetail_initClass() -> "void":
    """SoLineDetail_initClass()"""
    return _coin.SoLineDetail_initClass()

class SoNodeKitDetail(SoDetail):
    """Proxy of C++ SoNodeKitDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNodeKitDetail self) -> SoType"""
        return _coin.SoNodeKitDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNodeKitDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoNodeKitDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoNodeKitDetail self) -> SoNodeKitDetail"""
        this = _coin.new_SoNodeKitDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNodeKitDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNodeKitDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoNodeKitDetail self) -> SoDetail"""
        return _coin.SoNodeKitDetail_copy(self)


    def setNodeKit(self, kit: 'SoBaseKit') -> "void":
        """setNodeKit(SoNodeKitDetail self, SoBaseKit kit)"""
        return _coin.SoNodeKitDetail_setNodeKit(self, kit)


    def getNodeKit(self) -> "SoBaseKit *":
        """getNodeKit(SoNodeKitDetail self) -> SoBaseKit"""
        return _coin.SoNodeKitDetail_getNodeKit(self)


    def setPart(self, part: 'SoNode') -> "void":
        """setPart(SoNodeKitDetail self, SoNode part)"""
        return _coin.SoNodeKitDetail_setPart(self, part)


    def getPart(self) -> "SoNode *":
        """getPart(SoNodeKitDetail self) -> SoNode"""
        return _coin.SoNodeKitDetail_getPart(self)


    def setPartName(self, name: 'SbName') -> "void":
        """setPartName(SoNodeKitDetail self, SbName name)"""
        return _coin.SoNodeKitDetail_setPartName(self, name)


    def getPartName(self) -> "SbName const &":
        """getPartName(SoNodeKitDetail self) -> SbName"""
        return _coin.SoNodeKitDetail_getPartName(self)

SoNodeKitDetail_swigregister = _coin.SoNodeKitDetail_swigregister
SoNodeKitDetail_swigregister(SoNodeKitDetail)

def SoNodeKitDetail_getClassTypeId() -> "SoType":
    """SoNodeKitDetail_getClassTypeId() -> SoType"""
    return _coin.SoNodeKitDetail_getClassTypeId()

def SoNodeKitDetail_cleanupClass() -> "void":
    """SoNodeKitDetail_cleanupClass()"""
    return _coin.SoNodeKitDetail_cleanupClass()

def SoNodeKitDetail_initClass() -> "void":
    """SoNodeKitDetail_initClass()"""
    return _coin.SoNodeKitDetail_initClass()

class SoTextDetail(SoDetail):
    """Proxy of C++ SoTextDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextDetail self) -> SoType"""
        return _coin.SoTextDetail_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def cleanupClass() -> "void":
        """cleanupClass()"""
        return _coin.SoTextDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)

    def __init__(self):
        """__init__(SoTextDetail self) -> SoTextDetail"""
        this = _coin.new_SoTextDetail()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoTextDetail
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextDetail_initClass()

    initClass = staticmethod(initClass)

    def copy(self) -> "SoDetail *":
        """copy(SoTextDetail self) -> SoDetail"""
        return _coin.SoTextDetail_copy(self)


    def getStringIndex(self) -> "int":
        """getStringIndex(SoTextDetail self) -> int"""
        return _coin.SoTextDetail_getStringIndex(self)


    def getCharacterIndex(self) -> "int":
        """getCharacterIndex(SoTextDetail self) -> int"""
        return _coin.SoTextDetail_getCharacterIndex(self)


    def getPart(self) -> "int":
        """getPart(SoTextDetail self) -> int"""
        return _coin.SoTextDetail_getPart(self)


    def setStringIndex(self, idx: 'int const') -> "void":
        """setStringIndex(SoTextDetail self, int const idx)"""
        return _coin.SoTextDetail_setStringIndex(self, idx)


    def setCharacterIndex(self, idx: 'int const') -> "void":
        """setCharacterIndex(SoTextDetail self, int const idx)"""
        return _coin.SoTextDetail_setCharacterIndex(self, idx)


    def setPart(self, idx: 'int const') -> "void":
        """setPart(SoTextDetail self, int const idx)"""
        return _coin.SoTextDetail_setPart(self, idx)

SoTextDetail_swigregister = _coin.SoTextDetail_swigregister
SoTextDetail_swigregister(SoTextDetail)

def SoTextDetail_getClassTypeId() -> "SoType":
    """SoTextDetail_getClassTypeId() -> SoType"""
    return _coin.SoTextDetail_getClassTypeId()

def SoTextDetail_cleanupClass() -> "void":
    """SoTextDetail_cleanupClass()"""
    return _coin.SoTextDetail_cleanupClass()

def SoTextDetail_initClass() -> "void":
    """SoTextDetail_initClass()"""
    return _coin.SoTextDetail_initClass()

class SoSFNode(SoSField):
    """Proxy of C++ SoSFNode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFNode self) -> SoSFNode"""
        this = _coin.new_SoSFNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFNode
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFNode_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFNode_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFNode self) -> SoType"""
        return _coin.SoSFNode_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFNode self, SoField field)"""
        return _coin.SoSFNode_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFNode self, SoField field) -> SbBool"""
        return _coin.SoSFNode_isSame(self, field)


    def getValue(self) -> "SoNode *":
        """getValue(SoSFNode self) -> SoNode"""
        return _coin.SoSFNode_getValue(self)


    def __eq__(self, field: 'SoSFNode') -> "int":
        """__eq__(SoSFNode self, SoSFNode field) -> int"""
        return _coin.SoSFNode___eq__(self, field)


    def __ne__(self, field: 'SoSFNode') -> "int":
        """__ne__(SoSFNode self, SoSFNode field) -> int"""
        return _coin.SoSFNode___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFNode_initClass()

    initClass = staticmethod(initClass)

    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoSFNode self, SbBool copyconnections)"""
        return _coin.SoSFNode_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoSFNode self) -> SbBool"""
        return _coin.SoSFNode_referencesCopy(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFNode self, SoNode newvalue)
        setValue(SoSFNode self, SoSFNode other)
        """
        return _coin.SoSFNode_setValue(self, *args)

SoSFNode_swigregister = _coin.SoSFNode_swigregister
SoSFNode_swigregister(SoSFNode)

def SoSFNode_createInstance() -> "void *":
    """SoSFNode_createInstance() -> void *"""
    return _coin.SoSFNode_createInstance()

def SoSFNode_getClassTypeId() -> "SoType":
    """SoSFNode_getClassTypeId() -> SoType"""
    return _coin.SoSFNode_getClassTypeId()

def SoSFNode_initClass() -> "void":
    """SoSFNode_initClass()"""
    return _coin.SoSFNode_initClass()

SO_CATALOG_NAME_NOT_FOUND = _coin.SO_CATALOG_NAME_NOT_FOUND
class SoNodekitCatalog(object):
    """Proxy of C++ SoNodekitCatalog class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNodekitCatalog_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNodekitCatalog self) -> SoNodekitCatalog"""
        this = _coin.new_SoNodekitCatalog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNodekitCatalog
    __del__ = lambda self: None

    def getNumEntries(self) -> "int":
        """getNumEntries(SoNodekitCatalog self) -> int"""
        return _coin.SoNodekitCatalog_getNumEntries(self)


    def getPartNumber(self, name: 'SbName') -> "int":
        """getPartNumber(SoNodekitCatalog self, SbName name) -> int"""
        return _coin.SoNodekitCatalog_getPartNumber(self, name)


    def getName(self, part: 'int') -> "SbName const &":
        """getName(SoNodekitCatalog self, int part) -> SbName"""
        return _coin.SoNodekitCatalog_getName(self, part)


    def getType(self, *args) -> "SoType":
        """
        getType(SoNodekitCatalog self, int part) -> SoType
        getType(SoNodekitCatalog self, SbName name) -> SoType
        """
        return _coin.SoNodekitCatalog_getType(self, *args)


    def getDefaultType(self, *args) -> "SoType":
        """
        getDefaultType(SoNodekitCatalog self, int part) -> SoType
        getDefaultType(SoNodekitCatalog self, SbName name) -> SoType
        """
        return _coin.SoNodekitCatalog_getDefaultType(self, *args)


    def isNullByDefault(self, *args) -> "SbBool":
        """
        isNullByDefault(SoNodekitCatalog self, int part) -> SbBool
        isNullByDefault(SoNodekitCatalog self, SbName name) -> SbBool
        """
        return _coin.SoNodekitCatalog_isNullByDefault(self, *args)


    def isLeaf(self, *args) -> "SbBool":
        """
        isLeaf(SoNodekitCatalog self, int part) -> SbBool
        isLeaf(SoNodekitCatalog self, SbName name) -> SbBool
        """
        return _coin.SoNodekitCatalog_isLeaf(self, *args)


    def getParentName(self, *args) -> "SbName const &":
        """
        getParentName(SoNodekitCatalog self, int part) -> SbName
        getParentName(SoNodekitCatalog self, SbName name) -> SbName
        """
        return _coin.SoNodekitCatalog_getParentName(self, *args)


    def getParentPartNumber(self, *args) -> "int":
        """
        getParentPartNumber(SoNodekitCatalog self, int part) -> int
        getParentPartNumber(SoNodekitCatalog self, SbName name) -> int
        """
        return _coin.SoNodekitCatalog_getParentPartNumber(self, *args)


    def getRightSiblingName(self, *args) -> "SbName const &":
        """
        getRightSiblingName(SoNodekitCatalog self, int part) -> SbName
        getRightSiblingName(SoNodekitCatalog self, SbName name) -> SbName
        """
        return _coin.SoNodekitCatalog_getRightSiblingName(self, *args)


    def getRightSiblingPartNumber(self, *args) -> "int":
        """
        getRightSiblingPartNumber(SoNodekitCatalog self, int part) -> int
        getRightSiblingPartNumber(SoNodekitCatalog self, SbName name) -> int
        """
        return _coin.SoNodekitCatalog_getRightSiblingPartNumber(self, *args)


    def isList(self, *args) -> "SbBool":
        """
        isList(SoNodekitCatalog self, int part) -> SbBool
        isList(SoNodekitCatalog self, SbName name) -> SbBool
        """
        return _coin.SoNodekitCatalog_isList(self, *args)


    def getListContainerType(self, *args) -> "SoType":
        """
        getListContainerType(SoNodekitCatalog self, int part) -> SoType
        getListContainerType(SoNodekitCatalog self, SbName name) -> SoType
        """
        return _coin.SoNodekitCatalog_getListContainerType(self, *args)


    def getListItemTypes(self, *args) -> "SoTypeList const &":
        """
        getListItemTypes(SoNodekitCatalog self, int part) -> SoTypeList
        getListItemTypes(SoNodekitCatalog self, SbName name) -> SoTypeList
        """
        return _coin.SoNodekitCatalog_getListItemTypes(self, *args)


    def isPublic(self, *args) -> "SbBool":
        """
        isPublic(SoNodekitCatalog self, int part) -> SbBool
        isPublic(SoNodekitCatalog self, SbName name) -> SbBool
        """
        return _coin.SoNodekitCatalog_isPublic(self, *args)


    def clone(self, type: 'SoType') -> "SoNodekitCatalog *":
        """clone(SoNodekitCatalog self, SoType type) -> SoNodekitCatalog"""
        return _coin.SoNodekitCatalog_clone(self, type)


    def addEntry(self, name: 'SbName', type: 'SoType', defaulttype: 'SoType', isdefaultnull: 'SbBool', parent: 'SbName', rightsibling: 'SbName', islist: 'SbBool', listcontainertype: 'SoType', listitemtype: 'SoType', ispublic: 'SbBool') -> "SbBool":
        """addEntry(SoNodekitCatalog self, SbName name, SoType type, SoType defaulttype, SbBool isdefaultnull, SbName parent, SbName rightsibling, SbBool islist, SoType listcontainertype, SoType listitemtype, SbBool ispublic) -> SbBool"""
        return _coin.SoNodekitCatalog_addEntry(self, name, type, defaulttype, isdefaultnull, parent, rightsibling, islist, listcontainertype, listitemtype, ispublic)


    def addListItemType(self, *args) -> "void":
        """
        addListItemType(SoNodekitCatalog self, int part, SoType type)
        addListItemType(SoNodekitCatalog self, SbName name, SoType type)
        """
        return _coin.SoNodekitCatalog_addListItemType(self, *args)


    def narrowTypes(self, name: 'SbName', newtype: 'SoType', newdefaulttype: 'SoType') -> "void":
        """narrowTypes(SoNodekitCatalog self, SbName name, SoType newtype, SoType newdefaulttype)"""
        return _coin.SoNodekitCatalog_narrowTypes(self, name, newtype, newdefaulttype)


    def setNullByDefault(self, name: 'SbName', nullbydefault: 'SbBool') -> "void":
        """setNullByDefault(SoNodekitCatalog self, SbName name, SbBool nullbydefault)"""
        return _coin.SoNodekitCatalog_setNullByDefault(self, name, nullbydefault)


    def recursiveSearch(self, part: 'int', name: 'SbName', checked: 'SoTypeList') -> "SbBool":
        """recursiveSearch(SoNodekitCatalog self, int part, SbName name, SoTypeList checked) -> SbBool"""
        return _coin.SoNodekitCatalog_recursiveSearch(self, part, name, checked)


    def printCheck(self) -> "void":
        """printCheck(SoNodekitCatalog self)"""
        return _coin.SoNodekitCatalog_printCheck(self)

SoNodekitCatalog_swigregister = _coin.SoNodekitCatalog_swigregister
SoNodekitCatalog_swigregister(SoNodekitCatalog)

def SoNodekitCatalog_initClass() -> "void":
    """SoNodekitCatalog_initClass()"""
    return _coin.SoNodekitCatalog_initClass()

class SoSFName(SoSField):
    """Proxy of C++ SoSFName class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFName self) -> SoSFName"""
        this = _coin.new_SoSFName()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFName
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFName_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFName_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFName self) -> SoType"""
        return _coin.SoSFName_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFName self, SoField field)"""
        return _coin.SoSFName_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFName self, SoField field) -> SbBool"""
        return _coin.SoSFName_isSame(self, field)


    def getValue(self) -> "SbName const &":
        """getValue(SoSFName self) -> SbName"""
        return _coin.SoSFName_getValue(self)


    def __eq__(self, field: 'SoSFName') -> "int":
        """__eq__(SoSFName self, SoSFName field) -> int"""
        return _coin.SoSFName___eq__(self, field)


    def __ne__(self, field: 'SoSFName') -> "int":
        """__ne__(SoSFName self, SoSFName field) -> int"""
        return _coin.SoSFName___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFName_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFName self, SbName newvalue)
        setValue(SoSFName self, char const *const name)
        setValue(SoSFName self, SoSFName other)
        """
        return _coin.SoSFName_setValue(self, *args)

SoSFName_swigregister = _coin.SoSFName_swigregister
SoSFName_swigregister(SoSFName)

def SoSFName_createInstance() -> "void *":
    """SoSFName_createInstance() -> void *"""
    return _coin.SoSFName_createInstance()

def SoSFName_getClassTypeId() -> "SoType":
    """SoSFName_getClassTypeId() -> SoType"""
    return _coin.SoSFName_getClassTypeId()

def SoSFName_initClass() -> "void":
    """SoSFName_initClass()"""
    return _coin.SoSFName_initClass()

class SoMFName(SoMField):
    """Proxy of C++ SoMFName class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFName self) -> SoMFName"""
        this = _coin.new_SoMFName()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFName
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFName_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFName_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFName self) -> SoType"""
        return _coin.SoMFName_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFName self, SoField field)"""
        return _coin.SoMFName_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFName self, SoField field) -> SbBool"""
        return _coin.SoMFName_isSame(self, field)


    def find(self, value: 'SbName', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFName self, SbName value, SbBool addifnotfound=0) -> int
        find(SoMFName self, SbName value) -> int
        """
        return _coin.SoMFName_find(self, value, addifnotfound)


    def set1Value(self, idx: 'int const', value: 'SbName') -> "void":
        """set1Value(SoMFName self, int const idx, SbName value)"""
        return _coin.SoMFName_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFName') -> "SbBool":
        """__eq__(SoMFName self, SoMFName field) -> SbBool"""
        return _coin.SoMFName___eq__(self, field)


    def __ne__(self, field: 'SoMFName') -> "SbBool":
        """__ne__(SoMFName self, SoMFName field) -> SbBool"""
        return _coin.SoMFName___ne__(self, field)


    def startEditing(self) -> "SbName *":
        """startEditing(SoMFName self) -> SbName"""
        return _coin.SoMFName_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFName self)"""
        return _coin.SoMFName_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFName_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFName_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFName_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFName_setValues(*args)



    def __getitem__(self, i: 'int') -> "SbName const &":
        """__getitem__(SoMFName self, int i) -> SbName"""
        return _coin.SoMFName___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbName') -> "void":
        """__setitem__(SoMFName self, int i, SbName value)"""
        return _coin.SoMFName___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFName self, SbName value)
        setValue(SoMFName self, char const * str)
        setValue(SoMFName self, SoMFName other)
        """
        return _coin.SoMFName_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbName const *":
        """
        getValues(SoMFName self, int i=0) -> SbName
        getValues(SoMFName self) -> SbName
        """
        return _coin.SoMFName_getValues(self, i)

SoMFName_swigregister = _coin.SoMFName_swigregister
SoMFName_swigregister(SoMFName)

def SoMFName_createInstance() -> "void *":
    """SoMFName_createInstance() -> void *"""
    return _coin.SoMFName_createInstance()

def SoMFName_getClassTypeId() -> "SoType":
    """SoMFName_getClassTypeId() -> SoType"""
    return _coin.SoMFName_getClassTypeId()

def SoMFName_initClass() -> "void":
    """SoMFName_initClass()"""
    return _coin.SoMFName_initClass()

class SoNodeKitListPart(SoNode):
    """Proxy of C++ SoNodeKitListPart class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNodeKitListPart_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNodeKitListPart self) -> SoType"""
        return _coin.SoNodeKitListPart_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNodeKitListPart_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNodeKitListPart self) -> SoNodeKitListPart"""
        this = _coin.new_SoNodeKitListPart()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getContainerType(self) -> "SoType":
        """getContainerType(SoNodeKitListPart self) -> SoType"""
        return _coin.SoNodeKitListPart_getContainerType(self)


    def setContainerType(self, newContainerType: 'SoType') -> "void":
        """setContainerType(SoNodeKitListPart self, SoType newContainerType)"""
        return _coin.SoNodeKitListPart_setContainerType(self, newContainerType)


    def getChildTypes(self) -> "SoTypeList const &":
        """getChildTypes(SoNodeKitListPart self) -> SoTypeList"""
        return _coin.SoNodeKitListPart_getChildTypes(self)


    def addChildType(self, typeToAdd: 'SoType') -> "void":
        """addChildType(SoNodeKitListPart self, SoType typeToAdd)"""
        return _coin.SoNodeKitListPart_addChildType(self, typeToAdd)


    def isTypePermitted(self, typeToCheck: 'SoType') -> "SbBool":
        """isTypePermitted(SoNodeKitListPart self, SoType typeToCheck) -> SbBool"""
        return _coin.SoNodeKitListPart_isTypePermitted(self, typeToCheck)


    def isChildPermitted(self, child: 'SoNode') -> "SbBool":
        """isChildPermitted(SoNodeKitListPart self, SoNode child) -> SbBool"""
        return _coin.SoNodeKitListPart_isChildPermitted(self, child)


    def containerSet(self, fieldDataString: 'char const *') -> "void":
        """containerSet(SoNodeKitListPart self, char const * fieldDataString)"""
        return _coin.SoNodeKitListPart_containerSet(self, fieldDataString)


    def lockTypes(self) -> "void":
        """lockTypes(SoNodeKitListPart self)"""
        return _coin.SoNodeKitListPart_lockTypes(self)


    def isTypeLocked(self) -> "SbBool":
        """isTypeLocked(SoNodeKitListPart self) -> SbBool"""
        return _coin.SoNodeKitListPart_isTypeLocked(self)


    def addChild(self, child: 'SoNode') -> "void":
        """addChild(SoNodeKitListPart self, SoNode child)"""
        return _coin.SoNodeKitListPart_addChild(self, child)


    def insertChild(self, child: 'SoNode', childIndex: 'int') -> "void":
        """insertChild(SoNodeKitListPart self, SoNode child, int childIndex)"""
        return _coin.SoNodeKitListPart_insertChild(self, child, childIndex)


    def getChild(self, index: 'int') -> "SoNode *":
        """getChild(SoNodeKitListPart self, int index) -> SoNode"""
        return _coin.SoNodeKitListPart_getChild(self, index)


    def findChild(self, child: 'SoNode') -> "int":
        """findChild(SoNodeKitListPart self, SoNode child) -> int"""
        return _coin.SoNodeKitListPart_findChild(self, child)


    def getNumChildren(self) -> "int":
        """getNumChildren(SoNodeKitListPart self) -> int"""
        return _coin.SoNodeKitListPart_getNumChildren(self)


    def removeChild(self, *args) -> "void":
        """
        removeChild(SoNodeKitListPart self, int index)
        removeChild(SoNodeKitListPart self, SoNode child)
        """
        return _coin.SoNodeKitListPart_removeChild(self, *args)


    def replaceChild(self, *args) -> "void":
        """
        replaceChild(SoNodeKitListPart self, int index, SoNode newChild)
        replaceChild(SoNodeKitListPart self, SoNode oldChild, SoNode newChild)
        """
        return _coin.SoNodeKitListPart_replaceChild(self, *args)


    def affectsState(self) -> "SbBool":
        """affectsState(SoNodeKitListPart self) -> SbBool"""
        return _coin.SoNodeKitListPart_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoNodeKitListPart self, SoAction action)"""
        return _coin.SoNodeKitListPart_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoNodeKitListPart self, SoCallbackAction action)"""
        return _coin.SoNodeKitListPart_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNodeKitListPart self, SoGLRenderAction action)"""
        return _coin.SoNodeKitListPart_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoNodeKitListPart self, SoGetBoundingBoxAction action)"""
        return _coin.SoNodeKitListPart_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoNodeKitListPart self, SoGetMatrixAction action)"""
        return _coin.SoNodeKitListPart_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoNodeKitListPart self, SoHandleEventAction action)"""
        return _coin.SoNodeKitListPart_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoNodeKitListPart self, SoPickAction action)"""
        return _coin.SoNodeKitListPart_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoNodeKitListPart self, SoSearchAction action)"""
        return _coin.SoNodeKitListPart_search(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNodeKitListPart self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNodeKitListPart_getPrimitiveCount(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoNodeKitListPart self) -> SoChildList"""
        return _coin.SoNodeKitListPart_getChildren(self)

SoNodeKitListPart_swigregister = _coin.SoNodeKitListPart_swigregister
SoNodeKitListPart_swigregister(SoNodeKitListPart)

def SoNodeKitListPart_getClassTypeId() -> "SoType":
    """SoNodeKitListPart_getClassTypeId() -> SoType"""
    return _coin.SoNodeKitListPart_getClassTypeId()

def SoNodeKitListPart_initClass() -> "void":
    """SoNodeKitListPart_initClass()"""
    return _coin.SoNodeKitListPart_initClass()

class SoNodeKitPath(SoPath):
    """Proxy of C++ SoNodeKitPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getLength(self) -> "int":
        """getLength(SoNodeKitPath self) -> int"""
        return _coin.SoNodeKitPath_getLength(self)


    def getTail(self) -> "SoNode *":
        """getTail(SoNodeKitPath self) -> SoNode"""
        return _coin.SoNodeKitPath_getTail(self)


    def getNode(self, idx: 'int const') -> "SoNode *":
        """getNode(SoNodeKitPath self, int const idx) -> SoNode"""
        return _coin.SoNodeKitPath_getNode(self, idx)


    def getNodeFromTail(self, idx: 'int const') -> "SoNode *":
        """getNodeFromTail(SoNodeKitPath self, int const idx) -> SoNode"""
        return _coin.SoNodeKitPath_getNodeFromTail(self, idx)


    def truncate(self, length: 'int const') -> "void":
        """truncate(SoNodeKitPath self, int const length)"""
        return _coin.SoNodeKitPath_truncate(self, length)


    def pop(self) -> "void":
        """pop(SoNodeKitPath self)"""
        return _coin.SoNodeKitPath_pop(self)


    def append(self, *args) -> "void":
        """
        append(SoNodeKitPath self, SoBaseKit childKit)
        append(SoNodeKitPath self, SoNodeKitPath fromPath)
        """
        return _coin.SoNodeKitPath_append(self, *args)


    def containsNode(self, node: 'SoBaseKit') -> "SbBool":
        """containsNode(SoNodeKitPath self, SoBaseKit node) -> SbBool"""
        return _coin.SoNodeKitPath_containsNode(self, node)


    def findFork(self, path: 'SoNodeKitPath') -> "int":
        """findFork(SoNodeKitPath self, SoNodeKitPath path) -> int"""
        return _coin.SoNodeKitPath_findFork(self, path)


    def __iter__(self):
       for i in range(self.getLength()):
          yield self.getNode(i)

    def index(self):
       for i in range(self.getLength()):
          yield self.getIndex(i)


    def __eq__(self, u: 'SoNodeKitPath') -> "int":
        """__eq__(SoNodeKitPath self, SoNodeKitPath u) -> int"""
        return _coin.SoNodeKitPath___eq__(self, u)


    def __nq__(self, u: 'SoNodeKitPath') -> "int":
        """__nq__(SoNodeKitPath self, SoNodeKitPath u) -> int"""
        return _coin.SoNodeKitPath___nq__(self, u)

SoNodeKitPath_swigregister = _coin.SoNodeKitPath_swigregister
SoNodeKitPath_swigregister(SoNodeKitPath)

class SoChildList(SoNodeList):
    """Proxy of C++ SoChildList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoChildList self, SoNode parent) -> SoChildList
        __init__(SoChildList self, SoNode parent, int const size) -> SoChildList
        __init__(SoChildList self, SoNode parent, SoChildList cl) -> SoChildList
        """
        this = _coin.new_SoChildList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoChildList
    __del__ = lambda self: None

    def append(self, node: 'SoNode') -> "void":
        """append(SoChildList self, SoNode node)"""
        return _coin.SoChildList_append(self, node)


    def insert(self, ptr: 'SoNode', addbefore: 'int const') -> "void":
        """insert(SoChildList self, SoNode ptr, int const addbefore)"""
        return _coin.SoChildList_insert(self, ptr, addbefore)


    def remove(self, index: 'int const') -> "void":
        """remove(SoChildList self, int const index)"""
        return _coin.SoChildList_remove(self, index)


    def truncate(self, length: 'int const') -> "void":
        """truncate(SoChildList self, int const length)"""
        return _coin.SoChildList_truncate(self, length)


    def copy(self, cl: 'SoChildList') -> "void":
        """copy(SoChildList self, SoChildList cl)"""
        return _coin.SoChildList_copy(self, cl)


    def set(self, index: 'int const', node: 'SoNode') -> "void":
        """set(SoChildList self, int const index, SoNode node)"""
        return _coin.SoChildList_set(self, index, node)


    def traverseInPath(self, action: 'SoAction', numindices: 'int const', indices: 'int const *') -> "void":
        """traverseInPath(SoChildList self, SoAction action, int const numindices, int const * indices)"""
        return _coin.SoChildList_traverseInPath(self, action, numindices, indices)


    def traverse(self, *args) -> "void":
        """
        traverse(SoChildList self, SoAction action)
        traverse(SoChildList self, SoAction action, int const index)
        traverse(SoChildList self, SoAction action, SoNode node)
        traverse(SoChildList self, SoAction action, int const first, int const last)
        """
        return _coin.SoChildList_traverse(self, *args)


    def addPathAuditor(self, path: 'SoPath') -> "void":
        """addPathAuditor(SoChildList self, SoPath path)"""
        return _coin.SoChildList_addPathAuditor(self, path)


    def removePathAuditor(self, path: 'SoPath') -> "void":
        """removePathAuditor(SoChildList self, SoPath path)"""
        return _coin.SoChildList_removePathAuditor(self, path)

SoChildList_swigregister = _coin.SoChildList_swigregister
SoChildList_swigregister(SoChildList)

class SoBaseKit(SoNode):
    """Proxy of C++ SoBaseKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBaseKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBaseKit self) -> SoType"""
        return _coin.SoBaseKit_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBaseKit_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBaseKit self) -> SoBaseKit"""
        this = _coin.new_SoBaseKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoBaseKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoBaseKit self) -> SoNodekitCatalog"""
        return _coin.SoBaseKit_getNodekitCatalog(self)


    def getPart(self, partname: 'SbName', makeifneeded: 'SbBool') -> "SoNode *":
        """getPart(SoBaseKit self, SbName partname, SbBool makeifneeded) -> SoNode"""
        return _coin.SoBaseKit_getPart(self, partname, makeifneeded)


    def getPartString(self, part: 'SoBase') -> "SbString":
        """getPartString(SoBaseKit self, SoBase part) -> SbString"""
        return _coin.SoBaseKit_getPartString(self, part)


    def createPathToPart(self, partname: 'SbName', makeifneeded: 'SbBool', pathtoextend: 'SoPath'=None) -> "SoNodeKitPath *":
        """
        createPathToPart(SoBaseKit self, SbName partname, SbBool makeifneeded, SoPath pathtoextend=None) -> SoNodeKitPath
        createPathToPart(SoBaseKit self, SbName partname, SbBool makeifneeded) -> SoNodeKitPath
        """
        return _coin.SoBaseKit_createPathToPart(self, partname, makeifneeded, pathtoextend)


    def setPart(self, partname: 'SbName', arg3: 'SoNode') -> "SbBool":
        """setPart(SoBaseKit self, SbName partname, SoNode arg3) -> SbBool"""
        return _coin.SoBaseKit_setPart(self, partname, arg3)


    def set(self, *args) -> "SbBool":
        """
        set(SoBaseKit self, char const * namevaluepairliststring) -> SbBool
        set(SoBaseKit self, char const * partnamestring, char const * parameterstring) -> SbBool
        """
        return _coin.SoBaseKit_set(self, *args)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoBaseKit self, SoAction action)"""
        return _coin.SoBaseKit_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoBaseKit self, SoCallbackAction action)"""
        return _coin.SoBaseKit_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoBaseKit self, SoGLRenderAction action)"""
        return _coin.SoBaseKit_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoBaseKit self, SoGetBoundingBoxAction action)"""
        return _coin.SoBaseKit_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoBaseKit self, SoGetMatrixAction action)"""
        return _coin.SoBaseKit_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoBaseKit self, SoHandleEventAction action)"""
        return _coin.SoBaseKit_handleEvent(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoBaseKit self, SoRayPickAction action)"""
        return _coin.SoBaseKit_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoBaseKit self, SoSearchAction action)"""
        return _coin.SoBaseKit_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoBaseKit self, SoWriteAction action)"""
        return _coin.SoBaseKit_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoBaseKit self, SoGetPrimitiveCountAction action)"""
        return _coin.SoBaseKit_getPrimitiveCount(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoBaseKit self) -> SoChildList"""
        return _coin.SoBaseKit_getChildren(self)


    def printDiagram(self) -> "void":
        """printDiagram(SoBaseKit self)"""
        return _coin.SoBaseKit_printDiagram(self)


    def printSubDiagram(self, rootname: 'SbName', level: 'int') -> "void":
        """printSubDiagram(SoBaseKit self, SbName rootname, int level)"""
        return _coin.SoBaseKit_printSubDiagram(self, rootname, level)


    def printTable(self) -> "void":
        """printTable(SoBaseKit self)"""
        return _coin.SoBaseKit_printTable(self)


    def addWriteReference(self, out: 'SoOutput', isfromfield: 'SbBool'=0) -> "void":
        """
        addWriteReference(SoBaseKit self, SoOutput out, SbBool isfromfield=0)
        addWriteReference(SoBaseKit self, SoOutput out)
        """
        return _coin.SoBaseKit_addWriteReference(self, out, isfromfield)


    def forceChildDrivenWriteRefs(self, out: 'SoOutput') -> "SbBool":
        """forceChildDrivenWriteRefs(SoBaseKit self, SoOutput out) -> SbBool"""
        return _coin.SoBaseKit_forceChildDrivenWriteRefs(self, out)


    def isSearchingChildren() -> "SbBool":
        """isSearchingChildren() -> SbBool"""
        return _coin.SoBaseKit_isSearchingChildren()

    isSearchingChildren = staticmethod(isSearchingChildren)

    def setSearchingChildren(newval: 'SbBool const') -> "void":
        """setSearchingChildren(SbBool const newval)"""
        return _coin.SoBaseKit_setSearchingChildren(newval)

    setSearchingChildren = staticmethod(setSearchingChildren)

    def __getattr__(self,name):
       c = _coin.SoBaseKit_getNodekitCatalog(self)
       if c.getPartNumber(name) >= 0:
           part = self.getPart(name,1)
           return part
       return SoNode.__getattr__(self, name)

    def __setattr__(self,name,value):
       if name == 'this':
          return SoNode.__setattr__(self,name,value)
       c = _coin.SoBaseKit_getNodekitCatalog(self)
       if c.getPartNumber(name) >= 0:
          return self.setPart(name, value)
       return SoNode.__setattr__(self,name,value)       

SoBaseKit_swigregister = _coin.SoBaseKit_swigregister
SoBaseKit_swigregister(SoBaseKit)

def SoBaseKit_getClassTypeId() -> "SoType":
    """SoBaseKit_getClassTypeId() -> SoType"""
    return _coin.SoBaseKit_getClassTypeId()

def SoBaseKit_initClass() -> "void":
    """SoBaseKit_initClass()"""
    return _coin.SoBaseKit_initClass()

def SoBaseKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoBaseKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoBaseKit_getClassNodekitCatalog()

def SoBaseKit_isSearchingChildren() -> "SbBool":
    """SoBaseKit_isSearchingChildren() -> SbBool"""
    return _coin.SoBaseKit_isSearchingChildren()

def SoBaseKit_setSearchingChildren(newval: 'SbBool const') -> "void":
    """SoBaseKit_setSearchingChildren(SbBool const newval)"""
    return _coin.SoBaseKit_setSearchingChildren(newval)

class SoSensor(object):
    """Proxy of C++ SoSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoSensor
    __del__ = lambda self: None

    def setFunction(self, callbackfunction: 'SoSensorCB *') -> "void":
        """setFunction(SoSensor self, SoSensorCB * callbackfunction)"""
        return _coin.SoSensor_setFunction(self, callbackfunction)


    def getFunction(self) -> "SoSensorCBPtr":
        """getFunction(SoSensor self) -> SoSensorCBPtr"""
        return _coin.SoSensor_getFunction(self)


    def setData(self, callbackdata: 'void *') -> "void":
        """setData(SoSensor self, void * callbackdata)"""
        return _coin.SoSensor_setData(self, callbackdata)


    def getData(self) -> "void *":
        """getData(SoSensor self) -> void *"""
        return _coin.SoSensor_getData(self)


    def schedule(self) -> "void":
        """schedule(SoSensor self)"""
        return _coin.SoSensor_schedule(self)


    def unschedule(self) -> "void":
        """unschedule(SoSensor self)"""
        return _coin.SoSensor_unschedule(self)


    def isScheduled(self) -> "SbBool":
        """isScheduled(SoSensor self) -> SbBool"""
        return _coin.SoSensor_isScheduled(self)


    def trigger(self) -> "void":
        """trigger(SoSensor self)"""
        return _coin.SoSensor_trigger(self)


    def isBefore(self, s: 'SoSensor') -> "SbBool":
        """isBefore(SoSensor self, SoSensor s) -> SbBool"""
        return _coin.SoSensor_isBefore(self, s)


    def setNextInQueue(self, next: 'SoSensor') -> "void":
        """setNextInQueue(SoSensor self, SoSensor next)"""
        return _coin.SoSensor_setNextInQueue(self, next)


    def getNextInQueue(self) -> "SoSensor *":
        """getNextInQueue(SoSensor self) -> SoSensor"""
        return _coin.SoSensor_getNextInQueue(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSensor_initClass()

    initClass = staticmethod(initClass)
SoSensor_swigregister = _coin.SoSensor_swigregister
SoSensor_swigregister(SoSensor)

def SoSensor_initClass() -> "void":
    """SoSensor_initClass()"""
    return _coin.SoSensor_initClass()

class SoDelayQueueSensor(SoSensor):
    """Proxy of C++ SoDelayQueueSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoDelayQueueSensor *"))
          newobj = _coin.new_SoDelayQueueSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoDelayQueueSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoDelayQueueSensor
    __del__ = lambda self: None

    def setPriority(self, pri: 'uint32_t') -> "void":
        """setPriority(SoDelayQueueSensor self, uint32_t pri)"""
        return _coin.SoDelayQueueSensor_setPriority(self, pri)


    def getPriority(self) -> "uint32_t":
        """getPriority(SoDelayQueueSensor self) -> uint32_t"""
        return _coin.SoDelayQueueSensor_getPriority(self)


    def getDefaultPriority() -> "uint32_t":
        """getDefaultPriority() -> uint32_t"""
        return _coin.SoDelayQueueSensor_getDefaultPriority()

    getDefaultPriority = staticmethod(getDefaultPriority)

    def schedule(self) -> "void":
        """schedule(SoDelayQueueSensor self)"""
        return _coin.SoDelayQueueSensor_schedule(self)


    def unschedule(self) -> "void":
        """unschedule(SoDelayQueueSensor self)"""
        return _coin.SoDelayQueueSensor_unschedule(self)


    def isScheduled(self) -> "SbBool":
        """isScheduled(SoDelayQueueSensor self) -> SbBool"""
        return _coin.SoDelayQueueSensor_isScheduled(self)


    def isIdleOnly(self) -> "SbBool":
        """isIdleOnly(SoDelayQueueSensor self) -> SbBool"""
        return _coin.SoDelayQueueSensor_isIdleOnly(self)


    def trigger(self) -> "void":
        """trigger(SoDelayQueueSensor self)"""
        return _coin.SoDelayQueueSensor_trigger(self)

SoDelayQueueSensor_swigregister = _coin.SoDelayQueueSensor_swigregister
SoDelayQueueSensor_swigregister(SoDelayQueueSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoDelayQueueSensor *"))
      newobj = _coin.new_SoDelayQueueSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoDelayQueueSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



def SoDelayQueueSensor_getDefaultPriority() -> "uint32_t":
    """SoDelayQueueSensor_getDefaultPriority() -> uint32_t"""
    return _coin.SoDelayQueueSensor_getDefaultPriority()

class SoDataSensor(SoDelayQueueSensor):
    """Proxy of C++ SoDataSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_SoDataSensor
    __del__ = lambda self: None

    def setDeleteCallback(self, function: 'SoSensorCB *', data: 'void *'=None) -> "void":
        """
        setDeleteCallback(SoDataSensor self, SoSensorCB * function, void * data=None)
        setDeleteCallback(SoDataSensor self, SoSensorCB * function)
        """
        return _coin.SoDataSensor_setDeleteCallback(self, function, data)


    def getTriggerNode(self) -> "SoNode *":
        """getTriggerNode(SoDataSensor self) -> SoNode"""
        return _coin.SoDataSensor_getTriggerNode(self)


    def getTriggerField(self) -> "SoField *":
        """getTriggerField(SoDataSensor self) -> SoField"""
        return _coin.SoDataSensor_getTriggerField(self)


    def getTriggerPath(self) -> "SoPath *":
        """getTriggerPath(SoDataSensor self) -> SoPath"""
        return _coin.SoDataSensor_getTriggerPath(self)


    def setTriggerPathFlag(self, flag: 'SbBool') -> "void":
        """setTriggerPathFlag(SoDataSensor self, SbBool flag)"""
        return _coin.SoDataSensor_setTriggerPathFlag(self, flag)


    def getTriggerPathFlag(self) -> "SbBool":
        """getTriggerPathFlag(SoDataSensor self) -> SbBool"""
        return _coin.SoDataSensor_getTriggerPathFlag(self)


    def getTriggerOperationType(self) -> "SoNotRec::OperationType":
        """getTriggerOperationType(SoDataSensor self) -> SoNotRec::OperationType"""
        return _coin.SoDataSensor_getTriggerOperationType(self)


    def getTriggerIndex(self) -> "int":
        """getTriggerIndex(SoDataSensor self) -> int"""
        return _coin.SoDataSensor_getTriggerIndex(self)


    def getTriggerFieldNumIndices(self) -> "int":
        """getTriggerFieldNumIndices(SoDataSensor self) -> int"""
        return _coin.SoDataSensor_getTriggerFieldNumIndices(self)


    def getTriggerGroupChild(self) -> "SoNode *":
        """getTriggerGroupChild(SoDataSensor self) -> SoNode"""
        return _coin.SoDataSensor_getTriggerGroupChild(self)


    def getTriggerReplacedGroupChild(self) -> "SoNode *":
        """getTriggerReplacedGroupChild(SoDataSensor self) -> SoNode"""
        return _coin.SoDataSensor_getTriggerReplacedGroupChild(self)


    def trigger(self) -> "void":
        """trigger(SoDataSensor self)"""
        return _coin.SoDataSensor_trigger(self)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoDataSensor self, SoNotList l)"""
        return _coin.SoDataSensor_notify(self, l)


    def dyingReference(self) -> "void":
        """dyingReference(SoDataSensor self)"""
        return _coin.SoDataSensor_dyingReference(self)

SoDataSensor_swigregister = _coin.SoDataSensor_swigregister
SoDataSensor_swigregister(SoDataSensor)

class SoFieldSensor(SoDataSensor):
    """Proxy of C++ SoFieldSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoFieldSensor *"))
          newobj = _coin.new_SoFieldSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoFieldSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoFieldSensor
    __del__ = lambda self: None

    def attach(self, field: 'SoField') -> "void":
        """attach(SoFieldSensor self, SoField field)"""
        return _coin.SoFieldSensor_attach(self, field)


    def detach(self) -> "void":
        """detach(SoFieldSensor self)"""
        return _coin.SoFieldSensor_detach(self)


    def getAttachedField(self) -> "SoField *":
        """getAttachedField(SoFieldSensor self) -> SoField"""
        return _coin.SoFieldSensor_getAttachedField(self)


    def trigger(self) -> "void":
        """trigger(SoFieldSensor self)"""
        return _coin.SoFieldSensor_trigger(self)

SoFieldSensor_swigregister = _coin.SoFieldSensor_swigregister
SoFieldSensor_swigregister(SoFieldSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoFieldSensor *"))
      newobj = _coin.new_SoFieldSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoFieldSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoInteractionKit(SoBaseKit):
    """Proxy of C++ SoInteractionKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInteractionKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInteractionKit self) -> SoType"""
        return _coin.SoInteractionKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoInteractionKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoInteractionKit self) -> SoNodekitCatalog"""
        return _coin.SoInteractionKit_getNodekitCatalog(self)

    renderCaching = _swig_property(_coin.SoInteractionKit_renderCaching_get, _coin.SoInteractionKit_renderCaching_set)
    boundingBoxCaching = _swig_property(_coin.SoInteractionKit_boundingBoxCaching_get, _coin.SoInteractionKit_boundingBoxCaching_set)
    renderCulling = _swig_property(_coin.SoInteractionKit_renderCulling_get, _coin.SoInteractionKit_renderCulling_set)
    pickCulling = _swig_property(_coin.SoInteractionKit_pickCulling_get, _coin.SoInteractionKit_pickCulling_set)

    def __init__(self):
        """__init__(SoInteractionKit self) -> SoInteractionKit"""
        this = _coin.new_SoInteractionKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInteractionKit_initClass()

    initClass = staticmethod(initClass)
    OFF = _coin.SoInteractionKit_OFF
    ON = _coin.SoInteractionKit_ON
    AUTO = _coin.SoInteractionKit_AUTO

    def setPartAsPath(self, partname: 'SbName', path: 'SoPath') -> "SbBool":
        """setPartAsPath(SoInteractionKit self, SbName partname, SoPath path) -> SbBool"""
        return _coin.SoInteractionKit_setPartAsPath(self, partname, path)


    def setPartAsDefault(self, *args) -> "SbBool":
        """
        setPartAsDefault(SoInteractionKit self, SbName partname, SoNode node, SbBool onlyifdefault=1) -> SbBool
        setPartAsDefault(SoInteractionKit self, SbName partname, SoNode node) -> SbBool
        setPartAsDefault(SoInteractionKit self, SbName partname, SbName nodename, SbBool onlyifdefault=1) -> SbBool
        setPartAsDefault(SoInteractionKit self, SbName partname, SbName nodename) -> SbBool
        """
        return _coin.SoInteractionKit_setPartAsDefault(self, *args)


    def isPathSurrogateInMySubgraph(self, *args) -> "SbBool":
        """
        isPathSurrogateInMySubgraph(SoInteractionKit self, SoPath path, SoPath *& pathToOwner, SbName surrogatename, SoPath *& surrogatepath, SbBool fillargs=1) -> SbBool
        isPathSurrogateInMySubgraph(SoInteractionKit self, SoPath path, SoPath *& pathToOwner, SbName surrogatename, SoPath *& surrogatepath) -> SbBool
        isPathSurrogateInMySubgraph(SoInteractionKit self, SoPath path) -> SbBool
        """
        return _coin.SoInteractionKit_isPathSurrogateInMySubgraph(self, *args)


    def setSwitchValue(node: 'SoNode', newVal: 'int const') -> "void":
        """setSwitchValue(SoNode node, int const newVal)"""
        return _coin.SoInteractionKit_setSwitchValue(node, newVal)

    setSwitchValue = staticmethod(setSwitchValue)

    def setPart(self, partname: 'SbName', arg3: 'SoNode') -> "SbBool":
        """setPart(SoInteractionKit self, SbName partname, SoNode arg3) -> SbBool"""
        return _coin.SoInteractionKit_setPart(self, partname, arg3)

SoInteractionKit_swigregister = _coin.SoInteractionKit_swigregister
SoInteractionKit_swigregister(SoInteractionKit)

def SoInteractionKit_getClassTypeId() -> "SoType":
    """SoInteractionKit_getClassTypeId() -> SoType"""
    return _coin.SoInteractionKit_getClassTypeId()

def SoInteractionKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoInteractionKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoInteractionKit_getClassNodekitCatalog()

def SoInteractionKit_initClass() -> "void":
    """SoInteractionKit_initClass()"""
    return _coin.SoInteractionKit_initClass()

def SoInteractionKit_setSwitchValue(node: 'SoNode', newVal: 'int const') -> "void":
    """SoInteractionKit_setSwitchValue(SoNode node, int const newVal)"""
    return _coin.SoInteractionKit_setSwitchValue(node, newVal)

class SoCallbackList(object):
    """Proxy of C++ SoCallbackList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoCallbackList self) -> SoCallbackList"""
        this = _coin.new_SoCallbackList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoCallbackList
    __del__ = lambda self: None

    def addCallback(self, f: 'SoCallbackListCB *', userData: 'void *'=None) -> "void":
        """
        addCallback(SoCallbackList self, SoCallbackListCB * f, void * userData=None)
        addCallback(SoCallbackList self, SoCallbackListCB * f)
        """
        return _coin.SoCallbackList_addCallback(self, f, userData)


    def removeCallback(self, f: 'SoCallbackListCB *', userdata: 'void *'=None) -> "void":
        """
        removeCallback(SoCallbackList self, SoCallbackListCB * f, void * userdata=None)
        removeCallback(SoCallbackList self, SoCallbackListCB * f)
        """
        return _coin.SoCallbackList_removeCallback(self, f, userdata)


    def clearCallbacks(self) -> "void":
        """clearCallbacks(SoCallbackList self)"""
        return _coin.SoCallbackList_clearCallbacks(self)


    def getNumCallbacks(self) -> "int":
        """getNumCallbacks(SoCallbackList self) -> int"""
        return _coin.SoCallbackList_getNumCallbacks(self)


    def invokeCallbacks(self, callbackdata: 'void *') -> "void":
        """invokeCallbacks(SoCallbackList self, void * callbackdata)"""
        return _coin.SoCallbackList_invokeCallbacks(self, callbackdata)

SoCallbackList_swigregister = _coin.SoCallbackList_swigregister
SoCallbackList_swigregister(SoCallbackList)

class SbVec3d(object):
    """Proxy of C++ SbVec3d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec3d self) -> SbVec3d
        __init__(SbVec3d self, double const [3] v) -> SbVec3d
        __init__(SbVec3d self, double x, double y, double z) -> SbVec3d
        __init__(SbVec3d self, SbVec3f v) -> SbVec3d
        __init__(SbVec3d self, SbVec3b v) -> SbVec3d
        __init__(SbVec3d self, SbVec3s v) -> SbVec3d
        __init__(SbVec3d self, SbVec3i32 v) -> SbVec3d
        __init__(SbVec3d self, SbDPPlane p0, SbDPPlane p1, SbDPPlane p2) -> SbVec3d
        """
        this = _coin.new_SbVec3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec3d &":
        """
        setValue(SbVec3d self, double const [3] v) -> SbVec3d
        setValue(SbVec3d self, double x, double y, double z) -> SbVec3d
        setValue(SbVec3d self, SbVec3d barycentric, SbVec3d v0, SbVec3d v1, SbVec3d v2) -> SbVec3d
        setValue(SbVec3d self, SbVec3f v) -> SbVec3d
        setValue(SbVec3d self, SbVec3b v) -> SbVec3d
        setValue(SbVec3d self, SbVec3s v) -> SbVec3d
        setValue(SbVec3d self, SbVec3i32 v) -> SbVec3d
        """
        return _coin.SbVec3d_setValue(self, *args)


    def getValue(self) -> "double const *":
        """getValue(SbVec3d self) -> double const *"""
        return _coin.SbVec3d_getValue(self)


    def cross(self, v: 'SbVec3d') -> "SbVec3d":
        """cross(SbVec3d self, SbVec3d v) -> SbVec3d"""
        return _coin.SbVec3d_cross(self, v)


    def dot(self, v: 'SbVec3d') -> "double":
        """dot(SbVec3d self, SbVec3d v) -> double"""
        return _coin.SbVec3d_dot(self, v)


    def equals(self, v: 'SbVec3d', tolerance: 'double') -> "SbBool":
        """equals(SbVec3d self, SbVec3d v, double tolerance) -> SbBool"""
        return _coin.SbVec3d_equals(self, v, tolerance)


    def getClosestAxis(self) -> "SbVec3d":
        """getClosestAxis(SbVec3d self) -> SbVec3d"""
        return _coin.SbVec3d_getClosestAxis(self)


    def length(self) -> "double":
        """length(SbVec3d self) -> double"""
        return _coin.SbVec3d_length(self)


    def sqrLength(self) -> "double":
        """sqrLength(SbVec3d self) -> double"""
        return _coin.SbVec3d_sqrLength(self)


    def negate(self) -> "void":
        """negate(SbVec3d self)"""
        return _coin.SbVec3d_negate(self)


    def normalize(self) -> "double":
        """normalize(SbVec3d self) -> double"""
        return _coin.SbVec3d_normalize(self)


    def __imul__(self, d: 'double') -> "SbVec3d &":
        """__imul__(SbVec3d self, double d) -> SbVec3d"""
        return _coin.SbVec3d___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec3d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec3d') -> "SbVec3d &":
        """__iadd__(SbVec3d self, SbVec3d v) -> SbVec3d"""
        return _coin.SbVec3d___iadd__(self, v)


    def __isub__(self, v: 'SbVec3d') -> "SbVec3d &":
        """__isub__(SbVec3d self, SbVec3d v) -> SbVec3d"""
        return _coin.SbVec3d___isub__(self, v)


    def __neg__(self) -> "SbVec3d":
        """__neg__(SbVec3d self) -> SbVec3d"""
        return _coin.SbVec3d___neg__(self)


    def toString(self) -> "SbString":
        """toString(SbVec3d self) -> SbString"""
        return _coin.SbVec3d_toString(self)


    def fromString(self, str: 'SbString') -> "SbBool":
        """fromString(SbVec3d self, SbString str) -> SbBool"""
        return _coin.SbVec3d_fromString(self, str)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec3d self, FILE * fp)"""
        return _coin.SbVec3d_output(self, fp)


    def __add__(self, u: 'SbVec3d') -> "SbVec3d":
        """__add__(SbVec3d self, SbVec3d u) -> SbVec3d"""
        return _coin.SbVec3d___add__(self, u)


    def __sub__(self, u: 'SbVec3d') -> "SbVec3d":
        """__sub__(SbVec3d self, SbVec3d u) -> SbVec3d"""
        return _coin.SbVec3d___sub__(self, u)


    def __mul__(self, *args) -> "SbVec3d":
        """
        __mul__(SbVec3d self, double const d) -> SbVec3d
        __mul__(SbVec3d self, SbDPMatrix m) -> SbVec3d
        """
        return _coin.SbVec3d___mul__(self, *args)


    def __rmul__(self, d: 'double const') -> "SbVec3d":
        """__rmul__(SbVec3d self, double const d) -> SbVec3d"""
        return _coin.SbVec3d___rmul__(self, d)


    def __div__(self, d: 'double const') -> "SbVec3d":
        """__div__(SbVec3d self, double const d) -> SbVec3d"""
        return _coin.SbVec3d___div__(self, d)


    def __truediv__(self, d: 'double const') -> "SbVec3d":
        """__truediv__(SbVec3d self, double const d) -> SbVec3d"""
        return _coin.SbVec3d___truediv__(self, d)


    def __eq__(self, u: 'SbVec3d') -> "int":
        """__eq__(SbVec3d self, SbVec3d u) -> int"""
        return _coin.SbVec3d___eq__(self, u)


    def __nq__(self, u: 'SbVec3d') -> "int":
        """__nq__(SbVec3d self, SbVec3d u) -> int"""
        return _coin.SbVec3d___nq__(self, u)


    def __getitem__(self, i: 'int') -> "double":
        """__getitem__(SbVec3d self, int i) -> double"""
        return _coin.SbVec3d___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'double') -> "void":
        """__setitem__(SbVec3d self, int i, double value)"""
        return _coin.SbVec3d___setitem__(self, i, value)


    def __iter__(self):
       for i in range(3):
          yield self[i]

    def __len__(self):
          return 3

    __swig_destroy__ = _coin.delete_SbVec3d
    __del__ = lambda self: None
SbVec3d_swigregister = _coin.SbVec3d_swigregister
SbVec3d_swigregister(SbVec3d)

class SbDPViewVolume(object):
    """Proxy of C++ SbDPViewVolume class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ORTHOGRAPHIC = _coin.SbDPViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = _coin.SbDPViewVolume_PERSPECTIVE

    def __init__(self):
        """__init__(SbDPViewVolume self) -> SbDPViewVolume"""
        this = _coin.new_SbDPViewVolume()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbDPViewVolume
    __del__ = lambda self: None

    def getMatrices(self, affine: 'SbDPMatrix', proj: 'SbDPMatrix') -> "void":
        """getMatrices(SbDPViewVolume self, SbDPMatrix affine, SbDPMatrix proj)"""
        return _coin.SbDPViewVolume_getMatrices(self, affine, proj)


    def getMatrix(self) -> "SbDPMatrix":
        """getMatrix(SbDPViewVolume self) -> SbDPMatrix"""
        return _coin.SbDPViewVolume_getMatrix(self)


    def getCameraSpaceMatrix(self) -> "SbDPMatrix":
        """getCameraSpaceMatrix(SbDPViewVolume self) -> SbDPMatrix"""
        return _coin.SbDPViewVolume_getCameraSpaceMatrix(self)


    def projectPointToLine(self, *args) -> "void":
        """
        projectPointToLine(SbDPViewVolume self, SbVec2d pt, SbDPLine line)
        projectPointToLine(SbDPViewVolume self, SbVec2d pt, SbVec3d line0, SbVec3d line1)
        """
        return _coin.SbDPViewVolume_projectPointToLine(self, *args)


    def projectToScreen(self, src: 'SbVec3d', dst: 'SbVec3d') -> "void":
        """projectToScreen(SbDPViewVolume self, SbVec3d src, SbVec3d dst)"""
        return _coin.SbDPViewVolume_projectToScreen(self, src, dst)


    def getPlane(self, distFromEye: 'double const') -> "SbPlane":
        """getPlane(SbDPViewVolume self, double const distFromEye) -> SbPlane"""
        return _coin.SbDPViewVolume_getPlane(self, distFromEye)


    def getSightPoint(self, distFromEye: 'double const') -> "SbVec3d":
        """getSightPoint(SbDPViewVolume self, double const distFromEye) -> SbVec3d"""
        return _coin.SbDPViewVolume_getSightPoint(self, distFromEye)


    def getPlanePoint(self, distFromEye: 'double const', normPoint: 'SbVec2d') -> "SbVec3d":
        """getPlanePoint(SbDPViewVolume self, double const distFromEye, SbVec2d normPoint) -> SbVec3d"""
        return _coin.SbDPViewVolume_getPlanePoint(self, distFromEye, normPoint)


    def getAlignRotation(self, rightAngleOnly: 'SbBool'=0) -> "SbDPRotation":
        """
        getAlignRotation(SbDPViewVolume self, SbBool rightAngleOnly=0) -> SbDPRotation
        getAlignRotation(SbDPViewVolume self) -> SbDPRotation
        """
        return _coin.SbDPViewVolume_getAlignRotation(self, rightAngleOnly)


    def getWorldToScreenScale(self, worldCenter: 'SbVec3d', normRadius: 'double') -> "double":
        """getWorldToScreenScale(SbDPViewVolume self, SbVec3d worldCenter, double normRadius) -> double"""
        return _coin.SbDPViewVolume_getWorldToScreenScale(self, worldCenter, normRadius)


    def projectBox(self, box: 'SbBox3f') -> "SbVec2d":
        """projectBox(SbDPViewVolume self, SbBox3f box) -> SbVec2d"""
        return _coin.SbDPViewVolume_projectBox(self, box)


    def narrow(self, *args) -> "SbDPViewVolume":
        """
        narrow(SbDPViewVolume self, double left, double bottom, double right, double top) -> SbDPViewVolume
        narrow(SbDPViewVolume self, SbBox3f box) -> SbDPViewVolume
        """
        return _coin.SbDPViewVolume_narrow(self, *args)


    def ortho(self, left: 'double', right: 'double', bottom: 'double', top: 'double', nearval: 'double', farval: 'double') -> "void":
        """ortho(SbDPViewVolume self, double left, double right, double bottom, double top, double nearval, double farval)"""
        return _coin.SbDPViewVolume_ortho(self, left, right, bottom, top, nearval, farval)


    def perspective(self, fovy: 'double', aspect: 'double', nearval: 'double', farval: 'double') -> "void":
        """perspective(SbDPViewVolume self, double fovy, double aspect, double nearval, double farval)"""
        return _coin.SbDPViewVolume_perspective(self, fovy, aspect, nearval, farval)


    def frustum(self, left: 'double', right: 'double', bottom: 'double', top: 'double', nearval: 'double', farval: 'double') -> "void":
        """frustum(SbDPViewVolume self, double left, double right, double bottom, double top, double nearval, double farval)"""
        return _coin.SbDPViewVolume_frustum(self, left, right, bottom, top, nearval, farval)


    def rotateCamera(self, q: 'SbDPRotation') -> "void":
        """rotateCamera(SbDPViewVolume self, SbDPRotation q)"""
        return _coin.SbDPViewVolume_rotateCamera(self, q)


    def translateCamera(self, v: 'SbVec3d') -> "void":
        """translateCamera(SbDPViewVolume self, SbVec3d v)"""
        return _coin.SbDPViewVolume_translateCamera(self, v)


    def zVector(self) -> "SbVec3d":
        """zVector(SbDPViewVolume self) -> SbVec3d"""
        return _coin.SbDPViewVolume_zVector(self)


    def zNarrow(self, nearval: 'double', farval: 'double') -> "SbDPViewVolume":
        """zNarrow(SbDPViewVolume self, double nearval, double farval) -> SbDPViewVolume"""
        return _coin.SbDPViewVolume_zNarrow(self, nearval, farval)


    def scale(self, factor: 'double') -> "void":
        """scale(SbDPViewVolume self, double factor)"""
        return _coin.SbDPViewVolume_scale(self, factor)


    def scaleWidth(self, ratio: 'double') -> "void":
        """scaleWidth(SbDPViewVolume self, double ratio)"""
        return _coin.SbDPViewVolume_scaleWidth(self, ratio)


    def scaleHeight(self, ratio: 'double') -> "void":
        """scaleHeight(SbDPViewVolume self, double ratio)"""
        return _coin.SbDPViewVolume_scaleHeight(self, ratio)


    def getProjectionType(self) -> "SbDPViewVolume::ProjectionType":
        """getProjectionType(SbDPViewVolume self) -> SbDPViewVolume::ProjectionType"""
        return _coin.SbDPViewVolume_getProjectionType(self)


    def getProjectionPoint(self) -> "SbVec3d const &":
        """getProjectionPoint(SbDPViewVolume self) -> SbVec3d"""
        return _coin.SbDPViewVolume_getProjectionPoint(self)


    def getProjectionDirection(self) -> "SbVec3d const &":
        """getProjectionDirection(SbDPViewVolume self) -> SbVec3d"""
        return _coin.SbDPViewVolume_getProjectionDirection(self)


    def getNearDist(self) -> "double":
        """getNearDist(SbDPViewVolume self) -> double"""
        return _coin.SbDPViewVolume_getNearDist(self)


    def getWidth(self) -> "double":
        """getWidth(SbDPViewVolume self) -> double"""
        return _coin.SbDPViewVolume_getWidth(self)


    def getHeight(self) -> "double":
        """getHeight(SbDPViewVolume self) -> double"""
        return _coin.SbDPViewVolume_getHeight(self)


    def getDepth(self) -> "double":
        """getDepth(SbDPViewVolume self) -> double"""
        return _coin.SbDPViewVolume_getDepth(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbDPViewVolume self, FILE * fp)"""
        return _coin.SbDPViewVolume_output(self, fp)


    def getViewVolumePlanes(self, planes: 'SbPlane') -> "void":
        """getViewVolumePlanes(SbDPViewVolume self, SbPlane planes)"""
        return _coin.SbDPViewVolume_getViewVolumePlanes(self, planes)


    def transform(self, matrix: 'SbDPMatrix') -> "void":
        """transform(SbDPViewVolume self, SbDPMatrix matrix)"""
        return _coin.SbDPViewVolume_transform(self, matrix)


    def getViewUp(self) -> "SbVec3d":
        """getViewUp(SbDPViewVolume self) -> SbVec3d"""
        return _coin.SbDPViewVolume_getViewUp(self)


    def copyValues(self, vv: 'SbViewVolume') -> "void":
        """copyValues(SbDPViewVolume self, SbViewVolume vv)"""
        return _coin.SbDPViewVolume_copyValues(self, vv)

SbDPViewVolume_swigregister = _coin.SbDPViewVolume_swigregister
SbDPViewVolume_swigregister(SbDPViewVolume)

class SbViewVolume(object):
    """Proxy of C++ SbViewVolume class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ORTHOGRAPHIC = _coin.SbViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = _coin.SbViewVolume_PERSPECTIVE

    def __init__(self):
        """__init__(SbViewVolume self) -> SbViewVolume"""
        this = _coin.new_SbViewVolume()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbViewVolume
    __del__ = lambda self: None

    def getMatrices(self, affine: 'SbMatrix', proj: 'SbMatrix') -> "void":
        """getMatrices(SbViewVolume self, SbMatrix affine, SbMatrix proj)"""
        return _coin.SbViewVolume_getMatrices(self, affine, proj)


    def getMatrix(self) -> "SbMatrix":
        """getMatrix(SbViewVolume self) -> SbMatrix"""
        return _coin.SbViewVolume_getMatrix(self)


    def getCameraSpaceMatrix(self) -> "SbMatrix":
        """getCameraSpaceMatrix(SbViewVolume self) -> SbMatrix"""
        return _coin.SbViewVolume_getCameraSpaceMatrix(self)


    def getPlane(self, distFromEye: 'float const') -> "SbPlane":
        """getPlane(SbViewVolume self, float const distFromEye) -> SbPlane"""
        return _coin.SbViewVolume_getPlane(self, distFromEye)


    def getSightPoint(self, distFromEye: 'float const') -> "SbVec3f":
        """getSightPoint(SbViewVolume self, float const distFromEye) -> SbVec3f"""
        return _coin.SbViewVolume_getSightPoint(self, distFromEye)


    def getPlanePoint(self, distFromEye: 'float const', normPoint: 'SbVec2f') -> "SbVec3f":
        """getPlanePoint(SbViewVolume self, float const distFromEye, SbVec2f normPoint) -> SbVec3f"""
        return _coin.SbViewVolume_getPlanePoint(self, distFromEye, normPoint)


    def getAlignRotation(self, rightAngleOnly: 'SbBool'=0) -> "SbRotation":
        """
        getAlignRotation(SbViewVolume self, SbBool rightAngleOnly=0) -> SbRotation
        getAlignRotation(SbViewVolume self) -> SbRotation
        """
        return _coin.SbViewVolume_getAlignRotation(self, rightAngleOnly)


    def getWorldToScreenScale(self, worldCenter: 'SbVec3f', normRadius: 'float') -> "float":
        """getWorldToScreenScale(SbViewVolume self, SbVec3f worldCenter, float normRadius) -> float"""
        return _coin.SbViewVolume_getWorldToScreenScale(self, worldCenter, normRadius)


    def projectBox(self, box: 'SbBox3f') -> "SbVec2f":
        """projectBox(SbViewVolume self, SbBox3f box) -> SbVec2f"""
        return _coin.SbViewVolume_projectBox(self, box)


    def narrow(self, *args) -> "SbViewVolume":
        """
        narrow(SbViewVolume self, float left, float bottom, float right, float top) -> SbViewVolume
        narrow(SbViewVolume self, SbBox3f box) -> SbViewVolume
        """
        return _coin.SbViewVolume_narrow(self, *args)


    def ortho(self, left: 'float', right: 'float', bottom: 'float', top: 'float', nearval: 'float', farval: 'float') -> "void":
        """ortho(SbViewVolume self, float left, float right, float bottom, float top, float nearval, float farval)"""
        return _coin.SbViewVolume_ortho(self, left, right, bottom, top, nearval, farval)


    def perspective(self, fovy: 'float', aspect: 'float', nearval: 'float', farval: 'float') -> "void":
        """perspective(SbViewVolume self, float fovy, float aspect, float nearval, float farval)"""
        return _coin.SbViewVolume_perspective(self, fovy, aspect, nearval, farval)


    def frustum(self, left: 'float', right: 'float', bottom: 'float', top: 'float', nearval: 'float', farval: 'float') -> "void":
        """frustum(SbViewVolume self, float left, float right, float bottom, float top, float nearval, float farval)"""
        return _coin.SbViewVolume_frustum(self, left, right, bottom, top, nearval, farval)


    def rotateCamera(self, q: 'SbRotation') -> "void":
        """rotateCamera(SbViewVolume self, SbRotation q)"""
        return _coin.SbViewVolume_rotateCamera(self, q)


    def translateCamera(self, v: 'SbVec3f') -> "void":
        """translateCamera(SbViewVolume self, SbVec3f v)"""
        return _coin.SbViewVolume_translateCamera(self, v)


    def zVector(self) -> "SbVec3f":
        """zVector(SbViewVolume self) -> SbVec3f"""
        return _coin.SbViewVolume_zVector(self)


    def zNarrow(self, nearval: 'float', farval: 'float') -> "SbViewVolume":
        """zNarrow(SbViewVolume self, float nearval, float farval) -> SbViewVolume"""
        return _coin.SbViewVolume_zNarrow(self, nearval, farval)


    def scale(self, factor: 'float') -> "void":
        """scale(SbViewVolume self, float factor)"""
        return _coin.SbViewVolume_scale(self, factor)


    def scaleWidth(self, ratio: 'float') -> "void":
        """scaleWidth(SbViewVolume self, float ratio)"""
        return _coin.SbViewVolume_scaleWidth(self, ratio)


    def scaleHeight(self, ratio: 'float') -> "void":
        """scaleHeight(SbViewVolume self, float ratio)"""
        return _coin.SbViewVolume_scaleHeight(self, ratio)


    def getProjectionType(self) -> "SbViewVolume::ProjectionType":
        """getProjectionType(SbViewVolume self) -> SbViewVolume::ProjectionType"""
        return _coin.SbViewVolume_getProjectionType(self)


    def getProjectionPoint(self) -> "SbVec3f const &":
        """getProjectionPoint(SbViewVolume self) -> SbVec3f"""
        return _coin.SbViewVolume_getProjectionPoint(self)


    def getProjectionDirection(self) -> "SbVec3f const &":
        """getProjectionDirection(SbViewVolume self) -> SbVec3f"""
        return _coin.SbViewVolume_getProjectionDirection(self)


    def getNearDist(self) -> "float":
        """getNearDist(SbViewVolume self) -> float"""
        return _coin.SbViewVolume_getNearDist(self)


    def getWidth(self) -> "float":
        """getWidth(SbViewVolume self) -> float"""
        return _coin.SbViewVolume_getWidth(self)


    def getHeight(self) -> "float":
        """getHeight(SbViewVolume self) -> float"""
        return _coin.SbViewVolume_getHeight(self)


    def getDepth(self) -> "float":
        """getDepth(SbViewVolume self) -> float"""
        return _coin.SbViewVolume_getDepth(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbViewVolume self, FILE * fp)"""
        return _coin.SbViewVolume_output(self, fp)


    def getViewVolumePlanes(self, planes: 'SbPlane') -> "void":
        """getViewVolumePlanes(SbViewVolume self, SbPlane planes)"""
        return _coin.SbViewVolume_getViewVolumePlanes(self, planes)


    def transform(self) -> "void":
        """transform(SbViewVolume self)"""
        return _coin.SbViewVolume_transform(self)


    def getViewUp(self) -> "SbVec3f":
        """getViewUp(SbViewVolume self) -> SbVec3f"""
        return _coin.SbViewVolume_getViewUp(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbViewVolume self, SbVec3f p) -> SbBool
        intersect(SbViewVolume self, SbVec3f p0, SbVec3f p1, SbVec3f closestpoint) -> SbBool
        intersect(SbViewVolume self, SbBox3f box) -> SbBool
        """
        return _coin.SbViewVolume_intersect(self, *args)


    def intersectionBox(self, box: 'SbBox3f') -> "SbBox3f":
        """intersectionBox(SbViewVolume self, SbBox3f box) -> SbBox3f"""
        return _coin.SbViewVolume_intersectionBox(self, box)


    def outsideTest(self, p: 'SbPlane', bmin: 'SbVec3f', bmax: 'SbVec3f') -> "SbBool":
        """outsideTest(SbViewVolume self, SbPlane p, SbVec3f bmin, SbVec3f bmax) -> SbBool"""
        return _coin.SbViewVolume_outsideTest(self, p, bmin, bmax)


    def getDPViewVolume(self) -> "SbDPViewVolume const &":
        """getDPViewVolume(SbViewVolume self) -> SbDPViewVolume"""
        return _coin.SbViewVolume_getDPViewVolume(self)

    type = _swig_property(_coin.SbViewVolume_type_get, _coin.SbViewVolume_type_set)
    projPoint = _swig_property(_coin.SbViewVolume_projPoint_get, _coin.SbViewVolume_projPoint_set)
    projDir = _swig_property(_coin.SbViewVolume_projDir_get, _coin.SbViewVolume_projDir_set)
    nearDist = _swig_property(_coin.SbViewVolume_nearDist_get, _coin.SbViewVolume_nearDist_set)
    nearToFar = _swig_property(_coin.SbViewVolume_nearToFar_get, _coin.SbViewVolume_nearToFar_set)
    llf = _swig_property(_coin.SbViewVolume_llf_get, _coin.SbViewVolume_llf_set)
    lrf = _swig_property(_coin.SbViewVolume_lrf_get, _coin.SbViewVolume_lrf_set)
    ulf = _swig_property(_coin.SbViewVolume_ulf_get, _coin.SbViewVolume_ulf_set)

    def projectPointToLine(self, pt: 'SbVec2f') -> "PyObject *":
        """projectPointToLine(SbVec3f) -> (SbVec3f, SbVec3f)"""
        return _coin.SbViewVolume_projectPointToLine(self, pt)


    def projectToScreen(self, src: 'SbVec3f') -> "PyObject *":
        """projectToScreen(SbVec3f) -> SbVec3f"""
        return _coin.SbViewVolume_projectToScreen(self, src)

SbViewVolume_swigregister = _coin.SbViewVolume_swigregister
SbViewVolume_swigregister(SbViewVolume)

class SoSFVec3f(SoSField):
    """Proxy of C++ SoSFVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec3f self) -> SoSFVec3f"""
        this = _coin.new_SoSFVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec3f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec3f self) -> SoType"""
        return _coin.SoSFVec3f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec3f self, SoField field)"""
        return _coin.SoSFVec3f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec3f self, SoField field) -> SbBool"""
        return _coin.SoSFVec3f_isSame(self, field)


    def getValue(self) -> "SbVec3f const &":
        """getValue(SoSFVec3f self) -> SbVec3f"""
        return _coin.SoSFVec3f_getValue(self)


    def __eq__(self, field: 'SoSFVec3f') -> "int":
        """__eq__(SoSFVec3f self, SoSFVec3f field) -> int"""
        return _coin.SoSFVec3f___eq__(self, field)


    def __ne__(self, field: 'SoSFVec3f') -> "int":
        """__ne__(SoSFVec3f self, SoSFVec3f field) -> int"""
        return _coin.SoSFVec3f___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec3f_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec3f self, SbVec3f newvalue)
        setValue(SoSFVec3f self, float x, float y, float z)
        setValue(SoSFVec3f self, float const [3] xyz)
        setValue(SoSFVec3f self, SoSFVec3f other)
        """
        return _coin.SoSFVec3f_setValue(self, *args)

SoSFVec3f_swigregister = _coin.SoSFVec3f_swigregister
SoSFVec3f_swigregister(SoSFVec3f)

def SoSFVec3f_createInstance() -> "void *":
    """SoSFVec3f_createInstance() -> void *"""
    return _coin.SoSFVec3f_createInstance()

def SoSFVec3f_getClassTypeId() -> "SoType":
    """SoSFVec3f_getClassTypeId() -> SoType"""
    return _coin.SoSFVec3f_getClassTypeId()

def SoSFVec3f_initClass() -> "void":
    """SoSFVec3f_initClass()"""
    return _coin.SoSFVec3f_initClass()

class SoScale(SoTransformation):
    """Proxy of C++ SoScale class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScale_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScale self) -> SoType"""
        return _coin.SoScale_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScale_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoScale self) -> SoScale"""
        this = _coin.new_SoScale()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoScale_scaleFactor_get, _coin.SoScale_scaleFactor_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoScale self, SoAction action)"""
        return _coin.SoScale_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoScale self, SoCallbackAction action)"""
        return _coin.SoScale_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoScale self, SoGLRenderAction action)"""
        return _coin.SoScale_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoScale self, SoGetBoundingBoxAction action)"""
        return _coin.SoScale_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoScale self, SoGetMatrixAction action)"""
        return _coin.SoScale_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoScale self, SoPickAction action)"""
        return _coin.SoScale_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoScale self, SoGetPrimitiveCountAction action)"""
        return _coin.SoScale_getPrimitiveCount(self, action)

SoScale_swigregister = _coin.SoScale_swigregister
SoScale_swigregister(SoScale)

def SoScale_getClassTypeId() -> "SoType":
    """SoScale_getClassTypeId() -> SoType"""
    return _coin.SoScale_getClassTypeId()

def SoScale_initClass() -> "void":
    """SoScale_initClass()"""
    return _coin.SoScale_initClass()

class SoDragger(SoInteractionKit):
    """Proxy of C++ SoDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDragger self) -> SoType"""
        return _coin.SoDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoDragger self) -> SoNodekitCatalog"""
        return _coin.SoDragger_getNodekitCatalog(self)

    isActive = _swig_property(_coin.SoDragger_isActive_get, _coin.SoDragger_isActive_set)
    FRONT = _coin.SoDragger_FRONT
    BACK = _coin.SoDragger_BACK
    USE_PICK = _coin.SoDragger_USE_PICK

    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoDragger self, SoCallbackAction action)"""
        return _coin.SoDragger_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoDragger self, SoGLRenderAction action)"""
        return _coin.SoDragger_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoDragger self, SoGetMatrixAction action)"""
        return _coin.SoDragger_getMatrix(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoDragger self, SoRayPickAction action)"""
        return _coin.SoDragger_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoDragger self, SoSearchAction action)"""
        return _coin.SoDragger_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoDragger self, SoWriteAction action)"""
        return _coin.SoDragger_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoDragger self, SoGetPrimitiveCountAction action)"""
        return _coin.SoDragger_getPrimitiveCount(self, action)


    def setProjectorEpsilon(self, epsilon: 'float const') -> "void":
        """setProjectorEpsilon(SoDragger self, float const epsilon)"""
        return _coin.SoDragger_setProjectorEpsilon(self, epsilon)


    def getProjectorEpsilon(self) -> "float":
        """getProjectorEpsilon(SoDragger self) -> float"""
        return _coin.SoDragger_getProjectorEpsilon(self)


    def setMinGesture(self, pixels: 'int') -> "void":
        """setMinGesture(SoDragger self, int pixels)"""
        return _coin.SoDragger_setMinGesture(self, pixels)


    def getMinGesture(self) -> "int":
        """getMinGesture(SoDragger self) -> int"""
        return _coin.SoDragger_getMinGesture(self)


    def enableValueChangedCallbacks(self, newval: 'SbBool') -> "SbBool":
        """enableValueChangedCallbacks(SoDragger self, SbBool newval) -> SbBool"""
        return _coin.SoDragger_enableValueChangedCallbacks(self, newval)


    def getMotionMatrix(self) -> "SbMatrix const &":
        """getMotionMatrix(SoDragger self) -> SbMatrix"""
        return _coin.SoDragger_getMotionMatrix(self)


    def registerChildDragger(self, child: 'SoDragger') -> "void":
        """registerChildDragger(SoDragger self, SoDragger child)"""
        return _coin.SoDragger_registerChildDragger(self, child)


    def unregisterChildDragger(self, child: 'SoDragger') -> "void":
        """unregisterChildDragger(SoDragger self, SoDragger child)"""
        return _coin.SoDragger_unregisterChildDragger(self, child)


    def registerChildDraggerMovingIndependently(self, child: 'SoDragger') -> "void":
        """registerChildDraggerMovingIndependently(SoDragger self, SoDragger child)"""
        return _coin.SoDragger_registerChildDraggerMovingIndependently(self, child)


    def unregisterChildDraggerMovingIndependently(self, child: 'SoDragger') -> "void":
        """unregisterChildDraggerMovingIndependently(SoDragger self, SoDragger child)"""
        return _coin.SoDragger_unregisterChildDraggerMovingIndependently(self, child)


    def getLocalToWorldMatrix(self) -> "SbMatrix":
        """getLocalToWorldMatrix(SoDragger self) -> SbMatrix"""
        return _coin.SoDragger_getLocalToWorldMatrix(self)


    def getWorldToLocalMatrix(self) -> "SbMatrix":
        """getWorldToLocalMatrix(SoDragger self) -> SbMatrix"""
        return _coin.SoDragger_getWorldToLocalMatrix(self)


    def getLocalStartingPoint(self) -> "SbVec3f":
        """getLocalStartingPoint(SoDragger self) -> SbVec3f"""
        return _coin.SoDragger_getLocalStartingPoint(self)


    def getWorldStartingPoint(self) -> "SbVec3f":
        """getWorldStartingPoint(SoDragger self) -> SbVec3f"""
        return _coin.SoDragger_getWorldStartingPoint(self)


    def getPartToLocalMatrix(self, partname: 'SbName', parttolocalmatrix: 'SbMatrix', localtopartmatrix: 'SbMatrix') -> "void":
        """getPartToLocalMatrix(SoDragger self, SbName partname, SbMatrix parttolocalmatrix, SbMatrix localtopartmatrix)"""
        return _coin.SoDragger_getPartToLocalMatrix(self, partname, parttolocalmatrix, localtopartmatrix)


    def transformMatrixLocalToWorld(self, frommatrix: 'SbMatrix', tomatrix: 'SbMatrix') -> "void":
        """transformMatrixLocalToWorld(SoDragger self, SbMatrix frommatrix, SbMatrix tomatrix)"""
        return _coin.SoDragger_transformMatrixLocalToWorld(self, frommatrix, tomatrix)


    def transformMatrixWorldToLocal(self, frommatrix: 'SbMatrix', tomatrix: 'SbMatrix') -> "void":
        """transformMatrixWorldToLocal(SoDragger self, SbMatrix frommatrix, SbMatrix tomatrix)"""
        return _coin.SoDragger_transformMatrixWorldToLocal(self, frommatrix, tomatrix)


    def transformMatrixToLocalSpace(self, frommatrix: 'SbMatrix', tomatrix: 'SbMatrix', fromspacepartname: 'SbName') -> "void":
        """transformMatrixToLocalSpace(SoDragger self, SbMatrix frommatrix, SbMatrix tomatrix, SbName fromspacepartname)"""
        return _coin.SoDragger_transformMatrixToLocalSpace(self, frommatrix, tomatrix, fromspacepartname)


    def setMotionMatrix(self, newmatrix: 'SbMatrix') -> "void":
        """setMotionMatrix(SoDragger self, SbMatrix newmatrix)"""
        return _coin.SoDragger_setMotionMatrix(self, newmatrix)


    def valueChanged(self) -> "void":
        """valueChanged(SoDragger self)"""
        return _coin.SoDragger_valueChanged(self)


    def getStartMotionMatrix(self) -> "SbMatrix const &":
        """getStartMotionMatrix(SoDragger self) -> SbMatrix"""
        return _coin.SoDragger_getStartMotionMatrix(self)


    def saveStartParameters(self) -> "void":
        """saveStartParameters(SoDragger self)"""
        return _coin.SoDragger_saveStartParameters(self)


    def getPickPath(self) -> "SoPath const *":
        """getPickPath(SoDragger self) -> SoPath"""
        return _coin.SoDragger_getPickPath(self)


    def getEvent(self) -> "SoEvent const *":
        """getEvent(SoDragger self) -> SoEvent"""
        return _coin.SoDragger_getEvent(self)


    def createPathToThis(self) -> "SoPath *":
        """createPathToThis(SoDragger self) -> SoPath"""
        return _coin.SoDragger_createPathToThis(self)


    def getSurrogatePartPickedOwner(self) -> "SoPath const *":
        """getSurrogatePartPickedOwner(SoDragger self) -> SoPath"""
        return _coin.SoDragger_getSurrogatePartPickedOwner(self)


    def getSurrogatePartPickedName(self) -> "SbName const &":
        """getSurrogatePartPickedName(SoDragger self) -> SbName"""
        return _coin.SoDragger_getSurrogatePartPickedName(self)


    def getSurrogatePartPickedPath(self) -> "SoPath const *":
        """getSurrogatePartPickedPath(SoDragger self) -> SoPath"""
        return _coin.SoDragger_getSurrogatePartPickedPath(self)


    def setStartingPoint(self, *args) -> "void":
        """
        setStartingPoint(SoDragger self, SoPickedPoint newpoint)
        setStartingPoint(SoDragger self, SbVec3f newpoint)
        """
        return _coin.SoDragger_setStartingPoint(self, *args)


    def getViewVolume(self) -> "SbViewVolume const &":
        """getViewVolume(SoDragger self) -> SbViewVolume"""
        return _coin.SoDragger_getViewVolume(self)


    def setViewVolume(self, vol: 'SbViewVolume') -> "void":
        """setViewVolume(SoDragger self, SbViewVolume vol)"""
        return _coin.SoDragger_setViewVolume(self, vol)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoDragger self) -> SbViewportRegion"""
        return _coin.SoDragger_getViewportRegion(self)


    def setViewportRegion(self, reg: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoDragger self, SbViewportRegion reg)"""
        return _coin.SoDragger_setViewportRegion(self, reg)


    def getHandleEventAction(self) -> "SoHandleEventAction *":
        """getHandleEventAction(SoDragger self) -> SoHandleEventAction"""
        return _coin.SoDragger_getHandleEventAction(self)


    def setHandleEventAction(self, newAction: 'SoHandleEventAction') -> "void":
        """setHandleEventAction(SoDragger self, SoHandleEventAction newAction)"""
        return _coin.SoDragger_setHandleEventAction(self, newAction)


    def setTempPathToThis(self, somethingclose: 'SoPath') -> "void":
        """setTempPathToThis(SoDragger self, SoPath somethingclose)"""
        return _coin.SoDragger_setTempPathToThis(self, somethingclose)


    def grabEventsSetup(self) -> "void":
        """grabEventsSetup(SoDragger self)"""
        return _coin.SoDragger_grabEventsSetup(self)


    def grabEventsCleanup(self) -> "void":
        """grabEventsCleanup(SoDragger self)"""
        return _coin.SoDragger_grabEventsCleanup(self)


    def workFieldsIntoTransform(self, mtx: 'SbMatrix') -> "void":
        """workFieldsIntoTransform(SoDragger self, SbMatrix mtx)"""
        return _coin.SoDragger_workFieldsIntoTransform(self, mtx)


    def setFrontOnProjector(self, newval: 'SoDragger::ProjectorFrontSetting') -> "void":
        """setFrontOnProjector(SoDragger self, SoDragger::ProjectorFrontSetting newval)"""
        return _coin.SoDragger_setFrontOnProjector(self, newval)


    def getFrontOnProjector(self) -> "SoDragger::ProjectorFrontSetting":
        """getFrontOnProjector(SoDragger self) -> SoDragger::ProjectorFrontSetting"""
        return _coin.SoDragger_getFrontOnProjector(self)


    def setMinScale(newminscale: 'float') -> "void":
        """setMinScale(float newminscale)"""
        return _coin.SoDragger_setMinScale(newminscale)

    setMinScale = staticmethod(setMinScale)

    def getMinScale() -> "float":
        """getMinScale() -> float"""
        return _coin.SoDragger_getMinScale()

    getMinScale = staticmethod(getMinScale)

    def workValuesIntoTransform(mtx: 'SbMatrix', translationptr: 'SbVec3f', rotationptr: 'SbRotation', scalefactorptr: 'SbVec3f', scaleorientationptr: 'SbRotation', centerptr: 'SbVec3f') -> "void":
        """workValuesIntoTransform(SbMatrix mtx, SbVec3f translationptr, SbRotation rotationptr, SbVec3f scalefactorptr, SbRotation scaleorientationptr, SbVec3f centerptr)"""
        return _coin.SoDragger_workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr)

    workValuesIntoTransform = staticmethod(workValuesIntoTransform)

    def getTransformFast(*args) -> "void":
        """
        getTransformFast(SbMatrix mtx, SbVec3f translation, SbRotation rotation, SbVec3f scalefactor, SbRotation scaleorientation, SbVec3f center)
        getTransformFast(SbMatrix mtx, SbVec3f translation, SbRotation rotation, SbVec3f scalefactor, SbRotation scaleorientation)
        """
        return _coin.SoDragger_getTransformFast(*args)

    getTransformFast = staticmethod(getTransformFast)

    def appendTranslation(mtx: 'SbMatrix', translation: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
        """
        appendTranslation(SbMatrix mtx, SbVec3f translation, SbMatrix conversion=None) -> SbMatrix
        appendTranslation(SbMatrix mtx, SbVec3f translation) -> SbMatrix
        """
        return _coin.SoDragger_appendTranslation(mtx, translation, conversion)

    appendTranslation = staticmethod(appendTranslation)

    def appendScale(mtx: 'SbMatrix', scale: 'SbVec3f', scalecenter: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
        """
        appendScale(SbMatrix mtx, SbVec3f scale, SbVec3f scalecenter, SbMatrix conversion=None) -> SbMatrix
        appendScale(SbMatrix mtx, SbVec3f scale, SbVec3f scalecenter) -> SbMatrix
        """
        return _coin.SoDragger_appendScale(mtx, scale, scalecenter, conversion)

    appendScale = staticmethod(appendScale)

    def appendRotation(mtx: 'SbMatrix', rot: 'SbRotation', rotcenter: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
        """
        appendRotation(SbMatrix mtx, SbRotation rot, SbVec3f rotcenter, SbMatrix conversion=None) -> SbMatrix
        appendRotation(SbMatrix mtx, SbRotation rot, SbVec3f rotcenter) -> SbMatrix
        """
        return _coin.SoDragger_appendRotation(mtx, rot, rotcenter, conversion)

    appendRotation = staticmethod(appendRotation)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDragger_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoDragger_initClasses()

    initClasses = staticmethod(initClasses)

    def addStartCallback(self, *args) -> "void":
        """
        addStartCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        addStartCallback(SoDragger self, SoDraggerCB * func)
        addStartCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        addStartCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_addStartCallback(self, *args)


    def removeStartCallback(self, *args) -> "void":
        """
        removeStartCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        removeStartCallback(SoDragger self, SoDraggerCB * func)
        removeStartCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        removeStartCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_removeStartCallback(self, *args)


    def addMotionCallback(self, *args) -> "void":
        """
        addMotionCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        addMotionCallback(SoDragger self, SoDraggerCB * func)
        addMotionCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        addMotionCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_addMotionCallback(self, *args)


    def removeMotionCallback(self, *args) -> "void":
        """
        removeMotionCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        removeMotionCallback(SoDragger self, SoDraggerCB * func)
        removeMotionCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        removeMotionCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_removeMotionCallback(self, *args)


    def addFinishCallback(self, *args) -> "void":
        """
        addFinishCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        addFinishCallback(SoDragger self, SoDraggerCB * func)
        addFinishCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        addFinishCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_addFinishCallback(self, *args)


    def removeFinishCallback(self, *args) -> "void":
        """
        removeFinishCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        removeFinishCallback(SoDragger self, SoDraggerCB * func)
        removeFinishCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        removeFinishCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_removeFinishCallback(self, *args)


    def addValueChangedCallback(self, *args) -> "void":
        """
        addValueChangedCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        addValueChangedCallback(SoDragger self, SoDraggerCB * func)
        addValueChangedCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        addValueChangedCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_addValueChangedCallback(self, *args)


    def removeValueChangedCallback(self, *args) -> "void":
        """
        removeValueChangedCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        removeValueChangedCallback(SoDragger self, SoDraggerCB * func)
        removeValueChangedCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        removeValueChangedCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_removeValueChangedCallback(self, *args)


    def addOtherEventCallback(self, *args) -> "void":
        """
        addOtherEventCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        addOtherEventCallback(SoDragger self, SoDraggerCB * func)
        addOtherEventCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        addOtherEventCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_addOtherEventCallback(self, *args)


    def removeOtherEventCallback(self, *args) -> "void":
        """
        removeOtherEventCallback(SoDragger self, SoDraggerCB * func, void * data=None)
        removeOtherEventCallback(SoDragger self, SoDraggerCB * func)
        removeOtherEventCallback(SoDragger self, PyObject * pyfunc, PyObject * data=None)
        removeOtherEventCallback(SoDragger self, PyObject * pyfunc)
        """
        return _coin.SoDragger_removeOtherEventCallback(self, *args)

SoDragger_swigregister = _coin.SoDragger_swigregister
SoDragger_swigregister(SoDragger)

def SoDragger_getClassTypeId() -> "SoType":
    """SoDragger_getClassTypeId() -> SoType"""
    return _coin.SoDragger_getClassTypeId()

def SoDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoDragger_getClassNodekitCatalog()

def SoDragger_setMinScale(newminscale: 'float') -> "void":
    """SoDragger_setMinScale(float newminscale)"""
    return _coin.SoDragger_setMinScale(newminscale)

def SoDragger_getMinScale() -> "float":
    """SoDragger_getMinScale() -> float"""
    return _coin.SoDragger_getMinScale()

def SoDragger_workValuesIntoTransform(mtx: 'SbMatrix', translationptr: 'SbVec3f', rotationptr: 'SbRotation', scalefactorptr: 'SbVec3f', scaleorientationptr: 'SbRotation', centerptr: 'SbVec3f') -> "void":
    """SoDragger_workValuesIntoTransform(SbMatrix mtx, SbVec3f translationptr, SbRotation rotationptr, SbVec3f scalefactorptr, SbRotation scaleorientationptr, SbVec3f centerptr)"""
    return _coin.SoDragger_workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr)

def SoDragger_getTransformFast(*args) -> "void":
    """
    getTransformFast(SbMatrix mtx, SbVec3f translation, SbRotation rotation, SbVec3f scalefactor, SbRotation scaleorientation, SbVec3f center)
    SoDragger_getTransformFast(SbMatrix mtx, SbVec3f translation, SbRotation rotation, SbVec3f scalefactor, SbRotation scaleorientation)
    """
    return _coin.SoDragger_getTransformFast(*args)

def SoDragger_appendTranslation(mtx: 'SbMatrix', translation: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
    """
    appendTranslation(SbMatrix mtx, SbVec3f translation, SbMatrix conversion=None) -> SbMatrix
    SoDragger_appendTranslation(SbMatrix mtx, SbVec3f translation) -> SbMatrix
    """
    return _coin.SoDragger_appendTranslation(mtx, translation, conversion)

def SoDragger_appendScale(mtx: 'SbMatrix', scale: 'SbVec3f', scalecenter: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
    """
    appendScale(SbMatrix mtx, SbVec3f scale, SbVec3f scalecenter, SbMatrix conversion=None) -> SbMatrix
    SoDragger_appendScale(SbMatrix mtx, SbVec3f scale, SbVec3f scalecenter) -> SbMatrix
    """
    return _coin.SoDragger_appendScale(mtx, scale, scalecenter, conversion)

def SoDragger_appendRotation(mtx: 'SbMatrix', rot: 'SbRotation', rotcenter: 'SbVec3f', conversion: 'SbMatrix'=None) -> "SbMatrix":
    """
    appendRotation(SbMatrix mtx, SbRotation rot, SbVec3f rotcenter, SbMatrix conversion=None) -> SbMatrix
    SoDragger_appendRotation(SbMatrix mtx, SbRotation rot, SbVec3f rotcenter) -> SbMatrix
    """
    return _coin.SoDragger_appendRotation(mtx, rot, rotcenter, conversion)

def SoDragger_initClass() -> "void":
    """SoDragger_initClass()"""
    return _coin.SoDragger_initClass()

def SoDragger_initClasses() -> "void":
    """SoDragger_initClasses()"""
    return _coin.SoDragger_initClasses()

class SoSFRotation(SoSField):
    """Proxy of C++ SoSFRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFRotation self) -> SoSFRotation"""
        this = _coin.new_SoSFRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFRotation
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFRotation_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFRotation self) -> SoType"""
        return _coin.SoSFRotation_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFRotation self, SoField field)"""
        return _coin.SoSFRotation_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFRotation self, SoField field) -> SbBool"""
        return _coin.SoSFRotation_isSame(self, field)


    def __eq__(self, field: 'SoSFRotation') -> "int":
        """__eq__(SoSFRotation self, SoSFRotation field) -> int"""
        return _coin.SoSFRotation___eq__(self, field)


    def __ne__(self, field: 'SoSFRotation') -> "int":
        """__ne__(SoSFRotation self, SoSFRotation field) -> int"""
        return _coin.SoSFRotation___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFRotation_initClass()

    initClass = staticmethod(initClass)

    def getValue(self, *args) -> "void":
        """
        getValue(SoSFRotation self) -> SbRotation
        getValue(SoSFRotation self, float & angle)
        """
        return _coin.SoSFRotation_getValue(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFRotation self, SbRotation newvalue)
        setValue(SoSFRotation self, float const q0, float const q1, float const q2, float const q3)
        setValue(SoSFRotation self, float const [4] q)
        setValue(SoSFRotation self, SbVec3f axis, float const angle)
        setValue(SoSFRotation self, SoSFRotation other)
        """
        return _coin.SoSFRotation_setValue(self, *args)

SoSFRotation_swigregister = _coin.SoSFRotation_swigregister
SoSFRotation_swigregister(SoSFRotation)

def SoSFRotation_createInstance() -> "void *":
    """SoSFRotation_createInstance() -> void *"""
    return _coin.SoSFRotation_createInstance()

def SoSFRotation_getClassTypeId() -> "SoType":
    """SoSFRotation_getClassTypeId() -> SoType"""
    return _coin.SoSFRotation_getClassTypeId()

def SoSFRotation_initClass() -> "void":
    """SoSFRotation_initClass()"""
    return _coin.SoSFRotation_initClass()

class SoCenterballDragger(SoDragger):
    """Proxy of C++ SoCenterballDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCenterballDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCenterballDragger self) -> SoType"""
        return _coin.SoCenterballDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoCenterballDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoCenterballDragger self) -> SoNodekitCatalog"""
        return _coin.SoCenterballDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCenterballDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCenterballDragger self) -> SoCenterballDragger"""
        this = _coin.new_SoCenterballDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def saveStartParameters(self) -> "void":
        """saveStartParameters(SoCenterballDragger self)"""
        return _coin.SoCenterballDragger_saveStartParameters(self)

    rotation = _swig_property(_coin.SoCenterballDragger_rotation_get, _coin.SoCenterballDragger_rotation_set)
    center = _swig_property(_coin.SoCenterballDragger_center_get, _coin.SoCenterballDragger_center_set)
SoCenterballDragger_swigregister = _coin.SoCenterballDragger_swigregister
SoCenterballDragger_swigregister(SoCenterballDragger)

def SoCenterballDragger_getClassTypeId() -> "SoType":
    """SoCenterballDragger_getClassTypeId() -> SoType"""
    return _coin.SoCenterballDragger_getClassTypeId()

def SoCenterballDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoCenterballDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoCenterballDragger_getClassNodekitCatalog()

def SoCenterballDragger_initClass() -> "void":
    """SoCenterballDragger_initClass()"""
    return _coin.SoCenterballDragger_initClass()

class SoDirectionalLightDragger(SoDragger):
    """Proxy of C++ SoDirectionalLightDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDirectionalLightDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDirectionalLightDragger self) -> SoType"""
        return _coin.SoDirectionalLightDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoDirectionalLightDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoDirectionalLightDragger self) -> SoNodekitCatalog"""
        return _coin.SoDirectionalLightDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDirectionalLightDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDirectionalLightDragger self) -> SoDirectionalLightDragger"""
        this = _coin.new_SoDirectionalLightDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoDirectionalLightDragger_rotation_get, _coin.SoDirectionalLightDragger_rotation_set)
    translation = _swig_property(_coin.SoDirectionalLightDragger_translation_get, _coin.SoDirectionalLightDragger_translation_set)
SoDirectionalLightDragger_swigregister = _coin.SoDirectionalLightDragger_swigregister
SoDirectionalLightDragger_swigregister(SoDirectionalLightDragger)

def SoDirectionalLightDragger_getClassTypeId() -> "SoType":
    """SoDirectionalLightDragger_getClassTypeId() -> SoType"""
    return _coin.SoDirectionalLightDragger_getClassTypeId()

def SoDirectionalLightDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoDirectionalLightDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoDirectionalLightDragger_getClassNodekitCatalog()

def SoDirectionalLightDragger_initClass() -> "void":
    """SoDirectionalLightDragger_initClass()"""
    return _coin.SoDirectionalLightDragger_initClass()

class SoDragPointDragger(SoDragger):
    """Proxy of C++ SoDragPointDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDragPointDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDragPointDragger self) -> SoType"""
        return _coin.SoDragPointDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoDragPointDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoDragPointDragger self) -> SoNodekitCatalog"""
        return _coin.SoDragPointDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDragPointDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDragPointDragger self) -> SoDragPointDragger"""
        this = _coin.new_SoDragPointDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoDragPointDragger_translation_get, _coin.SoDragPointDragger_translation_set)

    def setJumpLimit(self, limit: 'float const') -> "void":
        """setJumpLimit(SoDragPointDragger self, float const limit)"""
        return _coin.SoDragPointDragger_setJumpLimit(self, limit)


    def getJumpLimit(self) -> "float":
        """getJumpLimit(SoDragPointDragger self) -> float"""
        return _coin.SoDragPointDragger_getJumpLimit(self)


    def showNextDraggerSet(self) -> "void":
        """showNextDraggerSet(SoDragPointDragger self)"""
        return _coin.SoDragPointDragger_showNextDraggerSet(self)

SoDragPointDragger_swigregister = _coin.SoDragPointDragger_swigregister
SoDragPointDragger_swigregister(SoDragPointDragger)

def SoDragPointDragger_getClassTypeId() -> "SoType":
    """SoDragPointDragger_getClassTypeId() -> SoType"""
    return _coin.SoDragPointDragger_getClassTypeId()

def SoDragPointDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoDragPointDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoDragPointDragger_getClassNodekitCatalog()

def SoDragPointDragger_initClass() -> "void":
    """SoDragPointDragger_initClass()"""
    return _coin.SoDragPointDragger_initClass()

class SoHandleBoxDragger(SoDragger):
    """Proxy of C++ SoHandleBoxDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoHandleBoxDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoHandleBoxDragger self) -> SoType"""
        return _coin.SoHandleBoxDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoHandleBoxDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoHandleBoxDragger self) -> SoNodekitCatalog"""
        return _coin.SoHandleBoxDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoHandleBoxDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoHandleBoxDragger self) -> SoHandleBoxDragger"""
        this = _coin.new_SoHandleBoxDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoHandleBoxDragger_scaleFactor_get, _coin.SoHandleBoxDragger_scaleFactor_set)
    translation = _swig_property(_coin.SoHandleBoxDragger_translation_get, _coin.SoHandleBoxDragger_translation_set)
SoHandleBoxDragger_swigregister = _coin.SoHandleBoxDragger_swigregister
SoHandleBoxDragger_swigregister(SoHandleBoxDragger)

def SoHandleBoxDragger_getClassTypeId() -> "SoType":
    """SoHandleBoxDragger_getClassTypeId() -> SoType"""
    return _coin.SoHandleBoxDragger_getClassTypeId()

def SoHandleBoxDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoHandleBoxDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoHandleBoxDragger_getClassNodekitCatalog()

def SoHandleBoxDragger_initClass() -> "void":
    """SoHandleBoxDragger_initClass()"""
    return _coin.SoHandleBoxDragger_initClass()

class SoJackDragger(SoDragger):
    """Proxy of C++ SoJackDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoJackDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoJackDragger self) -> SoType"""
        return _coin.SoJackDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoJackDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoJackDragger self) -> SoNodekitCatalog"""
        return _coin.SoJackDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoJackDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoJackDragger self) -> SoJackDragger"""
        this = _coin.new_SoJackDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoJackDragger_rotation_get, _coin.SoJackDragger_rotation_set)
    translation = _swig_property(_coin.SoJackDragger_translation_get, _coin.SoJackDragger_translation_set)
    scaleFactor = _swig_property(_coin.SoJackDragger_scaleFactor_get, _coin.SoJackDragger_scaleFactor_set)
SoJackDragger_swigregister = _coin.SoJackDragger_swigregister
SoJackDragger_swigregister(SoJackDragger)

def SoJackDragger_getClassTypeId() -> "SoType":
    """SoJackDragger_getClassTypeId() -> SoType"""
    return _coin.SoJackDragger_getClassTypeId()

def SoJackDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoJackDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoJackDragger_getClassNodekitCatalog()

def SoJackDragger_initClass() -> "void":
    """SoJackDragger_initClass()"""
    return _coin.SoJackDragger_initClass()

class SoPointLightDragger(SoDragger):
    """Proxy of C++ SoPointLightDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointLightDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPointLightDragger self) -> SoType"""
        return _coin.SoPointLightDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoPointLightDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoPointLightDragger self) -> SoNodekitCatalog"""
        return _coin.SoPointLightDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointLightDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPointLightDragger self) -> SoPointLightDragger"""
        this = _coin.new_SoPointLightDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoPointLightDragger_translation_get, _coin.SoPointLightDragger_translation_set)
SoPointLightDragger_swigregister = _coin.SoPointLightDragger_swigregister
SoPointLightDragger_swigregister(SoPointLightDragger)

def SoPointLightDragger_getClassTypeId() -> "SoType":
    """SoPointLightDragger_getClassTypeId() -> SoType"""
    return _coin.SoPointLightDragger_getClassTypeId()

def SoPointLightDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoPointLightDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoPointLightDragger_getClassNodekitCatalog()

def SoPointLightDragger_initClass() -> "void":
    """SoPointLightDragger_initClass()"""
    return _coin.SoPointLightDragger_initClass()

class SoRotateCylindricalDragger(SoDragger):
    """Proxy of C++ SoRotateCylindricalDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotateCylindricalDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotateCylindricalDragger self) -> SoType"""
        return _coin.SoRotateCylindricalDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoRotateCylindricalDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoRotateCylindricalDragger self) -> SoNodekitCatalog"""
        return _coin.SoRotateCylindricalDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotateCylindricalDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotateCylindricalDragger self) -> SoRotateCylindricalDragger"""
        this = _coin.new_SoRotateCylindricalDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoRotateCylindricalDragger_rotation_get, _coin.SoRotateCylindricalDragger_rotation_set)

    def setProjector(self, p: 'SbCylinderProjector') -> "void":
        """setProjector(SoRotateCylindricalDragger self, SbCylinderProjector p)"""
        return _coin.SoRotateCylindricalDragger_setProjector(self, p)


    def getProjector(self) -> "SbCylinderProjector const *":
        """getProjector(SoRotateCylindricalDragger self) -> SbCylinderProjector"""
        return _coin.SoRotateCylindricalDragger_getProjector(self)

SoRotateCylindricalDragger_swigregister = _coin.SoRotateCylindricalDragger_swigregister
SoRotateCylindricalDragger_swigregister(SoRotateCylindricalDragger)

def SoRotateCylindricalDragger_getClassTypeId() -> "SoType":
    """SoRotateCylindricalDragger_getClassTypeId() -> SoType"""
    return _coin.SoRotateCylindricalDragger_getClassTypeId()

def SoRotateCylindricalDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoRotateCylindricalDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoRotateCylindricalDragger_getClassNodekitCatalog()

def SoRotateCylindricalDragger_initClass() -> "void":
    """SoRotateCylindricalDragger_initClass()"""
    return _coin.SoRotateCylindricalDragger_initClass()

class SoRotateDiscDragger(SoDragger):
    """Proxy of C++ SoRotateDiscDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotateDiscDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotateDiscDragger self) -> SoType"""
        return _coin.SoRotateDiscDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoRotateDiscDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoRotateDiscDragger self) -> SoNodekitCatalog"""
        return _coin.SoRotateDiscDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotateDiscDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotateDiscDragger self) -> SoRotateDiscDragger"""
        this = _coin.new_SoRotateDiscDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoRotateDiscDragger_rotation_get, _coin.SoRotateDiscDragger_rotation_set)
SoRotateDiscDragger_swigregister = _coin.SoRotateDiscDragger_swigregister
SoRotateDiscDragger_swigregister(SoRotateDiscDragger)

def SoRotateDiscDragger_getClassTypeId() -> "SoType":
    """SoRotateDiscDragger_getClassTypeId() -> SoType"""
    return _coin.SoRotateDiscDragger_getClassTypeId()

def SoRotateDiscDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoRotateDiscDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoRotateDiscDragger_getClassNodekitCatalog()

def SoRotateDiscDragger_initClass() -> "void":
    """SoRotateDiscDragger_initClass()"""
    return _coin.SoRotateDiscDragger_initClass()

class SoRotateSphericalDragger(SoDragger):
    """Proxy of C++ SoRotateSphericalDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotateSphericalDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotateSphericalDragger self) -> SoType"""
        return _coin.SoRotateSphericalDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoRotateSphericalDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoRotateSphericalDragger self) -> SoNodekitCatalog"""
        return _coin.SoRotateSphericalDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotateSphericalDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotateSphericalDragger self) -> SoRotateSphericalDragger"""
        this = _coin.new_SoRotateSphericalDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoRotateSphericalDragger_rotation_get, _coin.SoRotateSphericalDragger_rotation_set)

    def setProjector(self, p: 'SbSphereProjector') -> "void":
        """setProjector(SoRotateSphericalDragger self, SbSphereProjector p)"""
        return _coin.SoRotateSphericalDragger_setProjector(self, p)


    def getProjector(self) -> "SbSphereProjector const *":
        """getProjector(SoRotateSphericalDragger self) -> SbSphereProjector"""
        return _coin.SoRotateSphericalDragger_getProjector(self)

SoRotateSphericalDragger_swigregister = _coin.SoRotateSphericalDragger_swigregister
SoRotateSphericalDragger_swigregister(SoRotateSphericalDragger)

def SoRotateSphericalDragger_getClassTypeId() -> "SoType":
    """SoRotateSphericalDragger_getClassTypeId() -> SoType"""
    return _coin.SoRotateSphericalDragger_getClassTypeId()

def SoRotateSphericalDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoRotateSphericalDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoRotateSphericalDragger_getClassNodekitCatalog()

def SoRotateSphericalDragger_initClass() -> "void":
    """SoRotateSphericalDragger_initClass()"""
    return _coin.SoRotateSphericalDragger_initClass()

class SoScale1Dragger(SoDragger):
    """Proxy of C++ SoScale1Dragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScale1Dragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScale1Dragger self) -> SoType"""
        return _coin.SoScale1Dragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoScale1Dragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoScale1Dragger self) -> SoNodekitCatalog"""
        return _coin.SoScale1Dragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScale1Dragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoScale1Dragger self) -> SoScale1Dragger"""
        this = _coin.new_SoScale1Dragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoScale1Dragger_scaleFactor_get, _coin.SoScale1Dragger_scaleFactor_set)
SoScale1Dragger_swigregister = _coin.SoScale1Dragger_swigregister
SoScale1Dragger_swigregister(SoScale1Dragger)

def SoScale1Dragger_getClassTypeId() -> "SoType":
    """SoScale1Dragger_getClassTypeId() -> SoType"""
    return _coin.SoScale1Dragger_getClassTypeId()

def SoScale1Dragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoScale1Dragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoScale1Dragger_getClassNodekitCatalog()

def SoScale1Dragger_initClass() -> "void":
    """SoScale1Dragger_initClass()"""
    return _coin.SoScale1Dragger_initClass()

class SoScale2Dragger(SoDragger):
    """Proxy of C++ SoScale2Dragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScale2Dragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScale2Dragger self) -> SoType"""
        return _coin.SoScale2Dragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoScale2Dragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoScale2Dragger self) -> SoNodekitCatalog"""
        return _coin.SoScale2Dragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScale2Dragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoScale2Dragger self) -> SoScale2Dragger"""
        this = _coin.new_SoScale2Dragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoScale2Dragger_scaleFactor_get, _coin.SoScale2Dragger_scaleFactor_set)
SoScale2Dragger_swigregister = _coin.SoScale2Dragger_swigregister
SoScale2Dragger_swigregister(SoScale2Dragger)

def SoScale2Dragger_getClassTypeId() -> "SoType":
    """SoScale2Dragger_getClassTypeId() -> SoType"""
    return _coin.SoScale2Dragger_getClassTypeId()

def SoScale2Dragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoScale2Dragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoScale2Dragger_getClassNodekitCatalog()

def SoScale2Dragger_initClass() -> "void":
    """SoScale2Dragger_initClass()"""
    return _coin.SoScale2Dragger_initClass()

class SoScale2UniformDragger(SoDragger):
    """Proxy of C++ SoScale2UniformDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScale2UniformDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScale2UniformDragger self) -> SoType"""
        return _coin.SoScale2UniformDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoScale2UniformDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoScale2UniformDragger self) -> SoNodekitCatalog"""
        return _coin.SoScale2UniformDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScale2UniformDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoScale2UniformDragger self) -> SoScale2UniformDragger"""
        this = _coin.new_SoScale2UniformDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoScale2UniformDragger_scaleFactor_get, _coin.SoScale2UniformDragger_scaleFactor_set)
SoScale2UniformDragger_swigregister = _coin.SoScale2UniformDragger_swigregister
SoScale2UniformDragger_swigregister(SoScale2UniformDragger)

def SoScale2UniformDragger_getClassTypeId() -> "SoType":
    """SoScale2UniformDragger_getClassTypeId() -> SoType"""
    return _coin.SoScale2UniformDragger_getClassTypeId()

def SoScale2UniformDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoScale2UniformDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoScale2UniformDragger_getClassNodekitCatalog()

def SoScale2UniformDragger_initClass() -> "void":
    """SoScale2UniformDragger_initClass()"""
    return _coin.SoScale2UniformDragger_initClass()

class SoScaleUniformDragger(SoDragger):
    """Proxy of C++ SoScaleUniformDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScaleUniformDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScaleUniformDragger self) -> SoType"""
        return _coin.SoScaleUniformDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoScaleUniformDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoScaleUniformDragger self) -> SoNodekitCatalog"""
        return _coin.SoScaleUniformDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScaleUniformDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoScaleUniformDragger self) -> SoScaleUniformDragger"""
        this = _coin.new_SoScaleUniformDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    scaleFactor = _swig_property(_coin.SoScaleUniformDragger_scaleFactor_get, _coin.SoScaleUniformDragger_scaleFactor_set)
SoScaleUniformDragger_swigregister = _coin.SoScaleUniformDragger_swigregister
SoScaleUniformDragger_swigregister(SoScaleUniformDragger)

def SoScaleUniformDragger_getClassTypeId() -> "SoType":
    """SoScaleUniformDragger_getClassTypeId() -> SoType"""
    return _coin.SoScaleUniformDragger_getClassTypeId()

def SoScaleUniformDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoScaleUniformDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoScaleUniformDragger_getClassNodekitCatalog()

def SoScaleUniformDragger_initClass() -> "void":
    """SoScaleUniformDragger_initClass()"""
    return _coin.SoScaleUniformDragger_initClass()

class SoSpotLightDragger(SoDragger):
    """Proxy of C++ SoSpotLightDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSpotLightDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSpotLightDragger self) -> SoType"""
        return _coin.SoSpotLightDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoSpotLightDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoSpotLightDragger self) -> SoNodekitCatalog"""
        return _coin.SoSpotLightDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSpotLightDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSpotLightDragger self) -> SoSpotLightDragger"""
        this = _coin.new_SoSpotLightDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoSpotLightDragger_rotation_get, _coin.SoSpotLightDragger_rotation_set)
    translation = _swig_property(_coin.SoSpotLightDragger_translation_get, _coin.SoSpotLightDragger_translation_set)
    angle = _swig_property(_coin.SoSpotLightDragger_angle_get, _coin.SoSpotLightDragger_angle_set)
SoSpotLightDragger_swigregister = _coin.SoSpotLightDragger_swigregister
SoSpotLightDragger_swigregister(SoSpotLightDragger)

def SoSpotLightDragger_getClassTypeId() -> "SoType":
    """SoSpotLightDragger_getClassTypeId() -> SoType"""
    return _coin.SoSpotLightDragger_getClassTypeId()

def SoSpotLightDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoSpotLightDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoSpotLightDragger_getClassNodekitCatalog()

def SoSpotLightDragger_initClass() -> "void":
    """SoSpotLightDragger_initClass()"""
    return _coin.SoSpotLightDragger_initClass()

class SoTabBoxDragger(SoDragger):
    """Proxy of C++ SoTabBoxDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTabBoxDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTabBoxDragger self) -> SoType"""
        return _coin.SoTabBoxDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTabBoxDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTabBoxDragger self) -> SoNodekitCatalog"""
        return _coin.SoTabBoxDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTabBoxDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTabBoxDragger self) -> SoTabBoxDragger"""
        this = _coin.new_SoTabBoxDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTabBoxDragger_translation_get, _coin.SoTabBoxDragger_translation_set)
    scaleFactor = _swig_property(_coin.SoTabBoxDragger_scaleFactor_get, _coin.SoTabBoxDragger_scaleFactor_set)

    def adjustScaleTabSize(self) -> "void":
        """adjustScaleTabSize(SoTabBoxDragger self)"""
        return _coin.SoTabBoxDragger_adjustScaleTabSize(self)

SoTabBoxDragger_swigregister = _coin.SoTabBoxDragger_swigregister
SoTabBoxDragger_swigregister(SoTabBoxDragger)

def SoTabBoxDragger_getClassTypeId() -> "SoType":
    """SoTabBoxDragger_getClassTypeId() -> SoType"""
    return _coin.SoTabBoxDragger_getClassTypeId()

def SoTabBoxDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTabBoxDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTabBoxDragger_getClassNodekitCatalog()

def SoTabBoxDragger_initClass() -> "void":
    """SoTabBoxDragger_initClass()"""
    return _coin.SoTabBoxDragger_initClass()

class SoTabPlaneDragger(SoDragger):
    """Proxy of C++ SoTabPlaneDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTabPlaneDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTabPlaneDragger self) -> SoType"""
        return _coin.SoTabPlaneDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTabPlaneDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTabPlaneDragger self) -> SoNodekitCatalog"""
        return _coin.SoTabPlaneDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTabPlaneDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTabPlaneDragger self) -> SoTabPlaneDragger"""
        this = _coin.new_SoTabPlaneDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTabPlaneDragger_translation_get, _coin.SoTabPlaneDragger_translation_set)
    scaleFactor = _swig_property(_coin.SoTabPlaneDragger_scaleFactor_get, _coin.SoTabPlaneDragger_scaleFactor_set)

    def adjustScaleTabSize(self) -> "void":
        """adjustScaleTabSize(SoTabPlaneDragger self)"""
        return _coin.SoTabPlaneDragger_adjustScaleTabSize(self)

SoTabPlaneDragger_swigregister = _coin.SoTabPlaneDragger_swigregister
SoTabPlaneDragger_swigregister(SoTabPlaneDragger)

def SoTabPlaneDragger_getClassTypeId() -> "SoType":
    """SoTabPlaneDragger_getClassTypeId() -> SoType"""
    return _coin.SoTabPlaneDragger_getClassTypeId()

def SoTabPlaneDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTabPlaneDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTabPlaneDragger_getClassNodekitCatalog()

def SoTabPlaneDragger_initClass() -> "void":
    """SoTabPlaneDragger_initClass()"""
    return _coin.SoTabPlaneDragger_initClass()

class SoTrackballDragger(SoDragger):
    """Proxy of C++ SoTrackballDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTrackballDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTrackballDragger self) -> SoType"""
        return _coin.SoTrackballDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTrackballDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTrackballDragger self) -> SoNodekitCatalog"""
        return _coin.SoTrackballDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTrackballDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTrackballDragger self) -> SoTrackballDragger"""
        this = _coin.new_SoTrackballDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoTrackballDragger_rotation_get, _coin.SoTrackballDragger_rotation_set)
    scaleFactor = _swig_property(_coin.SoTrackballDragger_scaleFactor_get, _coin.SoTrackballDragger_scaleFactor_set)

    def isAnimationEnabled(self) -> "SbBool":
        """isAnimationEnabled(SoTrackballDragger self) -> SbBool"""
        return _coin.SoTrackballDragger_isAnimationEnabled(self)


    def setAnimationEnabled(self, newval: 'SbBool') -> "void":
        """setAnimationEnabled(SoTrackballDragger self, SbBool newval)"""
        return _coin.SoTrackballDragger_setAnimationEnabled(self, newval)

SoTrackballDragger_swigregister = _coin.SoTrackballDragger_swigregister
SoTrackballDragger_swigregister(SoTrackballDragger)

def SoTrackballDragger_getClassTypeId() -> "SoType":
    """SoTrackballDragger_getClassTypeId() -> SoType"""
    return _coin.SoTrackballDragger_getClassTypeId()

def SoTrackballDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTrackballDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTrackballDragger_getClassNodekitCatalog()

def SoTrackballDragger_initClass() -> "void":
    """SoTrackballDragger_initClass()"""
    return _coin.SoTrackballDragger_initClass()

class SoTransformBoxDragger(SoDragger):
    """Proxy of C++ SoTransformBoxDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformBoxDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformBoxDragger self) -> SoType"""
        return _coin.SoTransformBoxDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTransformBoxDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTransformBoxDragger self) -> SoNodekitCatalog"""
        return _coin.SoTransformBoxDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformBoxDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformBoxDragger self) -> SoTransformBoxDragger"""
        this = _coin.new_SoTransformBoxDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoTransformBoxDragger_rotation_get, _coin.SoTransformBoxDragger_rotation_set)
    translation = _swig_property(_coin.SoTransformBoxDragger_translation_get, _coin.SoTransformBoxDragger_translation_set)
    scaleFactor = _swig_property(_coin.SoTransformBoxDragger_scaleFactor_get, _coin.SoTransformBoxDragger_scaleFactor_set)
SoTransformBoxDragger_swigregister = _coin.SoTransformBoxDragger_swigregister
SoTransformBoxDragger_swigregister(SoTransformBoxDragger)

def SoTransformBoxDragger_getClassTypeId() -> "SoType":
    """SoTransformBoxDragger_getClassTypeId() -> SoType"""
    return _coin.SoTransformBoxDragger_getClassTypeId()

def SoTransformBoxDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTransformBoxDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTransformBoxDragger_getClassNodekitCatalog()

def SoTransformBoxDragger_initClass() -> "void":
    """SoTransformBoxDragger_initClass()"""
    return _coin.SoTransformBoxDragger_initClass()

class SoTransformerDragger(SoDragger):
    """Proxy of C++ SoTransformerDragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformerDragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformerDragger self) -> SoType"""
        return _coin.SoTransformerDragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTransformerDragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTransformerDragger self) -> SoNodekitCatalog"""
        return _coin.SoTransformerDragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformerDragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformerDragger self) -> SoTransformerDragger"""
        this = _coin.new_SoTransformerDragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoTransformerDragger_rotation_get, _coin.SoTransformerDragger_rotation_set)
    translation = _swig_property(_coin.SoTransformerDragger_translation_get, _coin.SoTransformerDragger_translation_set)
    scaleFactor = _swig_property(_coin.SoTransformerDragger_scaleFactor_get, _coin.SoTransformerDragger_scaleFactor_set)
    minDiscRotDot = _swig_property(_coin.SoTransformerDragger_minDiscRotDot_get, _coin.SoTransformerDragger_minDiscRotDot_set)
    INACTIVE = _coin.SoTransformerDragger_INACTIVE
    RIT_X_ROTATE = _coin.SoTransformerDragger_RIT_X_ROTATE
    TOP_Y_ROTATE = _coin.SoTransformerDragger_TOP_Y_ROTATE
    FNT_Z_ROTATE = _coin.SoTransformerDragger_FNT_Z_ROTATE
    LFT_X_ROTATE = _coin.SoTransformerDragger_LFT_X_ROTATE
    BOT_Y_ROTATE = _coin.SoTransformerDragger_BOT_Y_ROTATE
    BAK_Z_ROTATE = _coin.SoTransformerDragger_BAK_Z_ROTATE
    PX_PY_PZ_3D_SCALE = _coin.SoTransformerDragger_PX_PY_PZ_3D_SCALE
    PX_PY_NZ_3D_SCALE = _coin.SoTransformerDragger_PX_PY_NZ_3D_SCALE
    PX_NY_PZ_3D_SCALE = _coin.SoTransformerDragger_PX_NY_PZ_3D_SCALE
    PX_NY_NZ_3D_SCALE = _coin.SoTransformerDragger_PX_NY_NZ_3D_SCALE
    NX_PY_PZ_3D_SCALE = _coin.SoTransformerDragger_NX_PY_PZ_3D_SCALE
    NX_PY_NZ_3D_SCALE = _coin.SoTransformerDragger_NX_PY_NZ_3D_SCALE
    NX_NY_PZ_3D_SCALE = _coin.SoTransformerDragger_NX_NY_PZ_3D_SCALE
    NX_NY_NZ_3D_SCALE = _coin.SoTransformerDragger_NX_NY_NZ_3D_SCALE
    RIT_TRANSLATE = _coin.SoTransformerDragger_RIT_TRANSLATE
    TOP_TRANSLATE = _coin.SoTransformerDragger_TOP_TRANSLATE
    FNT_TRANSLATE = _coin.SoTransformerDragger_FNT_TRANSLATE
    LFT_TRANSLATE = _coin.SoTransformerDragger_LFT_TRANSLATE
    BOT_TRANSLATE = _coin.SoTransformerDragger_BOT_TRANSLATE
    BAK_TRANSLATE = _coin.SoTransformerDragger_BAK_TRANSLATE

    def getCurrentState(self) -> "SoTransformerDragger::State":
        """getCurrentState(SoTransformerDragger self) -> SoTransformerDragger::State"""
        return _coin.SoTransformerDragger_getCurrentState(self)


    def unsquishKnobs(self) -> "void":
        """unsquishKnobs(SoTransformerDragger self)"""
        return _coin.SoTransformerDragger_unsquishKnobs(self)


    def isLocateHighlighting(self) -> "SbBool":
        """isLocateHighlighting(SoTransformerDragger self) -> SbBool"""
        return _coin.SoTransformerDragger_isLocateHighlighting(self)


    def setLocateHighlighting(self, onoff: 'SbBool') -> "void":
        """setLocateHighlighting(SoTransformerDragger self, SbBool onoff)"""
        return _coin.SoTransformerDragger_setLocateHighlighting(self, onoff)


    def setColinearThreshold(newval: 'int') -> "void":
        """setColinearThreshold(int newval)"""
        return _coin.SoTransformerDragger_setColinearThreshold(newval)

    setColinearThreshold = staticmethod(setColinearThreshold)

    def getColinearThreshold() -> "int":
        """getColinearThreshold() -> int"""
        return _coin.SoTransformerDragger_getColinearThreshold()

    getColinearThreshold = staticmethod(getColinearThreshold)

    def getBoxPointInWorldSpace(self, pointonunitbox: 'SbVec3f') -> "SbVec3f":
        """getBoxPointInWorldSpace(SoTransformerDragger self, SbVec3f pointonunitbox) -> SbVec3f"""
        return _coin.SoTransformerDragger_getBoxPointInWorldSpace(self, pointonunitbox)


    def getBoxDirInWorldSpace(self, dironunitbox: 'SbVec3f') -> "SbVec3f":
        """getBoxDirInWorldSpace(SoTransformerDragger self, SbVec3f dironunitbox) -> SbVec3f"""
        return _coin.SoTransformerDragger_getBoxDirInWorldSpace(self, dironunitbox)


    def getWorldPointInBoxSpace(self, pointinworldspace: 'SbVec3f') -> "SbVec3f":
        """getWorldPointInBoxSpace(SoTransformerDragger self, SbVec3f pointinworldspace) -> SbVec3f"""
        return _coin.SoTransformerDragger_getWorldPointInBoxSpace(self, pointinworldspace)


    def getWorldPointInPixelSpace(self, thepoint: 'SbVec3f') -> "SbVec2f":
        """getWorldPointInPixelSpace(SoTransformerDragger self, SbVec3f thepoint) -> SbVec2f"""
        return _coin.SoTransformerDragger_getWorldPointInPixelSpace(self, thepoint)


    def getInteractiveCenterInBoxSpace(self) -> "SbVec3f":
        """getInteractiveCenterInBoxSpace(SoTransformerDragger self) -> SbVec3f"""
        return _coin.SoTransformerDragger_getInteractiveCenterInBoxSpace(self)

SoTransformerDragger_swigregister = _coin.SoTransformerDragger_swigregister
SoTransformerDragger_swigregister(SoTransformerDragger)

def SoTransformerDragger_getClassTypeId() -> "SoType":
    """SoTransformerDragger_getClassTypeId() -> SoType"""
    return _coin.SoTransformerDragger_getClassTypeId()

def SoTransformerDragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTransformerDragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTransformerDragger_getClassNodekitCatalog()

def SoTransformerDragger_initClass() -> "void":
    """SoTransformerDragger_initClass()"""
    return _coin.SoTransformerDragger_initClass()

def SoTransformerDragger_setColinearThreshold(newval: 'int') -> "void":
    """SoTransformerDragger_setColinearThreshold(int newval)"""
    return _coin.SoTransformerDragger_setColinearThreshold(newval)

def SoTransformerDragger_getColinearThreshold() -> "int":
    """SoTransformerDragger_getColinearThreshold() -> int"""
    return _coin.SoTransformerDragger_getColinearThreshold()

class SoTranslate1Dragger(SoDragger):
    """Proxy of C++ SoTranslate1Dragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTranslate1Dragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTranslate1Dragger self) -> SoType"""
        return _coin.SoTranslate1Dragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTranslate1Dragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTranslate1Dragger self) -> SoNodekitCatalog"""
        return _coin.SoTranslate1Dragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTranslate1Dragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTranslate1Dragger self) -> SoTranslate1Dragger"""
        this = _coin.new_SoTranslate1Dragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTranslate1Dragger_translation_get, _coin.SoTranslate1Dragger_translation_set)
    minTranslation = _swig_property(_coin.SoTranslate1Dragger_minTranslation_get, _coin.SoTranslate1Dragger_minTranslation_set)
    maxTranslation = _swig_property(_coin.SoTranslate1Dragger_maxTranslation_get, _coin.SoTranslate1Dragger_maxTranslation_set)
SoTranslate1Dragger_swigregister = _coin.SoTranslate1Dragger_swigregister
SoTranslate1Dragger_swigregister(SoTranslate1Dragger)

def SoTranslate1Dragger_getClassTypeId() -> "SoType":
    """SoTranslate1Dragger_getClassTypeId() -> SoType"""
    return _coin.SoTranslate1Dragger_getClassTypeId()

def SoTranslate1Dragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTranslate1Dragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTranslate1Dragger_getClassNodekitCatalog()

def SoTranslate1Dragger_initClass() -> "void":
    """SoTranslate1Dragger_initClass()"""
    return _coin.SoTranslate1Dragger_initClass()

class SoSFVec2f(SoSField):
    """Proxy of C++ SoSFVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec2f self) -> SoSFVec2f"""
        this = _coin.new_SoSFVec2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec2f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec2f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec2f self) -> SoType"""
        return _coin.SoSFVec2f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec2f self, SoField field)"""
        return _coin.SoSFVec2f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec2f self, SoField field) -> SbBool"""
        return _coin.SoSFVec2f_isSame(self, field)


    def getValue(self) -> "SbVec2f const &":
        """getValue(SoSFVec2f self) -> SbVec2f"""
        return _coin.SoSFVec2f_getValue(self)


    def __eq__(self, field: 'SoSFVec2f') -> "int":
        """__eq__(SoSFVec2f self, SoSFVec2f field) -> int"""
        return _coin.SoSFVec2f___eq__(self, field)


    def __ne__(self, field: 'SoSFVec2f') -> "int":
        """__ne__(SoSFVec2f self, SoSFVec2f field) -> int"""
        return _coin.SoSFVec2f___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec2f_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec2f self, SbVec2f newvalue)
        setValue(SoSFVec2f self, float x, float y)
        setValue(SoSFVec2f self, float const [2] xy)
        setValue(SoSFVec2f self, SoSFVec2f other)
        """
        return _coin.SoSFVec2f_setValue(self, *args)

SoSFVec2f_swigregister = _coin.SoSFVec2f_swigregister
SoSFVec2f_swigregister(SoSFVec2f)

def SoSFVec2f_createInstance() -> "void *":
    """SoSFVec2f_createInstance() -> void *"""
    return _coin.SoSFVec2f_createInstance()

def SoSFVec2f_getClassTypeId() -> "SoType":
    """SoSFVec2f_getClassTypeId() -> SoType"""
    return _coin.SoSFVec2f_getClassTypeId()

def SoSFVec2f_initClass() -> "void":
    """SoSFVec2f_initClass()"""
    return _coin.SoSFVec2f_initClass()

class SoTranslate2Dragger(SoDragger):
    """Proxy of C++ SoTranslate2Dragger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTranslate2Dragger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTranslate2Dragger self) -> SoType"""
        return _coin.SoTranslate2Dragger_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoTranslate2Dragger_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoTranslate2Dragger self) -> SoNodekitCatalog"""
        return _coin.SoTranslate2Dragger_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTranslate2Dragger_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTranslate2Dragger self) -> SoTranslate2Dragger"""
        this = _coin.new_SoTranslate2Dragger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTranslate2Dragger_translation_get, _coin.SoTranslate2Dragger_translation_set)
    minTranslation = _swig_property(_coin.SoTranslate2Dragger_minTranslation_get, _coin.SoTranslate2Dragger_minTranslation_set)
    maxTranslation = _swig_property(_coin.SoTranslate2Dragger_maxTranslation_get, _coin.SoTranslate2Dragger_maxTranslation_set)
SoTranslate2Dragger_swigregister = _coin.SoTranslate2Dragger_swigregister
SoTranslate2Dragger_swigregister(SoTranslate2Dragger)

def SoTranslate2Dragger_getClassTypeId() -> "SoType":
    """SoTranslate2Dragger_getClassTypeId() -> SoType"""
    return _coin.SoTranslate2Dragger_getClassTypeId()

def SoTranslate2Dragger_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoTranslate2Dragger_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoTranslate2Dragger_getClassNodekitCatalog()

def SoTranslate2Dragger_initClass() -> "void":
    """SoTranslate2Dragger_initClass()"""
    return _coin.SoTranslate2Dragger_initClass()

class SoAccumulatedElement(SoElement):
    """Proxy of C++ SoAccumulatedElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAccumulatedElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoAccumulatedElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAccumulatedElement_initClass()

    initClass = staticmethod(initClass)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoAccumulatedElement self, SoElement element) -> SbBool"""
        return _coin.SoAccumulatedElement_matches(self, element)

SoAccumulatedElement_swigregister = _coin.SoAccumulatedElement_swigregister
SoAccumulatedElement_swigregister(SoAccumulatedElement)

def SoAccumulatedElement_getClassTypeId() -> "SoType":
    """SoAccumulatedElement_getClassTypeId() -> SoType"""
    return _coin.SoAccumulatedElement_getClassTypeId()

def SoAccumulatedElement_getClassStackIndex() -> "int":
    """SoAccumulatedElement_getClassStackIndex() -> int"""
    return _coin.SoAccumulatedElement_getClassStackIndex()

def SoAccumulatedElement_initClass() -> "void":
    """SoAccumulatedElement_initClass()"""
    return _coin.SoAccumulatedElement_initClass()

class SoAmbientColorElement(SoReplacedElement):
    """Proxy of C++ SoAmbientColorElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAmbientColorElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoAmbientColorElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoAmbientColorElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAmbientColorElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoAmbientColorElement self, SoState state)"""
        return _coin.SoAmbientColorElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
        """set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
        return _coin.SoAmbientColorElement_set(state, node, numcolors, colors)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoAmbientColorElement const *":
        """getInstance(SoState state) -> SoAmbientColorElement"""
        return _coin.SoAmbientColorElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoAmbientColorElement self) -> int32_t"""
        return _coin.SoAmbientColorElement_getNum(self)


    def get(self, index: 'int const') -> "SbColor const &":
        """get(SoAmbientColorElement self, int const index) -> SbColor"""
        return _coin.SoAmbientColorElement_get(self, index)


    def getArrayPtr(self) -> "SbColor const *":
        """getArrayPtr(SoAmbientColorElement self) -> SbColor"""
        return _coin.SoAmbientColorElement_getArrayPtr(self)

SoAmbientColorElement_swigregister = _coin.SoAmbientColorElement_swigregister
SoAmbientColorElement_swigregister(SoAmbientColorElement)

def SoAmbientColorElement_getClassTypeId() -> "SoType":
    """SoAmbientColorElement_getClassTypeId() -> SoType"""
    return _coin.SoAmbientColorElement_getClassTypeId()

def SoAmbientColorElement_getClassStackIndex() -> "int":
    """SoAmbientColorElement_getClassStackIndex() -> int"""
    return _coin.SoAmbientColorElement_getClassStackIndex()

def SoAmbientColorElement_createInstance() -> "void *":
    """SoAmbientColorElement_createInstance() -> void *"""
    return _coin.SoAmbientColorElement_createInstance()

def SoAmbientColorElement_initClass() -> "void":
    """SoAmbientColorElement_initClass()"""
    return _coin.SoAmbientColorElement_initClass()

def SoAmbientColorElement_set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
    """SoAmbientColorElement_set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
    return _coin.SoAmbientColorElement_set(state, node, numcolors, colors)

def SoAmbientColorElement_getInstance(state: 'SoState') -> "SoAmbientColorElement const *":
    """SoAmbientColorElement_getInstance(SoState state) -> SoAmbientColorElement"""
    return _coin.SoAmbientColorElement_getInstance(state)

class SoAnnoText3CharOrientElement(SoInt32Element):
    """Proxy of C++ SoAnnoText3CharOrientElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAnnoText3CharOrientElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoAnnoText3CharOrientElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoAnnoText3CharOrientElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAnnoText3CharOrientElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoAnnoText3CharOrientElement self, SoState state)"""
        return _coin.SoAnnoText3CharOrientElement_init(self, state)


    def set(state: 'SoState', isOriented: 'SbBool') -> "void":
        """set(SoState state, SbBool isOriented)"""
        return _coin.SoAnnoText3CharOrientElement_set(state, isOriented)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbBool":
        """get(SoState state) -> SbBool"""
        return _coin.SoAnnoText3CharOrientElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SbBool":
        """getDefault() -> SbBool"""
        return _coin.SoAnnoText3CharOrientElement_getDefault()

    getDefault = staticmethod(getDefault)
SoAnnoText3CharOrientElement_swigregister = _coin.SoAnnoText3CharOrientElement_swigregister
SoAnnoText3CharOrientElement_swigregister(SoAnnoText3CharOrientElement)

def SoAnnoText3CharOrientElement_getClassTypeId() -> "SoType":
    """SoAnnoText3CharOrientElement_getClassTypeId() -> SoType"""
    return _coin.SoAnnoText3CharOrientElement_getClassTypeId()

def SoAnnoText3CharOrientElement_getClassStackIndex() -> "int":
    """SoAnnoText3CharOrientElement_getClassStackIndex() -> int"""
    return _coin.SoAnnoText3CharOrientElement_getClassStackIndex()

def SoAnnoText3CharOrientElement_createInstance() -> "void *":
    """SoAnnoText3CharOrientElement_createInstance() -> void *"""
    return _coin.SoAnnoText3CharOrientElement_createInstance()

def SoAnnoText3CharOrientElement_initClass() -> "void":
    """SoAnnoText3CharOrientElement_initClass()"""
    return _coin.SoAnnoText3CharOrientElement_initClass()

def SoAnnoText3CharOrientElement_set(state: 'SoState', isOriented: 'SbBool') -> "void":
    """SoAnnoText3CharOrientElement_set(SoState state, SbBool isOriented)"""
    return _coin.SoAnnoText3CharOrientElement_set(state, isOriented)

def SoAnnoText3CharOrientElement_get(state: 'SoState') -> "SbBool":
    """SoAnnoText3CharOrientElement_get(SoState state) -> SbBool"""
    return _coin.SoAnnoText3CharOrientElement_get(state)

def SoAnnoText3CharOrientElement_getDefault() -> "SbBool":
    """SoAnnoText3CharOrientElement_getDefault() -> SbBool"""
    return _coin.SoAnnoText3CharOrientElement_getDefault()

class SoAnnoText3FontSizeHintElement(SoInt32Element):
    """Proxy of C++ SoAnnoText3FontSizeHintElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAnnoText3FontSizeHintElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoAnnoText3FontSizeHintElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoAnnoText3FontSizeHintElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAnnoText3FontSizeHintElement_initClass()

    initClass = staticmethod(initClass)
    ANNOTATION = _coin.SoAnnoText3FontSizeHintElement_ANNOTATION
    FIT_TEXT_VECTOR = _coin.SoAnnoText3FontSizeHintElement_FIT_TEXT_VECTOR

    def init(self, state: 'SoState') -> "void":
        """init(SoAnnoText3FontSizeHintElement self, SoState state)"""
        return _coin.SoAnnoText3FontSizeHintElement_init(self, state)


    def get(state: 'SoState') -> "SoAnnoText3FontSizeHintElement::FontSizeHint":
        """get(SoState state) -> SoAnnoText3FontSizeHintElement::FontSizeHint"""
        return _coin.SoAnnoText3FontSizeHintElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoAnnoText3FontSizeHintElement::FontSizeHint":
        """getDefault() -> SoAnnoText3FontSizeHintElement::FontSizeHint"""
        return _coin.SoAnnoText3FontSizeHintElement_getDefault()

    getDefault = staticmethod(getDefault)

    def set(*args) -> "void":
        """
        set(SoState state, SoAnnoText3FontSizeHintElement::FontSizeHint const hint)
        set(SoState state, SoNode node, SoAnnoText3FontSizeHintElement::FontSizeHint const hint)
        """
        return _coin.SoAnnoText3FontSizeHintElement_set(*args)

    set = staticmethod(set)
SoAnnoText3FontSizeHintElement_swigregister = _coin.SoAnnoText3FontSizeHintElement_swigregister
SoAnnoText3FontSizeHintElement_swigregister(SoAnnoText3FontSizeHintElement)

def SoAnnoText3FontSizeHintElement_getClassTypeId() -> "SoType":
    """SoAnnoText3FontSizeHintElement_getClassTypeId() -> SoType"""
    return _coin.SoAnnoText3FontSizeHintElement_getClassTypeId()

def SoAnnoText3FontSizeHintElement_getClassStackIndex() -> "int":
    """SoAnnoText3FontSizeHintElement_getClassStackIndex() -> int"""
    return _coin.SoAnnoText3FontSizeHintElement_getClassStackIndex()

def SoAnnoText3FontSizeHintElement_createInstance() -> "void *":
    """SoAnnoText3FontSizeHintElement_createInstance() -> void *"""
    return _coin.SoAnnoText3FontSizeHintElement_createInstance()

def SoAnnoText3FontSizeHintElement_initClass() -> "void":
    """SoAnnoText3FontSizeHintElement_initClass()"""
    return _coin.SoAnnoText3FontSizeHintElement_initClass()

def SoAnnoText3FontSizeHintElement_get(state: 'SoState') -> "SoAnnoText3FontSizeHintElement::FontSizeHint":
    """SoAnnoText3FontSizeHintElement_get(SoState state) -> SoAnnoText3FontSizeHintElement::FontSizeHint"""
    return _coin.SoAnnoText3FontSizeHintElement_get(state)

def SoAnnoText3FontSizeHintElement_getDefault() -> "SoAnnoText3FontSizeHintElement::FontSizeHint":
    """SoAnnoText3FontSizeHintElement_getDefault() -> SoAnnoText3FontSizeHintElement::FontSizeHint"""
    return _coin.SoAnnoText3FontSizeHintElement_getDefault()

def SoAnnoText3FontSizeHintElement_set(*args) -> "void":
    """
    set(SoState state, SoAnnoText3FontSizeHintElement::FontSizeHint const hint)
    SoAnnoText3FontSizeHintElement_set(SoState state, SoNode node, SoAnnoText3FontSizeHintElement::FontSizeHint const hint)
    """
    return _coin.SoAnnoText3FontSizeHintElement_set(*args)

class SoAnnoText3RenderPrintElement(SoInt32Element):
    """Proxy of C++ SoAnnoText3RenderPrintElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAnnoText3RenderPrintElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoAnnoText3RenderPrintElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoAnnoText3RenderPrintElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAnnoText3RenderPrintElement_initClass()

    initClass = staticmethod(initClass)
    RENDER3D_PRINT_VECTOR = _coin.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_VECTOR
    RENDER3D_PRINT_RASTER = _coin.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_RASTER
    RENDER2D_PRINT_RASTER = _coin.SoAnnoText3RenderPrintElement_RENDER2D_PRINT_RASTER

    def init(self, state: 'SoState') -> "void":
        """init(SoAnnoText3RenderPrintElement self, SoState state)"""
        return _coin.SoAnnoText3RenderPrintElement_init(self, state)


    def get(state: 'SoState') -> "SoAnnoText3RenderPrintElement::RenderPrintType":
        """get(SoState state) -> SoAnnoText3RenderPrintElement::RenderPrintType"""
        return _coin.SoAnnoText3RenderPrintElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoAnnoText3RenderPrintElement::RenderPrintType":
        """getDefault() -> SoAnnoText3RenderPrintElement::RenderPrintType"""
        return _coin.SoAnnoText3RenderPrintElement_getDefault()

    getDefault = staticmethod(getDefault)

    def set(*args) -> "void":
        """
        set(SoState state, SoAnnoText3RenderPrintElement::RenderPrintType const hint)
        set(SoState state, SoNode node, SoAnnoText3RenderPrintElement::RenderPrintType const type)
        """
        return _coin.SoAnnoText3RenderPrintElement_set(*args)

    set = staticmethod(set)
SoAnnoText3RenderPrintElement_swigregister = _coin.SoAnnoText3RenderPrintElement_swigregister
SoAnnoText3RenderPrintElement_swigregister(SoAnnoText3RenderPrintElement)

def SoAnnoText3RenderPrintElement_getClassTypeId() -> "SoType":
    """SoAnnoText3RenderPrintElement_getClassTypeId() -> SoType"""
    return _coin.SoAnnoText3RenderPrintElement_getClassTypeId()

def SoAnnoText3RenderPrintElement_getClassStackIndex() -> "int":
    """SoAnnoText3RenderPrintElement_getClassStackIndex() -> int"""
    return _coin.SoAnnoText3RenderPrintElement_getClassStackIndex()

def SoAnnoText3RenderPrintElement_createInstance() -> "void *":
    """SoAnnoText3RenderPrintElement_createInstance() -> void *"""
    return _coin.SoAnnoText3RenderPrintElement_createInstance()

def SoAnnoText3RenderPrintElement_initClass() -> "void":
    """SoAnnoText3RenderPrintElement_initClass()"""
    return _coin.SoAnnoText3RenderPrintElement_initClass()

def SoAnnoText3RenderPrintElement_get(state: 'SoState') -> "SoAnnoText3RenderPrintElement::RenderPrintType":
    """SoAnnoText3RenderPrintElement_get(SoState state) -> SoAnnoText3RenderPrintElement::RenderPrintType"""
    return _coin.SoAnnoText3RenderPrintElement_get(state)

def SoAnnoText3RenderPrintElement_getDefault() -> "SoAnnoText3RenderPrintElement::RenderPrintType":
    """SoAnnoText3RenderPrintElement_getDefault() -> SoAnnoText3RenderPrintElement::RenderPrintType"""
    return _coin.SoAnnoText3RenderPrintElement_getDefault()

def SoAnnoText3RenderPrintElement_set(*args) -> "void":
    """
    set(SoState state, SoAnnoText3RenderPrintElement::RenderPrintType const hint)
    SoAnnoText3RenderPrintElement_set(SoState state, SoNode node, SoAnnoText3RenderPrintElement::RenderPrintType const type)
    """
    return _coin.SoAnnoText3RenderPrintElement_set(*args)

class SoModelMatrixElement(SoAccumulatedElement):
    """Proxy of C++ SoModelMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoModelMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoModelMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoModelMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoModelMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoModelMatrixElement self, SoState state)"""
        return _coin.SoModelMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoModelMatrixElement self, SoState state)"""
        return _coin.SoModelMatrixElement_push(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoModelMatrixElement self, SoElement element) -> SbBool"""
        return _coin.SoModelMatrixElement_matches(self, element)


    def makeIdentity(state: 'SoState', node: 'SoNode') -> "void":
        """makeIdentity(SoState state, SoNode node)"""
        return _coin.SoModelMatrixElement_makeIdentity(state, node)

    makeIdentity = staticmethod(makeIdentity)

    def set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """set(SoState state, SoNode node)"""
        return _coin.SoModelMatrixElement_set(state, node)

    set = staticmethod(set)

    def setCullMatrix(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """setCullMatrix(SoState state, SoNode node)"""
        return _coin.SoModelMatrixElement_setCullMatrix(state, node)

    setCullMatrix = staticmethod(setCullMatrix)

    def mult(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """mult(SoState state, SoNode node)"""
        return _coin.SoModelMatrixElement_mult(state, node)

    mult = staticmethod(mult)

    def translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
        """translateBy(SoState state, SoNode node, SbVec3f translation)"""
        return _coin.SoModelMatrixElement_translateBy(state, node, translation)

    translateBy = staticmethod(translateBy)

    def rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
        """rotateBy(SoState state, SoNode node, SbRotation rotation)"""
        return _coin.SoModelMatrixElement_rotateBy(state, node, rotation)

    rotateBy = staticmethod(rotateBy)

    def scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
        """scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
        return _coin.SoModelMatrixElement_scaleBy(state, node, scaleFactor)

    scaleBy = staticmethod(scaleBy)

    def pushMatrix(state: 'SoState') -> "SbMatrix":
        """pushMatrix(SoState state) -> SbMatrix"""
        return _coin.SoModelMatrixElement_pushMatrix(state)

    pushMatrix = staticmethod(pushMatrix)

    def popMatrix(state: 'SoState') -> "SbMatrix &":
        """popMatrix(SoState state)"""
        return _coin.SoModelMatrixElement_popMatrix(state)

    popMatrix = staticmethod(popMatrix)

    def getCombinedCullMatrix(state: 'SoState') -> "SbMatrix const &":
        """getCombinedCullMatrix(SoState state) -> SbMatrix"""
        return _coin.SoModelMatrixElement_getCombinedCullMatrix(state)

    getCombinedCullMatrix = staticmethod(getCombinedCullMatrix)

    def get(*args) -> "SbMatrix const &":
        """
        get(SoState state) -> SbMatrix
        get(SoState state, SbBool & isIdentity) -> SbMatrix
        """
        return _coin.SoModelMatrixElement_get(*args)

    get = staticmethod(get)

    def getModelMatrix(self) -> "SbMatrix const &":
        """getModelMatrix(SoModelMatrixElement self) -> SbMatrix"""
        return _coin.SoModelMatrixElement_getModelMatrix(self)

SoModelMatrixElement_swigregister = _coin.SoModelMatrixElement_swigregister
SoModelMatrixElement_swigregister(SoModelMatrixElement)

def SoModelMatrixElement_getClassTypeId() -> "SoType":
    """SoModelMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoModelMatrixElement_getClassTypeId()

def SoModelMatrixElement_getClassStackIndex() -> "int":
    """SoModelMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoModelMatrixElement_getClassStackIndex()

def SoModelMatrixElement_createInstance() -> "void *":
    """SoModelMatrixElement_createInstance() -> void *"""
    return _coin.SoModelMatrixElement_createInstance()

def SoModelMatrixElement_initClass() -> "void":
    """SoModelMatrixElement_initClass()"""
    return _coin.SoModelMatrixElement_initClass()

def SoModelMatrixElement_makeIdentity(state: 'SoState', node: 'SoNode') -> "void":
    """SoModelMatrixElement_makeIdentity(SoState state, SoNode node)"""
    return _coin.SoModelMatrixElement_makeIdentity(state, node)

def SoModelMatrixElement_set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoModelMatrixElement_set(SoState state, SoNode node)"""
    return _coin.SoModelMatrixElement_set(state, node)

def SoModelMatrixElement_setCullMatrix(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoModelMatrixElement_setCullMatrix(SoState state, SoNode node)"""
    return _coin.SoModelMatrixElement_setCullMatrix(state, node)

def SoModelMatrixElement_mult(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoModelMatrixElement_mult(SoState state, SoNode node)"""
    return _coin.SoModelMatrixElement_mult(state, node)

def SoModelMatrixElement_translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
    """SoModelMatrixElement_translateBy(SoState state, SoNode node, SbVec3f translation)"""
    return _coin.SoModelMatrixElement_translateBy(state, node, translation)

def SoModelMatrixElement_rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
    """SoModelMatrixElement_rotateBy(SoState state, SoNode node, SbRotation rotation)"""
    return _coin.SoModelMatrixElement_rotateBy(state, node, rotation)

def SoModelMatrixElement_scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
    """SoModelMatrixElement_scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
    return _coin.SoModelMatrixElement_scaleBy(state, node, scaleFactor)

def SoModelMatrixElement_pushMatrix(state: 'SoState') -> "SbMatrix":
    """SoModelMatrixElement_pushMatrix(SoState state) -> SbMatrix"""
    return _coin.SoModelMatrixElement_pushMatrix(state)

def SoModelMatrixElement_popMatrix(state: 'SoState') -> "SbMatrix &":
    """SoModelMatrixElement_popMatrix(SoState state)"""
    return _coin.SoModelMatrixElement_popMatrix(state)

def SoModelMatrixElement_getCombinedCullMatrix(state: 'SoState') -> "SbMatrix const &":
    """SoModelMatrixElement_getCombinedCullMatrix(SoState state) -> SbMatrix"""
    return _coin.SoModelMatrixElement_getCombinedCullMatrix(state)

def SoModelMatrixElement_get(*args) -> "SbMatrix const &":
    """
    get(SoState state) -> SbMatrix
    SoModelMatrixElement_get(SoState state, SbBool & isIdentity) -> SbMatrix
    """
    return _coin.SoModelMatrixElement_get(*args)

class SoBBoxModelMatrixElement(SoModelMatrixElement):
    """Proxy of C++ SoBBoxModelMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBBoxModelMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoBBoxModelMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoBBoxModelMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBBoxModelMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoBBoxModelMatrixElement self, SoState state)"""
        return _coin.SoBBoxModelMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoBBoxModelMatrixElement self, SoState state)"""
        return _coin.SoBBoxModelMatrixElement_push(self, state)


    def reset(state: 'SoState', node: 'SoNode') -> "void":
        """reset(SoState state, SoNode node)"""
        return _coin.SoBBoxModelMatrixElement_reset(state, node)

    reset = staticmethod(reset)

    def pushMatrix(state: 'SoState', localmatrix: 'SbMatrix') -> "SbMatrix &":
        """pushMatrix(SoState state, SbMatrix localmatrix)"""
        return _coin.SoBBoxModelMatrixElement_pushMatrix(state, localmatrix)

    pushMatrix = staticmethod(pushMatrix)

    def popMatrix(state: 'SoState', localmatrix: 'SbMatrix') -> "SbMatrix &":
        """popMatrix(SoState state, SbMatrix localmatrix)"""
        return _coin.SoBBoxModelMatrixElement_popMatrix(state, localmatrix)

    popMatrix = staticmethod(popMatrix)
SoBBoxModelMatrixElement_swigregister = _coin.SoBBoxModelMatrixElement_swigregister
SoBBoxModelMatrixElement_swigregister(SoBBoxModelMatrixElement)

def SoBBoxModelMatrixElement_getClassTypeId() -> "SoType":
    """SoBBoxModelMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoBBoxModelMatrixElement_getClassTypeId()

def SoBBoxModelMatrixElement_getClassStackIndex() -> "int":
    """SoBBoxModelMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoBBoxModelMatrixElement_getClassStackIndex()

def SoBBoxModelMatrixElement_createInstance() -> "void *":
    """SoBBoxModelMatrixElement_createInstance() -> void *"""
    return _coin.SoBBoxModelMatrixElement_createInstance()

def SoBBoxModelMatrixElement_initClass() -> "void":
    """SoBBoxModelMatrixElement_initClass()"""
    return _coin.SoBBoxModelMatrixElement_initClass()

def SoBBoxModelMatrixElement_reset(state: 'SoState', node: 'SoNode') -> "void":
    """SoBBoxModelMatrixElement_reset(SoState state, SoNode node)"""
    return _coin.SoBBoxModelMatrixElement_reset(state, node)

def SoBBoxModelMatrixElement_pushMatrix(state: 'SoState', localmatrix: 'SbMatrix') -> "SbMatrix &":
    """SoBBoxModelMatrixElement_pushMatrix(SoState state, SbMatrix localmatrix)"""
    return _coin.SoBBoxModelMatrixElement_pushMatrix(state, localmatrix)

def SoBBoxModelMatrixElement_popMatrix(state: 'SoState', localmatrix: 'SbMatrix') -> "SbMatrix &":
    """SoBBoxModelMatrixElement_popMatrix(SoState state, SbMatrix localmatrix)"""
    return _coin.SoBBoxModelMatrixElement_popMatrix(state, localmatrix)

class SoBumpMapCoordinateElement(SoReplacedElement):
    """Proxy of C++ SoBumpMapCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMapCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoBumpMapCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoBumpMapCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMapCoordinateElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoBumpMapCoordinateElement self, SoState state)"""
        return _coin.SoBumpMapCoordinateElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numcoords: 'int32_t const', coords: 'SbVec2f') -> "void":
        """set(SoState state, SoNode node, int32_t const numcoords, SbVec2f coords)"""
        return _coin.SoBumpMapCoordinateElement_set(state, node, numcoords, coords)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoBumpMapCoordinateElement const *":
        """getInstance(SoState state) -> SoBumpMapCoordinateElement"""
        return _coin.SoBumpMapCoordinateElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoBumpMapCoordinateElement self) -> int32_t"""
        return _coin.SoBumpMapCoordinateElement_getNum(self)


    def get(self, index: 'int const') -> "SbVec2f const &":
        """get(SoBumpMapCoordinateElement self, int const index) -> SbVec2f"""
        return _coin.SoBumpMapCoordinateElement_get(self, index)


    def getArrayPtr(self) -> "SbVec2f const *":
        """getArrayPtr(SoBumpMapCoordinateElement self) -> SbVec2f"""
        return _coin.SoBumpMapCoordinateElement_getArrayPtr(self)

SoBumpMapCoordinateElement_swigregister = _coin.SoBumpMapCoordinateElement_swigregister
SoBumpMapCoordinateElement_swigregister(SoBumpMapCoordinateElement)

def SoBumpMapCoordinateElement_getClassTypeId() -> "SoType":
    """SoBumpMapCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoBumpMapCoordinateElement_getClassTypeId()

def SoBumpMapCoordinateElement_getClassStackIndex() -> "int":
    """SoBumpMapCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoBumpMapCoordinateElement_getClassStackIndex()

def SoBumpMapCoordinateElement_createInstance() -> "void *":
    """SoBumpMapCoordinateElement_createInstance() -> void *"""
    return _coin.SoBumpMapCoordinateElement_createInstance()

def SoBumpMapCoordinateElement_initClass() -> "void":
    """SoBumpMapCoordinateElement_initClass()"""
    return _coin.SoBumpMapCoordinateElement_initClass()

def SoBumpMapCoordinateElement_set(state: 'SoState', node: 'SoNode', numcoords: 'int32_t const', coords: 'SbVec2f') -> "void":
    """SoBumpMapCoordinateElement_set(SoState state, SoNode node, int32_t const numcoords, SbVec2f coords)"""
    return _coin.SoBumpMapCoordinateElement_set(state, node, numcoords, coords)

def SoBumpMapCoordinateElement_getInstance(state: 'SoState') -> "SoBumpMapCoordinateElement const *":
    """SoBumpMapCoordinateElement_getInstance(SoState state) -> SoBumpMapCoordinateElement"""
    return _coin.SoBumpMapCoordinateElement_getInstance(state)

class SoBumpMapElement(SoReplacedElement):
    """Proxy of C++ SoBumpMapElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMapElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoBumpMapElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoBumpMapElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMapElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoBumpMapElement self, SoState state)"""
        return _coin.SoBumpMapElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', image: 'SoGLImage') -> "void":
        """set(SoState state, SoNode node, SoGLImage image)"""
        return _coin.SoBumpMapElement_set(state, node, image)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoGLImage *":
        """get(SoState state) -> SoGLImage"""
        return _coin.SoBumpMapElement_get(state)

    get = staticmethod(get)
SoBumpMapElement_swigregister = _coin.SoBumpMapElement_swigregister
SoBumpMapElement_swigregister(SoBumpMapElement)

def SoBumpMapElement_getClassTypeId() -> "SoType":
    """SoBumpMapElement_getClassTypeId() -> SoType"""
    return _coin.SoBumpMapElement_getClassTypeId()

def SoBumpMapElement_getClassStackIndex() -> "int":
    """SoBumpMapElement_getClassStackIndex() -> int"""
    return _coin.SoBumpMapElement_getClassStackIndex()

def SoBumpMapElement_createInstance() -> "void *":
    """SoBumpMapElement_createInstance() -> void *"""
    return _coin.SoBumpMapElement_createInstance()

def SoBumpMapElement_initClass() -> "void":
    """SoBumpMapElement_initClass()"""
    return _coin.SoBumpMapElement_initClass()

def SoBumpMapElement_set(state: 'SoState', node: 'SoNode', image: 'SoGLImage') -> "void":
    """SoBumpMapElement_set(SoState state, SoNode node, SoGLImage image)"""
    return _coin.SoBumpMapElement_set(state, node, image)

def SoBumpMapElement_get(state: 'SoState') -> "SoGLImage *":
    """SoBumpMapElement_get(SoState state) -> SoGLImage"""
    return _coin.SoBumpMapElement_get(state)

class SoBumpMapMatrixElement(SoAccumulatedElement):
    """Proxy of C++ SoBumpMapMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMapMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoBumpMapMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoBumpMapMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMapMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoBumpMapMatrixElement self, SoState state)"""
        return _coin.SoBumpMapMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoBumpMapMatrixElement self, SoState state)"""
        return _coin.SoBumpMapMatrixElement_push(self, state)


    def makeIdentity(state: 'SoState', node: 'SoNode') -> "void":
        """makeIdentity(SoState state, SoNode node)"""
        return _coin.SoBumpMapMatrixElement_makeIdentity(state, node)

    makeIdentity = staticmethod(makeIdentity)

    def set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """set(SoState state, SoNode node)"""
        return _coin.SoBumpMapMatrixElement_set(state, node)

    set = staticmethod(set)

    def mult(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """mult(SoState state, SoNode node)"""
        return _coin.SoBumpMapMatrixElement_mult(state, node)

    mult = staticmethod(mult)

    def translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
        """translateBy(SoState state, SoNode node, SbVec3f translation)"""
        return _coin.SoBumpMapMatrixElement_translateBy(state, node, translation)

    translateBy = staticmethod(translateBy)

    def rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
        """rotateBy(SoState state, SoNode node, SbRotation rotation)"""
        return _coin.SoBumpMapMatrixElement_rotateBy(state, node, rotation)

    rotateBy = staticmethod(rotateBy)

    def scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
        """scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
        return _coin.SoBumpMapMatrixElement_scaleBy(state, node, scaleFactor)

    scaleBy = staticmethod(scaleBy)

    def get(state: 'SoState') -> "SbMatrix const &":
        """get(SoState state) -> SbMatrix"""
        return _coin.SoBumpMapMatrixElement_get(state)

    get = staticmethod(get)
SoBumpMapMatrixElement_swigregister = _coin.SoBumpMapMatrixElement_swigregister
SoBumpMapMatrixElement_swigregister(SoBumpMapMatrixElement)

def SoBumpMapMatrixElement_getClassTypeId() -> "SoType":
    """SoBumpMapMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoBumpMapMatrixElement_getClassTypeId()

def SoBumpMapMatrixElement_getClassStackIndex() -> "int":
    """SoBumpMapMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoBumpMapMatrixElement_getClassStackIndex()

def SoBumpMapMatrixElement_createInstance() -> "void *":
    """SoBumpMapMatrixElement_createInstance() -> void *"""
    return _coin.SoBumpMapMatrixElement_createInstance()

def SoBumpMapMatrixElement_initClass() -> "void":
    """SoBumpMapMatrixElement_initClass()"""
    return _coin.SoBumpMapMatrixElement_initClass()

def SoBumpMapMatrixElement_makeIdentity(state: 'SoState', node: 'SoNode') -> "void":
    """SoBumpMapMatrixElement_makeIdentity(SoState state, SoNode node)"""
    return _coin.SoBumpMapMatrixElement_makeIdentity(state, node)

def SoBumpMapMatrixElement_set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoBumpMapMatrixElement_set(SoState state, SoNode node)"""
    return _coin.SoBumpMapMatrixElement_set(state, node)

def SoBumpMapMatrixElement_mult(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoBumpMapMatrixElement_mult(SoState state, SoNode node)"""
    return _coin.SoBumpMapMatrixElement_mult(state, node)

def SoBumpMapMatrixElement_translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
    """SoBumpMapMatrixElement_translateBy(SoState state, SoNode node, SbVec3f translation)"""
    return _coin.SoBumpMapMatrixElement_translateBy(state, node, translation)

def SoBumpMapMatrixElement_rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
    """SoBumpMapMatrixElement_rotateBy(SoState state, SoNode node, SbRotation rotation)"""
    return _coin.SoBumpMapMatrixElement_rotateBy(state, node, rotation)

def SoBumpMapMatrixElement_scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
    """SoBumpMapMatrixElement_scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
    return _coin.SoBumpMapMatrixElement_scaleBy(state, node, scaleFactor)

def SoBumpMapMatrixElement_get(state: 'SoState') -> "SbMatrix const &":
    """SoBumpMapMatrixElement_get(SoState state) -> SbMatrix"""
    return _coin.SoBumpMapMatrixElement_get(state)

class SoCacheElement(SoElement):
    """Proxy of C++ SoCacheElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCacheElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoCacheElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCacheElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCacheElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoCacheElement self, SoState state)"""
        return _coin.SoCacheElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoCacheElement self, SoState state)"""
        return _coin.SoCacheElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoCacheElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoCacheElement_pop(self, state, prevTopElement)


    def set(state: 'SoState', cache: 'SoCache') -> "void":
        """set(SoState state, SoCache cache)"""
        return _coin.SoCacheElement_set(state, cache)

    set = staticmethod(set)

    def getCache(self) -> "SoCache *":
        """getCache(SoCacheElement self) -> SoCache"""
        return _coin.SoCacheElement_getCache(self)


    def anyOpen(state: 'SoState') -> "SbBool":
        """anyOpen(SoState state) -> SbBool"""
        return _coin.SoCacheElement_anyOpen(state)

    anyOpen = staticmethod(anyOpen)

    def invalidate(state: 'SoState') -> "void":
        """invalidate(SoState state)"""
        return _coin.SoCacheElement_invalidate(state)

    invalidate = staticmethod(invalidate)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoCacheElement self, SoElement element) -> SbBool"""
        return _coin.SoCacheElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoCacheElement self) -> SoElement"""
        return _coin.SoCacheElement_copyMatchInfo(self)


    def getNextCacheElement(self) -> "SoCacheElement *":
        """getNextCacheElement(SoCacheElement self) -> SoCacheElement"""
        return _coin.SoCacheElement_getNextCacheElement(self)


    def addElement(state: 'SoState', element: 'SoElement') -> "void":
        """addElement(SoState state, SoElement element)"""
        return _coin.SoCacheElement_addElement(state, element)

    addElement = staticmethod(addElement)

    def addCacheDependency(state: 'SoState', cache: 'SoCache') -> "void":
        """addCacheDependency(SoState state, SoCache cache)"""
        return _coin.SoCacheElement_addCacheDependency(state, cache)

    addCacheDependency = staticmethod(addCacheDependency)

    def setInvalid(newvalue: 'SbBool const') -> "SbBool":
        """setInvalid(SbBool const newvalue) -> SbBool"""
        return _coin.SoCacheElement_setInvalid(newvalue)

    setInvalid = staticmethod(setInvalid)

    def getCurrentCache(state: 'SoState') -> "SoCache *":
        """getCurrentCache(SoState state) -> SoCache"""
        return _coin.SoCacheElement_getCurrentCache(state)

    getCurrentCache = staticmethod(getCurrentCache)
SoCacheElement_swigregister = _coin.SoCacheElement_swigregister
SoCacheElement_swigregister(SoCacheElement)

def SoCacheElement_getClassTypeId() -> "SoType":
    """SoCacheElement_getClassTypeId() -> SoType"""
    return _coin.SoCacheElement_getClassTypeId()

def SoCacheElement_getClassStackIndex() -> "int":
    """SoCacheElement_getClassStackIndex() -> int"""
    return _coin.SoCacheElement_getClassStackIndex()

def SoCacheElement_createInstance() -> "void *":
    """SoCacheElement_createInstance() -> void *"""
    return _coin.SoCacheElement_createInstance()

def SoCacheElement_initClass() -> "void":
    """SoCacheElement_initClass()"""
    return _coin.SoCacheElement_initClass()

def SoCacheElement_set(state: 'SoState', cache: 'SoCache') -> "void":
    """SoCacheElement_set(SoState state, SoCache cache)"""
    return _coin.SoCacheElement_set(state, cache)

def SoCacheElement_anyOpen(state: 'SoState') -> "SbBool":
    """SoCacheElement_anyOpen(SoState state) -> SbBool"""
    return _coin.SoCacheElement_anyOpen(state)

def SoCacheElement_invalidate(state: 'SoState') -> "void":
    """SoCacheElement_invalidate(SoState state)"""
    return _coin.SoCacheElement_invalidate(state)

def SoCacheElement_addElement(state: 'SoState', element: 'SoElement') -> "void":
    """SoCacheElement_addElement(SoState state, SoElement element)"""
    return _coin.SoCacheElement_addElement(state, element)

def SoCacheElement_addCacheDependency(state: 'SoState', cache: 'SoCache') -> "void":
    """SoCacheElement_addCacheDependency(SoState state, SoCache cache)"""
    return _coin.SoCacheElement_addCacheDependency(state, cache)

def SoCacheElement_setInvalid(newvalue: 'SbBool const') -> "SbBool":
    """SoCacheElement_setInvalid(SbBool const newvalue) -> SbBool"""
    return _coin.SoCacheElement_setInvalid(newvalue)

def SoCacheElement_getCurrentCache(state: 'SoState') -> "SoCache *":
    """SoCacheElement_getCurrentCache(SoState state) -> SoCache"""
    return _coin.SoCacheElement_getCurrentCache(state)

class SbPlane(object):
    """Proxy of C++ SbPlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbPlane self) -> SbPlane
        __init__(SbPlane self, SbVec3f normal, float const D) -> SbPlane
        __init__(SbPlane self, SbVec3f p0, SbVec3f p1, SbVec3f p2) -> SbPlane
        __init__(SbPlane self, SbVec3f normal, SbVec3f point) -> SbPlane
        """
        this = _coin.new_SbPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def offset(self, d: 'float const') -> "void":
        """offset(SbPlane self, float const d)"""
        return _coin.SbPlane_offset(self, d)


    def transform(self) -> "void":
        """transform(SbPlane self)"""
        return _coin.SbPlane_transform(self)


    def isInHalfSpace(self, point: 'SbVec3f') -> "SbBool":
        """isInHalfSpace(SbPlane self, SbVec3f point) -> SbBool"""
        return _coin.SbPlane_isInHalfSpace(self, point)


    def getDistance(self, point: 'SbVec3f') -> "float":
        """getDistance(SbPlane self, SbVec3f point) -> float"""
        return _coin.SbPlane_getDistance(self, point)


    def getNormal(self) -> "SbVec3f const &":
        """getNormal(SbPlane self) -> SbVec3f"""
        return _coin.SbPlane_getNormal(self)


    def getDistanceFromOrigin(self) -> "float":
        """getDistanceFromOrigin(SbPlane self) -> float"""
        return _coin.SbPlane_getDistanceFromOrigin(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbPlane self, FILE * file)"""
        return _coin.SbPlane_output(self, file)


    def __eq__(self, u: 'SbPlane') -> "int":
        """__eq__(SbPlane self, SbPlane u) -> int"""
        return _coin.SbPlane___eq__(self, u)


    def __ne__(self, u: 'SbPlane') -> "int":
        """__ne__(SbPlane self, SbPlane u) -> int"""
        return _coin.SbPlane___ne__(self, u)


    def intersect(self, *args) -> "PyObject *":
        """
        intersect(SbPlane) -> SbLine
        intersect(SbPlane) -> SbLine
        """
        return _coin.SbPlane_intersect(self, *args)

    __swig_destroy__ = _coin.delete_SbPlane
    __del__ = lambda self: None
SbPlane_swigregister = _coin.SbPlane_swigregister
SbPlane_swigregister(SbPlane)

class SoClipPlaneElement(SoAccumulatedElement):
    """Proxy of C++ SoClipPlaneElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoClipPlaneElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoClipPlaneElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoClipPlaneElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoClipPlaneElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoClipPlaneElement self, SoState state)"""
        return _coin.SoClipPlaneElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoClipPlaneElement self, SoState state)"""
        return _coin.SoClipPlaneElement_push(self, state)


    def add(state: 'SoState', node: 'SoNode', plane: 'SbPlane') -> "void":
        """add(SoState state, SoNode node, SbPlane plane)"""
        return _coin.SoClipPlaneElement_add(state, node, plane)

    add = staticmethod(add)

    def getInstance(state: 'SoState') -> "SoClipPlaneElement const *":
        """getInstance(SoState state) -> SoClipPlaneElement"""
        return _coin.SoClipPlaneElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int":
        """getNum(SoClipPlaneElement self) -> int"""
        return _coin.SoClipPlaneElement_getNum(self)


    def get(self, index: 'int const', inworldspace: 'SbBool const'=1) -> "SbPlane const &":
        """
        get(SoClipPlaneElement self, int const index, SbBool const inworldspace=1) -> SbPlane
        get(SoClipPlaneElement self, int const index) -> SbPlane
        """
        return _coin.SoClipPlaneElement_get(self, index, inworldspace)

SoClipPlaneElement_swigregister = _coin.SoClipPlaneElement_swigregister
SoClipPlaneElement_swigregister(SoClipPlaneElement)

def SoClipPlaneElement_getClassTypeId() -> "SoType":
    """SoClipPlaneElement_getClassTypeId() -> SoType"""
    return _coin.SoClipPlaneElement_getClassTypeId()

def SoClipPlaneElement_getClassStackIndex() -> "int":
    """SoClipPlaneElement_getClassStackIndex() -> int"""
    return _coin.SoClipPlaneElement_getClassStackIndex()

def SoClipPlaneElement_createInstance() -> "void *":
    """SoClipPlaneElement_createInstance() -> void *"""
    return _coin.SoClipPlaneElement_createInstance()

def SoClipPlaneElement_initClass() -> "void":
    """SoClipPlaneElement_initClass()"""
    return _coin.SoClipPlaneElement_initClass()

def SoClipPlaneElement_add(state: 'SoState', node: 'SoNode', plane: 'SbPlane') -> "void":
    """SoClipPlaneElement_add(SoState state, SoNode node, SbPlane plane)"""
    return _coin.SoClipPlaneElement_add(state, node, plane)

def SoClipPlaneElement_getInstance(state: 'SoState') -> "SoClipPlaneElement const *":
    """SoClipPlaneElement_getInstance(SoState state) -> SoClipPlaneElement"""
    return _coin.SoClipPlaneElement_getInstance(state)

class SoFloatElement(SoElement):
    """Proxy of C++ SoFloatElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFloatElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoFloatElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFloatElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoFloatElement self, SoState state)"""
        return _coin.SoFloatElement_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoFloatElement self, SoElement element) -> SbBool"""
        return _coin.SoFloatElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoFloatElement self) -> SoElement"""
        return _coin.SoFloatElement_copyMatchInfo(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SoFloatElement self, FILE * file)"""
        return _coin.SoFloatElement_output(self, file)


    def set(*args) -> "void":
        """
        set(int const stackIndex, SoState state, SoNode node, float const value)
        set(int const stackIndex, SoState state, float const value)
        """
        return _coin.SoFloatElement_set(*args)

    set = staticmethod(set)

    def get(stackIndex: 'int const', state: 'SoState') -> "float":
        """get(int const stackIndex, SoState state) -> float"""
        return _coin.SoFloatElement_get(stackIndex, state)

    get = staticmethod(get)

    def setElt(self, value: 'float') -> "void":
        """setElt(SoFloatElement self, float value)"""
        return _coin.SoFloatElement_setElt(self, value)

SoFloatElement_swigregister = _coin.SoFloatElement_swigregister
SoFloatElement_swigregister(SoFloatElement)

def SoFloatElement_getClassTypeId() -> "SoType":
    """SoFloatElement_getClassTypeId() -> SoType"""
    return _coin.SoFloatElement_getClassTypeId()

def SoFloatElement_getClassStackIndex() -> "int":
    """SoFloatElement_getClassStackIndex() -> int"""
    return _coin.SoFloatElement_getClassStackIndex()

def SoFloatElement_initClass() -> "void":
    """SoFloatElement_initClass()"""
    return _coin.SoFloatElement_initClass()

def SoFloatElement_set(*args) -> "void":
    """
    set(int const stackIndex, SoState state, SoNode node, float const value)
    SoFloatElement_set(int const stackIndex, SoState state, float const value)
    """
    return _coin.SoFloatElement_set(*args)

def SoFloatElement_get(stackIndex: 'int const', state: 'SoState') -> "float":
    """SoFloatElement_get(int const stackIndex, SoState state) -> float"""
    return _coin.SoFloatElement_get(stackIndex, state)

class SoComplexityElement(SoFloatElement):
    """Proxy of C++ SoComplexityElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComplexityElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoComplexityElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComplexityElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComplexityElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoComplexityElement self, SoState state)"""
        return _coin.SoComplexityElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const complexity)
        set(SoState state, float const complexity)
        """
        return _coin.SoComplexityElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoComplexityElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoComplexityElement_getDefault()

    getDefault = staticmethod(getDefault)
SoComplexityElement_swigregister = _coin.SoComplexityElement_swigregister
SoComplexityElement_swigregister(SoComplexityElement)

def SoComplexityElement_getClassTypeId() -> "SoType":
    """SoComplexityElement_getClassTypeId() -> SoType"""
    return _coin.SoComplexityElement_getClassTypeId()

def SoComplexityElement_getClassStackIndex() -> "int":
    """SoComplexityElement_getClassStackIndex() -> int"""
    return _coin.SoComplexityElement_getClassStackIndex()

def SoComplexityElement_createInstance() -> "void *":
    """SoComplexityElement_createInstance() -> void *"""
    return _coin.SoComplexityElement_createInstance()

def SoComplexityElement_initClass() -> "void":
    """SoComplexityElement_initClass()"""
    return _coin.SoComplexityElement_initClass()

def SoComplexityElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const complexity)
    SoComplexityElement_set(SoState state, float const complexity)
    """
    return _coin.SoComplexityElement_set(*args)

def SoComplexityElement_get(state: 'SoState') -> "float":
    """SoComplexityElement_get(SoState state) -> float"""
    return _coin.SoComplexityElement_get(state)

def SoComplexityElement_getDefault() -> "float":
    """SoComplexityElement_getDefault() -> float"""
    return _coin.SoComplexityElement_getDefault()

class SoCoordinateElement(SoReplacedElement):
    """Proxy of C++ SoCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCoordinateElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoCoordinateElement self, SoState state)"""
        return _coin.SoCoordinateElement_init(self, state)


    def set3(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec3f') -> "void":
        """set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)"""
        return _coin.SoCoordinateElement_set3(state, node, numCoords, coords)

    set3 = staticmethod(set3)

    def set4(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec4f') -> "void":
        """set4(SoState state, SoNode node, int32_t const numCoords, SbVec4f coords)"""
        return _coin.SoCoordinateElement_set4(state, node, numCoords, coords)

    set4 = staticmethod(set4)

    def getInstance(state: 'SoState') -> "SoCoordinateElement const *":
        """getInstance(SoState state) -> SoCoordinateElement"""
        return _coin.SoCoordinateElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoCoordinateElement self) -> int32_t"""
        return _coin.SoCoordinateElement_getNum(self)


    def is3D(self) -> "SbBool":
        """is3D(SoCoordinateElement self) -> SbBool"""
        return _coin.SoCoordinateElement_is3D(self)


    def get3(self, index: 'int const') -> "SbVec3f const &":
        """get3(SoCoordinateElement self, int const index) -> SbVec3f"""
        return _coin.SoCoordinateElement_get3(self, index)


    def get4(self, index: 'int const') -> "SbVec4f const &":
        """get4(SoCoordinateElement self, int const index) -> SbVec4f"""
        return _coin.SoCoordinateElement_get4(self, index)


    def getArrayPtr3(self) -> "SbVec3f const *":
        """getArrayPtr3(SoCoordinateElement self) -> SbVec3f"""
        return _coin.SoCoordinateElement_getArrayPtr3(self)


    def getArrayPtr4(self) -> "SbVec4f const *":
        """getArrayPtr4(SoCoordinateElement self) -> SbVec4f"""
        return _coin.SoCoordinateElement_getArrayPtr4(self)


    def getDefault3() -> "SbVec3f":
        """getDefault3() -> SbVec3f"""
        return _coin.SoCoordinateElement_getDefault3()

    getDefault3 = staticmethod(getDefault3)

    def getDefault4() -> "SbVec4f":
        """getDefault4() -> SbVec4f"""
        return _coin.SoCoordinateElement_getDefault4()

    getDefault4 = staticmethod(getDefault4)

    def output(self, file: 'FILE *') -> "void":
        """output(SoCoordinateElement self, FILE * file)"""
        return _coin.SoCoordinateElement_output(self, file)

SoCoordinateElement_swigregister = _coin.SoCoordinateElement_swigregister
SoCoordinateElement_swigregister(SoCoordinateElement)

def SoCoordinateElement_getClassTypeId() -> "SoType":
    """SoCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoCoordinateElement_getClassTypeId()

def SoCoordinateElement_getClassStackIndex() -> "int":
    """SoCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoCoordinateElement_getClassStackIndex()

def SoCoordinateElement_createInstance() -> "void *":
    """SoCoordinateElement_createInstance() -> void *"""
    return _coin.SoCoordinateElement_createInstance()

def SoCoordinateElement_initClass() -> "void":
    """SoCoordinateElement_initClass()"""
    return _coin.SoCoordinateElement_initClass()

def SoCoordinateElement_set3(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec3f') -> "void":
    """SoCoordinateElement_set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)"""
    return _coin.SoCoordinateElement_set3(state, node, numCoords, coords)

def SoCoordinateElement_set4(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec4f') -> "void":
    """SoCoordinateElement_set4(SoState state, SoNode node, int32_t const numCoords, SbVec4f coords)"""
    return _coin.SoCoordinateElement_set4(state, node, numCoords, coords)

def SoCoordinateElement_getInstance(state: 'SoState') -> "SoCoordinateElement const *":
    """SoCoordinateElement_getInstance(SoState state) -> SoCoordinateElement"""
    return _coin.SoCoordinateElement_getInstance(state)

def SoCoordinateElement_getDefault3() -> "SbVec3f":
    """SoCoordinateElement_getDefault3() -> SbVec3f"""
    return _coin.SoCoordinateElement_getDefault3()

def SoCoordinateElement_getDefault4() -> "SbVec4f":
    """SoCoordinateElement_getDefault4() -> SbVec4f"""
    return _coin.SoCoordinateElement_getDefault4()

class SoCreaseAngleElement(SoFloatElement):
    """Proxy of C++ SoCreaseAngleElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCreaseAngleElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoCreaseAngleElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCreaseAngleElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCreaseAngleElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoCreaseAngleElement self, SoState state)"""
        return _coin.SoCreaseAngleElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const complexity)
        set(SoState state, float const complexity)
        """
        return _coin.SoCreaseAngleElement_set(*args)

    set = staticmethod(set)

    def get(*args) -> "float":
        """
        get(SoState state) -> float
        get(SoState state, SbBool const isvrml1) -> float
        """
        return _coin.SoCreaseAngleElement_get(*args)

    get = staticmethod(get)

    def getDefault(*args) -> "float":
        """
        getDefault() -> float
        getDefault(SbBool const isvrml1) -> float
        """
        return _coin.SoCreaseAngleElement_getDefault(*args)

    getDefault = staticmethod(getDefault)
SoCreaseAngleElement_swigregister = _coin.SoCreaseAngleElement_swigregister
SoCreaseAngleElement_swigregister(SoCreaseAngleElement)

def SoCreaseAngleElement_getClassTypeId() -> "SoType":
    """SoCreaseAngleElement_getClassTypeId() -> SoType"""
    return _coin.SoCreaseAngleElement_getClassTypeId()

def SoCreaseAngleElement_getClassStackIndex() -> "int":
    """SoCreaseAngleElement_getClassStackIndex() -> int"""
    return _coin.SoCreaseAngleElement_getClassStackIndex()

def SoCreaseAngleElement_createInstance() -> "void *":
    """SoCreaseAngleElement_createInstance() -> void *"""
    return _coin.SoCreaseAngleElement_createInstance()

def SoCreaseAngleElement_initClass() -> "void":
    """SoCreaseAngleElement_initClass()"""
    return _coin.SoCreaseAngleElement_initClass()

def SoCreaseAngleElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const complexity)
    SoCreaseAngleElement_set(SoState state, float const complexity)
    """
    return _coin.SoCreaseAngleElement_set(*args)

def SoCreaseAngleElement_get(*args) -> "float":
    """
    get(SoState state) -> float
    SoCreaseAngleElement_get(SoState state, SbBool const isvrml1) -> float
    """
    return _coin.SoCreaseAngleElement_get(*args)

def SoCreaseAngleElement_getDefault(*args) -> "float":
    """
    getDefault() -> float
    SoCreaseAngleElement_getDefault(SbBool const isvrml1) -> float
    """
    return _coin.SoCreaseAngleElement_getDefault(*args)

class SoCullElement(SoElement):
    """Proxy of C++ SoCullElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCullElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoCullElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCullElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCullElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoCullElement self, SoState state)"""
        return _coin.SoCullElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoCullElement self, SoState state)"""
        return _coin.SoCullElement_push(self, state)


    def setViewVolume(state: 'SoState', vv: 'SbViewVolume') -> "void":
        """setViewVolume(SoState state, SbViewVolume vv)"""
        return _coin.SoCullElement_setViewVolume(state, vv)

    setViewVolume = staticmethod(setViewVolume)

    def addPlane(state: 'SoState', newplane: 'SbPlane') -> "void":
        """addPlane(SoState state, SbPlane newplane)"""
        return _coin.SoCullElement_addPlane(state, newplane)

    addPlane = staticmethod(addPlane)

    def cullBox(state: 'SoState', box: 'SbBox3f', transform: 'SbBool const'=1) -> "SbBool":
        """
        cullBox(SoState state, SbBox3f box, SbBool const transform=1) -> SbBool
        cullBox(SoState state, SbBox3f box) -> SbBool
        """
        return _coin.SoCullElement_cullBox(state, box, transform)

    cullBox = staticmethod(cullBox)

    def cullTest(state: 'SoState', box: 'SbBox3f', transform: 'SbBool const'=1) -> "SbBool":
        """
        cullTest(SoState state, SbBox3f box, SbBool const transform=1) -> SbBool
        cullTest(SoState state, SbBox3f box) -> SbBool
        """
        return _coin.SoCullElement_cullTest(state, box, transform)

    cullTest = staticmethod(cullTest)

    def completelyInside(state: 'SoState') -> "SbBool":
        """completelyInside(SoState state) -> SbBool"""
        return _coin.SoCullElement_completelyInside(state)

    completelyInside = staticmethod(completelyInside)

    def matches(self, elt: 'SoElement') -> "SbBool":
        """matches(SoCullElement self, SoElement elt) -> SbBool"""
        return _coin.SoCullElement_matches(self, elt)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoCullElement self) -> SoElement"""
        return _coin.SoCullElement_copyMatchInfo(self)

SoCullElement_swigregister = _coin.SoCullElement_swigregister
SoCullElement_swigregister(SoCullElement)

def SoCullElement_getClassTypeId() -> "SoType":
    """SoCullElement_getClassTypeId() -> SoType"""
    return _coin.SoCullElement_getClassTypeId()

def SoCullElement_getClassStackIndex() -> "int":
    """SoCullElement_getClassStackIndex() -> int"""
    return _coin.SoCullElement_getClassStackIndex()

def SoCullElement_createInstance() -> "void *":
    """SoCullElement_createInstance() -> void *"""
    return _coin.SoCullElement_createInstance()

def SoCullElement_initClass() -> "void":
    """SoCullElement_initClass()"""
    return _coin.SoCullElement_initClass()

def SoCullElement_setViewVolume(state: 'SoState', vv: 'SbViewVolume') -> "void":
    """SoCullElement_setViewVolume(SoState state, SbViewVolume vv)"""
    return _coin.SoCullElement_setViewVolume(state, vv)

def SoCullElement_addPlane(state: 'SoState', newplane: 'SbPlane') -> "void":
    """SoCullElement_addPlane(SoState state, SbPlane newplane)"""
    return _coin.SoCullElement_addPlane(state, newplane)

def SoCullElement_cullBox(state: 'SoState', box: 'SbBox3f', transform: 'SbBool const'=1) -> "SbBool":
    """
    cullBox(SoState state, SbBox3f box, SbBool const transform=1) -> SbBool
    SoCullElement_cullBox(SoState state, SbBox3f box) -> SbBool
    """
    return _coin.SoCullElement_cullBox(state, box, transform)

def SoCullElement_cullTest(state: 'SoState', box: 'SbBox3f', transform: 'SbBool const'=1) -> "SbBool":
    """
    cullTest(SoState state, SbBox3f box, SbBool const transform=1) -> SbBool
    SoCullElement_cullTest(SoState state, SbBox3f box) -> SbBool
    """
    return _coin.SoCullElement_cullTest(state, box, transform)

def SoCullElement_completelyInside(state: 'SoState') -> "SbBool":
    """SoCullElement_completelyInside(SoState state) -> SbBool"""
    return _coin.SoCullElement_completelyInside(state)

class SoDecimationPercentageElement(SoFloatElement):
    """Proxy of C++ SoDecimationPercentageElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecimationPercentageElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoDecimationPercentageElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecimationPercentageElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecimationPercentageElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoDecimationPercentageElement self, SoState state)"""
        return _coin.SoDecimationPercentageElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const complexity)
        set(SoState state, float const complexity)
        """
        return _coin.SoDecimationPercentageElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoDecimationPercentageElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoDecimationPercentageElement_getDefault()

    getDefault = staticmethod(getDefault)
SoDecimationPercentageElement_swigregister = _coin.SoDecimationPercentageElement_swigregister
SoDecimationPercentageElement_swigregister(SoDecimationPercentageElement)

def SoDecimationPercentageElement_getClassTypeId() -> "SoType":
    """SoDecimationPercentageElement_getClassTypeId() -> SoType"""
    return _coin.SoDecimationPercentageElement_getClassTypeId()

def SoDecimationPercentageElement_getClassStackIndex() -> "int":
    """SoDecimationPercentageElement_getClassStackIndex() -> int"""
    return _coin.SoDecimationPercentageElement_getClassStackIndex()

def SoDecimationPercentageElement_createInstance() -> "void *":
    """SoDecimationPercentageElement_createInstance() -> void *"""
    return _coin.SoDecimationPercentageElement_createInstance()

def SoDecimationPercentageElement_initClass() -> "void":
    """SoDecimationPercentageElement_initClass()"""
    return _coin.SoDecimationPercentageElement_initClass()

def SoDecimationPercentageElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const complexity)
    SoDecimationPercentageElement_set(SoState state, float const complexity)
    """
    return _coin.SoDecimationPercentageElement_set(*args)

def SoDecimationPercentageElement_get(state: 'SoState') -> "float":
    """SoDecimationPercentageElement_get(SoState state) -> float"""
    return _coin.SoDecimationPercentageElement_get(state)

def SoDecimationPercentageElement_getDefault() -> "float":
    """SoDecimationPercentageElement_getDefault() -> float"""
    return _coin.SoDecimationPercentageElement_getDefault()

class SoDiffuseColorElement(SoReplacedElement):
    """Proxy of C++ SoDiffuseColorElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDiffuseColorElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoDiffuseColorElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDiffuseColorElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDiffuseColorElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoDiffuseColorElement self, SoState state)"""
        return _coin.SoDiffuseColorElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
        """set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
        return _coin.SoDiffuseColorElement_set(state, node, numcolors, colors)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoDiffuseColorElement const *":
        """getInstance(SoState state) -> SoDiffuseColorElement"""
        return _coin.SoDiffuseColorElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoDiffuseColorElement self) -> int32_t"""
        return _coin.SoDiffuseColorElement_getNum(self)


    def get(self, index: 'int const') -> "SbColor const &":
        """get(SoDiffuseColorElement self, int const index) -> SbColor"""
        return _coin.SoDiffuseColorElement_get(self, index)


    def isPacked(self) -> "SbBool":
        """isPacked(SoDiffuseColorElement self) -> SbBool"""
        return _coin.SoDiffuseColorElement_isPacked(self)


    def hasPackedTransparency(self) -> "SbBool":
        """hasPackedTransparency(SoDiffuseColorElement self) -> SbBool"""
        return _coin.SoDiffuseColorElement_hasPackedTransparency(self)


    def getColorArrayPtr(self) -> "SbColor const *":
        """getColorArrayPtr(SoDiffuseColorElement self) -> SbColor"""
        return _coin.SoDiffuseColorElement_getColorArrayPtr(self)


    def getPackedArrayPtr(self) -> "uint32_t const *":
        """getPackedArrayPtr(SoDiffuseColorElement self) -> uint32_t const *"""
        return _coin.SoDiffuseColorElement_getPackedArrayPtr(self)

SoDiffuseColorElement_swigregister = _coin.SoDiffuseColorElement_swigregister
SoDiffuseColorElement_swigregister(SoDiffuseColorElement)

def SoDiffuseColorElement_getClassTypeId() -> "SoType":
    """SoDiffuseColorElement_getClassTypeId() -> SoType"""
    return _coin.SoDiffuseColorElement_getClassTypeId()

def SoDiffuseColorElement_getClassStackIndex() -> "int":
    """SoDiffuseColorElement_getClassStackIndex() -> int"""
    return _coin.SoDiffuseColorElement_getClassStackIndex()

def SoDiffuseColorElement_createInstance() -> "void *":
    """SoDiffuseColorElement_createInstance() -> void *"""
    return _coin.SoDiffuseColorElement_createInstance()

def SoDiffuseColorElement_initClass() -> "void":
    """SoDiffuseColorElement_initClass()"""
    return _coin.SoDiffuseColorElement_initClass()

def SoDiffuseColorElement_set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
    """SoDiffuseColorElement_set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
    return _coin.SoDiffuseColorElement_set(state, node, numcolors, colors)

def SoDiffuseColorElement_getInstance(state: 'SoState') -> "SoDiffuseColorElement const *":
    """SoDiffuseColorElement_getInstance(SoState state) -> SoDiffuseColorElement"""
    return _coin.SoDiffuseColorElement_getInstance(state)

class SoGLClipPlaneElement(SoClipPlaneElement):
    """Proxy of C++ SoGLClipPlaneElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLClipPlaneElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLClipPlaneElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLClipPlaneElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLClipPlaneElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLClipPlaneElement self, SoState state)"""
        return _coin.SoGLClipPlaneElement_init(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLClipPlaneElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLClipPlaneElement_pop(self, state, prevTopElement)


    def getMaxGLPlanes() -> "int":
        """getMaxGLPlanes() -> int"""
        return _coin.SoGLClipPlaneElement_getMaxGLPlanes()

    getMaxGLPlanes = staticmethod(getMaxGLPlanes)
SoGLClipPlaneElement_swigregister = _coin.SoGLClipPlaneElement_swigregister
SoGLClipPlaneElement_swigregister(SoGLClipPlaneElement)

def SoGLClipPlaneElement_getClassTypeId() -> "SoType":
    """SoGLClipPlaneElement_getClassTypeId() -> SoType"""
    return _coin.SoGLClipPlaneElement_getClassTypeId()

def SoGLClipPlaneElement_getClassStackIndex() -> "int":
    """SoGLClipPlaneElement_getClassStackIndex() -> int"""
    return _coin.SoGLClipPlaneElement_getClassStackIndex()

def SoGLClipPlaneElement_createInstance() -> "void *":
    """SoGLClipPlaneElement_createInstance() -> void *"""
    return _coin.SoGLClipPlaneElement_createInstance()

def SoGLClipPlaneElement_initClass() -> "void":
    """SoGLClipPlaneElement_initClass()"""
    return _coin.SoGLClipPlaneElement_initClass()

def SoGLClipPlaneElement_getMaxGLPlanes() -> "int":
    """SoGLClipPlaneElement_getMaxGLPlanes() -> int"""
    return _coin.SoGLClipPlaneElement_getMaxGLPlanes()

class SoLightElement(SoAccumulatedElement):
    """Proxy of C++ SoLightElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLightElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLightElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLightElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLightElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoLightElement self, SoState state)"""
        return _coin.SoLightElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoLightElement self, SoState state)"""
        return _coin.SoLightElement_push(self, state)


    def add(state: 'SoState', light: 'SoLight') -> "SbMatrix &":
        """add(SoState state, SoLight light)"""
        return _coin.SoLightElement_add(state, light)

    add = staticmethod(add)

    def getLights(state: 'SoState') -> "SoNodeList const &":
        """getLights(SoState state) -> SoNodeList"""
        return _coin.SoLightElement_getLights(state)

    getLights = staticmethod(getLights)

    def getMatrix(state: 'SoState', index: 'int const') -> "SbMatrix const &":
        """getMatrix(SoState state, int const index) -> SbMatrix"""
        return _coin.SoLightElement_getMatrix(state, index)

    getMatrix = staticmethod(getMatrix)
SoLightElement_swigregister = _coin.SoLightElement_swigregister
SoLightElement_swigregister(SoLightElement)

def SoLightElement_getClassTypeId() -> "SoType":
    """SoLightElement_getClassTypeId() -> SoType"""
    return _coin.SoLightElement_getClassTypeId()

def SoLightElement_getClassStackIndex() -> "int":
    """SoLightElement_getClassStackIndex() -> int"""
    return _coin.SoLightElement_getClassStackIndex()

def SoLightElement_createInstance() -> "void *":
    """SoLightElement_createInstance() -> void *"""
    return _coin.SoLightElement_createInstance()

def SoLightElement_initClass() -> "void":
    """SoLightElement_initClass()"""
    return _coin.SoLightElement_initClass()

def SoLightElement_add(state: 'SoState', light: 'SoLight') -> "SbMatrix &":
    """SoLightElement_add(SoState state, SoLight light)"""
    return _coin.SoLightElement_add(state, light)

def SoLightElement_getLights(state: 'SoState') -> "SoNodeList const &":
    """SoLightElement_getLights(SoState state) -> SoNodeList"""
    return _coin.SoLightElement_getLights(state)

def SoLightElement_getMatrix(state: 'SoState', index: 'int const') -> "SbMatrix const &":
    """SoLightElement_getMatrix(SoState state, int const index) -> SbMatrix"""
    return _coin.SoLightElement_getMatrix(state, index)

class SoGLModelMatrixElement(SoModelMatrixElement):
    """Proxy of C++ SoGLModelMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLModelMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLModelMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLModelMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLModelMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLModelMatrixElement self, SoState state)"""
        return _coin.SoGLModelMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLModelMatrixElement self, SoState state)"""
        return _coin.SoGLModelMatrixElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLModelMatrixElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLModelMatrixElement_pop(self, state, prevTopElement)

SoGLModelMatrixElement_swigregister = _coin.SoGLModelMatrixElement_swigregister
SoGLModelMatrixElement_swigregister(SoGLModelMatrixElement)

def SoGLModelMatrixElement_getClassTypeId() -> "SoType":
    """SoGLModelMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoGLModelMatrixElement_getClassTypeId()

def SoGLModelMatrixElement_getClassStackIndex() -> "int":
    """SoGLModelMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoGLModelMatrixElement_getClassStackIndex()

def SoGLModelMatrixElement_createInstance() -> "void *":
    """SoGLModelMatrixElement_createInstance() -> void *"""
    return _coin.SoGLModelMatrixElement_createInstance()

def SoGLModelMatrixElement_initClass() -> "void":
    """SoGLModelMatrixElement_initClass()"""
    return _coin.SoGLModelMatrixElement_initClass()

class SoProfileElement(SoAccumulatedElement):
    """Proxy of C++ SoProfileElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProfileElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoProfileElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoProfileElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProfileElement_initClass()

    initClass = staticmethod(initClass)
    START_FIRST = _coin.SoProfileElement_START_FIRST
    START_NEW = _coin.SoProfileElement_START_NEW
    ADD_TO_CURRENT = _coin.SoProfileElement_ADD_TO_CURRENT

    def init(self, state: 'SoState') -> "void":
        """init(SoProfileElement self, SoState state)"""
        return _coin.SoProfileElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoProfileElement self, SoState state)"""
        return _coin.SoProfileElement_push(self, state)


    def add(state: 'SoState', profile: 'SoProfile') -> "void":
        """add(SoState state, SoProfile profile)"""
        return _coin.SoProfileElement_add(state, profile)

    add = staticmethod(add)

    def get(state: 'SoState') -> "SoNodeList const &":
        """get(SoState state) -> SoNodeList"""
        return _coin.SoProfileElement_get(state)

    get = staticmethod(get)
SoProfileElement_swigregister = _coin.SoProfileElement_swigregister
SoProfileElement_swigregister(SoProfileElement)

def SoProfileElement_getClassTypeId() -> "SoType":
    """SoProfileElement_getClassTypeId() -> SoType"""
    return _coin.SoProfileElement_getClassTypeId()

def SoProfileElement_getClassStackIndex() -> "int":
    """SoProfileElement_getClassStackIndex() -> int"""
    return _coin.SoProfileElement_getClassStackIndex()

def SoProfileElement_createInstance() -> "void *":
    """SoProfileElement_createInstance() -> void *"""
    return _coin.SoProfileElement_createInstance()

def SoProfileElement_initClass() -> "void":
    """SoProfileElement_initClass()"""
    return _coin.SoProfileElement_initClass()

def SoProfileElement_add(state: 'SoState', profile: 'SoProfile') -> "void":
    """SoProfileElement_add(SoState state, SoProfile profile)"""
    return _coin.SoProfileElement_add(state, profile)

def SoProfileElement_get(state: 'SoState') -> "SoNodeList const &":
    """SoProfileElement_get(SoState state) -> SoNodeList"""
    return _coin.SoProfileElement_get(state)

class SoMultiTextureMatrixElement(SoAccumulatedElement):
    """Proxy of C++ SoMultiTextureMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMultiTextureMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoMultiTextureMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMultiTextureMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMultiTextureMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoMultiTextureMatrixElement self, SoState state)"""
        return _coin.SoMultiTextureMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoMultiTextureMatrixElement self, SoState state)"""
        return _coin.SoMultiTextureMatrixElement_push(self, state)


    def get(state: 'SoState', unit: 'int const'=0) -> "SbMatrix const &":
        """
        get(SoState state, int const unit=0) -> SbMatrix
        get(SoState state) -> SbMatrix
        """
        return _coin.SoMultiTextureMatrixElement_get(state, unit)

    get = staticmethod(get)

    def makeIdentity(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        makeIdentity(SoState state, SoNode node, int const unit=0)
        makeIdentity(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureMatrixElement_makeIdentity(state, node, unit)

    makeIdentity = staticmethod(makeIdentity)

    def set(*args) -> "SbMatrix &":
        """
        set(SoState state, SoNode node, int const unit)
        set(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureMatrixElement_set(*args)

    set = staticmethod(set)

    def mult(*args) -> "SbMatrix &":
        """
        mult(SoState state, SoNode node, int const unit)
        mult(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureMatrixElement_mult(*args)

    mult = staticmethod(mult)

    def translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
        """translateBy(SoState state, SoNode node, SbVec3f translation)"""
        return _coin.SoMultiTextureMatrixElement_translateBy(state, node, translation)

    translateBy = staticmethod(translateBy)

    def rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
        """rotateBy(SoState state, SoNode node, SbRotation rotation)"""
        return _coin.SoMultiTextureMatrixElement_rotateBy(state, node, rotation)

    rotateBy = staticmethod(rotateBy)

    def scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
        """scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
        return _coin.SoMultiTextureMatrixElement_scaleBy(state, node, scaleFactor)

    scaleBy = staticmethod(scaleBy)
SoMultiTextureMatrixElement_swigregister = _coin.SoMultiTextureMatrixElement_swigregister
SoMultiTextureMatrixElement_swigregister(SoMultiTextureMatrixElement)

def SoMultiTextureMatrixElement_getClassTypeId() -> "SoType":
    """SoMultiTextureMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoMultiTextureMatrixElement_getClassTypeId()

def SoMultiTextureMatrixElement_getClassStackIndex() -> "int":
    """SoMultiTextureMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoMultiTextureMatrixElement_getClassStackIndex()

def SoMultiTextureMatrixElement_createInstance() -> "void *":
    """SoMultiTextureMatrixElement_createInstance() -> void *"""
    return _coin.SoMultiTextureMatrixElement_createInstance()

def SoMultiTextureMatrixElement_initClass() -> "void":
    """SoMultiTextureMatrixElement_initClass()"""
    return _coin.SoMultiTextureMatrixElement_initClass()

def SoMultiTextureMatrixElement_get(state: 'SoState', unit: 'int const'=0) -> "SbMatrix const &":
    """
    get(SoState state, int const unit=0) -> SbMatrix
    SoMultiTextureMatrixElement_get(SoState state) -> SbMatrix
    """
    return _coin.SoMultiTextureMatrixElement_get(state, unit)

def SoMultiTextureMatrixElement_makeIdentity(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    makeIdentity(SoState state, SoNode node, int const unit=0)
    SoMultiTextureMatrixElement_makeIdentity(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureMatrixElement_makeIdentity(state, node, unit)

def SoMultiTextureMatrixElement_set(*args) -> "SbMatrix &":
    """
    set(SoState state, SoNode node, int const unit)
    SoMultiTextureMatrixElement_set(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureMatrixElement_set(*args)

def SoMultiTextureMatrixElement_mult(*args) -> "SbMatrix &":
    """
    mult(SoState state, SoNode node, int const unit)
    SoMultiTextureMatrixElement_mult(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureMatrixElement_mult(*args)

def SoMultiTextureMatrixElement_translateBy(state: 'SoState', node: 'SoNode', translation: 'SbVec3f') -> "void":
    """SoMultiTextureMatrixElement_translateBy(SoState state, SoNode node, SbVec3f translation)"""
    return _coin.SoMultiTextureMatrixElement_translateBy(state, node, translation)

def SoMultiTextureMatrixElement_rotateBy(state: 'SoState', node: 'SoNode', rotation: 'SbRotation') -> "void":
    """SoMultiTextureMatrixElement_rotateBy(SoState state, SoNode node, SbRotation rotation)"""
    return _coin.SoMultiTextureMatrixElement_rotateBy(state, node, rotation)

def SoMultiTextureMatrixElement_scaleBy(state: 'SoState', node: 'SoNode', scaleFactor: 'SbVec3f') -> "void":
    """SoMultiTextureMatrixElement_scaleBy(SoState state, SoNode node, SbVec3f scaleFactor)"""
    return _coin.SoMultiTextureMatrixElement_scaleBy(state, node, scaleFactor)

class SoGLMultiTextureMatrixElement(SoMultiTextureMatrixElement):
    """Proxy of C++ SoGLMultiTextureMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLMultiTextureMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLMultiTextureMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLMultiTextureMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLMultiTextureMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLMultiTextureMatrixElement self, SoState state)"""
        return _coin.SoGLMultiTextureMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLMultiTextureMatrixElement self, SoState state)"""
        return _coin.SoGLMultiTextureMatrixElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLMultiTextureMatrixElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLMultiTextureMatrixElement_pop(self, state, prevTopElement)


    def multElt(self, unit: 'int const') -> "void":
        """multElt(SoGLMultiTextureMatrixElement self, int const unit)"""
        return _coin.SoGLMultiTextureMatrixElement_multElt(self, unit)


    def setElt(self, unit: 'int const') -> "void":
        """setElt(SoGLMultiTextureMatrixElement self, int const unit)"""
        return _coin.SoGLMultiTextureMatrixElement_setElt(self, unit)

SoGLMultiTextureMatrixElement_swigregister = _coin.SoGLMultiTextureMatrixElement_swigregister
SoGLMultiTextureMatrixElement_swigregister(SoGLMultiTextureMatrixElement)

def SoGLMultiTextureMatrixElement_getClassTypeId() -> "SoType":
    """SoGLMultiTextureMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoGLMultiTextureMatrixElement_getClassTypeId()

def SoGLMultiTextureMatrixElement_getClassStackIndex() -> "int":
    """SoGLMultiTextureMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoGLMultiTextureMatrixElement_getClassStackIndex()

def SoGLMultiTextureMatrixElement_createInstance() -> "void *":
    """SoGLMultiTextureMatrixElement_createInstance() -> void *"""
    return _coin.SoGLMultiTextureMatrixElement_createInstance()

def SoGLMultiTextureMatrixElement_initClass() -> "void":
    """SoGLMultiTextureMatrixElement_initClass()"""
    return _coin.SoGLMultiTextureMatrixElement_initClass()

class SoGLDrawStyleElement(SoDrawStyleElement):
    """Proxy of C++ SoGLDrawStyleElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLDrawStyleElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLDrawStyleElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLDrawStyleElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLDrawStyleElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLDrawStyleElement self, SoState state)"""
        return _coin.SoGLDrawStyleElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLDrawStyleElement self, SoState state)"""
        return _coin.SoGLDrawStyleElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLDrawStyleElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLDrawStyleElement_pop(self, state, prevTopElement)

SoGLDrawStyleElement_swigregister = _coin.SoGLDrawStyleElement_swigregister
SoGLDrawStyleElement_swigregister(SoGLDrawStyleElement)

def SoGLDrawStyleElement_getClassTypeId() -> "SoType":
    """SoGLDrawStyleElement_getClassTypeId() -> SoType"""
    return _coin.SoGLDrawStyleElement_getClassTypeId()

def SoGLDrawStyleElement_getClassStackIndex() -> "int":
    """SoGLDrawStyleElement_getClassStackIndex() -> int"""
    return _coin.SoGLDrawStyleElement_getClassStackIndex()

def SoGLDrawStyleElement_createInstance() -> "void *":
    """SoGLDrawStyleElement_createInstance() -> void *"""
    return _coin.SoGLDrawStyleElement_createInstance()

def SoGLDrawStyleElement_initClass() -> "void":
    """SoGLDrawStyleElement_initClass()"""
    return _coin.SoGLDrawStyleElement_initClass()

class SoGLLightIdElement(SoInt32Element):
    """Proxy of C++ SoGLLightIdElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLLightIdElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLLightIdElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLLightIdElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLLightIdElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLLightIdElement self, SoState state)"""
        return _coin.SoGLLightIdElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLLightIdElement self, SoState state)"""
        return _coin.SoGLLightIdElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLLightIdElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLLightIdElement_pop(self, state, prevTopElement)


    def increment(*args) -> "int32_t":
        """
        increment(SoState state, SoNode node) -> int32_t
        increment(SoState state) -> int32_t
        """
        return _coin.SoGLLightIdElement_increment(*args)

    increment = staticmethod(increment)

    def get(state: 'SoState') -> "int32_t":
        """get(SoState state) -> int32_t"""
        return _coin.SoGLLightIdElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "int32_t":
        """getDefault() -> int32_t"""
        return _coin.SoGLLightIdElement_getDefault()

    getDefault = staticmethod(getDefault)

    def getMaxGLSources() -> "int32_t":
        """getMaxGLSources() -> int32_t"""
        return _coin.SoGLLightIdElement_getMaxGLSources()

    getMaxGLSources = staticmethod(getMaxGLSources)
SoGLLightIdElement_swigregister = _coin.SoGLLightIdElement_swigregister
SoGLLightIdElement_swigregister(SoGLLightIdElement)

def SoGLLightIdElement_getClassTypeId() -> "SoType":
    """SoGLLightIdElement_getClassTypeId() -> SoType"""
    return _coin.SoGLLightIdElement_getClassTypeId()

def SoGLLightIdElement_getClassStackIndex() -> "int":
    """SoGLLightIdElement_getClassStackIndex() -> int"""
    return _coin.SoGLLightIdElement_getClassStackIndex()

def SoGLLightIdElement_createInstance() -> "void *":
    """SoGLLightIdElement_createInstance() -> void *"""
    return _coin.SoGLLightIdElement_createInstance()

def SoGLLightIdElement_initClass() -> "void":
    """SoGLLightIdElement_initClass()"""
    return _coin.SoGLLightIdElement_initClass()

def SoGLLightIdElement_increment(*args) -> "int32_t":
    """
    increment(SoState state, SoNode node) -> int32_t
    SoGLLightIdElement_increment(SoState state) -> int32_t
    """
    return _coin.SoGLLightIdElement_increment(*args)

def SoGLLightIdElement_get(state: 'SoState') -> "int32_t":
    """SoGLLightIdElement_get(SoState state) -> int32_t"""
    return _coin.SoGLLightIdElement_get(state)

def SoGLLightIdElement_getDefault() -> "int32_t":
    """SoGLLightIdElement_getDefault() -> int32_t"""
    return _coin.SoGLLightIdElement_getDefault()

def SoGLLightIdElement_getMaxGLSources() -> "int32_t":
    """SoGLLightIdElement_getMaxGLSources() -> int32_t"""
    return _coin.SoGLLightIdElement_getMaxGLSources()

class SoMultiTextureEnabledElement(SoElement):
    """Proxy of C++ SoMultiTextureEnabledElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMultiTextureEnabledElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoMultiTextureEnabledElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMultiTextureEnabledElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMultiTextureEnabledElement_initClass()

    initClass = staticmethod(initClass)
    DISABLED = _coin.SoMultiTextureEnabledElement_DISABLED
    TEXTURE2D = _coin.SoMultiTextureEnabledElement_TEXTURE2D
    RECTANGLE = _coin.SoMultiTextureEnabledElement_RECTANGLE
    CUBEMAP = _coin.SoMultiTextureEnabledElement_CUBEMAP
    TEXTURE3D = _coin.SoMultiTextureEnabledElement_TEXTURE3D

    def init(self, state: 'SoState') -> "void":
        """init(SoMultiTextureEnabledElement self, SoState state)"""
        return _coin.SoMultiTextureEnabledElement_init(self, state)


    def get(state: 'SoState', unit: 'int const'=0) -> "SbBool":
        """
        get(SoState state, int const unit=0) -> SbBool
        get(SoState state) -> SbBool
        """
        return _coin.SoMultiTextureEnabledElement_get(state, unit)

    get = staticmethod(get)

    def setElt(self, unit: 'int const', mode: 'int const') -> "void":
        """setElt(SoMultiTextureEnabledElement self, int const unit, int const mode)"""
        return _coin.SoMultiTextureEnabledElement_setElt(self, unit, mode)


    def push(self, state: 'SoState') -> "void":
        """push(SoMultiTextureEnabledElement self, SoState state)"""
        return _coin.SoMultiTextureEnabledElement_push(self, state)


    def matches(self, elem: 'SoElement') -> "SbBool":
        """matches(SoMultiTextureEnabledElement self, SoElement elem) -> SbBool"""
        return _coin.SoMultiTextureEnabledElement_matches(self, elem)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoMultiTextureEnabledElement self) -> SoElement"""
        return _coin.SoMultiTextureEnabledElement_copyMatchInfo(self)


    def getEnabledUnits(state: 'SoState', lastenabled: 'int &') -> "SbBool const *":
        """getEnabledUnits(SoState state, int & lastenabled) -> SbBool const *"""
        return _coin.SoMultiTextureEnabledElement_getEnabledUnits(state, lastenabled)

    getEnabledUnits = staticmethod(getEnabledUnits)

    def getActiveUnits(state: 'SoState', lastenabled: 'int &') -> "SoMultiTextureEnabledElement::Mode const *":
        """getActiveUnits(SoState state, int & lastenabled) -> SoMultiTextureEnabledElement::Mode const *"""
        return _coin.SoMultiTextureEnabledElement_getActiveUnits(state, lastenabled)

    getActiveUnits = staticmethod(getActiveUnits)

    def enableRectangle(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        enableRectangle(SoState state, SoNode node, int const unit=0)
        enableRectangle(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureEnabledElement_enableRectangle(state, node, unit)

    enableRectangle = staticmethod(enableRectangle)

    def enableCubeMap(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        enableCubeMap(SoState state, SoNode node, int const unit=0)
        enableCubeMap(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureEnabledElement_enableCubeMap(state, node, unit)

    enableCubeMap = staticmethod(enableCubeMap)

    def enableTexture3(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
        """
        enableTexture3(SoState state, SoNode node, int const unit=0)
        enableTexture3(SoState state, SoNode node)
        """
        return _coin.SoMultiTextureEnabledElement_enableTexture3(state, node, unit)

    enableTexture3 = staticmethod(enableTexture3)

    def getMode(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureEnabledElement::Mode":
        """
        getMode(SoState state, int const unit=0) -> SoMultiTextureEnabledElement::Mode
        getMode(SoState state) -> SoMultiTextureEnabledElement::Mode
        """
        return _coin.SoMultiTextureEnabledElement_getMode(state, unit)

    getMode = staticmethod(getMode)

    def disableAll(state: 'SoState') -> "void":
        """disableAll(SoState state)"""
        return _coin.SoMultiTextureEnabledElement_disableAll(state)

    disableAll = staticmethod(disableAll)

    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int const unit, SbBool const enabled)
        set(SoState state, SbBool const enabled)
        set(SoState state, SoNode node, SbBool const enabled)
        """
        return _coin.SoMultiTextureEnabledElement_set(*args)

    set = staticmethod(set)
SoMultiTextureEnabledElement_swigregister = _coin.SoMultiTextureEnabledElement_swigregister
SoMultiTextureEnabledElement_swigregister(SoMultiTextureEnabledElement)

def SoMultiTextureEnabledElement_getClassTypeId() -> "SoType":
    """SoMultiTextureEnabledElement_getClassTypeId() -> SoType"""
    return _coin.SoMultiTextureEnabledElement_getClassTypeId()

def SoMultiTextureEnabledElement_getClassStackIndex() -> "int":
    """SoMultiTextureEnabledElement_getClassStackIndex() -> int"""
    return _coin.SoMultiTextureEnabledElement_getClassStackIndex()

def SoMultiTextureEnabledElement_createInstance() -> "void *":
    """SoMultiTextureEnabledElement_createInstance() -> void *"""
    return _coin.SoMultiTextureEnabledElement_createInstance()

def SoMultiTextureEnabledElement_initClass() -> "void":
    """SoMultiTextureEnabledElement_initClass()"""
    return _coin.SoMultiTextureEnabledElement_initClass()

def SoMultiTextureEnabledElement_get(state: 'SoState', unit: 'int const'=0) -> "SbBool":
    """
    get(SoState state, int const unit=0) -> SbBool
    SoMultiTextureEnabledElement_get(SoState state) -> SbBool
    """
    return _coin.SoMultiTextureEnabledElement_get(state, unit)

def SoMultiTextureEnabledElement_getEnabledUnits(state: 'SoState', lastenabled: 'int &') -> "SbBool const *":
    """SoMultiTextureEnabledElement_getEnabledUnits(SoState state, int & lastenabled) -> SbBool const *"""
    return _coin.SoMultiTextureEnabledElement_getEnabledUnits(state, lastenabled)

def SoMultiTextureEnabledElement_getActiveUnits(state: 'SoState', lastenabled: 'int &') -> "SoMultiTextureEnabledElement::Mode const *":
    """SoMultiTextureEnabledElement_getActiveUnits(SoState state, int & lastenabled) -> SoMultiTextureEnabledElement::Mode const *"""
    return _coin.SoMultiTextureEnabledElement_getActiveUnits(state, lastenabled)

def SoMultiTextureEnabledElement_enableRectangle(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    enableRectangle(SoState state, SoNode node, int const unit=0)
    SoMultiTextureEnabledElement_enableRectangle(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureEnabledElement_enableRectangle(state, node, unit)

def SoMultiTextureEnabledElement_enableCubeMap(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    enableCubeMap(SoState state, SoNode node, int const unit=0)
    SoMultiTextureEnabledElement_enableCubeMap(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureEnabledElement_enableCubeMap(state, node, unit)

def SoMultiTextureEnabledElement_enableTexture3(state: 'SoState', node: 'SoNode', unit: 'int const'=0) -> "void":
    """
    enableTexture3(SoState state, SoNode node, int const unit=0)
    SoMultiTextureEnabledElement_enableTexture3(SoState state, SoNode node)
    """
    return _coin.SoMultiTextureEnabledElement_enableTexture3(state, node, unit)

def SoMultiTextureEnabledElement_getMode(state: 'SoState', unit: 'int const'=0) -> "SoMultiTextureEnabledElement::Mode":
    """
    getMode(SoState state, int const unit=0) -> SoMultiTextureEnabledElement::Mode
    SoMultiTextureEnabledElement_getMode(SoState state) -> SoMultiTextureEnabledElement::Mode
    """
    return _coin.SoMultiTextureEnabledElement_getMode(state, unit)

def SoMultiTextureEnabledElement_disableAll(state: 'SoState') -> "void":
    """SoMultiTextureEnabledElement_disableAll(SoState state)"""
    return _coin.SoMultiTextureEnabledElement_disableAll(state)

def SoMultiTextureEnabledElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int const unit, SbBool const enabled)
    set(SoState state, SbBool const enabled)
    SoMultiTextureEnabledElement_set(SoState state, SoNode node, SbBool const enabled)
    """
    return _coin.SoMultiTextureEnabledElement_set(*args)

class SoGLMultiTextureEnabledElement(SoMultiTextureEnabledElement):
    """Proxy of C++ SoGLMultiTextureEnabledElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLMultiTextureEnabledElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLMultiTextureEnabledElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLMultiTextureEnabledElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLMultiTextureEnabledElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLMultiTextureEnabledElement self, SoState state)"""
        return _coin.SoGLMultiTextureEnabledElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLMultiTextureEnabledElement self, SoState state)"""
        return _coin.SoGLMultiTextureEnabledElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLMultiTextureEnabledElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLMultiTextureEnabledElement_pop(self, state, prevTopElement)


    def setElt(self, unit: 'int const', mode: 'int const') -> "void":
        """setElt(SoGLMultiTextureEnabledElement self, int const unit, int const mode)"""
        return _coin.SoGLMultiTextureEnabledElement_setElt(self, unit, mode)

SoGLMultiTextureEnabledElement_swigregister = _coin.SoGLMultiTextureEnabledElement_swigregister
SoGLMultiTextureEnabledElement_swigregister(SoGLMultiTextureEnabledElement)

def SoGLMultiTextureEnabledElement_getClassTypeId() -> "SoType":
    """SoGLMultiTextureEnabledElement_getClassTypeId() -> SoType"""
    return _coin.SoGLMultiTextureEnabledElement_getClassTypeId()

def SoGLMultiTextureEnabledElement_getClassStackIndex() -> "int":
    """SoGLMultiTextureEnabledElement_getClassStackIndex() -> int"""
    return _coin.SoGLMultiTextureEnabledElement_getClassStackIndex()

def SoGLMultiTextureEnabledElement_createInstance() -> "void *":
    """SoGLMultiTextureEnabledElement_createInstance() -> void *"""
    return _coin.SoGLMultiTextureEnabledElement_createInstance()

def SoGLMultiTextureEnabledElement_initClass() -> "void":
    """SoGLMultiTextureEnabledElement_initClass()"""
    return _coin.SoGLMultiTextureEnabledElement_initClass()

class SoLinePatternElement(SoInt32Element):
    """Proxy of C++ SoLinePatternElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLinePatternElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLinePatternElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLinePatternElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLinePatternElement_initClass()

    initClass = staticmethod(initClass)
    CONTINUOUS = _coin.SoLinePatternElement_CONTINUOUS

    def init(self, state: 'SoState') -> "void":
        """init(SoLinePatternElement self, SoState state)"""
        return _coin.SoLinePatternElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int32_t const pattern, int32_t const factor=1)
        set(SoState state, SoNode node, int32_t const pattern)
        set(SoState state, int32_t const pattern, int32_t const factor=1)
        set(SoState state, int32_t const pattern)
        """
        return _coin.SoLinePatternElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "int32_t":
        """get(SoState state) -> int32_t"""
        return _coin.SoLinePatternElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "int32_t":
        """getDefault() -> int32_t"""
        return _coin.SoLinePatternElement_getDefault()

    getDefault = staticmethod(getDefault)

    def getScaleFactor(state: 'SoState') -> "int32_t":
        """getScaleFactor(SoState state) -> int32_t"""
        return _coin.SoLinePatternElement_getScaleFactor(state)

    getScaleFactor = staticmethod(getScaleFactor)

    def getDefaultScaleFactor() -> "int32_t":
        """getDefaultScaleFactor() -> int32_t"""
        return _coin.SoLinePatternElement_getDefaultScaleFactor()

    getDefaultScaleFactor = staticmethod(getDefaultScaleFactor)
SoLinePatternElement_swigregister = _coin.SoLinePatternElement_swigregister
SoLinePatternElement_swigregister(SoLinePatternElement)

def SoLinePatternElement_getClassTypeId() -> "SoType":
    """SoLinePatternElement_getClassTypeId() -> SoType"""
    return _coin.SoLinePatternElement_getClassTypeId()

def SoLinePatternElement_getClassStackIndex() -> "int":
    """SoLinePatternElement_getClassStackIndex() -> int"""
    return _coin.SoLinePatternElement_getClassStackIndex()

def SoLinePatternElement_createInstance() -> "void *":
    """SoLinePatternElement_createInstance() -> void *"""
    return _coin.SoLinePatternElement_createInstance()

def SoLinePatternElement_initClass() -> "void":
    """SoLinePatternElement_initClass()"""
    return _coin.SoLinePatternElement_initClass()

def SoLinePatternElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int32_t const pattern, int32_t const factor=1)
    set(SoState state, SoNode node, int32_t const pattern)
    set(SoState state, int32_t const pattern, int32_t const factor=1)
    SoLinePatternElement_set(SoState state, int32_t const pattern)
    """
    return _coin.SoLinePatternElement_set(*args)

def SoLinePatternElement_get(state: 'SoState') -> "int32_t":
    """SoLinePatternElement_get(SoState state) -> int32_t"""
    return _coin.SoLinePatternElement_get(state)

def SoLinePatternElement_getDefault() -> "int32_t":
    """SoLinePatternElement_getDefault() -> int32_t"""
    return _coin.SoLinePatternElement_getDefault()

def SoLinePatternElement_getScaleFactor(state: 'SoState') -> "int32_t":
    """SoLinePatternElement_getScaleFactor(SoState state) -> int32_t"""
    return _coin.SoLinePatternElement_getScaleFactor(state)

def SoLinePatternElement_getDefaultScaleFactor() -> "int32_t":
    """SoLinePatternElement_getDefaultScaleFactor() -> int32_t"""
    return _coin.SoLinePatternElement_getDefaultScaleFactor()

class SoGLLinePatternElement(SoLinePatternElement):
    """Proxy of C++ SoGLLinePatternElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLLinePatternElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLLinePatternElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLLinePatternElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLLinePatternElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLLinePatternElement self, SoState state)"""
        return _coin.SoGLLinePatternElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLLinePatternElement self, SoState state)"""
        return _coin.SoGLLinePatternElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLLinePatternElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLLinePatternElement_pop(self, state, prevTopElement)

SoGLLinePatternElement_swigregister = _coin.SoGLLinePatternElement_swigregister
SoGLLinePatternElement_swigregister(SoGLLinePatternElement)

def SoGLLinePatternElement_getClassTypeId() -> "SoType":
    """SoGLLinePatternElement_getClassTypeId() -> SoType"""
    return _coin.SoGLLinePatternElement_getClassTypeId()

def SoGLLinePatternElement_getClassStackIndex() -> "int":
    """SoGLLinePatternElement_getClassStackIndex() -> int"""
    return _coin.SoGLLinePatternElement_getClassStackIndex()

def SoGLLinePatternElement_createInstance() -> "void *":
    """SoGLLinePatternElement_createInstance() -> void *"""
    return _coin.SoGLLinePatternElement_createInstance()

def SoGLLinePatternElement_initClass() -> "void":
    """SoGLLinePatternElement_initClass()"""
    return _coin.SoGLLinePatternElement_initClass()

class SoSwitchElement(SoInt32Element):
    """Proxy of C++ SoSwitchElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSwitchElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoSwitchElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSwitchElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSwitchElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoSwitchElement self, SoState state)"""
        return _coin.SoSwitchElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int32_t const index)
        set(SoState state, int32_t const index)
        """
        return _coin.SoSwitchElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "int32_t":
        """get(SoState state) -> int32_t"""
        return _coin.SoSwitchElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "int32_t":
        """getDefault() -> int32_t"""
        return _coin.SoSwitchElement_getDefault()

    getDefault = staticmethod(getDefault)
SoSwitchElement_swigregister = _coin.SoSwitchElement_swigregister
SoSwitchElement_swigregister(SoSwitchElement)

def SoSwitchElement_getClassTypeId() -> "SoType":
    """SoSwitchElement_getClassTypeId() -> SoType"""
    return _coin.SoSwitchElement_getClassTypeId()

def SoSwitchElement_getClassStackIndex() -> "int":
    """SoSwitchElement_getClassStackIndex() -> int"""
    return _coin.SoSwitchElement_getClassStackIndex()

def SoSwitchElement_createInstance() -> "void *":
    """SoSwitchElement_createInstance() -> void *"""
    return _coin.SoSwitchElement_createInstance()

def SoSwitchElement_initClass() -> "void":
    """SoSwitchElement_initClass()"""
    return _coin.SoSwitchElement_initClass()

def SoSwitchElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int32_t const index)
    SoSwitchElement_set(SoState state, int32_t const index)
    """
    return _coin.SoSwitchElement_set(*args)

def SoSwitchElement_get(state: 'SoState') -> "int32_t":
    """SoSwitchElement_get(SoState state) -> int32_t"""
    return _coin.SoSwitchElement_get(state)

def SoSwitchElement_getDefault() -> "int32_t":
    """SoSwitchElement_getDefault() -> int32_t"""
    return _coin.SoSwitchElement_getDefault()

class SoTextOutlineEnabledElement(SoInt32Element):
    """Proxy of C++ SoTextOutlineEnabledElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextOutlineEnabledElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextOutlineEnabledElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextOutlineEnabledElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextOutlineEnabledElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoTextOutlineEnabledElement self, SoState state)"""
        return _coin.SoTextOutlineEnabledElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoTextOutlineEnabledElement self, SoState state)"""
        return _coin.SoTextOutlineEnabledElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoTextOutlineEnabledElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoTextOutlineEnabledElement_pop(self, state, prevTopElement)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SbBool const enabled)
        set(SoState state, SbBool const enabled)
        """
        return _coin.SoTextOutlineEnabledElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbBool":
        """get(SoState state) -> SbBool"""
        return _coin.SoTextOutlineEnabledElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SbBool":
        """getDefault() -> SbBool"""
        return _coin.SoTextOutlineEnabledElement_getDefault()

    getDefault = staticmethod(getDefault)
SoTextOutlineEnabledElement_swigregister = _coin.SoTextOutlineEnabledElement_swigregister
SoTextOutlineEnabledElement_swigregister(SoTextOutlineEnabledElement)

def SoTextOutlineEnabledElement_getClassTypeId() -> "SoType":
    """SoTextOutlineEnabledElement_getClassTypeId() -> SoType"""
    return _coin.SoTextOutlineEnabledElement_getClassTypeId()

def SoTextOutlineEnabledElement_getClassStackIndex() -> "int":
    """SoTextOutlineEnabledElement_getClassStackIndex() -> int"""
    return _coin.SoTextOutlineEnabledElement_getClassStackIndex()

def SoTextOutlineEnabledElement_createInstance() -> "void *":
    """SoTextOutlineEnabledElement_createInstance() -> void *"""
    return _coin.SoTextOutlineEnabledElement_createInstance()

def SoTextOutlineEnabledElement_initClass() -> "void":
    """SoTextOutlineEnabledElement_initClass()"""
    return _coin.SoTextOutlineEnabledElement_initClass()

def SoTextOutlineEnabledElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SbBool const enabled)
    SoTextOutlineEnabledElement_set(SoState state, SbBool const enabled)
    """
    return _coin.SoTextOutlineEnabledElement_set(*args)

def SoTextOutlineEnabledElement_get(state: 'SoState') -> "SbBool":
    """SoTextOutlineEnabledElement_get(SoState state) -> SbBool"""
    return _coin.SoTextOutlineEnabledElement_get(state)

def SoTextOutlineEnabledElement_getDefault() -> "SbBool":
    """SoTextOutlineEnabledElement_getDefault() -> SbBool"""
    return _coin.SoTextOutlineEnabledElement_getDefault()

class SoUnitsElement(SoInt32Element):
    """Proxy of C++ SoUnitsElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoUnitsElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoUnitsElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoUnitsElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoUnitsElement_initClass()

    initClass = staticmethod(initClass)
    METERS = _coin.SoUnitsElement_METERS
    CENTIMETERS = _coin.SoUnitsElement_CENTIMETERS
    MILLIMETERS = _coin.SoUnitsElement_MILLIMETERS
    MICROMETERS = _coin.SoUnitsElement_MICROMETERS
    MICRONS = _coin.SoUnitsElement_MICRONS
    NANOMETERS = _coin.SoUnitsElement_NANOMETERS
    ANGSTROMS = _coin.SoUnitsElement_ANGSTROMS
    KILOMETERS = _coin.SoUnitsElement_KILOMETERS
    FEET = _coin.SoUnitsElement_FEET
    INCHES = _coin.SoUnitsElement_INCHES
    POINTS = _coin.SoUnitsElement_POINTS
    YARDS = _coin.SoUnitsElement_YARDS
    MILES = _coin.SoUnitsElement_MILES
    NAUTICAL_MILES = _coin.SoUnitsElement_NAUTICAL_MILES

    def init(self, state: 'SoState') -> "void":
        """init(SoUnitsElement self, SoState state)"""
        return _coin.SoUnitsElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoUnitsElement::Units const units)
        set(SoState state, SoUnitsElement::Units const units)
        """
        return _coin.SoUnitsElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoUnitsElement::Units":
        """get(SoState state) -> SoUnitsElement::Units"""
        return _coin.SoUnitsElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoUnitsElement::Units":
        """getDefault() -> SoUnitsElement::Units"""
        return _coin.SoUnitsElement_getDefault()

    getDefault = staticmethod(getDefault)
SoUnitsElement_swigregister = _coin.SoUnitsElement_swigregister
SoUnitsElement_swigregister(SoUnitsElement)

def SoUnitsElement_getClassTypeId() -> "SoType":
    """SoUnitsElement_getClassTypeId() -> SoType"""
    return _coin.SoUnitsElement_getClassTypeId()

def SoUnitsElement_getClassStackIndex() -> "int":
    """SoUnitsElement_getClassStackIndex() -> int"""
    return _coin.SoUnitsElement_getClassStackIndex()

def SoUnitsElement_createInstance() -> "void *":
    """SoUnitsElement_createInstance() -> void *"""
    return _coin.SoUnitsElement_createInstance()

def SoUnitsElement_initClass() -> "void":
    """SoUnitsElement_initClass()"""
    return _coin.SoUnitsElement_initClass()

def SoUnitsElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoUnitsElement::Units const units)
    SoUnitsElement_set(SoState state, SoUnitsElement::Units const units)
    """
    return _coin.SoUnitsElement_set(*args)

def SoUnitsElement_get(state: 'SoState') -> "SoUnitsElement::Units":
    """SoUnitsElement_get(SoState state) -> SoUnitsElement::Units"""
    return _coin.SoUnitsElement_get(state)

def SoUnitsElement_getDefault() -> "SoUnitsElement::Units":
    """SoUnitsElement_getDefault() -> SoUnitsElement::Units"""
    return _coin.SoUnitsElement_getDefault()

class SoFocalDistanceElement(SoFloatElement):
    """Proxy of C++ SoFocalDistanceElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFocalDistanceElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoFocalDistanceElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoFocalDistanceElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFocalDistanceElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoFocalDistanceElement self, SoState state)"""
        return _coin.SoFocalDistanceElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const distance)
        set(SoState state, float const distance)
        """
        return _coin.SoFocalDistanceElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoFocalDistanceElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoFocalDistanceElement_getDefault()

    getDefault = staticmethod(getDefault)
SoFocalDistanceElement_swigregister = _coin.SoFocalDistanceElement_swigregister
SoFocalDistanceElement_swigregister(SoFocalDistanceElement)

def SoFocalDistanceElement_getClassTypeId() -> "SoType":
    """SoFocalDistanceElement_getClassTypeId() -> SoType"""
    return _coin.SoFocalDistanceElement_getClassTypeId()

def SoFocalDistanceElement_getClassStackIndex() -> "int":
    """SoFocalDistanceElement_getClassStackIndex() -> int"""
    return _coin.SoFocalDistanceElement_getClassStackIndex()

def SoFocalDistanceElement_createInstance() -> "void *":
    """SoFocalDistanceElement_createInstance() -> void *"""
    return _coin.SoFocalDistanceElement_createInstance()

def SoFocalDistanceElement_initClass() -> "void":
    """SoFocalDistanceElement_initClass()"""
    return _coin.SoFocalDistanceElement_initClass()

def SoFocalDistanceElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const distance)
    SoFocalDistanceElement_set(SoState state, float const distance)
    """
    return _coin.SoFocalDistanceElement_set(*args)

def SoFocalDistanceElement_get(state: 'SoState') -> "float":
    """SoFocalDistanceElement_get(SoState state) -> float"""
    return _coin.SoFocalDistanceElement_get(state)

def SoFocalDistanceElement_getDefault() -> "float":
    """SoFocalDistanceElement_getDefault() -> float"""
    return _coin.SoFocalDistanceElement_getDefault()

class SoFontSizeElement(SoFloatElement):
    """Proxy of C++ SoFontSizeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFontSizeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoFontSizeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoFontSizeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFontSizeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoFontSizeElement self, SoState state)"""
        return _coin.SoFontSizeElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const fontSize)
        set(SoState state, float const fontSize)
        """
        return _coin.SoFontSizeElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoFontSizeElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoFontSizeElement_getDefault()

    getDefault = staticmethod(getDefault)
SoFontSizeElement_swigregister = _coin.SoFontSizeElement_swigregister
SoFontSizeElement_swigregister(SoFontSizeElement)

def SoFontSizeElement_getClassTypeId() -> "SoType":
    """SoFontSizeElement_getClassTypeId() -> SoType"""
    return _coin.SoFontSizeElement_getClassTypeId()

def SoFontSizeElement_getClassStackIndex() -> "int":
    """SoFontSizeElement_getClassStackIndex() -> int"""
    return _coin.SoFontSizeElement_getClassStackIndex()

def SoFontSizeElement_createInstance() -> "void *":
    """SoFontSizeElement_createInstance() -> void *"""
    return _coin.SoFontSizeElement_createInstance()

def SoFontSizeElement_initClass() -> "void":
    """SoFontSizeElement_initClass()"""
    return _coin.SoFontSizeElement_initClass()

def SoFontSizeElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const fontSize)
    SoFontSizeElement_set(SoState state, float const fontSize)
    """
    return _coin.SoFontSizeElement_set(*args)

def SoFontSizeElement_get(state: 'SoState') -> "float":
    """SoFontSizeElement_get(SoState state) -> float"""
    return _coin.SoFontSizeElement_get(state)

def SoFontSizeElement_getDefault() -> "float":
    """SoFontSizeElement_getDefault() -> float"""
    return _coin.SoFontSizeElement_getDefault()

class SoLineWidthElement(SoFloatElement):
    """Proxy of C++ SoLineWidthElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLineWidthElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLineWidthElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLineWidthElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLineWidthElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoLineWidthElement self, SoState state)"""
        return _coin.SoLineWidthElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const lineWidth)
        set(SoState state, float const lineWidth)
        """
        return _coin.SoLineWidthElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoLineWidthElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoLineWidthElement_getDefault()

    getDefault = staticmethod(getDefault)
SoLineWidthElement_swigregister = _coin.SoLineWidthElement_swigregister
SoLineWidthElement_swigregister(SoLineWidthElement)

def SoLineWidthElement_getClassTypeId() -> "SoType":
    """SoLineWidthElement_getClassTypeId() -> SoType"""
    return _coin.SoLineWidthElement_getClassTypeId()

def SoLineWidthElement_getClassStackIndex() -> "int":
    """SoLineWidthElement_getClassStackIndex() -> int"""
    return _coin.SoLineWidthElement_getClassStackIndex()

def SoLineWidthElement_createInstance() -> "void *":
    """SoLineWidthElement_createInstance() -> void *"""
    return _coin.SoLineWidthElement_createInstance()

def SoLineWidthElement_initClass() -> "void":
    """SoLineWidthElement_initClass()"""
    return _coin.SoLineWidthElement_initClass()

def SoLineWidthElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const lineWidth)
    SoLineWidthElement_set(SoState state, float const lineWidth)
    """
    return _coin.SoLineWidthElement_set(*args)

def SoLineWidthElement_get(state: 'SoState') -> "float":
    """SoLineWidthElement_get(SoState state) -> float"""
    return _coin.SoLineWidthElement_get(state)

def SoLineWidthElement_getDefault() -> "float":
    """SoLineWidthElement_getDefault() -> float"""
    return _coin.SoLineWidthElement_getDefault()

class SoGLLineWidthElement(SoLineWidthElement):
    """Proxy of C++ SoGLLineWidthElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLLineWidthElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLLineWidthElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLLineWidthElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLLineWidthElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLLineWidthElement self, SoState state)"""
        return _coin.SoGLLineWidthElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLLineWidthElement self, SoState state)"""
        return _coin.SoGLLineWidthElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLLineWidthElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLLineWidthElement_pop(self, state, prevTopElement)

SoGLLineWidthElement_swigregister = _coin.SoGLLineWidthElement_swigregister
SoGLLineWidthElement_swigregister(SoGLLineWidthElement)

def SoGLLineWidthElement_getClassTypeId() -> "SoType":
    """SoGLLineWidthElement_getClassTypeId() -> SoType"""
    return _coin.SoGLLineWidthElement_getClassTypeId()

def SoGLLineWidthElement_getClassStackIndex() -> "int":
    """SoGLLineWidthElement_getClassStackIndex() -> int"""
    return _coin.SoGLLineWidthElement_getClassStackIndex()

def SoGLLineWidthElement_createInstance() -> "void *":
    """SoGLLineWidthElement_createInstance() -> void *"""
    return _coin.SoGLLineWidthElement_createInstance()

def SoGLLineWidthElement_initClass() -> "void":
    """SoGLLineWidthElement_initClass()"""
    return _coin.SoGLLineWidthElement_initClass()

class SoPointSizeElement(SoFloatElement):
    """Proxy of C++ SoPointSizeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointSizeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoPointSizeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoPointSizeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointSizeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoPointSizeElement self, SoState state)"""
        return _coin.SoPointSizeElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const pointSize)
        set(SoState state, float const pointSize)
        """
        return _coin.SoPointSizeElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoPointSizeElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoPointSizeElement_getDefault()

    getDefault = staticmethod(getDefault)
SoPointSizeElement_swigregister = _coin.SoPointSizeElement_swigregister
SoPointSizeElement_swigregister(SoPointSizeElement)

def SoPointSizeElement_getClassTypeId() -> "SoType":
    """SoPointSizeElement_getClassTypeId() -> SoType"""
    return _coin.SoPointSizeElement_getClassTypeId()

def SoPointSizeElement_getClassStackIndex() -> "int":
    """SoPointSizeElement_getClassStackIndex() -> int"""
    return _coin.SoPointSizeElement_getClassStackIndex()

def SoPointSizeElement_createInstance() -> "void *":
    """SoPointSizeElement_createInstance() -> void *"""
    return _coin.SoPointSizeElement_createInstance()

def SoPointSizeElement_initClass() -> "void":
    """SoPointSizeElement_initClass()"""
    return _coin.SoPointSizeElement_initClass()

def SoPointSizeElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const pointSize)
    SoPointSizeElement_set(SoState state, float const pointSize)
    """
    return _coin.SoPointSizeElement_set(*args)

def SoPointSizeElement_get(state: 'SoState') -> "float":
    """SoPointSizeElement_get(SoState state) -> float"""
    return _coin.SoPointSizeElement_get(state)

def SoPointSizeElement_getDefault() -> "float":
    """SoPointSizeElement_getDefault() -> float"""
    return _coin.SoPointSizeElement_getDefault()

class SoGLPointSizeElement(SoPointSizeElement):
    """Proxy of C++ SoGLPointSizeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLPointSizeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLPointSizeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLPointSizeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLPointSizeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLPointSizeElement self, SoState state)"""
        return _coin.SoGLPointSizeElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLPointSizeElement self, SoState state)"""
        return _coin.SoGLPointSizeElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLPointSizeElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLPointSizeElement_pop(self, state, prevTopElement)

SoGLPointSizeElement_swigregister = _coin.SoGLPointSizeElement_swigregister
SoGLPointSizeElement_swigregister(SoGLPointSizeElement)

def SoGLPointSizeElement_getClassTypeId() -> "SoType":
    """SoGLPointSizeElement_getClassTypeId() -> SoType"""
    return _coin.SoGLPointSizeElement_getClassTypeId()

def SoGLPointSizeElement_getClassStackIndex() -> "int":
    """SoGLPointSizeElement_getClassStackIndex() -> int"""
    return _coin.SoGLPointSizeElement_getClassStackIndex()

def SoGLPointSizeElement_createInstance() -> "void *":
    """SoGLPointSizeElement_createInstance() -> void *"""
    return _coin.SoGLPointSizeElement_createInstance()

def SoGLPointSizeElement_initClass() -> "void":
    """SoGLPointSizeElement_initClass()"""
    return _coin.SoGLPointSizeElement_initClass()

class SoTextureQualityElement(SoFloatElement):
    """Proxy of C++ SoTextureQualityElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureQualityElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextureQualityElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextureQualityElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureQualityElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoTextureQualityElement self, SoState state)"""
        return _coin.SoTextureQualityElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const quality)
        set(SoState state, float const quality)
        """
        return _coin.SoTextureQualityElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoTextureQualityElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "float":
        """getDefault() -> float"""
        return _coin.SoTextureQualityElement_getDefault()

    getDefault = staticmethod(getDefault)
SoTextureQualityElement_swigregister = _coin.SoTextureQualityElement_swigregister
SoTextureQualityElement_swigregister(SoTextureQualityElement)

def SoTextureQualityElement_getClassTypeId() -> "SoType":
    """SoTextureQualityElement_getClassTypeId() -> SoType"""
    return _coin.SoTextureQualityElement_getClassTypeId()

def SoTextureQualityElement_getClassStackIndex() -> "int":
    """SoTextureQualityElement_getClassStackIndex() -> int"""
    return _coin.SoTextureQualityElement_getClassStackIndex()

def SoTextureQualityElement_createInstance() -> "void *":
    """SoTextureQualityElement_createInstance() -> void *"""
    return _coin.SoTextureQualityElement_createInstance()

def SoTextureQualityElement_initClass() -> "void":
    """SoTextureQualityElement_initClass()"""
    return _coin.SoTextureQualityElement_initClass()

def SoTextureQualityElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const quality)
    SoTextureQualityElement_set(SoState state, float const quality)
    """
    return _coin.SoTextureQualityElement_set(*args)

def SoTextureQualityElement_get(state: 'SoState') -> "float":
    """SoTextureQualityElement_get(SoState state) -> float"""
    return _coin.SoTextureQualityElement_get(state)

def SoTextureQualityElement_getDefault() -> "float":
    """SoTextureQualityElement_getDefault() -> float"""
    return _coin.SoTextureQualityElement_getDefault()

class SoTextureOverrideElement(SoElement):
    """Proxy of C++ SoTextureOverrideElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureOverrideElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextureOverrideElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextureOverrideElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureOverrideElement_initClass()

    initClass = staticmethod(initClass)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoTextureOverrideElement self, SoElement element) -> SbBool"""
        return _coin.SoTextureOverrideElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoTextureOverrideElement self) -> SoElement"""
        return _coin.SoTextureOverrideElement_copyMatchInfo(self)


    def init(self, state: 'SoState') -> "void":
        """init(SoTextureOverrideElement self, SoState state)"""
        return _coin.SoTextureOverrideElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoTextureOverrideElement self, SoState state)"""
        return _coin.SoTextureOverrideElement_push(self, state)


    def getQualityOverride(state: 'SoState') -> "SbBool":
        """getQualityOverride(SoState state) -> SbBool"""
        return _coin.SoTextureOverrideElement_getQualityOverride(state)

    getQualityOverride = staticmethod(getQualityOverride)

    def getImageOverride(state: 'SoState') -> "SbBool":
        """getImageOverride(SoState state) -> SbBool"""
        return _coin.SoTextureOverrideElement_getImageOverride(state)

    getImageOverride = staticmethod(getImageOverride)

    def getBumpMapOverride(state: 'SoState') -> "SbBool":
        """getBumpMapOverride(SoState state) -> SbBool"""
        return _coin.SoTextureOverrideElement_getBumpMapOverride(state)

    getBumpMapOverride = staticmethod(getBumpMapOverride)

    def setQualityOverride(state: 'SoState', value: 'SbBool const') -> "void":
        """setQualityOverride(SoState state, SbBool const value)"""
        return _coin.SoTextureOverrideElement_setQualityOverride(state, value)

    setQualityOverride = staticmethod(setQualityOverride)

    def setImageOverride(state: 'SoState', value: 'SbBool const') -> "void":
        """setImageOverride(SoState state, SbBool const value)"""
        return _coin.SoTextureOverrideElement_setImageOverride(state, value)

    setImageOverride = staticmethod(setImageOverride)

    def setBumpMapOverride(state: 'SoState', value: 'SbBool const') -> "void":
        """setBumpMapOverride(SoState state, SbBool const value)"""
        return _coin.SoTextureOverrideElement_setBumpMapOverride(state, value)

    setBumpMapOverride = staticmethod(setBumpMapOverride)

    def output(self, fp: 'FILE *') -> "void":
        """output(SoTextureOverrideElement self, FILE * fp)"""
        return _coin.SoTextureOverrideElement_output(self, fp)

SoTextureOverrideElement_swigregister = _coin.SoTextureOverrideElement_swigregister
SoTextureOverrideElement_swigregister(SoTextureOverrideElement)

def SoTextureOverrideElement_getClassTypeId() -> "SoType":
    """SoTextureOverrideElement_getClassTypeId() -> SoType"""
    return _coin.SoTextureOverrideElement_getClassTypeId()

def SoTextureOverrideElement_getClassStackIndex() -> "int":
    """SoTextureOverrideElement_getClassStackIndex() -> int"""
    return _coin.SoTextureOverrideElement_getClassStackIndex()

def SoTextureOverrideElement_createInstance() -> "void *":
    """SoTextureOverrideElement_createInstance() -> void *"""
    return _coin.SoTextureOverrideElement_createInstance()

def SoTextureOverrideElement_initClass() -> "void":
    """SoTextureOverrideElement_initClass()"""
    return _coin.SoTextureOverrideElement_initClass()

def SoTextureOverrideElement_getQualityOverride(state: 'SoState') -> "SbBool":
    """SoTextureOverrideElement_getQualityOverride(SoState state) -> SbBool"""
    return _coin.SoTextureOverrideElement_getQualityOverride(state)

def SoTextureOverrideElement_getImageOverride(state: 'SoState') -> "SbBool":
    """SoTextureOverrideElement_getImageOverride(SoState state) -> SbBool"""
    return _coin.SoTextureOverrideElement_getImageOverride(state)

def SoTextureOverrideElement_getBumpMapOverride(state: 'SoState') -> "SbBool":
    """SoTextureOverrideElement_getBumpMapOverride(SoState state) -> SbBool"""
    return _coin.SoTextureOverrideElement_getBumpMapOverride(state)

def SoTextureOverrideElement_setQualityOverride(state: 'SoState', value: 'SbBool const') -> "void":
    """SoTextureOverrideElement_setQualityOverride(SoState state, SbBool const value)"""
    return _coin.SoTextureOverrideElement_setQualityOverride(state, value)

def SoTextureOverrideElement_setImageOverride(state: 'SoState', value: 'SbBool const') -> "void":
    """SoTextureOverrideElement_setImageOverride(SoState state, SbBool const value)"""
    return _coin.SoTextureOverrideElement_setImageOverride(state, value)

def SoTextureOverrideElement_setBumpMapOverride(state: 'SoState', value: 'SbBool const') -> "void":
    """SoTextureOverrideElement_setBumpMapOverride(SoState state, SbBool const value)"""
    return _coin.SoTextureOverrideElement_setBumpMapOverride(state, value)

class SoGLRenderPassElement(SoElement):
    """Proxy of C++ SoGLRenderPassElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLRenderPassElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLRenderPassElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLRenderPassElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLRenderPassElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLRenderPassElement self, SoState state)"""
        return _coin.SoGLRenderPassElement_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoGLRenderPassElement self, SoElement element) -> SbBool"""
        return _coin.SoGLRenderPassElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoGLRenderPassElement self) -> SoElement"""
        return _coin.SoGLRenderPassElement_copyMatchInfo(self)


    def set(state: 'SoState', passNumber: 'int const') -> "void":
        """set(SoState state, int const passNumber)"""
        return _coin.SoGLRenderPassElement_set(state, passNumber)

    set = staticmethod(set)

    def get(state: 'SoState') -> "int":
        """get(SoState state) -> int"""
        return _coin.SoGLRenderPassElement_get(state)

    get = staticmethod(get)
SoGLRenderPassElement_swigregister = _coin.SoGLRenderPassElement_swigregister
SoGLRenderPassElement_swigregister(SoGLRenderPassElement)

def SoGLRenderPassElement_getClassTypeId() -> "SoType":
    """SoGLRenderPassElement_getClassTypeId() -> SoType"""
    return _coin.SoGLRenderPassElement_getClassTypeId()

def SoGLRenderPassElement_getClassStackIndex() -> "int":
    """SoGLRenderPassElement_getClassStackIndex() -> int"""
    return _coin.SoGLRenderPassElement_getClassStackIndex()

def SoGLRenderPassElement_createInstance() -> "void *":
    """SoGLRenderPassElement_createInstance() -> void *"""
    return _coin.SoGLRenderPassElement_createInstance()

def SoGLRenderPassElement_initClass() -> "void":
    """SoGLRenderPassElement_initClass()"""
    return _coin.SoGLRenderPassElement_initClass()

def SoGLRenderPassElement_set(state: 'SoState', passNumber: 'int const') -> "void":
    """SoGLRenderPassElement_set(SoState state, int const passNumber)"""
    return _coin.SoGLRenderPassElement_set(state, passNumber)

def SoGLRenderPassElement_get(state: 'SoState') -> "int":
    """SoGLRenderPassElement_get(SoState state) -> int"""
    return _coin.SoGLRenderPassElement_get(state)

class SoGLUpdateAreaElement(SoElement):
    """Proxy of C++ SoGLUpdateAreaElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLUpdateAreaElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLUpdateAreaElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLUpdateAreaElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLUpdateAreaElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLUpdateAreaElement self, SoState state)"""
        return _coin.SoGLUpdateAreaElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLUpdateAreaElement self, SoState state)"""
        return _coin.SoGLUpdateAreaElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLUpdateAreaElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLUpdateAreaElement_pop(self, state, prevTopElement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoGLUpdateAreaElement self, SoElement element) -> SbBool"""
        return _coin.SoGLUpdateAreaElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoGLUpdateAreaElement self) -> SoElement"""
        return _coin.SoGLUpdateAreaElement_copyMatchInfo(self)


    def set(state: 'SoState', origin: 'SbVec2f', size: 'SbVec2f') -> "void":
        """set(SoState state, SbVec2f origin, SbVec2f size)"""
        return _coin.SoGLUpdateAreaElement_set(state, origin, size)

    set = staticmethod(set)

    def get(state: 'SoState', origin: 'SbVec2f', size: 'SbVec2f') -> "SbBool":
        """get(SoState state, SbVec2f origin, SbVec2f size) -> SbBool"""
        return _coin.SoGLUpdateAreaElement_get(state, origin, size)

    get = staticmethod(get)

    def getDefaultOrigin() -> "SbVec2f":
        """getDefaultOrigin() -> SbVec2f"""
        return _coin.SoGLUpdateAreaElement_getDefaultOrigin()

    getDefaultOrigin = staticmethod(getDefaultOrigin)

    def getDefaultSize() -> "SbVec2f":
        """getDefaultSize() -> SbVec2f"""
        return _coin.SoGLUpdateAreaElement_getDefaultSize()

    getDefaultSize = staticmethod(getDefaultSize)
SoGLUpdateAreaElement_swigregister = _coin.SoGLUpdateAreaElement_swigregister
SoGLUpdateAreaElement_swigregister(SoGLUpdateAreaElement)

def SoGLUpdateAreaElement_getClassTypeId() -> "SoType":
    """SoGLUpdateAreaElement_getClassTypeId() -> SoType"""
    return _coin.SoGLUpdateAreaElement_getClassTypeId()

def SoGLUpdateAreaElement_getClassStackIndex() -> "int":
    """SoGLUpdateAreaElement_getClassStackIndex() -> int"""
    return _coin.SoGLUpdateAreaElement_getClassStackIndex()

def SoGLUpdateAreaElement_createInstance() -> "void *":
    """SoGLUpdateAreaElement_createInstance() -> void *"""
    return _coin.SoGLUpdateAreaElement_createInstance()

def SoGLUpdateAreaElement_initClass() -> "void":
    """SoGLUpdateAreaElement_initClass()"""
    return _coin.SoGLUpdateAreaElement_initClass()

def SoGLUpdateAreaElement_set(state: 'SoState', origin: 'SbVec2f', size: 'SbVec2f') -> "void":
    """SoGLUpdateAreaElement_set(SoState state, SbVec2f origin, SbVec2f size)"""
    return _coin.SoGLUpdateAreaElement_set(state, origin, size)

def SoGLUpdateAreaElement_get(state: 'SoState', origin: 'SbVec2f', size: 'SbVec2f') -> "SbBool":
    """SoGLUpdateAreaElement_get(SoState state, SbVec2f origin, SbVec2f size) -> SbBool"""
    return _coin.SoGLUpdateAreaElement_get(state, origin, size)

def SoGLUpdateAreaElement_getDefaultOrigin() -> "SbVec2f":
    """SoGLUpdateAreaElement_getDefaultOrigin() -> SbVec2f"""
    return _coin.SoGLUpdateAreaElement_getDefaultOrigin()

def SoGLUpdateAreaElement_getDefaultSize() -> "SbVec2f":
    """SoGLUpdateAreaElement_getDefaultSize() -> SbVec2f"""
    return _coin.SoGLUpdateAreaElement_getDefaultSize()

class SoLocalBBoxMatrixElement(SoElement):
    """Proxy of C++ SoLocalBBoxMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLocalBBoxMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLocalBBoxMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLocalBBoxMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLocalBBoxMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoLocalBBoxMatrixElement self, SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoLocalBBoxMatrixElement self, SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_push(self, state)


    def makeIdentity(state: 'SoState') -> "void":
        """makeIdentity(SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_makeIdentity(state)

    makeIdentity = staticmethod(makeIdentity)

    def set(state: 'SoState') -> "SbMatrix &":
        """set(SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_set(state)

    set = staticmethod(set)

    def mult(state: 'SoState') -> "SbMatrix &":
        """mult(SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_mult(state)

    mult = staticmethod(mult)

    def translateBy(state: 'SoState', translation: 'SbVec3f') -> "void":
        """translateBy(SoState state, SbVec3f translation)"""
        return _coin.SoLocalBBoxMatrixElement_translateBy(state, translation)

    translateBy = staticmethod(translateBy)

    def rotateBy(state: 'SoState', rotation: 'SbRotation') -> "void":
        """rotateBy(SoState state, SbRotation rotation)"""
        return _coin.SoLocalBBoxMatrixElement_rotateBy(state, rotation)

    rotateBy = staticmethod(rotateBy)

    def scaleBy(state: 'SoState', scaleFactor: 'SbVec3f') -> "void":
        """scaleBy(SoState state, SbVec3f scaleFactor)"""
        return _coin.SoLocalBBoxMatrixElement_scaleBy(state, scaleFactor)

    scaleBy = staticmethod(scaleBy)

    def pushMatrix(state: 'SoState') -> "SbMatrix":
        """pushMatrix(SoState state) -> SbMatrix"""
        return _coin.SoLocalBBoxMatrixElement_pushMatrix(state)

    pushMatrix = staticmethod(pushMatrix)

    def popMatrix(state: 'SoState') -> "SbMatrix &":
        """popMatrix(SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_popMatrix(state)

    popMatrix = staticmethod(popMatrix)

    def resetAll(state: 'SoState') -> "void":
        """resetAll(SoState state)"""
        return _coin.SoLocalBBoxMatrixElement_resetAll(state)

    resetAll = staticmethod(resetAll)

    def get(state: 'SoState') -> "SbMatrix const &":
        """get(SoState state) -> SbMatrix"""
        return _coin.SoLocalBBoxMatrixElement_get(state)

    get = staticmethod(get)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoLocalBBoxMatrixElement self, SoElement element) -> SbBool"""
        return _coin.SoLocalBBoxMatrixElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoLocalBBoxMatrixElement self) -> SoElement"""
        return _coin.SoLocalBBoxMatrixElement_copyMatchInfo(self)

SoLocalBBoxMatrixElement_swigregister = _coin.SoLocalBBoxMatrixElement_swigregister
SoLocalBBoxMatrixElement_swigregister(SoLocalBBoxMatrixElement)

def SoLocalBBoxMatrixElement_getClassTypeId() -> "SoType":
    """SoLocalBBoxMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoLocalBBoxMatrixElement_getClassTypeId()

def SoLocalBBoxMatrixElement_getClassStackIndex() -> "int":
    """SoLocalBBoxMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoLocalBBoxMatrixElement_getClassStackIndex()

def SoLocalBBoxMatrixElement_createInstance() -> "void *":
    """SoLocalBBoxMatrixElement_createInstance() -> void *"""
    return _coin.SoLocalBBoxMatrixElement_createInstance()

def SoLocalBBoxMatrixElement_initClass() -> "void":
    """SoLocalBBoxMatrixElement_initClass()"""
    return _coin.SoLocalBBoxMatrixElement_initClass()

def SoLocalBBoxMatrixElement_makeIdentity(state: 'SoState') -> "void":
    """SoLocalBBoxMatrixElement_makeIdentity(SoState state)"""
    return _coin.SoLocalBBoxMatrixElement_makeIdentity(state)

def SoLocalBBoxMatrixElement_set(state: 'SoState') -> "SbMatrix &":
    """SoLocalBBoxMatrixElement_set(SoState state)"""
    return _coin.SoLocalBBoxMatrixElement_set(state)

def SoLocalBBoxMatrixElement_mult(state: 'SoState') -> "SbMatrix &":
    """SoLocalBBoxMatrixElement_mult(SoState state)"""
    return _coin.SoLocalBBoxMatrixElement_mult(state)

def SoLocalBBoxMatrixElement_translateBy(state: 'SoState', translation: 'SbVec3f') -> "void":
    """SoLocalBBoxMatrixElement_translateBy(SoState state, SbVec3f translation)"""
    return _coin.SoLocalBBoxMatrixElement_translateBy(state, translation)

def SoLocalBBoxMatrixElement_rotateBy(state: 'SoState', rotation: 'SbRotation') -> "void":
    """SoLocalBBoxMatrixElement_rotateBy(SoState state, SbRotation rotation)"""
    return _coin.SoLocalBBoxMatrixElement_rotateBy(state, rotation)

def SoLocalBBoxMatrixElement_scaleBy(state: 'SoState', scaleFactor: 'SbVec3f') -> "void":
    """SoLocalBBoxMatrixElement_scaleBy(SoState state, SbVec3f scaleFactor)"""
    return _coin.SoLocalBBoxMatrixElement_scaleBy(state, scaleFactor)

def SoLocalBBoxMatrixElement_pushMatrix(state: 'SoState') -> "SbMatrix":
    """SoLocalBBoxMatrixElement_pushMatrix(SoState state) -> SbMatrix"""
    return _coin.SoLocalBBoxMatrixElement_pushMatrix(state)

def SoLocalBBoxMatrixElement_popMatrix(state: 'SoState') -> "SbMatrix &":
    """SoLocalBBoxMatrixElement_popMatrix(SoState state)"""
    return _coin.SoLocalBBoxMatrixElement_popMatrix(state)

def SoLocalBBoxMatrixElement_resetAll(state: 'SoState') -> "void":
    """SoLocalBBoxMatrixElement_resetAll(SoState state)"""
    return _coin.SoLocalBBoxMatrixElement_resetAll(state)

def SoLocalBBoxMatrixElement_get(state: 'SoState') -> "SbMatrix const &":
    """SoLocalBBoxMatrixElement_get(SoState state) -> SbMatrix"""
    return _coin.SoLocalBBoxMatrixElement_get(state)

class SoOverrideElement(SoElement):
    """Proxy of C++ SoOverrideElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoOverrideElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoOverrideElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoOverrideElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoOverrideElement_initClass()

    initClass = staticmethod(initClass)
    AMBIENT_COLOR = _coin.SoOverrideElement_AMBIENT_COLOR
    COLOR_INDEX = _coin.SoOverrideElement_COLOR_INDEX
    COMPLEXITY = _coin.SoOverrideElement_COMPLEXITY
    COMPLEXITY_TYPE = _coin.SoOverrideElement_COMPLEXITY_TYPE
    CREASE_ANGLE = _coin.SoOverrideElement_CREASE_ANGLE
    DIFFUSE_COLOR = _coin.SoOverrideElement_DIFFUSE_COLOR
    DRAW_STYLE = _coin.SoOverrideElement_DRAW_STYLE
    EMISSIVE_COLOR = _coin.SoOverrideElement_EMISSIVE_COLOR
    FONT_NAME = _coin.SoOverrideElement_FONT_NAME
    FONT_SIZE = _coin.SoOverrideElement_FONT_SIZE
    LIGHT_MODEL = _coin.SoOverrideElement_LIGHT_MODEL
    LINE_PATTERN = _coin.SoOverrideElement_LINE_PATTERN
    LINE_WIDTH = _coin.SoOverrideElement_LINE_WIDTH
    MATERIAL_BINDING = _coin.SoOverrideElement_MATERIAL_BINDING
    POINT_SIZE = _coin.SoOverrideElement_POINT_SIZE
    PICK_STYLE = _coin.SoOverrideElement_PICK_STYLE
    SHAPE_HINTS = _coin.SoOverrideElement_SHAPE_HINTS
    SHININESS = _coin.SoOverrideElement_SHININESS
    SPECULAR_COLOR = _coin.SoOverrideElement_SPECULAR_COLOR
    POLYGON_OFFSET = _coin.SoOverrideElement_POLYGON_OFFSET
    TRANSPARENCY = _coin.SoOverrideElement_TRANSPARENCY
    TRANSPARENCY_TYPE = _coin.SoOverrideElement_TRANSPARENCY_TYPE
    NORMAL_VECTOR = _coin.SoOverrideElement_NORMAL_VECTOR
    NORMAL_BINDING = _coin.SoOverrideElement_NORMAL_BINDING

    def init(self, state: 'SoState') -> "void":
        """init(SoOverrideElement self, SoState state)"""
        return _coin.SoOverrideElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoOverrideElement self, SoState state)"""
        return _coin.SoOverrideElement_push(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoOverrideElement self, SoElement element) -> SbBool"""
        return _coin.SoOverrideElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoOverrideElement self) -> SoElement"""
        return _coin.SoOverrideElement_copyMatchInfo(self)


    def getFlags(state: 'SoState') -> "uint32_t":
        """getFlags(SoState state) -> uint32_t"""
        return _coin.SoOverrideElement_getFlags(state)

    getFlags = staticmethod(getFlags)

    def getAmbientColorOverride(state: 'SoState') -> "SbBool":
        """getAmbientColorOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getAmbientColorOverride(state)

    getAmbientColorOverride = staticmethod(getAmbientColorOverride)

    def getColorIndexOverride(state: 'SoState') -> "SbBool":
        """getColorIndexOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getColorIndexOverride(state)

    getColorIndexOverride = staticmethod(getColorIndexOverride)

    def getComplexityOverride(state: 'SoState') -> "SbBool":
        """getComplexityOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getComplexityOverride(state)

    getComplexityOverride = staticmethod(getComplexityOverride)

    def getComplexityTypeOverride(state: 'SoState') -> "SbBool":
        """getComplexityTypeOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getComplexityTypeOverride(state)

    getComplexityTypeOverride = staticmethod(getComplexityTypeOverride)

    def getCreaseAngleOverride(state: 'SoState') -> "SbBool":
        """getCreaseAngleOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getCreaseAngleOverride(state)

    getCreaseAngleOverride = staticmethod(getCreaseAngleOverride)

    def getDiffuseColorOverride(state: 'SoState') -> "SbBool":
        """getDiffuseColorOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getDiffuseColorOverride(state)

    getDiffuseColorOverride = staticmethod(getDiffuseColorOverride)

    def getDrawStyleOverride(state: 'SoState') -> "SbBool":
        """getDrawStyleOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getDrawStyleOverride(state)

    getDrawStyleOverride = staticmethod(getDrawStyleOverride)

    def getEmissiveColorOverride(state: 'SoState') -> "SbBool":
        """getEmissiveColorOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getEmissiveColorOverride(state)

    getEmissiveColorOverride = staticmethod(getEmissiveColorOverride)

    def getFontNameOverride(state: 'SoState') -> "SbBool":
        """getFontNameOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getFontNameOverride(state)

    getFontNameOverride = staticmethod(getFontNameOverride)

    def getFontSizeOverride(state: 'SoState') -> "SbBool":
        """getFontSizeOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getFontSizeOverride(state)

    getFontSizeOverride = staticmethod(getFontSizeOverride)

    def getLightModelOverride(state: 'SoState') -> "SbBool":
        """getLightModelOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getLightModelOverride(state)

    getLightModelOverride = staticmethod(getLightModelOverride)

    def getLinePatternOverride(state: 'SoState') -> "SbBool":
        """getLinePatternOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getLinePatternOverride(state)

    getLinePatternOverride = staticmethod(getLinePatternOverride)

    def getLineWidthOverride(state: 'SoState') -> "SbBool":
        """getLineWidthOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getLineWidthOverride(state)

    getLineWidthOverride = staticmethod(getLineWidthOverride)

    def getMaterialBindingOverride(state: 'SoState') -> "SbBool":
        """getMaterialBindingOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getMaterialBindingOverride(state)

    getMaterialBindingOverride = staticmethod(getMaterialBindingOverride)

    def getPickStyleOverride(state: 'SoState') -> "SbBool":
        """getPickStyleOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getPickStyleOverride(state)

    getPickStyleOverride = staticmethod(getPickStyleOverride)

    def getPointSizeOverride(state: 'SoState') -> "SbBool":
        """getPointSizeOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getPointSizeOverride(state)

    getPointSizeOverride = staticmethod(getPointSizeOverride)

    def getPolygonOffsetOverride(state: 'SoState') -> "SbBool":
        """getPolygonOffsetOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getPolygonOffsetOverride(state)

    getPolygonOffsetOverride = staticmethod(getPolygonOffsetOverride)

    def getShapeHintsOverride(state: 'SoState') -> "SbBool":
        """getShapeHintsOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getShapeHintsOverride(state)

    getShapeHintsOverride = staticmethod(getShapeHintsOverride)

    def getShininessOverride(state: 'SoState') -> "SbBool":
        """getShininessOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getShininessOverride(state)

    getShininessOverride = staticmethod(getShininessOverride)

    def getSpecularColorOverride(state: 'SoState') -> "SbBool":
        """getSpecularColorOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getSpecularColorOverride(state)

    getSpecularColorOverride = staticmethod(getSpecularColorOverride)

    def getTransparencyOverride(state: 'SoState') -> "SbBool":
        """getTransparencyOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getTransparencyOverride(state)

    getTransparencyOverride = staticmethod(getTransparencyOverride)

    def getTransparencyTypeOverride(state: 'SoState') -> "SbBool":
        """getTransparencyTypeOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getTransparencyTypeOverride(state)

    getTransparencyTypeOverride = staticmethod(getTransparencyTypeOverride)

    def getNormalVectorOverride(state: 'SoState') -> "SbBool":
        """getNormalVectorOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getNormalVectorOverride(state)

    getNormalVectorOverride = staticmethod(getNormalVectorOverride)

    def getNormalBindingOverride(state: 'SoState') -> "SbBool":
        """getNormalBindingOverride(SoState state) -> SbBool"""
        return _coin.SoOverrideElement_getNormalBindingOverride(state)

    getNormalBindingOverride = staticmethod(getNormalBindingOverride)

    def setAmbientColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setAmbientColorOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setAmbientColorOverride(state, node, override)

    setAmbientColorOverride = staticmethod(setAmbientColorOverride)

    def setColorIndexOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setColorIndexOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setColorIndexOverride(state, node, override)

    setColorIndexOverride = staticmethod(setColorIndexOverride)

    def setComplexityOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setComplexityOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setComplexityOverride(state, node, override)

    setComplexityOverride = staticmethod(setComplexityOverride)

    def setComplexityTypeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setComplexityTypeOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setComplexityTypeOverride(state, node, override)

    setComplexityTypeOverride = staticmethod(setComplexityTypeOverride)

    def setCreaseAngleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setCreaseAngleOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setCreaseAngleOverride(state, node, override)

    setCreaseAngleOverride = staticmethod(setCreaseAngleOverride)

    def setDiffuseColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setDiffuseColorOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setDiffuseColorOverride(state, node, override)

    setDiffuseColorOverride = staticmethod(setDiffuseColorOverride)

    def setDrawStyleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setDrawStyleOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setDrawStyleOverride(state, node, override)

    setDrawStyleOverride = staticmethod(setDrawStyleOverride)

    def setEmissiveColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setEmissiveColorOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setEmissiveColorOverride(state, node, override)

    setEmissiveColorOverride = staticmethod(setEmissiveColorOverride)

    def setFontNameOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setFontNameOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setFontNameOverride(state, node, override)

    setFontNameOverride = staticmethod(setFontNameOverride)

    def setFontSizeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setFontSizeOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setFontSizeOverride(state, node, override)

    setFontSizeOverride = staticmethod(setFontSizeOverride)

    def setLightModelOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setLightModelOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setLightModelOverride(state, node, override)

    setLightModelOverride = staticmethod(setLightModelOverride)

    def setLinePatternOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setLinePatternOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setLinePatternOverride(state, node, override)

    setLinePatternOverride = staticmethod(setLinePatternOverride)

    def setLineWidthOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setLineWidthOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setLineWidthOverride(state, node, override)

    setLineWidthOverride = staticmethod(setLineWidthOverride)

    def setMaterialBindingOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setMaterialBindingOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setMaterialBindingOverride(state, node, override)

    setMaterialBindingOverride = staticmethod(setMaterialBindingOverride)

    def setPickStyleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setPickStyleOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setPickStyleOverride(state, node, override)

    setPickStyleOverride = staticmethod(setPickStyleOverride)

    def setPointSizeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setPointSizeOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setPointSizeOverride(state, node, override)

    setPointSizeOverride = staticmethod(setPointSizeOverride)

    def setPolygonOffsetOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setPolygonOffsetOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setPolygonOffsetOverride(state, node, override)

    setPolygonOffsetOverride = staticmethod(setPolygonOffsetOverride)

    def setShapeHintsOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setShapeHintsOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setShapeHintsOverride(state, node, override)

    setShapeHintsOverride = staticmethod(setShapeHintsOverride)

    def setShininessOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setShininessOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setShininessOverride(state, node, override)

    setShininessOverride = staticmethod(setShininessOverride)

    def setSpecularColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setSpecularColorOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setSpecularColorOverride(state, node, override)

    setSpecularColorOverride = staticmethod(setSpecularColorOverride)

    def setTransparencyOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setTransparencyOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setTransparencyOverride(state, node, override)

    setTransparencyOverride = staticmethod(setTransparencyOverride)

    def setTransparencyTypeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setTransparencyTypeOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setTransparencyTypeOverride(state, node, override)

    setTransparencyTypeOverride = staticmethod(setTransparencyTypeOverride)

    def setNormalVectorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setNormalVectorOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setNormalVectorOverride(state, node, override)

    setNormalVectorOverride = staticmethod(setNormalVectorOverride)

    def setNormalBindingOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
        """setNormalBindingOverride(SoState state, SoNode node, SbBool const override)"""
        return _coin.SoOverrideElement_setNormalBindingOverride(state, node, override)

    setNormalBindingOverride = staticmethod(setNormalBindingOverride)

    def output(self, file: 'FILE *') -> "void":
        """output(SoOverrideElement self, FILE * file)"""
        return _coin.SoOverrideElement_output(self, file)

SoOverrideElement_swigregister = _coin.SoOverrideElement_swigregister
SoOverrideElement_swigregister(SoOverrideElement)

def SoOverrideElement_getClassTypeId() -> "SoType":
    """SoOverrideElement_getClassTypeId() -> SoType"""
    return _coin.SoOverrideElement_getClassTypeId()

def SoOverrideElement_getClassStackIndex() -> "int":
    """SoOverrideElement_getClassStackIndex() -> int"""
    return _coin.SoOverrideElement_getClassStackIndex()

def SoOverrideElement_createInstance() -> "void *":
    """SoOverrideElement_createInstance() -> void *"""
    return _coin.SoOverrideElement_createInstance()

def SoOverrideElement_initClass() -> "void":
    """SoOverrideElement_initClass()"""
    return _coin.SoOverrideElement_initClass()

def SoOverrideElement_getFlags(state: 'SoState') -> "uint32_t":
    """SoOverrideElement_getFlags(SoState state) -> uint32_t"""
    return _coin.SoOverrideElement_getFlags(state)

def SoOverrideElement_getAmbientColorOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getAmbientColorOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getAmbientColorOverride(state)

def SoOverrideElement_getColorIndexOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getColorIndexOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getColorIndexOverride(state)

def SoOverrideElement_getComplexityOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getComplexityOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getComplexityOverride(state)

def SoOverrideElement_getComplexityTypeOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getComplexityTypeOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getComplexityTypeOverride(state)

def SoOverrideElement_getCreaseAngleOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getCreaseAngleOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getCreaseAngleOverride(state)

def SoOverrideElement_getDiffuseColorOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getDiffuseColorOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getDiffuseColorOverride(state)

def SoOverrideElement_getDrawStyleOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getDrawStyleOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getDrawStyleOverride(state)

def SoOverrideElement_getEmissiveColorOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getEmissiveColorOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getEmissiveColorOverride(state)

def SoOverrideElement_getFontNameOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getFontNameOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getFontNameOverride(state)

def SoOverrideElement_getFontSizeOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getFontSizeOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getFontSizeOverride(state)

def SoOverrideElement_getLightModelOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getLightModelOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getLightModelOverride(state)

def SoOverrideElement_getLinePatternOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getLinePatternOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getLinePatternOverride(state)

def SoOverrideElement_getLineWidthOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getLineWidthOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getLineWidthOverride(state)

def SoOverrideElement_getMaterialBindingOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getMaterialBindingOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getMaterialBindingOverride(state)

def SoOverrideElement_getPickStyleOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getPickStyleOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getPickStyleOverride(state)

def SoOverrideElement_getPointSizeOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getPointSizeOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getPointSizeOverride(state)

def SoOverrideElement_getPolygonOffsetOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getPolygonOffsetOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getPolygonOffsetOverride(state)

def SoOverrideElement_getShapeHintsOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getShapeHintsOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getShapeHintsOverride(state)

def SoOverrideElement_getShininessOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getShininessOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getShininessOverride(state)

def SoOverrideElement_getSpecularColorOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getSpecularColorOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getSpecularColorOverride(state)

def SoOverrideElement_getTransparencyOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getTransparencyOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getTransparencyOverride(state)

def SoOverrideElement_getTransparencyTypeOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getTransparencyTypeOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getTransparencyTypeOverride(state)

def SoOverrideElement_getNormalVectorOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getNormalVectorOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getNormalVectorOverride(state)

def SoOverrideElement_getNormalBindingOverride(state: 'SoState') -> "SbBool":
    """SoOverrideElement_getNormalBindingOverride(SoState state) -> SbBool"""
    return _coin.SoOverrideElement_getNormalBindingOverride(state)

def SoOverrideElement_setAmbientColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setAmbientColorOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setAmbientColorOverride(state, node, override)

def SoOverrideElement_setColorIndexOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setColorIndexOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setColorIndexOverride(state, node, override)

def SoOverrideElement_setComplexityOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setComplexityOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setComplexityOverride(state, node, override)

def SoOverrideElement_setComplexityTypeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setComplexityTypeOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setComplexityTypeOverride(state, node, override)

def SoOverrideElement_setCreaseAngleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setCreaseAngleOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setCreaseAngleOverride(state, node, override)

def SoOverrideElement_setDiffuseColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setDiffuseColorOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setDiffuseColorOverride(state, node, override)

def SoOverrideElement_setDrawStyleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setDrawStyleOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setDrawStyleOverride(state, node, override)

def SoOverrideElement_setEmissiveColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setEmissiveColorOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setEmissiveColorOverride(state, node, override)

def SoOverrideElement_setFontNameOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setFontNameOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setFontNameOverride(state, node, override)

def SoOverrideElement_setFontSizeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setFontSizeOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setFontSizeOverride(state, node, override)

def SoOverrideElement_setLightModelOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setLightModelOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setLightModelOverride(state, node, override)

def SoOverrideElement_setLinePatternOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setLinePatternOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setLinePatternOverride(state, node, override)

def SoOverrideElement_setLineWidthOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setLineWidthOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setLineWidthOverride(state, node, override)

def SoOverrideElement_setMaterialBindingOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setMaterialBindingOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setMaterialBindingOverride(state, node, override)

def SoOverrideElement_setPickStyleOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setPickStyleOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setPickStyleOverride(state, node, override)

def SoOverrideElement_setPointSizeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setPointSizeOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setPointSizeOverride(state, node, override)

def SoOverrideElement_setPolygonOffsetOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setPolygonOffsetOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setPolygonOffsetOverride(state, node, override)

def SoOverrideElement_setShapeHintsOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setShapeHintsOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setShapeHintsOverride(state, node, override)

def SoOverrideElement_setShininessOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setShininessOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setShininessOverride(state, node, override)

def SoOverrideElement_setSpecularColorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setSpecularColorOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setSpecularColorOverride(state, node, override)

def SoOverrideElement_setTransparencyOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setTransparencyOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setTransparencyOverride(state, node, override)

def SoOverrideElement_setTransparencyTypeOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setTransparencyTypeOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setTransparencyTypeOverride(state, node, override)

def SoOverrideElement_setNormalVectorOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setNormalVectorOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setNormalVectorOverride(state, node, override)

def SoOverrideElement_setNormalBindingOverride(state: 'SoState', node: 'SoNode', override: 'SbBool const') -> "void":
    """SoOverrideElement_setNormalBindingOverride(SoState state, SoNode node, SbBool const override)"""
    return _coin.SoOverrideElement_setNormalBindingOverride(state, node, override)

class SoPickRayElement(SoElement):
    """Proxy of C++ SoPickRayElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPickRayElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoPickRayElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoPickRayElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPickRayElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoPickRayElement self, SoState state)"""
        return _coin.SoPickRayElement_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoPickRayElement self, SoElement element) -> SbBool"""
        return _coin.SoPickRayElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoPickRayElement self) -> SoElement"""
        return _coin.SoPickRayElement_copyMatchInfo(self)


    def set(state: 'SoState', volume: 'SbViewVolume') -> "void":
        """set(SoState state, SbViewVolume volume)"""
        return _coin.SoPickRayElement_set(state, volume)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbViewVolume const &":
        """get(SoState state) -> SbViewVolume"""
        return _coin.SoPickRayElement_get(state)

    get = staticmethod(get)
SoPickRayElement_swigregister = _coin.SoPickRayElement_swigregister
SoPickRayElement_swigregister(SoPickRayElement)

def SoPickRayElement_getClassTypeId() -> "SoType":
    """SoPickRayElement_getClassTypeId() -> SoType"""
    return _coin.SoPickRayElement_getClassTypeId()

def SoPickRayElement_getClassStackIndex() -> "int":
    """SoPickRayElement_getClassStackIndex() -> int"""
    return _coin.SoPickRayElement_getClassStackIndex()

def SoPickRayElement_createInstance() -> "void *":
    """SoPickRayElement_createInstance() -> void *"""
    return _coin.SoPickRayElement_createInstance()

def SoPickRayElement_initClass() -> "void":
    """SoPickRayElement_initClass()"""
    return _coin.SoPickRayElement_initClass()

def SoPickRayElement_set(state: 'SoState', volume: 'SbViewVolume') -> "void":
    """SoPickRayElement_set(SoState state, SbViewVolume volume)"""
    return _coin.SoPickRayElement_set(state, volume)

def SoPickRayElement_get(state: 'SoState') -> "SbViewVolume const &":
    """SoPickRayElement_get(SoState state) -> SbViewVolume"""
    return _coin.SoPickRayElement_get(state)

class SoGLCoordinateElement(SoCoordinateElement):
    """Proxy of C++ SoGLCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLCoordinateElement_initClass()

    initClass = staticmethod(initClass)

    def getPtr3(self) -> "SbVec3f const *":
        """getPtr3(SoGLCoordinateElement self) -> SbVec3f"""
        return _coin.SoGLCoordinateElement_getPtr3(self)


    def getPtr4(self) -> "SbVec4f const *":
        """getPtr4(SoGLCoordinateElement self) -> SbVec4f"""
        return _coin.SoGLCoordinateElement_getPtr4(self)


    def send(self, index: 'int const') -> "void":
        """send(SoGLCoordinateElement self, int const index)"""
        return _coin.SoGLCoordinateElement_send(self, index)

SoGLCoordinateElement_swigregister = _coin.SoGLCoordinateElement_swigregister
SoGLCoordinateElement_swigregister(SoGLCoordinateElement)

def SoGLCoordinateElement_getClassTypeId() -> "SoType":
    """SoGLCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoGLCoordinateElement_getClassTypeId()

def SoGLCoordinateElement_getClassStackIndex() -> "int":
    """SoGLCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoGLCoordinateElement_getClassStackIndex()

def SoGLCoordinateElement_createInstance() -> "void *":
    """SoGLCoordinateElement_createInstance() -> void *"""
    return _coin.SoGLCoordinateElement_createInstance()

def SoGLCoordinateElement_initClass() -> "void":
    """SoGLCoordinateElement_initClass()"""
    return _coin.SoGLCoordinateElement_initClass()

class SoEnvironmentElement(SoReplacedElement):
    """Proxy of C++ SoEnvironmentElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEnvironmentElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoEnvironmentElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoEnvironmentElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEnvironmentElement_initClass()

    initClass = staticmethod(initClass)
    NONE = _coin.SoEnvironmentElement_NONE
    HAZE = _coin.SoEnvironmentElement_HAZE
    FOG = _coin.SoEnvironmentElement_FOG
    SMOKE = _coin.SoEnvironmentElement_SMOKE

    def init(self, state: 'SoState') -> "void":
        """init(SoEnvironmentElement self, SoState state)"""
        return _coin.SoEnvironmentElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', ambientIntensity: 'float const', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t const', fogColor: 'SbColor', fogVisibility: 'float const', fogStart: 'float const'=0.0) -> "void":
        """
        set(SoState state, SoNode node, float const ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t const fogType, SbColor fogColor, float const fogVisibility, float const fogStart=0.0)
        set(SoState state, SoNode node, float const ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t const fogType, SbColor fogColor, float const fogVisibility)
        """
        return _coin.SoEnvironmentElement_set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

    set = staticmethod(set)

    def get(state: 'SoState', ambientIntensity: 'float &', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t &', fogColor: 'SbColor', fogVisibility: 'float &', fogStart: 'float &') -> "void":
        """get(SoState state, float & ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t & fogType, SbColor fogColor, float & fogVisibility, float & fogStart)"""
        return _coin.SoEnvironmentElement_get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

    get = staticmethod(get)

    def getAmbientIntensity(state: 'SoState') -> "float":
        """getAmbientIntensity(SoState state) -> float"""
        return _coin.SoEnvironmentElement_getAmbientIntensity(state)

    getAmbientIntensity = staticmethod(getAmbientIntensity)

    def getFogVisibility(state: 'SoState') -> "float":
        """getFogVisibility(SoState state) -> float"""
        return _coin.SoEnvironmentElement_getFogVisibility(state)

    getFogVisibility = staticmethod(getFogVisibility)

    def getLightAttenuation(state: 'SoState') -> "SbVec3f const &":
        """getLightAttenuation(SoState state) -> SbVec3f"""
        return _coin.SoEnvironmentElement_getLightAttenuation(state)

    getLightAttenuation = staticmethod(getLightAttenuation)

    def getAmbientColor(state: 'SoState') -> "SbColor const &":
        """getAmbientColor(SoState state) -> SbColor"""
        return _coin.SoEnvironmentElement_getAmbientColor(state)

    getAmbientColor = staticmethod(getAmbientColor)

    def getFogColor(state: 'SoState') -> "SbColor const &":
        """getFogColor(SoState state) -> SbColor"""
        return _coin.SoEnvironmentElement_getFogColor(state)

    getFogColor = staticmethod(getFogColor)

    def getFogType(state: 'SoState') -> "int32_t":
        """getFogType(SoState state) -> int32_t"""
        return _coin.SoEnvironmentElement_getFogType(state)

    getFogType = staticmethod(getFogType)

    def getDefault(ambientIntensity: 'float &', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t &', fogColor: 'SbColor', fogVisibility: 'float &', fogNear: 'float &') -> "void":
        """getDefault(float & ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t & fogType, SbColor fogColor, float & fogVisibility, float & fogNear)"""
        return _coin.SoEnvironmentElement_getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear)

    getDefault = staticmethod(getDefault)

    def output(self, file: 'FILE *') -> "void":
        """output(SoEnvironmentElement self, FILE * file)"""
        return _coin.SoEnvironmentElement_output(self, file)

SoEnvironmentElement_swigregister = _coin.SoEnvironmentElement_swigregister
SoEnvironmentElement_swigregister(SoEnvironmentElement)

def SoEnvironmentElement_getClassTypeId() -> "SoType":
    """SoEnvironmentElement_getClassTypeId() -> SoType"""
    return _coin.SoEnvironmentElement_getClassTypeId()

def SoEnvironmentElement_getClassStackIndex() -> "int":
    """SoEnvironmentElement_getClassStackIndex() -> int"""
    return _coin.SoEnvironmentElement_getClassStackIndex()

def SoEnvironmentElement_createInstance() -> "void *":
    """SoEnvironmentElement_createInstance() -> void *"""
    return _coin.SoEnvironmentElement_createInstance()

def SoEnvironmentElement_initClass() -> "void":
    """SoEnvironmentElement_initClass()"""
    return _coin.SoEnvironmentElement_initClass()

def SoEnvironmentElement_set(state: 'SoState', node: 'SoNode', ambientIntensity: 'float const', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t const', fogColor: 'SbColor', fogVisibility: 'float const', fogStart: 'float const'=0.0) -> "void":
    """
    set(SoState state, SoNode node, float const ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t const fogType, SbColor fogColor, float const fogVisibility, float const fogStart=0.0)
    SoEnvironmentElement_set(SoState state, SoNode node, float const ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t const fogType, SbColor fogColor, float const fogVisibility)
    """
    return _coin.SoEnvironmentElement_set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

def SoEnvironmentElement_get(state: 'SoState', ambientIntensity: 'float &', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t &', fogColor: 'SbColor', fogVisibility: 'float &', fogStart: 'float &') -> "void":
    """SoEnvironmentElement_get(SoState state, float & ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t & fogType, SbColor fogColor, float & fogVisibility, float & fogStart)"""
    return _coin.SoEnvironmentElement_get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

def SoEnvironmentElement_getAmbientIntensity(state: 'SoState') -> "float":
    """SoEnvironmentElement_getAmbientIntensity(SoState state) -> float"""
    return _coin.SoEnvironmentElement_getAmbientIntensity(state)

def SoEnvironmentElement_getFogVisibility(state: 'SoState') -> "float":
    """SoEnvironmentElement_getFogVisibility(SoState state) -> float"""
    return _coin.SoEnvironmentElement_getFogVisibility(state)

def SoEnvironmentElement_getLightAttenuation(state: 'SoState') -> "SbVec3f const &":
    """SoEnvironmentElement_getLightAttenuation(SoState state) -> SbVec3f"""
    return _coin.SoEnvironmentElement_getLightAttenuation(state)

def SoEnvironmentElement_getAmbientColor(state: 'SoState') -> "SbColor const &":
    """SoEnvironmentElement_getAmbientColor(SoState state) -> SbColor"""
    return _coin.SoEnvironmentElement_getAmbientColor(state)

def SoEnvironmentElement_getFogColor(state: 'SoState') -> "SbColor const &":
    """SoEnvironmentElement_getFogColor(SoState state) -> SbColor"""
    return _coin.SoEnvironmentElement_getFogColor(state)

def SoEnvironmentElement_getFogType(state: 'SoState') -> "int32_t":
    """SoEnvironmentElement_getFogType(SoState state) -> int32_t"""
    return _coin.SoEnvironmentElement_getFogType(state)

def SoEnvironmentElement_getDefault(ambientIntensity: 'float &', ambientColor: 'SbColor', attenuation: 'SbVec3f', fogType: 'int32_t &', fogColor: 'SbColor', fogVisibility: 'float &', fogNear: 'float &') -> "void":
    """SoEnvironmentElement_getDefault(float & ambientIntensity, SbColor ambientColor, SbVec3f attenuation, int32_t & fogType, SbColor fogColor, float & fogVisibility, float & fogNear)"""
    return _coin.SoEnvironmentElement_getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear)

class SoGLEnvironmentElement(SoEnvironmentElement):
    """Proxy of C++ SoGLEnvironmentElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLEnvironmentElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLEnvironmentElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLEnvironmentElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLEnvironmentElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLEnvironmentElement self, SoState state)"""
        return _coin.SoGLEnvironmentElement_init(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLEnvironmentElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLEnvironmentElement_pop(self, state, prevTopElement)

SoGLEnvironmentElement_swigregister = _coin.SoGLEnvironmentElement_swigregister
SoGLEnvironmentElement_swigregister(SoGLEnvironmentElement)

def SoGLEnvironmentElement_getClassTypeId() -> "SoType":
    """SoGLEnvironmentElement_getClassTypeId() -> SoType"""
    return _coin.SoGLEnvironmentElement_getClassTypeId()

def SoGLEnvironmentElement_getClassStackIndex() -> "int":
    """SoGLEnvironmentElement_getClassStackIndex() -> int"""
    return _coin.SoGLEnvironmentElement_getClassStackIndex()

def SoGLEnvironmentElement_createInstance() -> "void *":
    """SoGLEnvironmentElement_createInstance() -> void *"""
    return _coin.SoGLEnvironmentElement_createInstance()

def SoGLEnvironmentElement_initClass() -> "void":
    """SoGLEnvironmentElement_initClass()"""
    return _coin.SoGLEnvironmentElement_initClass()

class SoFontNameElement(SoReplacedElement):
    """Proxy of C++ SoFontNameElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFontNameElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoFontNameElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoFontNameElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFontNameElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoFontNameElement self, SoState state)"""
        return _coin.SoFontNameElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', fontName: 'SbName') -> "void":
        """set(SoState state, SoNode node, SbName fontName)"""
        return _coin.SoFontNameElement_set(state, node, fontName)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbName const &":
        """get(SoState state) -> SbName"""
        return _coin.SoFontNameElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SbName":
        """getDefault() -> SbName"""
        return _coin.SoFontNameElement_getDefault()

    getDefault = staticmethod(getDefault)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoFontNameElement self, SoElement element) -> SbBool"""
        return _coin.SoFontNameElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoFontNameElement self) -> SoElement"""
        return _coin.SoFontNameElement_copyMatchInfo(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SoFontNameElement self, FILE * file)"""
        return _coin.SoFontNameElement_output(self, file)

SoFontNameElement_swigregister = _coin.SoFontNameElement_swigregister
SoFontNameElement_swigregister(SoFontNameElement)

def SoFontNameElement_getClassTypeId() -> "SoType":
    """SoFontNameElement_getClassTypeId() -> SoType"""
    return _coin.SoFontNameElement_getClassTypeId()

def SoFontNameElement_getClassStackIndex() -> "int":
    """SoFontNameElement_getClassStackIndex() -> int"""
    return _coin.SoFontNameElement_getClassStackIndex()

def SoFontNameElement_createInstance() -> "void *":
    """SoFontNameElement_createInstance() -> void *"""
    return _coin.SoFontNameElement_createInstance()

def SoFontNameElement_initClass() -> "void":
    """SoFontNameElement_initClass()"""
    return _coin.SoFontNameElement_initClass()

def SoFontNameElement_set(state: 'SoState', node: 'SoNode', fontName: 'SbName') -> "void":
    """SoFontNameElement_set(SoState state, SoNode node, SbName fontName)"""
    return _coin.SoFontNameElement_set(state, node, fontName)

def SoFontNameElement_get(state: 'SoState') -> "SbName const &":
    """SoFontNameElement_get(SoState state) -> SbName"""
    return _coin.SoFontNameElement_get(state)

def SoFontNameElement_getDefault() -> "SbName":
    """SoFontNameElement_getDefault() -> SbName"""
    return _coin.SoFontNameElement_getDefault()

class SoLightAttenuationElement(SoReplacedElement):
    """Proxy of C++ SoLightAttenuationElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLightAttenuationElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLightAttenuationElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLightAttenuationElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLightAttenuationElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoLightAttenuationElement self, SoState state)"""
        return _coin.SoLightAttenuationElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', lightAttenuation: 'SbVec3f') -> "void":
        """set(SoState state, SoNode node, SbVec3f lightAttenuation)"""
        return _coin.SoLightAttenuationElement_set(state, node, lightAttenuation)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbVec3f const &":
        """get(SoState state) -> SbVec3f"""
        return _coin.SoLightAttenuationElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SbVec3f const &":
        """getDefault() -> SbVec3f"""
        return _coin.SoLightAttenuationElement_getDefault()

    getDefault = staticmethod(getDefault)

    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoLightAttenuationElement self, SoElement element) -> SbBool"""
        return _coin.SoLightAttenuationElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoLightAttenuationElement self) -> SoElement"""
        return _coin.SoLightAttenuationElement_copyMatchInfo(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SoLightAttenuationElement self, FILE * file)"""
        return _coin.SoLightAttenuationElement_output(self, file)

SoLightAttenuationElement_swigregister = _coin.SoLightAttenuationElement_swigregister
SoLightAttenuationElement_swigregister(SoLightAttenuationElement)

def SoLightAttenuationElement_getClassTypeId() -> "SoType":
    """SoLightAttenuationElement_getClassTypeId() -> SoType"""
    return _coin.SoLightAttenuationElement_getClassTypeId()

def SoLightAttenuationElement_getClassStackIndex() -> "int":
    """SoLightAttenuationElement_getClassStackIndex() -> int"""
    return _coin.SoLightAttenuationElement_getClassStackIndex()

def SoLightAttenuationElement_createInstance() -> "void *":
    """SoLightAttenuationElement_createInstance() -> void *"""
    return _coin.SoLightAttenuationElement_createInstance()

def SoLightAttenuationElement_initClass() -> "void":
    """SoLightAttenuationElement_initClass()"""
    return _coin.SoLightAttenuationElement_initClass()

def SoLightAttenuationElement_set(state: 'SoState', node: 'SoNode', lightAttenuation: 'SbVec3f') -> "void":
    """SoLightAttenuationElement_set(SoState state, SoNode node, SbVec3f lightAttenuation)"""
    return _coin.SoLightAttenuationElement_set(state, node, lightAttenuation)

def SoLightAttenuationElement_get(state: 'SoState') -> "SbVec3f const &":
    """SoLightAttenuationElement_get(SoState state) -> SbVec3f"""
    return _coin.SoLightAttenuationElement_get(state)

def SoLightAttenuationElement_getDefault() -> "SbVec3f const &":
    """SoLightAttenuationElement_getDefault() -> SbVec3f"""
    return _coin.SoLightAttenuationElement_getDefault()

class SoPolygonOffsetElement(SoReplacedElement):
    """Proxy of C++ SoPolygonOffsetElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPolygonOffsetElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoPolygonOffsetElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoPolygonOffsetElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPolygonOffsetElement_initClass()

    initClass = staticmethod(initClass)
    FILLED = _coin.SoPolygonOffsetElement_FILLED
    LINES = _coin.SoPolygonOffsetElement_LINES
    POINTS = _coin.SoPolygonOffsetElement_POINTS

    def init(self, state: 'SoState') -> "void":
        """init(SoPolygonOffsetElement self, SoState state)"""
        return _coin.SoPolygonOffsetElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', factor: 'float', units: 'float', styles: 'SoPolygonOffsetElement::Style', on: 'SbBool') -> "void":
        """set(SoState state, SoNode node, float factor, float units, SoPolygonOffsetElement::Style styles, SbBool on)"""
        return _coin.SoPolygonOffsetElement_set(state, node, factor, units, styles, on)

    set = staticmethod(set)

    def get(state: 'SoState', factor: 'float &', units: 'float &', styles: 'SoPolygonOffsetElement::Style &', on: 'SbBool &') -> "void":
        """get(SoState state, float & factor, float & units, SoPolygonOffsetElement::Style & styles, SbBool & on)"""
        return _coin.SoPolygonOffsetElement_get(state, factor, units, styles, on)

    get = staticmethod(get)

    def getDefault(factor: 'float &', units: 'float &', styles: 'SoPolygonOffsetElement::Style &', on: 'SbBool &') -> "void":
        """getDefault(float & factor, float & units, SoPolygonOffsetElement::Style & styles, SbBool & on)"""
        return _coin.SoPolygonOffsetElement_getDefault(factor, units, styles, on)

    getDefault = staticmethod(getDefault)
SoPolygonOffsetElement_swigregister = _coin.SoPolygonOffsetElement_swigregister
SoPolygonOffsetElement_swigregister(SoPolygonOffsetElement)

def SoPolygonOffsetElement_getClassTypeId() -> "SoType":
    """SoPolygonOffsetElement_getClassTypeId() -> SoType"""
    return _coin.SoPolygonOffsetElement_getClassTypeId()

def SoPolygonOffsetElement_getClassStackIndex() -> "int":
    """SoPolygonOffsetElement_getClassStackIndex() -> int"""
    return _coin.SoPolygonOffsetElement_getClassStackIndex()

def SoPolygonOffsetElement_createInstance() -> "void *":
    """SoPolygonOffsetElement_createInstance() -> void *"""
    return _coin.SoPolygonOffsetElement_createInstance()

def SoPolygonOffsetElement_initClass() -> "void":
    """SoPolygonOffsetElement_initClass()"""
    return _coin.SoPolygonOffsetElement_initClass()

def SoPolygonOffsetElement_set(state: 'SoState', node: 'SoNode', factor: 'float', units: 'float', styles: 'SoPolygonOffsetElement::Style', on: 'SbBool') -> "void":
    """SoPolygonOffsetElement_set(SoState state, SoNode node, float factor, float units, SoPolygonOffsetElement::Style styles, SbBool on)"""
    return _coin.SoPolygonOffsetElement_set(state, node, factor, units, styles, on)

def SoPolygonOffsetElement_get(state: 'SoState', factor: 'float &', units: 'float &', styles: 'SoPolygonOffsetElement::Style &', on: 'SbBool &') -> "void":
    """SoPolygonOffsetElement_get(SoState state, float & factor, float & units, SoPolygonOffsetElement::Style & styles, SbBool & on)"""
    return _coin.SoPolygonOffsetElement_get(state, factor, units, styles, on)

def SoPolygonOffsetElement_getDefault(factor: 'float &', units: 'float &', styles: 'SoPolygonOffsetElement::Style &', on: 'SbBool &') -> "void":
    """SoPolygonOffsetElement_getDefault(float & factor, float & units, SoPolygonOffsetElement::Style & styles, SbBool & on)"""
    return _coin.SoPolygonOffsetElement_getDefault(factor, units, styles, on)

class SoGLPolygonOffsetElement(SoPolygonOffsetElement):
    """Proxy of C++ SoGLPolygonOffsetElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLPolygonOffsetElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLPolygonOffsetElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLPolygonOffsetElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLPolygonOffsetElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLPolygonOffsetElement self, SoState state)"""
        return _coin.SoGLPolygonOffsetElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLPolygonOffsetElement self, SoState state)"""
        return _coin.SoGLPolygonOffsetElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLPolygonOffsetElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLPolygonOffsetElement_pop(self, state, prevTopElement)

SoGLPolygonOffsetElement_swigregister = _coin.SoGLPolygonOffsetElement_swigregister
SoGLPolygonOffsetElement_swigregister(SoGLPolygonOffsetElement)

def SoGLPolygonOffsetElement_getClassTypeId() -> "SoType":
    """SoGLPolygonOffsetElement_getClassTypeId() -> SoType"""
    return _coin.SoGLPolygonOffsetElement_getClassTypeId()

def SoGLPolygonOffsetElement_getClassStackIndex() -> "int":
    """SoGLPolygonOffsetElement_getClassStackIndex() -> int"""
    return _coin.SoGLPolygonOffsetElement_getClassStackIndex()

def SoGLPolygonOffsetElement_createInstance() -> "void *":
    """SoGLPolygonOffsetElement_createInstance() -> void *"""
    return _coin.SoGLPolygonOffsetElement_createInstance()

def SoGLPolygonOffsetElement_initClass() -> "void":
    """SoGLPolygonOffsetElement_initClass()"""
    return _coin.SoGLPolygonOffsetElement_initClass()

class SoProjectionMatrixElement(SoReplacedElement):
    """Proxy of C++ SoProjectionMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProjectionMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoProjectionMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoProjectionMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProjectionMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoProjectionMatrixElement self, SoState state)"""
        return _coin.SoProjectionMatrixElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
        """set(SoState state, SoNode node)"""
        return _coin.SoProjectionMatrixElement_set(state, node)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbMatrix const &":
        """get(SoState state) -> SbMatrix"""
        return _coin.SoProjectionMatrixElement_get(state)

    get = staticmethod(get)
SoProjectionMatrixElement_swigregister = _coin.SoProjectionMatrixElement_swigregister
SoProjectionMatrixElement_swigregister(SoProjectionMatrixElement)

def SoProjectionMatrixElement_getClassTypeId() -> "SoType":
    """SoProjectionMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoProjectionMatrixElement_getClassTypeId()

def SoProjectionMatrixElement_getClassStackIndex() -> "int":
    """SoProjectionMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoProjectionMatrixElement_getClassStackIndex()

def SoProjectionMatrixElement_createInstance() -> "void *":
    """SoProjectionMatrixElement_createInstance() -> void *"""
    return _coin.SoProjectionMatrixElement_createInstance()

def SoProjectionMatrixElement_initClass() -> "void":
    """SoProjectionMatrixElement_initClass()"""
    return _coin.SoProjectionMatrixElement_initClass()

def SoProjectionMatrixElement_set(state: 'SoState', node: 'SoNode') -> "SbMatrix &":
    """SoProjectionMatrixElement_set(SoState state, SoNode node)"""
    return _coin.SoProjectionMatrixElement_set(state, node)

def SoProjectionMatrixElement_get(state: 'SoState') -> "SbMatrix const &":
    """SoProjectionMatrixElement_get(SoState state) -> SbMatrix"""
    return _coin.SoProjectionMatrixElement_get(state)

class SoGLProjectionMatrixElement(SoProjectionMatrixElement):
    """Proxy of C++ SoGLProjectionMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLProjectionMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLProjectionMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLProjectionMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLProjectionMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLProjectionMatrixElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLProjectionMatrixElement_pop(self, state, prevTopElement)

SoGLProjectionMatrixElement_swigregister = _coin.SoGLProjectionMatrixElement_swigregister
SoGLProjectionMatrixElement_swigregister(SoGLProjectionMatrixElement)

def SoGLProjectionMatrixElement_getClassTypeId() -> "SoType":
    """SoGLProjectionMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoGLProjectionMatrixElement_getClassTypeId()

def SoGLProjectionMatrixElement_getClassStackIndex() -> "int":
    """SoGLProjectionMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoGLProjectionMatrixElement_getClassStackIndex()

def SoGLProjectionMatrixElement_createInstance() -> "void *":
    """SoGLProjectionMatrixElement_createInstance() -> void *"""
    return _coin.SoGLProjectionMatrixElement_createInstance()

def SoGLProjectionMatrixElement_initClass() -> "void":
    """SoGLProjectionMatrixElement_initClass()"""
    return _coin.SoGLProjectionMatrixElement_initClass()

class SoProfileCoordinateElement(SoReplacedElement):
    """Proxy of C++ SoProfileCoordinateElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProfileCoordinateElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoProfileCoordinateElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoProfileCoordinateElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProfileCoordinateElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoProfileCoordinateElement self, SoState state)"""
        return _coin.SoProfileCoordinateElement_init(self, state)


    def set2(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec2f') -> "void":
        """set2(SoState state, SoNode node, int32_t const numCoords, SbVec2f coords)"""
        return _coin.SoProfileCoordinateElement_set2(state, node, numCoords, coords)

    set2 = staticmethod(set2)

    def set3(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec3f') -> "void":
        """set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)"""
        return _coin.SoProfileCoordinateElement_set3(state, node, numCoords, coords)

    set3 = staticmethod(set3)

    def getInstance(state: 'SoState') -> "SoProfileCoordinateElement const *":
        """getInstance(SoState state) -> SoProfileCoordinateElement"""
        return _coin.SoProfileCoordinateElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoProfileCoordinateElement self) -> int32_t"""
        return _coin.SoProfileCoordinateElement_getNum(self)


    def get2(self, index: 'int const') -> "SbVec2f const &":
        """get2(SoProfileCoordinateElement self, int const index) -> SbVec2f"""
        return _coin.SoProfileCoordinateElement_get2(self, index)


    def get3(self, index: 'int const') -> "SbVec3f const &":
        """get3(SoProfileCoordinateElement self, int const index) -> SbVec3f"""
        return _coin.SoProfileCoordinateElement_get3(self, index)


    def is2D(self) -> "SbBool":
        """is2D(SoProfileCoordinateElement self) -> SbBool"""
        return _coin.SoProfileCoordinateElement_is2D(self)


    def getDefault2() -> "SbVec2f":
        """getDefault2() -> SbVec2f"""
        return _coin.SoProfileCoordinateElement_getDefault2()

    getDefault2 = staticmethod(getDefault2)

    def getDefault3() -> "SbVec3f":
        """getDefault3() -> SbVec3f"""
        return _coin.SoProfileCoordinateElement_getDefault3()

    getDefault3 = staticmethod(getDefault3)

    def getArrayPtr2(self) -> "SbVec2f const *":
        """getArrayPtr2(SoProfileCoordinateElement self) -> SbVec2f"""
        return _coin.SoProfileCoordinateElement_getArrayPtr2(self)


    def getArrayPtr3(self) -> "SbVec3f const *":
        """getArrayPtr3(SoProfileCoordinateElement self) -> SbVec3f"""
        return _coin.SoProfileCoordinateElement_getArrayPtr3(self)

SoProfileCoordinateElement_swigregister = _coin.SoProfileCoordinateElement_swigregister
SoProfileCoordinateElement_swigregister(SoProfileCoordinateElement)

def SoProfileCoordinateElement_getClassTypeId() -> "SoType":
    """SoProfileCoordinateElement_getClassTypeId() -> SoType"""
    return _coin.SoProfileCoordinateElement_getClassTypeId()

def SoProfileCoordinateElement_getClassStackIndex() -> "int":
    """SoProfileCoordinateElement_getClassStackIndex() -> int"""
    return _coin.SoProfileCoordinateElement_getClassStackIndex()

def SoProfileCoordinateElement_createInstance() -> "void *":
    """SoProfileCoordinateElement_createInstance() -> void *"""
    return _coin.SoProfileCoordinateElement_createInstance()

def SoProfileCoordinateElement_initClass() -> "void":
    """SoProfileCoordinateElement_initClass()"""
    return _coin.SoProfileCoordinateElement_initClass()

def SoProfileCoordinateElement_set2(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec2f') -> "void":
    """SoProfileCoordinateElement_set2(SoState state, SoNode node, int32_t const numCoords, SbVec2f coords)"""
    return _coin.SoProfileCoordinateElement_set2(state, node, numCoords, coords)

def SoProfileCoordinateElement_set3(state: 'SoState', node: 'SoNode', numCoords: 'int32_t const', coords: 'SbVec3f') -> "void":
    """SoProfileCoordinateElement_set3(SoState state, SoNode node, int32_t const numCoords, SbVec3f coords)"""
    return _coin.SoProfileCoordinateElement_set3(state, node, numCoords, coords)

def SoProfileCoordinateElement_getInstance(state: 'SoState') -> "SoProfileCoordinateElement const *":
    """SoProfileCoordinateElement_getInstance(SoState state) -> SoProfileCoordinateElement"""
    return _coin.SoProfileCoordinateElement_getInstance(state)

def SoProfileCoordinateElement_getDefault2() -> "SbVec2f":
    """SoProfileCoordinateElement_getDefault2() -> SbVec2f"""
    return _coin.SoProfileCoordinateElement_getDefault2()

def SoProfileCoordinateElement_getDefault3() -> "SbVec3f":
    """SoProfileCoordinateElement_getDefault3() -> SbVec3f"""
    return _coin.SoProfileCoordinateElement_getDefault3()

class SoGLMultiTextureImageElement(SoMultiTextureImageElement):
    """Proxy of C++ SoGLMultiTextureImageElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLMultiTextureImageElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLMultiTextureImageElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLMultiTextureImageElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLMultiTextureImageElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLMultiTextureImageElement self, SoState state)"""
        return _coin.SoGLMultiTextureImageElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLMultiTextureImageElement self, SoState state)"""
        return _coin.SoGLMultiTextureImageElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLMultiTextureImageElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLMultiTextureImageElement_pop(self, state, prevTopElement)


    def restore(state: 'SoState', unit: 'int const') -> "void":
        """restore(SoState state, int const unit)"""
        return _coin.SoGLMultiTextureImageElement_restore(state, unit)

    restore = staticmethod(restore)

    def hasTransparency(state: 'SoState') -> "SbBool":
        """hasTransparency(SoState state) -> SbBool"""
        return _coin.SoGLMultiTextureImageElement_hasTransparency(state)

    hasTransparency = staticmethod(hasTransparency)

    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, int const unit, SoGLImage image, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        set(SoState state, SoNode node, SoGLImage image, SoMultiTextureImageElement::Model const model, SbColor blendColor)
        """
        return _coin.SoGLMultiTextureImageElement_set(*args)

    set = staticmethod(set)

    def get(*args) -> "SoGLImage *":
        """
        get(SoState state, int const unit, SoMultiTextureImageElement::Model & model, SbColor blendcolor) -> SoGLImage
        get(SoState state, SoMultiTextureImageElement::Model & model, SbColor blendcolor) -> SoGLImage
        """
        return _coin.SoGLMultiTextureImageElement_get(*args)

    get = staticmethod(get)

    def getMaxGLTextureSize() -> "int32_t":
        """getMaxGLTextureSize() -> int32_t"""
        return _coin.SoGLMultiTextureImageElement_getMaxGLTextureSize()

    getMaxGLTextureSize = staticmethod(getMaxGLTextureSize)
SoGLMultiTextureImageElement_swigregister = _coin.SoGLMultiTextureImageElement_swigregister
SoGLMultiTextureImageElement_swigregister(SoGLMultiTextureImageElement)

def SoGLMultiTextureImageElement_getClassTypeId() -> "SoType":
    """SoGLMultiTextureImageElement_getClassTypeId() -> SoType"""
    return _coin.SoGLMultiTextureImageElement_getClassTypeId()

def SoGLMultiTextureImageElement_getClassStackIndex() -> "int":
    """SoGLMultiTextureImageElement_getClassStackIndex() -> int"""
    return _coin.SoGLMultiTextureImageElement_getClassStackIndex()

def SoGLMultiTextureImageElement_createInstance() -> "void *":
    """SoGLMultiTextureImageElement_createInstance() -> void *"""
    return _coin.SoGLMultiTextureImageElement_createInstance()

def SoGLMultiTextureImageElement_initClass() -> "void":
    """SoGLMultiTextureImageElement_initClass()"""
    return _coin.SoGLMultiTextureImageElement_initClass()

def SoGLMultiTextureImageElement_restore(state: 'SoState', unit: 'int const') -> "void":
    """SoGLMultiTextureImageElement_restore(SoState state, int const unit)"""
    return _coin.SoGLMultiTextureImageElement_restore(state, unit)

def SoGLMultiTextureImageElement_hasTransparency(state: 'SoState') -> "SbBool":
    """SoGLMultiTextureImageElement_hasTransparency(SoState state) -> SbBool"""
    return _coin.SoGLMultiTextureImageElement_hasTransparency(state)

def SoGLMultiTextureImageElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, int const unit, SoGLImage image, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    SoGLMultiTextureImageElement_set(SoState state, SoNode node, SoGLImage image, SoMultiTextureImageElement::Model const model, SbColor blendColor)
    """
    return _coin.SoGLMultiTextureImageElement_set(*args)

def SoGLMultiTextureImageElement_get(*args) -> "SoGLImage *":
    """
    get(SoState state, int const unit, SoMultiTextureImageElement::Model & model, SbColor blendcolor) -> SoGLImage
    SoGLMultiTextureImageElement_get(SoState state, SoMultiTextureImageElement::Model & model, SbColor blendcolor) -> SoGLImage
    """
    return _coin.SoGLMultiTextureImageElement_get(*args)

def SoGLMultiTextureImageElement_getMaxGLTextureSize() -> "int32_t":
    """SoGLMultiTextureImageElement_getMaxGLTextureSize() -> int32_t"""
    return _coin.SoGLMultiTextureImageElement_getMaxGLTextureSize()

class SoViewingMatrixElement(SoReplacedElement):
    """Proxy of C++ SoViewingMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoViewingMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoViewingMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoViewingMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoViewingMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoViewingMatrixElement self, SoState state)"""
        return _coin.SoViewingMatrixElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', ViewingMatrix: 'SbMatrix') -> "void":
        """set(SoState state, SoNode node, SbMatrix ViewingMatrix)"""
        return _coin.SoViewingMatrixElement_set(state, node, ViewingMatrix)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbMatrix const &":
        """get(SoState state) -> SbMatrix"""
        return _coin.SoViewingMatrixElement_get(state)

    get = staticmethod(get)
SoViewingMatrixElement_swigregister = _coin.SoViewingMatrixElement_swigregister
SoViewingMatrixElement_swigregister(SoViewingMatrixElement)

def SoViewingMatrixElement_getClassTypeId() -> "SoType":
    """SoViewingMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoViewingMatrixElement_getClassTypeId()

def SoViewingMatrixElement_getClassStackIndex() -> "int":
    """SoViewingMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoViewingMatrixElement_getClassStackIndex()

def SoViewingMatrixElement_createInstance() -> "void *":
    """SoViewingMatrixElement_createInstance() -> void *"""
    return _coin.SoViewingMatrixElement_createInstance()

def SoViewingMatrixElement_initClass() -> "void":
    """SoViewingMatrixElement_initClass()"""
    return _coin.SoViewingMatrixElement_initClass()

def SoViewingMatrixElement_set(state: 'SoState', node: 'SoNode', ViewingMatrix: 'SbMatrix') -> "void":
    """SoViewingMatrixElement_set(SoState state, SoNode node, SbMatrix ViewingMatrix)"""
    return _coin.SoViewingMatrixElement_set(state, node, ViewingMatrix)

def SoViewingMatrixElement_get(state: 'SoState') -> "SbMatrix const &":
    """SoViewingMatrixElement_get(SoState state) -> SbMatrix"""
    return _coin.SoViewingMatrixElement_get(state)

class SoGLViewingMatrixElement(SoViewingMatrixElement):
    """Proxy of C++ SoGLViewingMatrixElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLViewingMatrixElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLViewingMatrixElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLViewingMatrixElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLViewingMatrixElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLViewingMatrixElement self, SoState state)"""
        return _coin.SoGLViewingMatrixElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLViewingMatrixElement self, SoState state)"""
        return _coin.SoGLViewingMatrixElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLViewingMatrixElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLViewingMatrixElement_pop(self, state, prevTopElement)


    def getNodeId(state: 'SoState') -> "SbUniqueId":
        """getNodeId(SoState state) -> SbUniqueId"""
        return _coin.SoGLViewingMatrixElement_getNodeId(state)

    getNodeId = staticmethod(getNodeId)

    def getResetMatrix(state: 'SoState') -> "SbMatrix":
        """getResetMatrix(SoState state) -> SbMatrix"""
        return _coin.SoGLViewingMatrixElement_getResetMatrix(state)

    getResetMatrix = staticmethod(getResetMatrix)
SoGLViewingMatrixElement_swigregister = _coin.SoGLViewingMatrixElement_swigregister
SoGLViewingMatrixElement_swigregister(SoGLViewingMatrixElement)

def SoGLViewingMatrixElement_getClassTypeId() -> "SoType":
    """SoGLViewingMatrixElement_getClassTypeId() -> SoType"""
    return _coin.SoGLViewingMatrixElement_getClassTypeId()

def SoGLViewingMatrixElement_getClassStackIndex() -> "int":
    """SoGLViewingMatrixElement_getClassStackIndex() -> int"""
    return _coin.SoGLViewingMatrixElement_getClassStackIndex()

def SoGLViewingMatrixElement_createInstance() -> "void *":
    """SoGLViewingMatrixElement_createInstance() -> void *"""
    return _coin.SoGLViewingMatrixElement_createInstance()

def SoGLViewingMatrixElement_initClass() -> "void":
    """SoGLViewingMatrixElement_initClass()"""
    return _coin.SoGLViewingMatrixElement_initClass()

def SoGLViewingMatrixElement_getNodeId(state: 'SoState') -> "SbUniqueId":
    """SoGLViewingMatrixElement_getNodeId(SoState state) -> SbUniqueId"""
    return _coin.SoGLViewingMatrixElement_getNodeId(state)

def SoGLViewingMatrixElement_getResetMatrix(state: 'SoState') -> "SbMatrix":
    """SoGLViewingMatrixElement_getResetMatrix(SoState state) -> SbMatrix"""
    return _coin.SoGLViewingMatrixElement_getResetMatrix(state)

class SoViewVolumeElement(SoReplacedElement):
    """Proxy of C++ SoViewVolumeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoViewVolumeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoViewVolumeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoViewVolumeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoViewVolumeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoViewVolumeElement self, SoState state)"""
        return _coin.SoViewVolumeElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', viewVolume: 'SbViewVolume') -> "void":
        """set(SoState state, SoNode node, SbViewVolume viewVolume)"""
        return _coin.SoViewVolumeElement_set(state, node, viewVolume)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbViewVolume const &":
        """get(SoState state) -> SbViewVolume"""
        return _coin.SoViewVolumeElement_get(state)

    get = staticmethod(get)
SoViewVolumeElement_swigregister = _coin.SoViewVolumeElement_swigregister
SoViewVolumeElement_swigregister(SoViewVolumeElement)

def SoViewVolumeElement_getClassTypeId() -> "SoType":
    """SoViewVolumeElement_getClassTypeId() -> SoType"""
    return _coin.SoViewVolumeElement_getClassTypeId()

def SoViewVolumeElement_getClassStackIndex() -> "int":
    """SoViewVolumeElement_getClassStackIndex() -> int"""
    return _coin.SoViewVolumeElement_getClassStackIndex()

def SoViewVolumeElement_createInstance() -> "void *":
    """SoViewVolumeElement_createInstance() -> void *"""
    return _coin.SoViewVolumeElement_createInstance()

def SoViewVolumeElement_initClass() -> "void":
    """SoViewVolumeElement_initClass()"""
    return _coin.SoViewVolumeElement_initClass()

def SoViewVolumeElement_set(state: 'SoState', node: 'SoNode', viewVolume: 'SbViewVolume') -> "void":
    """SoViewVolumeElement_set(SoState state, SoNode node, SbViewVolume viewVolume)"""
    return _coin.SoViewVolumeElement_set(state, node, viewVolume)

def SoViewVolumeElement_get(state: 'SoState') -> "SbViewVolume const &":
    """SoViewVolumeElement_get(SoState state) -> SbViewVolume"""
    return _coin.SoViewVolumeElement_get(state)

class SoGLShapeHintsElement(SoShapeHintsElement):
    """Proxy of C++ SoGLShapeHintsElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLShapeHintsElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLShapeHintsElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLShapeHintsElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLShapeHintsElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLShapeHintsElement self, SoState state)"""
        return _coin.SoGLShapeHintsElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLShapeHintsElement self, SoState state)"""
        return _coin.SoGLShapeHintsElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLShapeHintsElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLShapeHintsElement_pop(self, state, prevTopElement)


    def forceSend(*args) -> "void":
        """
        forceSend(SoState state, SbBool const twoside)
        forceSend(SoState state, SbBool const ccw, SbBool const cull)
        forceSend(SoState state, SbBool const ccw, SbBool const cull, SbBool const twoside)
        """
        return _coin.SoGLShapeHintsElement_forceSend(*args)

    forceSend = staticmethod(forceSend)
SoGLShapeHintsElement_swigregister = _coin.SoGLShapeHintsElement_swigregister
SoGLShapeHintsElement_swigregister(SoGLShapeHintsElement)

def SoGLShapeHintsElement_getClassTypeId() -> "SoType":
    """SoGLShapeHintsElement_getClassTypeId() -> SoType"""
    return _coin.SoGLShapeHintsElement_getClassTypeId()

def SoGLShapeHintsElement_getClassStackIndex() -> "int":
    """SoGLShapeHintsElement_getClassStackIndex() -> int"""
    return _coin.SoGLShapeHintsElement_getClassStackIndex()

def SoGLShapeHintsElement_createInstance() -> "void *":
    """SoGLShapeHintsElement_createInstance() -> void *"""
    return _coin.SoGLShapeHintsElement_createInstance()

def SoGLShapeHintsElement_initClass() -> "void":
    """SoGLShapeHintsElement_initClass()"""
    return _coin.SoGLShapeHintsElement_initClass()

def SoGLShapeHintsElement_forceSend(*args) -> "void":
    """
    forceSend(SoState state, SbBool const twoside)
    forceSend(SoState state, SbBool const ccw, SbBool const cull)
    SoGLShapeHintsElement_forceSend(SoState state, SbBool const ccw, SbBool const cull, SbBool const twoside)
    """
    return _coin.SoGLShapeHintsElement_forceSend(*args)

class SoShapeStyleElement(SoElement):
    """Proxy of C++ SoShapeStyleElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShapeStyleElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoShapeStyleElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoShapeStyleElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShapeStyleElement_initClass()

    initClass = staticmethod(initClass)
    LIGHTING = _coin.SoShapeStyleElement_LIGHTING
    TEXENABLED = _coin.SoShapeStyleElement_TEXENABLED
    TEXFUNC = _coin.SoShapeStyleElement_TEXFUNC
    BBOXCMPLX = _coin.SoShapeStyleElement_BBOXCMPLX
    INVISIBLE = _coin.SoShapeStyleElement_INVISIBLE
    ABORTCB = _coin.SoShapeStyleElement_ABORTCB
    OVERRIDE = _coin.SoShapeStyleElement_OVERRIDE
    TEX3ENABLED = _coin.SoShapeStyleElement_TEX3ENABLED
    BIGIMAGE = _coin.SoShapeStyleElement_BIGIMAGE
    BUMPMAP = _coin.SoShapeStyleElement_BUMPMAP
    VERTEXARRAY = _coin.SoShapeStyleElement_VERTEXARRAY
    TRANSP_TEXTURE = _coin.SoShapeStyleElement_TRANSP_TEXTURE
    TRANSP_MATERIAL = _coin.SoShapeStyleElement_TRANSP_MATERIAL
    TRANSP_SORTED_TRIANGLES = _coin.SoShapeStyleElement_TRANSP_SORTED_TRIANGLES
    SHADOWMAP = _coin.SoShapeStyleElement_SHADOWMAP
    SHADOWS = _coin.SoShapeStyleElement_SHADOWS

    def init(self, state: 'SoState') -> "void":
        """init(SoShapeStyleElement self, SoState state)"""
        return _coin.SoShapeStyleElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoShapeStyleElement self, SoState state)"""
        return _coin.SoShapeStyleElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoShapeStyleElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoShapeStyleElement_pop(self, state, prevTopElement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoShapeStyleElement self, SoElement element) -> SbBool"""
        return _coin.SoShapeStyleElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoShapeStyleElement self) -> SoElement"""
        return _coin.SoShapeStyleElement_copyMatchInfo(self)


    def get(state: 'SoState') -> "SoShapeStyleElement const *":
        """get(SoState state) -> SoShapeStyleElement"""
        return _coin.SoShapeStyleElement_get(state)

    get = staticmethod(get)

    def getFlags(self) -> "unsigned int":
        """getFlags(SoShapeStyleElement self) -> unsigned int"""
        return _coin.SoShapeStyleElement_getFlags(self)


    def mightNotRender(self) -> "SbBool":
        """mightNotRender(SoShapeStyleElement self) -> SbBool"""
        return _coin.SoShapeStyleElement_mightNotRender(self)


    def needNormals(self) -> "SbBool":
        """needNormals(SoShapeStyleElement self) -> SbBool"""
        return _coin.SoShapeStyleElement_needNormals(self)


    def needTexCoords(self) -> "SbBool":
        """needTexCoords(SoShapeStyleElement self) -> SbBool"""
        return _coin.SoShapeStyleElement_needTexCoords(self)


    def getRenderCaseMask(self) -> "int":
        """getRenderCaseMask(SoShapeStyleElement self) -> int"""
        return _coin.SoShapeStyleElement_getRenderCaseMask(self)


    def setDrawStyle(state: 'SoState', value: 'int32_t const') -> "void":
        """setDrawStyle(SoState state, int32_t const value)"""
        return _coin.SoShapeStyleElement_setDrawStyle(state, value)

    setDrawStyle = staticmethod(setDrawStyle)

    def setComplexityType(state: 'SoState', value: 'int32_t const') -> "void":
        """setComplexityType(SoState state, int32_t const value)"""
        return _coin.SoShapeStyleElement_setComplexityType(state, value)

    setComplexityType = staticmethod(setComplexityType)

    def setTransparencyType(state: 'SoState', value: 'int32_t const') -> "void":
        """setTransparencyType(SoState state, int32_t const value)"""
        return _coin.SoShapeStyleElement_setTransparencyType(state, value)

    setTransparencyType = staticmethod(setTransparencyType)

    def setTextureEnabled(state: 'SoState', value: 'SbBool const') -> "void":
        """setTextureEnabled(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setTextureEnabled(state, value)

    setTextureEnabled = staticmethod(setTextureEnabled)

    def setTexture3Enabled(state: 'SoState', value: 'SbBool const') -> "void":
        """setTexture3Enabled(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setTexture3Enabled(state, value)

    setTexture3Enabled = staticmethod(setTexture3Enabled)

    def setTextureFunction(state: 'SoState', value: 'SbBool const') -> "void":
        """setTextureFunction(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setTextureFunction(state, value)

    setTextureFunction = staticmethod(setTextureFunction)

    def setLightModel(state: 'SoState', value: 'int32_t const') -> "void":
        """setLightModel(SoState state, int32_t const value)"""
        return _coin.SoShapeStyleElement_setLightModel(state, value)

    setLightModel = staticmethod(setLightModel)

    def setOverrides(state: 'SoState', value: 'SbBool const') -> "void":
        """setOverrides(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setOverrides(state, value)

    setOverrides = staticmethod(setOverrides)

    def isScreenDoor(state: 'SoState') -> "SbBool":
        """isScreenDoor(SoState state) -> SbBool"""
        return _coin.SoShapeStyleElement_isScreenDoor(state)

    isScreenDoor = staticmethod(isScreenDoor)

    def getTransparencyType(state: 'SoState') -> "int":
        """getTransparencyType(SoState state) -> int"""
        return _coin.SoShapeStyleElement_getTransparencyType(state)

    getTransparencyType = staticmethod(getTransparencyType)

    def isTextureFunction(self) -> "SbBool":
        """isTextureFunction(SoShapeStyleElement self) -> SbBool"""
        return _coin.SoShapeStyleElement_isTextureFunction(self)


    def setBumpmapEnabled(state: 'SoState', value: 'SbBool const') -> "void":
        """setBumpmapEnabled(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setBumpmapEnabled(state, value)

    setBumpmapEnabled = staticmethod(setBumpmapEnabled)

    def setBigImageEnabled(state: 'SoState', value: 'SbBool const') -> "void":
        """setBigImageEnabled(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setBigImageEnabled(state, value)

    setBigImageEnabled = staticmethod(setBigImageEnabled)

    def setVertexArrayRendering(state: 'SoState', value: 'SbBool const') -> "void":
        """setVertexArrayRendering(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setVertexArrayRendering(state, value)

    setVertexArrayRendering = staticmethod(setVertexArrayRendering)

    def setTransparentMaterial(state: 'SoState', value: 'SbBool const') -> "void":
        """setTransparentMaterial(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setTransparentMaterial(state, value)

    setTransparentMaterial = staticmethod(setTransparentMaterial)

    def setTransparentTexture(state: 'SoState', value: 'SbBool const') -> "void":
        """setTransparentTexture(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setTransparentTexture(state, value)

    setTransparentTexture = staticmethod(setTransparentTexture)

    def setShadowMapRendering(state: 'SoState', value: 'SbBool const') -> "void":
        """setShadowMapRendering(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setShadowMapRendering(state, value)

    setShadowMapRendering = staticmethod(setShadowMapRendering)

    def setShadowsRendering(state: 'SoState', value: 'SbBool const') -> "void":
        """setShadowsRendering(SoState state, SbBool const value)"""
        return _coin.SoShapeStyleElement_setShadowsRendering(state, value)

    setShadowsRendering = staticmethod(setShadowsRendering)
SoShapeStyleElement_swigregister = _coin.SoShapeStyleElement_swigregister
SoShapeStyleElement_swigregister(SoShapeStyleElement)

def SoShapeStyleElement_getClassTypeId() -> "SoType":
    """SoShapeStyleElement_getClassTypeId() -> SoType"""
    return _coin.SoShapeStyleElement_getClassTypeId()

def SoShapeStyleElement_getClassStackIndex() -> "int":
    """SoShapeStyleElement_getClassStackIndex() -> int"""
    return _coin.SoShapeStyleElement_getClassStackIndex()

def SoShapeStyleElement_createInstance() -> "void *":
    """SoShapeStyleElement_createInstance() -> void *"""
    return _coin.SoShapeStyleElement_createInstance()

def SoShapeStyleElement_initClass() -> "void":
    """SoShapeStyleElement_initClass()"""
    return _coin.SoShapeStyleElement_initClass()

def SoShapeStyleElement_get(state: 'SoState') -> "SoShapeStyleElement const *":
    """SoShapeStyleElement_get(SoState state) -> SoShapeStyleElement"""
    return _coin.SoShapeStyleElement_get(state)

def SoShapeStyleElement_setDrawStyle(state: 'SoState', value: 'int32_t const') -> "void":
    """SoShapeStyleElement_setDrawStyle(SoState state, int32_t const value)"""
    return _coin.SoShapeStyleElement_setDrawStyle(state, value)

def SoShapeStyleElement_setComplexityType(state: 'SoState', value: 'int32_t const') -> "void":
    """SoShapeStyleElement_setComplexityType(SoState state, int32_t const value)"""
    return _coin.SoShapeStyleElement_setComplexityType(state, value)

def SoShapeStyleElement_setTransparencyType(state: 'SoState', value: 'int32_t const') -> "void":
    """SoShapeStyleElement_setTransparencyType(SoState state, int32_t const value)"""
    return _coin.SoShapeStyleElement_setTransparencyType(state, value)

def SoShapeStyleElement_setTextureEnabled(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setTextureEnabled(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setTextureEnabled(state, value)

def SoShapeStyleElement_setTexture3Enabled(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setTexture3Enabled(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setTexture3Enabled(state, value)

def SoShapeStyleElement_setTextureFunction(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setTextureFunction(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setTextureFunction(state, value)

def SoShapeStyleElement_setLightModel(state: 'SoState', value: 'int32_t const') -> "void":
    """SoShapeStyleElement_setLightModel(SoState state, int32_t const value)"""
    return _coin.SoShapeStyleElement_setLightModel(state, value)

def SoShapeStyleElement_setOverrides(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setOverrides(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setOverrides(state, value)

def SoShapeStyleElement_isScreenDoor(state: 'SoState') -> "SbBool":
    """SoShapeStyleElement_isScreenDoor(SoState state) -> SbBool"""
    return _coin.SoShapeStyleElement_isScreenDoor(state)

def SoShapeStyleElement_getTransparencyType(state: 'SoState') -> "int":
    """SoShapeStyleElement_getTransparencyType(SoState state) -> int"""
    return _coin.SoShapeStyleElement_getTransparencyType(state)

def SoShapeStyleElement_setBumpmapEnabled(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setBumpmapEnabled(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setBumpmapEnabled(state, value)

def SoShapeStyleElement_setBigImageEnabled(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setBigImageEnabled(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setBigImageEnabled(state, value)

def SoShapeStyleElement_setVertexArrayRendering(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setVertexArrayRendering(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setVertexArrayRendering(state, value)

def SoShapeStyleElement_setTransparentMaterial(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setTransparentMaterial(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setTransparentMaterial(state, value)

def SoShapeStyleElement_setTransparentTexture(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setTransparentTexture(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setTransparentTexture(state, value)

def SoShapeStyleElement_setShadowMapRendering(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setShadowMapRendering(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setShadowMapRendering(state, value)

def SoShapeStyleElement_setShadowsRendering(state: 'SoState', value: 'SbBool const') -> "void":
    """SoShapeStyleElement_setShadowsRendering(SoState state, SbBool const value)"""
    return _coin.SoShapeStyleElement_setShadowsRendering(state, value)

class SoViewportRegionElement(SoElement):
    """Proxy of C++ SoViewportRegionElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoViewportRegionElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoViewportRegionElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoViewportRegionElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoViewportRegionElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoViewportRegionElement self, SoState state)"""
        return _coin.SoViewportRegionElement_init(self, state)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoViewportRegionElement self, SoElement element) -> SbBool"""
        return _coin.SoViewportRegionElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoViewportRegionElement self) -> SoElement"""
        return _coin.SoViewportRegionElement_copyMatchInfo(self)


    def set(state: 'SoState', viewportRegion: 'SbViewportRegion') -> "void":
        """set(SoState state, SbViewportRegion viewportRegion)"""
        return _coin.SoViewportRegionElement_set(state, viewportRegion)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbViewportRegion const &":
        """get(SoState state) -> SbViewportRegion"""
        return _coin.SoViewportRegionElement_get(state)

    get = staticmethod(get)

    def output(self, file: 'FILE *') -> "void":
        """output(SoViewportRegionElement self, FILE * file)"""
        return _coin.SoViewportRegionElement_output(self, file)

SoViewportRegionElement_swigregister = _coin.SoViewportRegionElement_swigregister
SoViewportRegionElement_swigregister(SoViewportRegionElement)

def SoViewportRegionElement_getClassTypeId() -> "SoType":
    """SoViewportRegionElement_getClassTypeId() -> SoType"""
    return _coin.SoViewportRegionElement_getClassTypeId()

def SoViewportRegionElement_getClassStackIndex() -> "int":
    """SoViewportRegionElement_getClassStackIndex() -> int"""
    return _coin.SoViewportRegionElement_getClassStackIndex()

def SoViewportRegionElement_createInstance() -> "void *":
    """SoViewportRegionElement_createInstance() -> void *"""
    return _coin.SoViewportRegionElement_createInstance()

def SoViewportRegionElement_initClass() -> "void":
    """SoViewportRegionElement_initClass()"""
    return _coin.SoViewportRegionElement_initClass()

def SoViewportRegionElement_set(state: 'SoState', viewportRegion: 'SbViewportRegion') -> "void":
    """SoViewportRegionElement_set(SoState state, SbViewportRegion viewportRegion)"""
    return _coin.SoViewportRegionElement_set(state, viewportRegion)

def SoViewportRegionElement_get(state: 'SoState') -> "SbViewportRegion const &":
    """SoViewportRegionElement_get(SoState state) -> SbViewportRegion"""
    return _coin.SoViewportRegionElement_get(state)

class SoGLViewportRegionElement(SoViewportRegionElement):
    """Proxy of C++ SoGLViewportRegionElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLViewportRegionElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLViewportRegionElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLViewportRegionElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLViewportRegionElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLViewportRegionElement self, SoState state)"""
        return _coin.SoGLViewportRegionElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLViewportRegionElement self, SoState state)"""
        return _coin.SoGLViewportRegionElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLViewportRegionElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLViewportRegionElement_pop(self, state, prevTopElement)

SoGLViewportRegionElement_swigregister = _coin.SoGLViewportRegionElement_swigregister
SoGLViewportRegionElement_swigregister(SoGLViewportRegionElement)

def SoGLViewportRegionElement_getClassTypeId() -> "SoType":
    """SoGLViewportRegionElement_getClassTypeId() -> SoType"""
    return _coin.SoGLViewportRegionElement_getClassTypeId()

def SoGLViewportRegionElement_getClassStackIndex() -> "int":
    """SoGLViewportRegionElement_getClassStackIndex() -> int"""
    return _coin.SoGLViewportRegionElement_getClassStackIndex()

def SoGLViewportRegionElement_createInstance() -> "void *":
    """SoGLViewportRegionElement_createInstance() -> void *"""
    return _coin.SoGLViewportRegionElement_createInstance()

def SoGLViewportRegionElement_initClass() -> "void":
    """SoGLViewportRegionElement_initClass()"""
    return _coin.SoGLViewportRegionElement_initClass()

class SoWindowElement(SoElement):
    """Proxy of C++ SoWindowElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoWindowElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoWindowElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoWindowElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoWindowElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoWindowElement self, SoState state)"""
        return _coin.SoWindowElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoWindowElement self, SoState state)"""
        return _coin.SoWindowElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoWindowElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoWindowElement_pop(self, state, prevTopElement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoWindowElement self, SoElement element) -> SbBool"""
        return _coin.SoWindowElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoWindowElement self) -> SoElement"""
        return _coin.SoWindowElement_copyMatchInfo(self)


    def set(state: 'SoState', window: 'void *', context: 'void *', display: 'void *', action: 'SoGLRenderAction') -> "void":
        """set(SoState state, void * window, void * context, void * display, SoGLRenderAction action)"""
        return _coin.SoWindowElement_set(state, window, context, display, action)

    set = staticmethod(set)

    def get(state: 'SoState', window: 'void *&', context: 'void *&', display: 'void *&', action: 'SoGLRenderAction *&') -> "void":
        """get(SoState state, void *& window, void *& context, void *& display, SoGLRenderAction *& action)"""
        return _coin.SoWindowElement_get(state, window, context, display, action)

    get = staticmethod(get)
SoWindowElement_swigregister = _coin.SoWindowElement_swigregister
SoWindowElement_swigregister(SoWindowElement)

def SoWindowElement_getClassTypeId() -> "SoType":
    """SoWindowElement_getClassTypeId() -> SoType"""
    return _coin.SoWindowElement_getClassTypeId()

def SoWindowElement_getClassStackIndex() -> "int":
    """SoWindowElement_getClassStackIndex() -> int"""
    return _coin.SoWindowElement_getClassStackIndex()

def SoWindowElement_createInstance() -> "void *":
    """SoWindowElement_createInstance() -> void *"""
    return _coin.SoWindowElement_createInstance()

def SoWindowElement_initClass() -> "void":
    """SoWindowElement_initClass()"""
    return _coin.SoWindowElement_initClass()

def SoWindowElement_set(state: 'SoState', window: 'void *', context: 'void *', display: 'void *', action: 'SoGLRenderAction') -> "void":
    """SoWindowElement_set(SoState state, void * window, void * context, void * display, SoGLRenderAction action)"""
    return _coin.SoWindowElement_set(state, window, context, display, action)

def SoWindowElement_get(state: 'SoState', window: 'void *&', context: 'void *&', display: 'void *&', action: 'SoGLRenderAction *&') -> "void":
    """SoWindowElement_get(SoState state, void *& window, void *& context, void *& display, SoGLRenderAction *& action)"""
    return _coin.SoWindowElement_get(state, window, context, display, action)

class SoGLCacheContextElement(SoElement):
    """Proxy of C++ SoGLCacheContextElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLCacheContextElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLCacheContextElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLCacheContextElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLCacheContextElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLCacheContextElement self, SoState state)"""
        return _coin.SoGLCacheContextElement_init(self, state)


    def matches(self, elt: 'SoElement') -> "SbBool":
        """matches(SoGLCacheContextElement self, SoElement elt) -> SbBool"""
        return _coin.SoGLCacheContextElement_matches(self, elt)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoGLCacheContextElement self) -> SoElement"""
        return _coin.SoGLCacheContextElement_copyMatchInfo(self)


    def set(state: 'SoState', context: 'int', twopasstransparency: 'SbBool', remoterendering: 'SbBool') -> "void":
        """set(SoState state, int context, SbBool twopasstransparency, SbBool remoterendering)"""
        return _coin.SoGLCacheContextElement_set(state, context, twopasstransparency, remoterendering)

    set = staticmethod(set)

    def get(state: 'SoState') -> "int":
        """get(SoState state) -> int"""
        return _coin.SoGLCacheContextElement_get(state)

    get = staticmethod(get)

    def getExtID(str: 'char const *') -> "int":
        """getExtID(char const * str) -> int"""
        return _coin.SoGLCacheContextElement_getExtID(str)

    getExtID = staticmethod(getExtID)

    def getOpenGLVersion(state: 'SoState', major: 'int &', minor: 'int &') -> "void":
        """getOpenGLVersion(SoState state, int & major, int & minor)"""
        return _coin.SoGLCacheContextElement_getOpenGLVersion(state, major, minor)

    getOpenGLVersion = staticmethod(getOpenGLVersion)

    def extSupported(state: 'SoState', extid: 'int') -> "SbBool":
        """extSupported(SoState state, int extid) -> SbBool"""
        return _coin.SoGLCacheContextElement_extSupported(state, extid)

    extSupported = staticmethod(extSupported)

    def areMipMapsFast(state: 'SoState') -> "SbBool":
        """areMipMapsFast(SoState state) -> SbBool"""
        return _coin.SoGLCacheContextElement_areMipMapsFast(state)

    areMipMapsFast = staticmethod(areMipMapsFast)
    DO_AUTO_CACHE = _coin.SoGLCacheContextElement_DO_AUTO_CACHE
    DONT_AUTO_CACHE = _coin.SoGLCacheContextElement_DONT_AUTO_CACHE

    def shouldAutoCache(state: 'SoState', bits: 'int') -> "void":
        """shouldAutoCache(SoState state, int bits)"""
        return _coin.SoGLCacheContextElement_shouldAutoCache(state, bits)

    shouldAutoCache = staticmethod(shouldAutoCache)

    def setAutoCacheBits(state: 'SoState', bits: 'int') -> "void":
        """setAutoCacheBits(SoState state, int bits)"""
        return _coin.SoGLCacheContextElement_setAutoCacheBits(state, bits)

    setAutoCacheBits = staticmethod(setAutoCacheBits)

    def resetAutoCacheBits(state: 'SoState') -> "int":
        """resetAutoCacheBits(SoState state) -> int"""
        return _coin.SoGLCacheContextElement_resetAutoCacheBits(state)

    resetAutoCacheBits = staticmethod(resetAutoCacheBits)

    def getIsRemoteRendering(state: 'SoState') -> "SbBool":
        """getIsRemoteRendering(SoState state) -> SbBool"""
        return _coin.SoGLCacheContextElement_getIsRemoteRendering(state)

    getIsRemoteRendering = staticmethod(getIsRemoteRendering)

    def getUniqueCacheContext() -> "uint32_t":
        """getUniqueCacheContext() -> uint32_t"""
        return _coin.SoGLCacheContextElement_getUniqueCacheContext()

    getUniqueCacheContext = staticmethod(getUniqueCacheContext)

    def scheduleDeleteCallback(contextid: 'uint32_t const', cb: 'SoScheduleDeleteCB *', closure: 'void *') -> "void":
        """scheduleDeleteCallback(uint32_t const contextid, SoScheduleDeleteCB * cb, void * closure)"""
        return _coin.SoGLCacheContextElement_scheduleDeleteCallback(contextid, cb, closure)

    scheduleDeleteCallback = staticmethod(scheduleDeleteCallback)

    def incNumShapes(state: 'SoState') -> "void":
        """incNumShapes(SoState state)"""
        return _coin.SoGLCacheContextElement_incNumShapes(state)

    incNumShapes = staticmethod(incNumShapes)

    def getNumShapes(state: 'SoState') -> "int":
        """getNumShapes(SoState state) -> int"""
        return _coin.SoGLCacheContextElement_getNumShapes(state)

    getNumShapes = staticmethod(getNumShapes)

    def incNumSeparators(state: 'SoState') -> "void":
        """incNumSeparators(SoState state)"""
        return _coin.SoGLCacheContextElement_incNumSeparators(state)

    incNumSeparators = staticmethod(incNumSeparators)

    def getNumSeparators(state: 'SoState') -> "int":
        """getNumSeparators(SoState state) -> int"""
        return _coin.SoGLCacheContextElement_getNumSeparators(state)

    getNumSeparators = staticmethod(getNumSeparators)
SoGLCacheContextElement_swigregister = _coin.SoGLCacheContextElement_swigregister
SoGLCacheContextElement_swigregister(SoGLCacheContextElement)

def SoGLCacheContextElement_getClassTypeId() -> "SoType":
    """SoGLCacheContextElement_getClassTypeId() -> SoType"""
    return _coin.SoGLCacheContextElement_getClassTypeId()

def SoGLCacheContextElement_getClassStackIndex() -> "int":
    """SoGLCacheContextElement_getClassStackIndex() -> int"""
    return _coin.SoGLCacheContextElement_getClassStackIndex()

def SoGLCacheContextElement_createInstance() -> "void *":
    """SoGLCacheContextElement_createInstance() -> void *"""
    return _coin.SoGLCacheContextElement_createInstance()

def SoGLCacheContextElement_initClass() -> "void":
    """SoGLCacheContextElement_initClass()"""
    return _coin.SoGLCacheContextElement_initClass()

def SoGLCacheContextElement_set(state: 'SoState', context: 'int', twopasstransparency: 'SbBool', remoterendering: 'SbBool') -> "void":
    """SoGLCacheContextElement_set(SoState state, int context, SbBool twopasstransparency, SbBool remoterendering)"""
    return _coin.SoGLCacheContextElement_set(state, context, twopasstransparency, remoterendering)

def SoGLCacheContextElement_get(state: 'SoState') -> "int":
    """SoGLCacheContextElement_get(SoState state) -> int"""
    return _coin.SoGLCacheContextElement_get(state)

def SoGLCacheContextElement_getExtID(str: 'char const *') -> "int":
    """SoGLCacheContextElement_getExtID(char const * str) -> int"""
    return _coin.SoGLCacheContextElement_getExtID(str)

def SoGLCacheContextElement_getOpenGLVersion(state: 'SoState', major: 'int &', minor: 'int &') -> "void":
    """SoGLCacheContextElement_getOpenGLVersion(SoState state, int & major, int & minor)"""
    return _coin.SoGLCacheContextElement_getOpenGLVersion(state, major, minor)

def SoGLCacheContextElement_extSupported(state: 'SoState', extid: 'int') -> "SbBool":
    """SoGLCacheContextElement_extSupported(SoState state, int extid) -> SbBool"""
    return _coin.SoGLCacheContextElement_extSupported(state, extid)

def SoGLCacheContextElement_areMipMapsFast(state: 'SoState') -> "SbBool":
    """SoGLCacheContextElement_areMipMapsFast(SoState state) -> SbBool"""
    return _coin.SoGLCacheContextElement_areMipMapsFast(state)

def SoGLCacheContextElement_shouldAutoCache(state: 'SoState', bits: 'int') -> "void":
    """SoGLCacheContextElement_shouldAutoCache(SoState state, int bits)"""
    return _coin.SoGLCacheContextElement_shouldAutoCache(state, bits)

def SoGLCacheContextElement_setAutoCacheBits(state: 'SoState', bits: 'int') -> "void":
    """SoGLCacheContextElement_setAutoCacheBits(SoState state, int bits)"""
    return _coin.SoGLCacheContextElement_setAutoCacheBits(state, bits)

def SoGLCacheContextElement_resetAutoCacheBits(state: 'SoState') -> "int":
    """SoGLCacheContextElement_resetAutoCacheBits(SoState state) -> int"""
    return _coin.SoGLCacheContextElement_resetAutoCacheBits(state)

def SoGLCacheContextElement_getIsRemoteRendering(state: 'SoState') -> "SbBool":
    """SoGLCacheContextElement_getIsRemoteRendering(SoState state) -> SbBool"""
    return _coin.SoGLCacheContextElement_getIsRemoteRendering(state)

def SoGLCacheContextElement_getUniqueCacheContext() -> "uint32_t":
    """SoGLCacheContextElement_getUniqueCacheContext() -> uint32_t"""
    return _coin.SoGLCacheContextElement_getUniqueCacheContext()

def SoGLCacheContextElement_scheduleDeleteCallback(contextid: 'uint32_t const', cb: 'SoScheduleDeleteCB *', closure: 'void *') -> "void":
    """SoGLCacheContextElement_scheduleDeleteCallback(uint32_t const contextid, SoScheduleDeleteCB * cb, void * closure)"""
    return _coin.SoGLCacheContextElement_scheduleDeleteCallback(contextid, cb, closure)

def SoGLCacheContextElement_incNumShapes(state: 'SoState') -> "void":
    """SoGLCacheContextElement_incNumShapes(SoState state)"""
    return _coin.SoGLCacheContextElement_incNumShapes(state)

def SoGLCacheContextElement_getNumShapes(state: 'SoState') -> "int":
    """SoGLCacheContextElement_getNumShapes(SoState state) -> int"""
    return _coin.SoGLCacheContextElement_getNumShapes(state)

def SoGLCacheContextElement_incNumSeparators(state: 'SoState') -> "void":
    """SoGLCacheContextElement_incNumSeparators(SoState state)"""
    return _coin.SoGLCacheContextElement_incNumSeparators(state)

def SoGLCacheContextElement_getNumSeparators(state: 'SoState') -> "int":
    """SoGLCacheContextElement_getNumSeparators(SoState state) -> int"""
    return _coin.SoGLCacheContextElement_getNumSeparators(state)

class SoGLDisplayList(object):
    """Proxy of C++ SoGLDisplayList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DISPLAY_LIST = _coin.SoGLDisplayList_DISPLAY_LIST
    TEXTURE_OBJECT = _coin.SoGLDisplayList_TEXTURE_OBJECT

    def __init__(self, state: 'SoState', type: 'SoGLDisplayList::Type', allocnum: 'int'=1, mipmaptexobj: 'SbBool'=0):
        """
        __init__(SoGLDisplayList self, SoState state, SoGLDisplayList::Type type, int allocnum=1, SbBool mipmaptexobj=0) -> SoGLDisplayList
        __init__(SoGLDisplayList self, SoState state, SoGLDisplayList::Type type, int allocnum=1) -> SoGLDisplayList
        __init__(SoGLDisplayList self, SoState state, SoGLDisplayList::Type type) -> SoGLDisplayList
        """
        this = _coin.new_SoGLDisplayList(state, type, allocnum, mipmaptexobj)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ref(self) -> "void":
        """ref(SoGLDisplayList self)"""
        return _coin.SoGLDisplayList_ref(self)


    def unref(self, state: 'SoState'=None) -> "void":
        """
        unref(SoGLDisplayList self, SoState state=None)
        unref(SoGLDisplayList self)
        """
        return _coin.SoGLDisplayList_unref(self, state)


    def open(self, state: 'SoState', index: 'int'=0) -> "void":
        """
        open(SoGLDisplayList self, SoState state, int index=0)
        open(SoGLDisplayList self, SoState state)
        """
        return _coin.SoGLDisplayList_open(self, state, index)


    def close(self, state: 'SoState') -> "void":
        """close(SoGLDisplayList self, SoState state)"""
        return _coin.SoGLDisplayList_close(self, state)


    def call(self, state: 'SoState', index: 'int'=0) -> "void":
        """
        call(SoGLDisplayList self, SoState state, int index=0)
        call(SoGLDisplayList self, SoState state)
        """
        return _coin.SoGLDisplayList_call(self, state, index)


    def addDependency(self, state: 'SoState') -> "void":
        """addDependency(SoGLDisplayList self, SoState state)"""
        return _coin.SoGLDisplayList_addDependency(self, state)


    def isMipMapTextureObject(self) -> "SbBool":
        """isMipMapTextureObject(SoGLDisplayList self) -> SbBool"""
        return _coin.SoGLDisplayList_isMipMapTextureObject(self)


    def getType(self) -> "SoGLDisplayList::Type":
        """getType(SoGLDisplayList self) -> SoGLDisplayList::Type"""
        return _coin.SoGLDisplayList_getType(self)


    def getNumAllocated(self) -> "int":
        """getNumAllocated(SoGLDisplayList self) -> int"""
        return _coin.SoGLDisplayList_getNumAllocated(self)


    def getFirstIndex(self) -> "unsigned int":
        """getFirstIndex(SoGLDisplayList self) -> unsigned int"""
        return _coin.SoGLDisplayList_getFirstIndex(self)


    def getContext(self) -> "int":
        """getContext(SoGLDisplayList self) -> int"""
        return _coin.SoGLDisplayList_getContext(self)


    def setTextureTarget(self, target: 'int') -> "void":
        """setTextureTarget(SoGLDisplayList self, int target)"""
        return _coin.SoGLDisplayList_setTextureTarget(self, target)


    def getTextureTarget(self) -> "int":
        """getTextureTarget(SoGLDisplayList self) -> int"""
        return _coin.SoGLDisplayList_getTextureTarget(self)

SoGLDisplayList_swigregister = _coin.SoGLDisplayList_swigregister
SoGLDisplayList_swigregister(SoGLDisplayList)

class SoGLColorIndexElement(SoReplacedElement):
    """Proxy of C++ SoGLColorIndexElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLColorIndexElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLColorIndexElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLColorIndexElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLColorIndexElement_initClass()

    initClass = staticmethod(initClass)

    def isColorIndexMode(state: 'SoState') -> "SbBool":
        """isColorIndexMode(SoState state) -> SbBool"""
        return _coin.SoGLColorIndexElement_isColorIndexMode(state)

    isColorIndexMode = staticmethod(isColorIndexMode)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLColorIndexElement self, SoState state)"""
        return _coin.SoGLColorIndexElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numindices: 'int32_t const', indices: 'int32_t const *const') -> "void":
        """set(SoState state, SoNode node, int32_t const numindices, int32_t const *const indices)"""
        return _coin.SoGLColorIndexElement_set(state, node, numindices, indices)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoGLColorIndexElement const *":
        """getInstance(SoState state) -> SoGLColorIndexElement"""
        return _coin.SoGLColorIndexElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoGLColorIndexElement self) -> int32_t"""
        return _coin.SoGLColorIndexElement_getNum(self)


    def get(self, index: 'int const') -> "int32_t":
        """get(SoGLColorIndexElement self, int const index) -> int32_t"""
        return _coin.SoGLColorIndexElement_get(self, index)


    def getDefault() -> "int32_t":
        """getDefault() -> int32_t"""
        return _coin.SoGLColorIndexElement_getDefault()

    getDefault = staticmethod(getDefault)
SoGLColorIndexElement_swigregister = _coin.SoGLColorIndexElement_swigregister
SoGLColorIndexElement_swigregister(SoGLColorIndexElement)

def SoGLColorIndexElement_getClassTypeId() -> "SoType":
    """SoGLColorIndexElement_getClassTypeId() -> SoType"""
    return _coin.SoGLColorIndexElement_getClassTypeId()

def SoGLColorIndexElement_getClassStackIndex() -> "int":
    """SoGLColorIndexElement_getClassStackIndex() -> int"""
    return _coin.SoGLColorIndexElement_getClassStackIndex()

def SoGLColorIndexElement_createInstance() -> "void *":
    """SoGLColorIndexElement_createInstance() -> void *"""
    return _coin.SoGLColorIndexElement_createInstance()

def SoGLColorIndexElement_initClass() -> "void":
    """SoGLColorIndexElement_initClass()"""
    return _coin.SoGLColorIndexElement_initClass()

def SoGLColorIndexElement_isColorIndexMode(state: 'SoState') -> "SbBool":
    """SoGLColorIndexElement_isColorIndexMode(SoState state) -> SbBool"""
    return _coin.SoGLColorIndexElement_isColorIndexMode(state)

def SoGLColorIndexElement_set(state: 'SoState', node: 'SoNode', numindices: 'int32_t const', indices: 'int32_t const *const') -> "void":
    """SoGLColorIndexElement_set(SoState state, SoNode node, int32_t const numindices, int32_t const *const indices)"""
    return _coin.SoGLColorIndexElement_set(state, node, numindices, indices)

def SoGLColorIndexElement_getInstance(state: 'SoState') -> "SoGLColorIndexElement const *":
    """SoGLColorIndexElement_getInstance(SoState state) -> SoGLColorIndexElement"""
    return _coin.SoGLColorIndexElement_getInstance(state)

def SoGLColorIndexElement_getDefault() -> "int32_t":
    """SoGLColorIndexElement_getDefault() -> int32_t"""
    return _coin.SoGLColorIndexElement_getDefault()

class SoListenerPositionElement(SoReplacedElement):
    """Proxy of C++ SoListenerPositionElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoListenerPositionElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoListenerPositionElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoListenerPositionElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoListenerPositionElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoListenerPositionElement self, SoState state)"""
        return _coin.SoListenerPositionElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', position: 'SbVec3f', setbylistener: 'SbBool') -> "void":
        """set(SoState state, SoNode node, SbVec3f position, SbBool setbylistener)"""
        return _coin.SoListenerPositionElement_set(state, node, position, setbylistener)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbVec3f const &":
        """get(SoState state) -> SbVec3f"""
        return _coin.SoListenerPositionElement_get(state)

    get = staticmethod(get)

    def isSetByListener(state: 'SoState') -> "SbBool":
        """isSetByListener(SoState state) -> SbBool"""
        return _coin.SoListenerPositionElement_isSetByListener(state)

    isSetByListener = staticmethod(isSetByListener)

    def output(self, file: 'FILE *') -> "void":
        """output(SoListenerPositionElement self, FILE * file)"""
        return _coin.SoListenerPositionElement_output(self, file)

SoListenerPositionElement_swigregister = _coin.SoListenerPositionElement_swigregister
SoListenerPositionElement_swigregister(SoListenerPositionElement)

def SoListenerPositionElement_getClassTypeId() -> "SoType":
    """SoListenerPositionElement_getClassTypeId() -> SoType"""
    return _coin.SoListenerPositionElement_getClassTypeId()

def SoListenerPositionElement_getClassStackIndex() -> "int":
    """SoListenerPositionElement_getClassStackIndex() -> int"""
    return _coin.SoListenerPositionElement_getClassStackIndex()

def SoListenerPositionElement_createInstance() -> "void *":
    """SoListenerPositionElement_createInstance() -> void *"""
    return _coin.SoListenerPositionElement_createInstance()

def SoListenerPositionElement_initClass() -> "void":
    """SoListenerPositionElement_initClass()"""
    return _coin.SoListenerPositionElement_initClass()

def SoListenerPositionElement_set(state: 'SoState', node: 'SoNode', position: 'SbVec3f', setbylistener: 'SbBool') -> "void":
    """SoListenerPositionElement_set(SoState state, SoNode node, SbVec3f position, SbBool setbylistener)"""
    return _coin.SoListenerPositionElement_set(state, node, position, setbylistener)

def SoListenerPositionElement_get(state: 'SoState') -> "SbVec3f const &":
    """SoListenerPositionElement_get(SoState state) -> SbVec3f"""
    return _coin.SoListenerPositionElement_get(state)

def SoListenerPositionElement_isSetByListener(state: 'SoState') -> "SbBool":
    """SoListenerPositionElement_isSetByListener(SoState state) -> SbBool"""
    return _coin.SoListenerPositionElement_isSetByListener(state)

class SoListenerOrientationElement(SoReplacedElement):
    """Proxy of C++ SoListenerOrientationElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoListenerOrientationElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoListenerOrientationElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoListenerOrientationElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoListenerOrientationElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoListenerOrientationElement self, SoState state)"""
        return _coin.SoListenerOrientationElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', orientation: 'SbRotation', setbylistener: 'SbBool') -> "void":
        """set(SoState state, SoNode node, SbRotation orientation, SbBool setbylistener)"""
        return _coin.SoListenerOrientationElement_set(state, node, orientation, setbylistener)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SbRotation const &":
        """get(SoState state) -> SbRotation"""
        return _coin.SoListenerOrientationElement_get(state)

    get = staticmethod(get)

    def isSetByListener(state: 'SoState') -> "SbBool":
        """isSetByListener(SoState state) -> SbBool"""
        return _coin.SoListenerOrientationElement_isSetByListener(state)

    isSetByListener = staticmethod(isSetByListener)

    def output(self, file: 'FILE *') -> "void":
        """output(SoListenerOrientationElement self, FILE * file)"""
        return _coin.SoListenerOrientationElement_output(self, file)

SoListenerOrientationElement_swigregister = _coin.SoListenerOrientationElement_swigregister
SoListenerOrientationElement_swigregister(SoListenerOrientationElement)

def SoListenerOrientationElement_getClassTypeId() -> "SoType":
    """SoListenerOrientationElement_getClassTypeId() -> SoType"""
    return _coin.SoListenerOrientationElement_getClassTypeId()

def SoListenerOrientationElement_getClassStackIndex() -> "int":
    """SoListenerOrientationElement_getClassStackIndex() -> int"""
    return _coin.SoListenerOrientationElement_getClassStackIndex()

def SoListenerOrientationElement_createInstance() -> "void *":
    """SoListenerOrientationElement_createInstance() -> void *"""
    return _coin.SoListenerOrientationElement_createInstance()

def SoListenerOrientationElement_initClass() -> "void":
    """SoListenerOrientationElement_initClass()"""
    return _coin.SoListenerOrientationElement_initClass()

def SoListenerOrientationElement_set(state: 'SoState', node: 'SoNode', orientation: 'SbRotation', setbylistener: 'SbBool') -> "void":
    """SoListenerOrientationElement_set(SoState state, SoNode node, SbRotation orientation, SbBool setbylistener)"""
    return _coin.SoListenerOrientationElement_set(state, node, orientation, setbylistener)

def SoListenerOrientationElement_get(state: 'SoState') -> "SbRotation const &":
    """SoListenerOrientationElement_get(SoState state) -> SbRotation"""
    return _coin.SoListenerOrientationElement_get(state)

def SoListenerOrientationElement_isSetByListener(state: 'SoState') -> "SbBool":
    """SoListenerOrientationElement_isSetByListener(SoState state) -> SbBool"""
    return _coin.SoListenerOrientationElement_isSetByListener(state)

class SoListenerDopplerElement(SoReplacedElement):
    """Proxy of C++ SoListenerDopplerElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoListenerDopplerElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoListenerDopplerElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoListenerDopplerElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoListenerDopplerElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoListenerDopplerElement self, SoState state)"""
        return _coin.SoListenerDopplerElement_init(self, state)


    def setDopplerVelocity(state: 'SoState', node: 'SoNode', velocity: 'SbVec3f') -> "void":
        """setDopplerVelocity(SoState state, SoNode node, SbVec3f velocity)"""
        return _coin.SoListenerDopplerElement_setDopplerVelocity(state, node, velocity)

    setDopplerVelocity = staticmethod(setDopplerVelocity)

    def setDopplerFactor(state: 'SoState', node: 'SoNode', factor: 'float') -> "void":
        """setDopplerFactor(SoState state, SoNode node, float factor)"""
        return _coin.SoListenerDopplerElement_setDopplerFactor(state, node, factor)

    setDopplerFactor = staticmethod(setDopplerFactor)

    def getDopplerVelocity(state: 'SoState') -> "SbVec3f const &":
        """getDopplerVelocity(SoState state) -> SbVec3f"""
        return _coin.SoListenerDopplerElement_getDopplerVelocity(state)

    getDopplerVelocity = staticmethod(getDopplerVelocity)

    def getDopplerFactor(state: 'SoState') -> "float":
        """getDopplerFactor(SoState state) -> float"""
        return _coin.SoListenerDopplerElement_getDopplerFactor(state)

    getDopplerFactor = staticmethod(getDopplerFactor)

    def output(self, file: 'FILE *') -> "void":
        """output(SoListenerDopplerElement self, FILE * file)"""
        return _coin.SoListenerDopplerElement_output(self, file)

SoListenerDopplerElement_swigregister = _coin.SoListenerDopplerElement_swigregister
SoListenerDopplerElement_swigregister(SoListenerDopplerElement)

def SoListenerDopplerElement_getClassTypeId() -> "SoType":
    """SoListenerDopplerElement_getClassTypeId() -> SoType"""
    return _coin.SoListenerDopplerElement_getClassTypeId()

def SoListenerDopplerElement_getClassStackIndex() -> "int":
    """SoListenerDopplerElement_getClassStackIndex() -> int"""
    return _coin.SoListenerDopplerElement_getClassStackIndex()

def SoListenerDopplerElement_createInstance() -> "void *":
    """SoListenerDopplerElement_createInstance() -> void *"""
    return _coin.SoListenerDopplerElement_createInstance()

def SoListenerDopplerElement_initClass() -> "void":
    """SoListenerDopplerElement_initClass()"""
    return _coin.SoListenerDopplerElement_initClass()

def SoListenerDopplerElement_setDopplerVelocity(state: 'SoState', node: 'SoNode', velocity: 'SbVec3f') -> "void":
    """SoListenerDopplerElement_setDopplerVelocity(SoState state, SoNode node, SbVec3f velocity)"""
    return _coin.SoListenerDopplerElement_setDopplerVelocity(state, node, velocity)

def SoListenerDopplerElement_setDopplerFactor(state: 'SoState', node: 'SoNode', factor: 'float') -> "void":
    """SoListenerDopplerElement_setDopplerFactor(SoState state, SoNode node, float factor)"""
    return _coin.SoListenerDopplerElement_setDopplerFactor(state, node, factor)

def SoListenerDopplerElement_getDopplerVelocity(state: 'SoState') -> "SbVec3f const &":
    """SoListenerDopplerElement_getDopplerVelocity(SoState state) -> SbVec3f"""
    return _coin.SoListenerDopplerElement_getDopplerVelocity(state)

def SoListenerDopplerElement_getDopplerFactor(state: 'SoState') -> "float":
    """SoListenerDopplerElement_getDopplerFactor(SoState state) -> float"""
    return _coin.SoListenerDopplerElement_getDopplerFactor(state)

class SoListenerGainElement(SoFloatElement):
    """Proxy of C++ SoListenerGainElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoListenerGainElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoListenerGainElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoListenerGainElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoListenerGainElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoListenerGainElement self, SoState state)"""
        return _coin.SoListenerGainElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, float const gain)
        set(SoState state, float const gain)
        """
        return _coin.SoListenerGainElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "float":
        """get(SoState state) -> float"""
        return _coin.SoListenerGainElement_get(state)

    get = staticmethod(get)
SoListenerGainElement_swigregister = _coin.SoListenerGainElement_swigregister
SoListenerGainElement_swigregister(SoListenerGainElement)

def SoListenerGainElement_getClassTypeId() -> "SoType":
    """SoListenerGainElement_getClassTypeId() -> SoType"""
    return _coin.SoListenerGainElement_getClassTypeId()

def SoListenerGainElement_getClassStackIndex() -> "int":
    """SoListenerGainElement_getClassStackIndex() -> int"""
    return _coin.SoListenerGainElement_getClassStackIndex()

def SoListenerGainElement_createInstance() -> "void *":
    """SoListenerGainElement_createInstance() -> void *"""
    return _coin.SoListenerGainElement_createInstance()

def SoListenerGainElement_initClass() -> "void":
    """SoListenerGainElement_initClass()"""
    return _coin.SoListenerGainElement_initClass()

def SoListenerGainElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, float const gain)
    SoListenerGainElement_set(SoState state, float const gain)
    """
    return _coin.SoListenerGainElement_set(*args)

def SoListenerGainElement_get(state: 'SoState') -> "float":
    """SoListenerGainElement_get(SoState state) -> float"""
    return _coin.SoListenerGainElement_get(state)

class SoSoundElement(SoReplacedElement):
    """Proxy of C++ SoSoundElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSoundElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoSoundElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSoundElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSoundElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoSoundElement self, SoState state)"""
        return _coin.SoSoundElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', scenegraphhassoundnode: 'SbBool', soundnodeisplaying: 'SbBool', ispartofactivescenegraph: 'SbBool') -> "void":
        """set(SoState state, SoNode node, SbBool scenegraphhassoundnode, SbBool soundnodeisplaying, SbBool ispartofactivescenegraph)"""
        return _coin.SoSoundElement_set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph)

    set = staticmethod(set)

    def setSceneGraphHasSoundNode(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
        """setSceneGraphHasSoundNode(SoState state, SoNode node, SbBool flag) -> SbBool"""
        return _coin.SoSoundElement_setSceneGraphHasSoundNode(state, node, flag)

    setSceneGraphHasSoundNode = staticmethod(setSceneGraphHasSoundNode)

    def sceneGraphHasSoundNode(state: 'SoState') -> "SbBool":
        """sceneGraphHasSoundNode(SoState state) -> SbBool"""
        return _coin.SoSoundElement_sceneGraphHasSoundNode(state)

    sceneGraphHasSoundNode = staticmethod(sceneGraphHasSoundNode)

    def setSoundNodeIsPlaying(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
        """setSoundNodeIsPlaying(SoState state, SoNode node, SbBool flag) -> SbBool"""
        return _coin.SoSoundElement_setSoundNodeIsPlaying(state, node, flag)

    setSoundNodeIsPlaying = staticmethod(setSoundNodeIsPlaying)

    def soundNodeIsPlaying(state: 'SoState') -> "SbBool":
        """soundNodeIsPlaying(SoState state) -> SbBool"""
        return _coin.SoSoundElement_soundNodeIsPlaying(state)

    soundNodeIsPlaying = staticmethod(soundNodeIsPlaying)

    def setIsPartOfActiveSceneGraph(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
        """setIsPartOfActiveSceneGraph(SoState state, SoNode node, SbBool flag) -> SbBool"""
        return _coin.SoSoundElement_setIsPartOfActiveSceneGraph(state, node, flag)

    setIsPartOfActiveSceneGraph = staticmethod(setIsPartOfActiveSceneGraph)

    def isPartOfActiveSceneGraph(state: 'SoState') -> "SbBool":
        """isPartOfActiveSceneGraph(SoState state) -> SbBool"""
        return _coin.SoSoundElement_isPartOfActiveSceneGraph(state)

    isPartOfActiveSceneGraph = staticmethod(isPartOfActiveSceneGraph)

    def push(self, state: 'SoState') -> "void":
        """push(SoSoundElement self, SoState state)"""
        return _coin.SoSoundElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoSoundElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoSoundElement_pop(self, state, prevTopElement)


    def output(self, file: 'FILE *') -> "void":
        """output(SoSoundElement self, FILE * file)"""
        return _coin.SoSoundElement_output(self, file)

SoSoundElement_swigregister = _coin.SoSoundElement_swigregister
SoSoundElement_swigregister(SoSoundElement)

def SoSoundElement_getClassTypeId() -> "SoType":
    """SoSoundElement_getClassTypeId() -> SoType"""
    return _coin.SoSoundElement_getClassTypeId()

def SoSoundElement_getClassStackIndex() -> "int":
    """SoSoundElement_getClassStackIndex() -> int"""
    return _coin.SoSoundElement_getClassStackIndex()

def SoSoundElement_createInstance() -> "void *":
    """SoSoundElement_createInstance() -> void *"""
    return _coin.SoSoundElement_createInstance()

def SoSoundElement_initClass() -> "void":
    """SoSoundElement_initClass()"""
    return _coin.SoSoundElement_initClass()

def SoSoundElement_set(state: 'SoState', node: 'SoNode', scenegraphhassoundnode: 'SbBool', soundnodeisplaying: 'SbBool', ispartofactivescenegraph: 'SbBool') -> "void":
    """SoSoundElement_set(SoState state, SoNode node, SbBool scenegraphhassoundnode, SbBool soundnodeisplaying, SbBool ispartofactivescenegraph)"""
    return _coin.SoSoundElement_set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph)

def SoSoundElement_setSceneGraphHasSoundNode(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
    """SoSoundElement_setSceneGraphHasSoundNode(SoState state, SoNode node, SbBool flag) -> SbBool"""
    return _coin.SoSoundElement_setSceneGraphHasSoundNode(state, node, flag)

def SoSoundElement_sceneGraphHasSoundNode(state: 'SoState') -> "SbBool":
    """SoSoundElement_sceneGraphHasSoundNode(SoState state) -> SbBool"""
    return _coin.SoSoundElement_sceneGraphHasSoundNode(state)

def SoSoundElement_setSoundNodeIsPlaying(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
    """SoSoundElement_setSoundNodeIsPlaying(SoState state, SoNode node, SbBool flag) -> SbBool"""
    return _coin.SoSoundElement_setSoundNodeIsPlaying(state, node, flag)

def SoSoundElement_soundNodeIsPlaying(state: 'SoState') -> "SbBool":
    """SoSoundElement_soundNodeIsPlaying(SoState state) -> SbBool"""
    return _coin.SoSoundElement_soundNodeIsPlaying(state)

def SoSoundElement_setIsPartOfActiveSceneGraph(state: 'SoState', node: 'SoNode', flag: 'SbBool') -> "SbBool":
    """SoSoundElement_setIsPartOfActiveSceneGraph(SoState state, SoNode node, SbBool flag) -> SbBool"""
    return _coin.SoSoundElement_setIsPartOfActiveSceneGraph(state, node, flag)

def SoSoundElement_isPartOfActiveSceneGraph(state: 'SoState') -> "SbBool":
    """SoSoundElement_isPartOfActiveSceneGraph(SoState state) -> SbBool"""
    return _coin.SoSoundElement_isPartOfActiveSceneGraph(state)

class SoGLVBOElement(SoElement):
    """Proxy of C++ SoGLVBOElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLVBOElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLVBOElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLVBOElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLVBOElement_initClass()

    initClass = staticmethod(initClass)

    def shouldCreateVBO(state: 'SoState', numdata: 'int const') -> "SbBool":
        """shouldCreateVBO(SoState state, int const numdata) -> SbBool"""
        return _coin.SoGLVBOElement_shouldCreateVBO(state, numdata)

    shouldCreateVBO = staticmethod(shouldCreateVBO)

    def setVertexVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
        """setVertexVBO(SoState state, SoVBO * vbo)"""
        return _coin.SoGLVBOElement_setVertexVBO(state, vbo)

    setVertexVBO = staticmethod(setVertexVBO)

    def setNormalVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
        """setNormalVBO(SoState state, SoVBO * vbo)"""
        return _coin.SoGLVBOElement_setNormalVBO(state, vbo)

    setNormalVBO = staticmethod(setNormalVBO)

    def setColorVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
        """setColorVBO(SoState state, SoVBO * vbo)"""
        return _coin.SoGLVBOElement_setColorVBO(state, vbo)

    setColorVBO = staticmethod(setColorVBO)

    def setTexCoordVBO(state: 'SoState', unit: 'int const', vbo: 'SoVBO *') -> "void":
        """setTexCoordVBO(SoState state, int const unit, SoVBO * vbo)"""
        return _coin.SoGLVBOElement_setTexCoordVBO(state, unit, vbo)

    setTexCoordVBO = staticmethod(setTexCoordVBO)

    def getInstance(state: 'SoState') -> "SoGLVBOElement const *":
        """getInstance(SoState state) -> SoGLVBOElement"""
        return _coin.SoGLVBOElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLVBOElement self, SoState state)"""
        return _coin.SoGLVBOElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLVBOElement self, SoState state)"""
        return _coin.SoGLVBOElement_push(self, state)


    def pop(self, state: 'SoState', prevtopelement: 'SoElement') -> "void":
        """pop(SoGLVBOElement self, SoState state, SoElement prevtopelement)"""
        return _coin.SoGLVBOElement_pop(self, state, prevtopelement)


    def matches(self, elt: 'SoElement') -> "SbBool":
        """matches(SoGLVBOElement self, SoElement elt) -> SbBool"""
        return _coin.SoGLVBOElement_matches(self, elt)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoGLVBOElement self) -> SoElement"""
        return _coin.SoGLVBOElement_copyMatchInfo(self)


    def getVertexVBO(self) -> "SoVBO *":
        """getVertexVBO(SoGLVBOElement self) -> SoVBO *"""
        return _coin.SoGLVBOElement_getVertexVBO(self)


    def getNormalVBO(self) -> "SoVBO *":
        """getNormalVBO(SoGLVBOElement self) -> SoVBO *"""
        return _coin.SoGLVBOElement_getNormalVBO(self)


    def getColorVBO(self) -> "SoVBO *":
        """getColorVBO(SoGLVBOElement self) -> SoVBO *"""
        return _coin.SoGLVBOElement_getColorVBO(self)


    def getNumTexCoordVBO(self) -> "int":
        """getNumTexCoordVBO(SoGLVBOElement self) -> int"""
        return _coin.SoGLVBOElement_getNumTexCoordVBO(self)


    def getTexCoordVBO(self, idx: 'int const') -> "SoVBO *":
        """getTexCoordVBO(SoGLVBOElement self, int const idx) -> SoVBO *"""
        return _coin.SoGLVBOElement_getTexCoordVBO(self, idx)

SoGLVBOElement_swigregister = _coin.SoGLVBOElement_swigregister
SoGLVBOElement_swigregister(SoGLVBOElement)

def SoGLVBOElement_getClassTypeId() -> "SoType":
    """SoGLVBOElement_getClassTypeId() -> SoType"""
    return _coin.SoGLVBOElement_getClassTypeId()

def SoGLVBOElement_getClassStackIndex() -> "int":
    """SoGLVBOElement_getClassStackIndex() -> int"""
    return _coin.SoGLVBOElement_getClassStackIndex()

def SoGLVBOElement_createInstance() -> "void *":
    """SoGLVBOElement_createInstance() -> void *"""
    return _coin.SoGLVBOElement_createInstance()

def SoGLVBOElement_initClass() -> "void":
    """SoGLVBOElement_initClass()"""
    return _coin.SoGLVBOElement_initClass()

def SoGLVBOElement_shouldCreateVBO(state: 'SoState', numdata: 'int const') -> "SbBool":
    """SoGLVBOElement_shouldCreateVBO(SoState state, int const numdata) -> SbBool"""
    return _coin.SoGLVBOElement_shouldCreateVBO(state, numdata)

def SoGLVBOElement_setVertexVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
    """SoGLVBOElement_setVertexVBO(SoState state, SoVBO * vbo)"""
    return _coin.SoGLVBOElement_setVertexVBO(state, vbo)

def SoGLVBOElement_setNormalVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
    """SoGLVBOElement_setNormalVBO(SoState state, SoVBO * vbo)"""
    return _coin.SoGLVBOElement_setNormalVBO(state, vbo)

def SoGLVBOElement_setColorVBO(state: 'SoState', vbo: 'SoVBO *') -> "void":
    """SoGLVBOElement_setColorVBO(SoState state, SoVBO * vbo)"""
    return _coin.SoGLVBOElement_setColorVBO(state, vbo)

def SoGLVBOElement_setTexCoordVBO(state: 'SoState', unit: 'int const', vbo: 'SoVBO *') -> "void":
    """SoGLVBOElement_setTexCoordVBO(SoState state, int const unit, SoVBO * vbo)"""
    return _coin.SoGLVBOElement_setTexCoordVBO(state, unit, vbo)

def SoGLVBOElement_getInstance(state: 'SoState') -> "SoGLVBOElement const *":
    """SoGLVBOElement_getInstance(SoState state) -> SoGLVBOElement"""
    return _coin.SoGLVBOElement_getInstance(state)

class SoDepthBufferElement(SoElement):
    """Proxy of C++ SoDepthBufferElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDepthBufferElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoDepthBufferElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDepthBufferElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDepthBufferElement_initClass()

    initClass = staticmethod(initClass)
    NEVER = _coin.SoDepthBufferElement_NEVER
    ALWAYS = _coin.SoDepthBufferElement_ALWAYS
    LESS = _coin.SoDepthBufferElement_LESS
    LEQUAL = _coin.SoDepthBufferElement_LEQUAL
    EQUAL = _coin.SoDepthBufferElement_EQUAL
    GEQUAL = _coin.SoDepthBufferElement_GEQUAL
    GREATER = _coin.SoDepthBufferElement_GREATER
    NOTEQUAL = _coin.SoDepthBufferElement_NOTEQUAL

    def set(state: 'SoState', test: 'SbBool', write: 'SbBool', function: 'SoDepthBufferElement::DepthWriteFunction', range: 'SbVec2f') -> "void":
        """set(SoState state, SbBool test, SbBool write, SoDepthBufferElement::DepthWriteFunction function, SbVec2f range)"""
        return _coin.SoDepthBufferElement_set(state, test, write, function, range)

    set = staticmethod(set)

    def get(state: 'SoState', test_out: 'SbBool &', write_out: 'SbBool &', function_out: 'SoDepthBufferElement::DepthWriteFunction &', range_out: 'SbVec2f') -> "void":
        """get(SoState state, SbBool & test_out, SbBool & write_out, SoDepthBufferElement::DepthWriteFunction & function_out, SbVec2f range_out)"""
        return _coin.SoDepthBufferElement_get(state, test_out, write_out, function_out, range_out)

    get = staticmethod(get)

    def getTestEnable(state: 'SoState') -> "SbBool":
        """getTestEnable(SoState state) -> SbBool"""
        return _coin.SoDepthBufferElement_getTestEnable(state)

    getTestEnable = staticmethod(getTestEnable)

    def getWriteEnable(state: 'SoState') -> "SbBool":
        """getWriteEnable(SoState state) -> SbBool"""
        return _coin.SoDepthBufferElement_getWriteEnable(state)

    getWriteEnable = staticmethod(getWriteEnable)

    def getFunction(state: 'SoState') -> "SoDepthBufferElement::DepthWriteFunction":
        """getFunction(SoState state) -> SoDepthBufferElement::DepthWriteFunction"""
        return _coin.SoDepthBufferElement_getFunction(state)

    getFunction = staticmethod(getFunction)

    def getRange(state: 'SoState') -> "SbVec2f":
        """getRange(SoState state) -> SbVec2f"""
        return _coin.SoDepthBufferElement_getRange(state)

    getRange = staticmethod(getRange)

    def init(self, state: 'SoState') -> "void":
        """init(SoDepthBufferElement self, SoState state)"""
        return _coin.SoDepthBufferElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoDepthBufferElement self, SoState state)"""
        return _coin.SoDepthBufferElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoDepthBufferElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoDepthBufferElement_pop(self, state, prevTopElement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoDepthBufferElement self, SoElement element) -> SbBool"""
        return _coin.SoDepthBufferElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoDepthBufferElement self) -> SoElement"""
        return _coin.SoDepthBufferElement_copyMatchInfo(self)

SoDepthBufferElement_swigregister = _coin.SoDepthBufferElement_swigregister
SoDepthBufferElement_swigregister(SoDepthBufferElement)

def SoDepthBufferElement_getClassTypeId() -> "SoType":
    """SoDepthBufferElement_getClassTypeId() -> SoType"""
    return _coin.SoDepthBufferElement_getClassTypeId()

def SoDepthBufferElement_getClassStackIndex() -> "int":
    """SoDepthBufferElement_getClassStackIndex() -> int"""
    return _coin.SoDepthBufferElement_getClassStackIndex()

def SoDepthBufferElement_createInstance() -> "void *":
    """SoDepthBufferElement_createInstance() -> void *"""
    return _coin.SoDepthBufferElement_createInstance()

def SoDepthBufferElement_initClass() -> "void":
    """SoDepthBufferElement_initClass()"""
    return _coin.SoDepthBufferElement_initClass()

def SoDepthBufferElement_set(state: 'SoState', test: 'SbBool', write: 'SbBool', function: 'SoDepthBufferElement::DepthWriteFunction', range: 'SbVec2f') -> "void":
    """SoDepthBufferElement_set(SoState state, SbBool test, SbBool write, SoDepthBufferElement::DepthWriteFunction function, SbVec2f range)"""
    return _coin.SoDepthBufferElement_set(state, test, write, function, range)

def SoDepthBufferElement_get(state: 'SoState', test_out: 'SbBool &', write_out: 'SbBool &', function_out: 'SoDepthBufferElement::DepthWriteFunction &', range_out: 'SbVec2f') -> "void":
    """SoDepthBufferElement_get(SoState state, SbBool & test_out, SbBool & write_out, SoDepthBufferElement::DepthWriteFunction & function_out, SbVec2f range_out)"""
    return _coin.SoDepthBufferElement_get(state, test_out, write_out, function_out, range_out)

def SoDepthBufferElement_getTestEnable(state: 'SoState') -> "SbBool":
    """SoDepthBufferElement_getTestEnable(SoState state) -> SbBool"""
    return _coin.SoDepthBufferElement_getTestEnable(state)

def SoDepthBufferElement_getWriteEnable(state: 'SoState') -> "SbBool":
    """SoDepthBufferElement_getWriteEnable(SoState state) -> SbBool"""
    return _coin.SoDepthBufferElement_getWriteEnable(state)

def SoDepthBufferElement_getFunction(state: 'SoState') -> "SoDepthBufferElement::DepthWriteFunction":
    """SoDepthBufferElement_getFunction(SoState state) -> SoDepthBufferElement::DepthWriteFunction"""
    return _coin.SoDepthBufferElement_getFunction(state)

def SoDepthBufferElement_getRange(state: 'SoState') -> "SbVec2f":
    """SoDepthBufferElement_getRange(SoState state) -> SbVec2f"""
    return _coin.SoDepthBufferElement_getRange(state)

class SoGLDepthBufferElement(SoDepthBufferElement):
    """Proxy of C++ SoGLDepthBufferElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLDepthBufferElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLDepthBufferElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLDepthBufferElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLDepthBufferElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLDepthBufferElement self, SoState state)"""
        return _coin.SoGLDepthBufferElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoGLDepthBufferElement self, SoState state)"""
        return _coin.SoGLDepthBufferElement_push(self, state)


    def pop(self, state: 'SoState', prevTopElement: 'SoElement') -> "void":
        """pop(SoGLDepthBufferElement self, SoState state, SoElement prevTopElement)"""
        return _coin.SoGLDepthBufferElement_pop(self, state, prevTopElement)

SoGLDepthBufferElement_swigregister = _coin.SoGLDepthBufferElement_swigregister
SoGLDepthBufferElement_swigregister(SoGLDepthBufferElement)

def SoGLDepthBufferElement_getClassTypeId() -> "SoType":
    """SoGLDepthBufferElement_getClassTypeId() -> SoType"""
    return _coin.SoGLDepthBufferElement_getClassTypeId()

def SoGLDepthBufferElement_getClassStackIndex() -> "int":
    """SoGLDepthBufferElement_getClassStackIndex() -> int"""
    return _coin.SoGLDepthBufferElement_getClassStackIndex()

def SoGLDepthBufferElement_createInstance() -> "void *":
    """SoGLDepthBufferElement_createInstance() -> void *"""
    return _coin.SoGLDepthBufferElement_createInstance()

def SoGLDepthBufferElement_initClass() -> "void":
    """SoGLDepthBufferElement_initClass()"""
    return _coin.SoGLDepthBufferElement_initClass()

class SoVertexAttributeElement(SoAccumulatedElement):
    """Proxy of C++ SoVertexAttributeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexAttributeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoVertexAttributeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVertexAttributeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexAttributeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoVertexAttributeElement self, SoState state)"""
        return _coin.SoVertexAttributeElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoVertexAttributeElement self, SoState state)"""
        return _coin.SoVertexAttributeElement_push(self, state)


    def add(state: 'SoState', attribdata: 'SoVertexAttributeData *') -> "void":
        """add(SoState state, SoVertexAttributeData * attribdata)"""
        return _coin.SoVertexAttributeElement_add(state, attribdata)

    add = staticmethod(add)

    def getInstance(state: 'SoState') -> "SoVertexAttributeElement const *":
        """getInstance(SoState state) -> SoVertexAttributeElement"""
        return _coin.SoVertexAttributeElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNumAttributes(self) -> "unsigned int":
        """getNumAttributes(SoVertexAttributeElement self) -> unsigned int"""
        return _coin.SoVertexAttributeElement_getNumAttributes(self)


    def applyToAttributes(self, func: 'SoVertexAttributeElement::AttributeApplyFunc *', closure: 'void *') -> "void":
        """applyToAttributes(SoVertexAttributeElement self, SoVertexAttributeElement::AttributeApplyFunc * func, void * closure)"""
        return _coin.SoVertexAttributeElement_applyToAttributes(self, func, closure)

SoVertexAttributeElement_swigregister = _coin.SoVertexAttributeElement_swigregister
SoVertexAttributeElement_swigregister(SoVertexAttributeElement)

def SoVertexAttributeElement_getClassTypeId() -> "SoType":
    """SoVertexAttributeElement_getClassTypeId() -> SoType"""
    return _coin.SoVertexAttributeElement_getClassTypeId()

def SoVertexAttributeElement_getClassStackIndex() -> "int":
    """SoVertexAttributeElement_getClassStackIndex() -> int"""
    return _coin.SoVertexAttributeElement_getClassStackIndex()

def SoVertexAttributeElement_createInstance() -> "void *":
    """SoVertexAttributeElement_createInstance() -> void *"""
    return _coin.SoVertexAttributeElement_createInstance()

def SoVertexAttributeElement_initClass() -> "void":
    """SoVertexAttributeElement_initClass()"""
    return _coin.SoVertexAttributeElement_initClass()

def SoVertexAttributeElement_add(state: 'SoState', attribdata: 'SoVertexAttributeData *') -> "void":
    """SoVertexAttributeElement_add(SoState state, SoVertexAttributeData * attribdata)"""
    return _coin.SoVertexAttributeElement_add(state, attribdata)

def SoVertexAttributeElement_getInstance(state: 'SoState') -> "SoVertexAttributeElement const *":
    """SoVertexAttributeElement_getInstance(SoState state) -> SoVertexAttributeElement"""
    return _coin.SoVertexAttributeElement_getInstance(state)

class SoGLVertexAttributeElement(SoVertexAttributeElement):
    """Proxy of C++ SoGLVertexAttributeElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLVertexAttributeElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoGLVertexAttributeElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGLVertexAttributeElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLVertexAttributeElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoGLVertexAttributeElement self, SoState state)"""
        return _coin.SoGLVertexAttributeElement_init(self, state)


    def enableVBO(self, action: 'SoGLRenderAction') -> "void":
        """enableVBO(SoGLVertexAttributeElement self, SoGLRenderAction action)"""
        return _coin.SoGLVertexAttributeElement_enableVBO(self, action)


    def disableVBO(self, action: 'SoGLRenderAction') -> "void":
        """disableVBO(SoGLVertexAttributeElement self, SoGLRenderAction action)"""
        return _coin.SoGLVertexAttributeElement_disableVBO(self, action)


    def send(self, index: 'int const') -> "void":
        """send(SoGLVertexAttributeElement self, int const index)"""
        return _coin.SoGLVertexAttributeElement_send(self, index)


    def getInstance(state: 'SoState') -> "SoGLVertexAttributeElement const *":
        """getInstance(SoState state) -> SoGLVertexAttributeElement"""
        return _coin.SoGLVertexAttributeElement_getInstance(state)

    getInstance = staticmethod(getInstance)
SoGLVertexAttributeElement_swigregister = _coin.SoGLVertexAttributeElement_swigregister
SoGLVertexAttributeElement_swigregister(SoGLVertexAttributeElement)

def SoGLVertexAttributeElement_getClassTypeId() -> "SoType":
    """SoGLVertexAttributeElement_getClassTypeId() -> SoType"""
    return _coin.SoGLVertexAttributeElement_getClassTypeId()

def SoGLVertexAttributeElement_getClassStackIndex() -> "int":
    """SoGLVertexAttributeElement_getClassStackIndex() -> int"""
    return _coin.SoGLVertexAttributeElement_getClassStackIndex()

def SoGLVertexAttributeElement_createInstance() -> "void *":
    """SoGLVertexAttributeElement_createInstance() -> void *"""
    return _coin.SoGLVertexAttributeElement_createInstance()

def SoGLVertexAttributeElement_initClass() -> "void":
    """SoGLVertexAttributeElement_initClass()"""
    return _coin.SoGLVertexAttributeElement_initClass()

def SoGLVertexAttributeElement_getInstance(state: 'SoState') -> "SoGLVertexAttributeElement const *":
    """SoGLVertexAttributeElement_getInstance(SoState state) -> SoGLVertexAttributeElement"""
    return _coin.SoGLVertexAttributeElement_getInstance(state)

class SoVertexAttributeBindingElement(SoInt32Element):
    """Proxy of C++ SoVertexAttributeBindingElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexAttributeBindingElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoVertexAttributeBindingElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVertexAttributeBindingElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexAttributeBindingElement_initClass()

    initClass = staticmethod(initClass)
    OVERALL = _coin.SoVertexAttributeBindingElement_OVERALL
    PER_VERTEX = _coin.SoVertexAttributeBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoVertexAttributeBindingElement_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoVertexAttributeBindingElement_DEFAULT

    def init(self, state: 'SoState') -> "void":
        """init(SoVertexAttributeBindingElement self, SoState state)"""
        return _coin.SoVertexAttributeBindingElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoNode node, SoVertexAttributeBindingElement::Binding const binding)
        set(SoState state, SoVertexAttributeBindingElement::Binding const binding)
        """
        return _coin.SoVertexAttributeBindingElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoVertexAttributeBindingElement::Binding":
        """get(SoState state) -> SoVertexAttributeBindingElement::Binding"""
        return _coin.SoVertexAttributeBindingElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoVertexAttributeBindingElement::Binding":
        """getDefault() -> SoVertexAttributeBindingElement::Binding"""
        return _coin.SoVertexAttributeBindingElement_getDefault()

    getDefault = staticmethod(getDefault)
SoVertexAttributeBindingElement_swigregister = _coin.SoVertexAttributeBindingElement_swigregister
SoVertexAttributeBindingElement_swigregister(SoVertexAttributeBindingElement)

def SoVertexAttributeBindingElement_getClassTypeId() -> "SoType":
    """SoVertexAttributeBindingElement_getClassTypeId() -> SoType"""
    return _coin.SoVertexAttributeBindingElement_getClassTypeId()

def SoVertexAttributeBindingElement_getClassStackIndex() -> "int":
    """SoVertexAttributeBindingElement_getClassStackIndex() -> int"""
    return _coin.SoVertexAttributeBindingElement_getClassStackIndex()

def SoVertexAttributeBindingElement_createInstance() -> "void *":
    """SoVertexAttributeBindingElement_createInstance() -> void *"""
    return _coin.SoVertexAttributeBindingElement_createInstance()

def SoVertexAttributeBindingElement_initClass() -> "void":
    """SoVertexAttributeBindingElement_initClass()"""
    return _coin.SoVertexAttributeBindingElement_initClass()

def SoVertexAttributeBindingElement_set(*args) -> "void":
    """
    set(SoState state, SoNode node, SoVertexAttributeBindingElement::Binding const binding)
    SoVertexAttributeBindingElement_set(SoState state, SoVertexAttributeBindingElement::Binding const binding)
    """
    return _coin.SoVertexAttributeBindingElement_set(*args)

def SoVertexAttributeBindingElement_get(state: 'SoState') -> "SoVertexAttributeBindingElement::Binding":
    """SoVertexAttributeBindingElement_get(SoState state) -> SoVertexAttributeBindingElement::Binding"""
    return _coin.SoVertexAttributeBindingElement_get(state)

def SoVertexAttributeBindingElement_getDefault() -> "SoVertexAttributeBindingElement::Binding":
    """SoVertexAttributeBindingElement_getDefault() -> SoVertexAttributeBindingElement::Binding"""
    return _coin.SoVertexAttributeBindingElement_getDefault()

class SoSpecularColorElement(SoReplacedElement):
    """Proxy of C++ SoSpecularColorElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSpecularColorElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoSpecularColorElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSpecularColorElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSpecularColorElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoSpecularColorElement self, SoState state)"""
        return _coin.SoSpecularColorElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numColors: 'int32_t const', colors: 'SbColor') -> "void":
        """set(SoState state, SoNode node, int32_t const numColors, SbColor colors)"""
        return _coin.SoSpecularColorElement_set(state, node, numColors, colors)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoSpecularColorElement const *":
        """getInstance(SoState state) -> SoSpecularColorElement"""
        return _coin.SoSpecularColorElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoSpecularColorElement self) -> int32_t"""
        return _coin.SoSpecularColorElement_getNum(self)


    def get(self, index: 'int const') -> "SbColor const &":
        """get(SoSpecularColorElement self, int const index) -> SbColor"""
        return _coin.SoSpecularColorElement_get(self, index)


    def getArrayPtr(self) -> "SbColor const *":
        """getArrayPtr(SoSpecularColorElement self) -> SbColor"""
        return _coin.SoSpecularColorElement_getArrayPtr(self)

SoSpecularColorElement_swigregister = _coin.SoSpecularColorElement_swigregister
SoSpecularColorElement_swigregister(SoSpecularColorElement)

def SoSpecularColorElement_getClassTypeId() -> "SoType":
    """SoSpecularColorElement_getClassTypeId() -> SoType"""
    return _coin.SoSpecularColorElement_getClassTypeId()

def SoSpecularColorElement_getClassStackIndex() -> "int":
    """SoSpecularColorElement_getClassStackIndex() -> int"""
    return _coin.SoSpecularColorElement_getClassStackIndex()

def SoSpecularColorElement_createInstance() -> "void *":
    """SoSpecularColorElement_createInstance() -> void *"""
    return _coin.SoSpecularColorElement_createInstance()

def SoSpecularColorElement_initClass() -> "void":
    """SoSpecularColorElement_initClass()"""
    return _coin.SoSpecularColorElement_initClass()

def SoSpecularColorElement_set(state: 'SoState', node: 'SoNode', numColors: 'int32_t const', colors: 'SbColor') -> "void":
    """SoSpecularColorElement_set(SoState state, SoNode node, int32_t const numColors, SbColor colors)"""
    return _coin.SoSpecularColorElement_set(state, node, numColors, colors)

def SoSpecularColorElement_getInstance(state: 'SoState') -> "SoSpecularColorElement const *":
    """SoSpecularColorElement_getInstance(SoState state) -> SoSpecularColorElement"""
    return _coin.SoSpecularColorElement_getInstance(state)

class SoEmissiveColorElement(SoReplacedElement):
    """Proxy of C++ SoEmissiveColorElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEmissiveColorElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoEmissiveColorElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoEmissiveColorElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEmissiveColorElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoEmissiveColorElement self, SoState state)"""
        return _coin.SoEmissiveColorElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
        """set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
        return _coin.SoEmissiveColorElement_set(state, node, numcolors, colors)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoEmissiveColorElement const *":
        """getInstance(SoState state) -> SoEmissiveColorElement"""
        return _coin.SoEmissiveColorElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoEmissiveColorElement self) -> int32_t"""
        return _coin.SoEmissiveColorElement_getNum(self)


    def get(self, index: 'int const') -> "SbColor const &":
        """get(SoEmissiveColorElement self, int const index) -> SbColor"""
        return _coin.SoEmissiveColorElement_get(self, index)


    def getArrayPtr(self) -> "SbColor const *":
        """getArrayPtr(SoEmissiveColorElement self) -> SbColor"""
        return _coin.SoEmissiveColorElement_getArrayPtr(self)

SoEmissiveColorElement_swigregister = _coin.SoEmissiveColorElement_swigregister
SoEmissiveColorElement_swigregister(SoEmissiveColorElement)

def SoEmissiveColorElement_getClassTypeId() -> "SoType":
    """SoEmissiveColorElement_getClassTypeId() -> SoType"""
    return _coin.SoEmissiveColorElement_getClassTypeId()

def SoEmissiveColorElement_getClassStackIndex() -> "int":
    """SoEmissiveColorElement_getClassStackIndex() -> int"""
    return _coin.SoEmissiveColorElement_getClassStackIndex()

def SoEmissiveColorElement_createInstance() -> "void *":
    """SoEmissiveColorElement_createInstance() -> void *"""
    return _coin.SoEmissiveColorElement_createInstance()

def SoEmissiveColorElement_initClass() -> "void":
    """SoEmissiveColorElement_initClass()"""
    return _coin.SoEmissiveColorElement_initClass()

def SoEmissiveColorElement_set(state: 'SoState', node: 'SoNode', numcolors: 'int32_t const', colors: 'SbColor') -> "void":
    """SoEmissiveColorElement_set(SoState state, SoNode node, int32_t const numcolors, SbColor colors)"""
    return _coin.SoEmissiveColorElement_set(state, node, numcolors, colors)

def SoEmissiveColorElement_getInstance(state: 'SoState') -> "SoEmissiveColorElement const *":
    """SoEmissiveColorElement_getInstance(SoState state) -> SoEmissiveColorElement"""
    return _coin.SoEmissiveColorElement_getInstance(state)

class SoShininessElement(SoReplacedElement):
    """Proxy of C++ SoShininessElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShininessElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoShininessElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoShininessElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShininessElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoShininessElement self, SoState state)"""
        return _coin.SoShininessElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numvalues: 'int32_t const', values: 'float const *const') -> "void":
        """set(SoState state, SoNode node, int32_t const numvalues, float const *const values)"""
        return _coin.SoShininessElement_set(state, node, numvalues, values)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoShininessElement const *":
        """getInstance(SoState state) -> SoShininessElement"""
        return _coin.SoShininessElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoShininessElement self) -> int32_t"""
        return _coin.SoShininessElement_getNum(self)


    def get(self, index: 'int const') -> "float":
        """get(SoShininessElement self, int const index) -> float"""
        return _coin.SoShininessElement_get(self, index)


    def getArrayPtr(self) -> "float const *":
        """getArrayPtr(SoShininessElement self) -> float const *"""
        return _coin.SoShininessElement_getArrayPtr(self)

SoShininessElement_swigregister = _coin.SoShininessElement_swigregister
SoShininessElement_swigregister(SoShininessElement)

def SoShininessElement_getClassTypeId() -> "SoType":
    """SoShininessElement_getClassTypeId() -> SoType"""
    return _coin.SoShininessElement_getClassTypeId()

def SoShininessElement_getClassStackIndex() -> "int":
    """SoShininessElement_getClassStackIndex() -> int"""
    return _coin.SoShininessElement_getClassStackIndex()

def SoShininessElement_createInstance() -> "void *":
    """SoShininessElement_createInstance() -> void *"""
    return _coin.SoShininessElement_createInstance()

def SoShininessElement_initClass() -> "void":
    """SoShininessElement_initClass()"""
    return _coin.SoShininessElement_initClass()

def SoShininessElement_set(state: 'SoState', node: 'SoNode', numvalues: 'int32_t const', values: 'float const *const') -> "void":
    """SoShininessElement_set(SoState state, SoNode node, int32_t const numvalues, float const *const values)"""
    return _coin.SoShininessElement_set(state, node, numvalues, values)

def SoShininessElement_getInstance(state: 'SoState') -> "SoShininessElement const *":
    """SoShininessElement_getInstance(SoState state) -> SoShininessElement"""
    return _coin.SoShininessElement_getInstance(state)

class SoTransparencyElement(SoReplacedElement):
    """Proxy of C++ SoTransparencyElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransparencyElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTransparencyElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTransparencyElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransparencyElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoTransparencyElement self, SoState state)"""
        return _coin.SoTransparencyElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', numvalues: 'int32_t const', values: 'float const *const') -> "void":
        """set(SoState state, SoNode node, int32_t const numvalues, float const *const values)"""
        return _coin.SoTransparencyElement_set(state, node, numvalues, values)

    set = staticmethod(set)

    def getInstance(state: 'SoState') -> "SoTransparencyElement const *":
        """getInstance(SoState state) -> SoTransparencyElement"""
        return _coin.SoTransparencyElement_getInstance(state)

    getInstance = staticmethod(getInstance)

    def getNum(self) -> "int32_t":
        """getNum(SoTransparencyElement self) -> int32_t"""
        return _coin.SoTransparencyElement_getNum(self)


    def get(self, index: 'int const') -> "float":
        """get(SoTransparencyElement self, int const index) -> float"""
        return _coin.SoTransparencyElement_get(self, index)


    def getArrayPtr(self) -> "float const *":
        """getArrayPtr(SoTransparencyElement self) -> float const *"""
        return _coin.SoTransparencyElement_getArrayPtr(self)

SoTransparencyElement_swigregister = _coin.SoTransparencyElement_swigregister
SoTransparencyElement_swigregister(SoTransparencyElement)

def SoTransparencyElement_getClassTypeId() -> "SoType":
    """SoTransparencyElement_getClassTypeId() -> SoType"""
    return _coin.SoTransparencyElement_getClassTypeId()

def SoTransparencyElement_getClassStackIndex() -> "int":
    """SoTransparencyElement_getClassStackIndex() -> int"""
    return _coin.SoTransparencyElement_getClassStackIndex()

def SoTransparencyElement_createInstance() -> "void *":
    """SoTransparencyElement_createInstance() -> void *"""
    return _coin.SoTransparencyElement_createInstance()

def SoTransparencyElement_initClass() -> "void":
    """SoTransparencyElement_initClass()"""
    return _coin.SoTransparencyElement_initClass()

def SoTransparencyElement_set(state: 'SoState', node: 'SoNode', numvalues: 'int32_t const', values: 'float const *const') -> "void":
    """SoTransparencyElement_set(SoState state, SoNode node, int32_t const numvalues, float const *const values)"""
    return _coin.SoTransparencyElement_set(state, node, numvalues, values)

def SoTransparencyElement_getInstance(state: 'SoState') -> "SoTransparencyElement const *":
    """SoTransparencyElement_getInstance(SoState state) -> SoTransparencyElement"""
    return _coin.SoTransparencyElement_getInstance(state)

class SoLightModelElement(SoInt32Element):
    """Proxy of C++ SoLightModelElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLightModelElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoLightModelElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoLightModelElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLightModelElement_initClass()

    initClass = staticmethod(initClass)
    BASE_COLOR = _coin.SoLightModelElement_BASE_COLOR
    PHONG = _coin.SoLightModelElement_PHONG

    def init(self, state: 'SoState') -> "void":
        """init(SoLightModelElement self, SoState state)"""
        return _coin.SoLightModelElement_init(self, state)


    def set(*args) -> "void":
        """
        set(SoState state, SoLightModelElement::Model const model)
        set(SoState state, SoNode node, SoLightModelElement::Model const model)
        """
        return _coin.SoLightModelElement_set(*args)

    set = staticmethod(set)

    def get(state: 'SoState') -> "SoLightModelElement::Model":
        """get(SoState state) -> SoLightModelElement::Model"""
        return _coin.SoLightModelElement_get(state)

    get = staticmethod(get)

    def getDefault() -> "SoLightModelElement::Model":
        """getDefault() -> SoLightModelElement::Model"""
        return _coin.SoLightModelElement_getDefault()

    getDefault = staticmethod(getDefault)

    def getInstance(state: 'SoState') -> "SoLightModelElement const *":
        """getInstance(SoState state) -> SoLightModelElement"""
        return _coin.SoLightModelElement_getInstance(state)

    getInstance = staticmethod(getInstance)
SoLightModelElement_swigregister = _coin.SoLightModelElement_swigregister
SoLightModelElement_swigregister(SoLightModelElement)

def SoLightModelElement_getClassTypeId() -> "SoType":
    """SoLightModelElement_getClassTypeId() -> SoType"""
    return _coin.SoLightModelElement_getClassTypeId()

def SoLightModelElement_getClassStackIndex() -> "int":
    """SoLightModelElement_getClassStackIndex() -> int"""
    return _coin.SoLightModelElement_getClassStackIndex()

def SoLightModelElement_createInstance() -> "void *":
    """SoLightModelElement_createInstance() -> void *"""
    return _coin.SoLightModelElement_createInstance()

def SoLightModelElement_initClass() -> "void":
    """SoLightModelElement_initClass()"""
    return _coin.SoLightModelElement_initClass()

def SoLightModelElement_set(*args) -> "void":
    """
    set(SoState state, SoLightModelElement::Model const model)
    SoLightModelElement_set(SoState state, SoNode node, SoLightModelElement::Model const model)
    """
    return _coin.SoLightModelElement_set(*args)

def SoLightModelElement_get(state: 'SoState') -> "SoLightModelElement::Model":
    """SoLightModelElement_get(SoState state) -> SoLightModelElement::Model"""
    return _coin.SoLightModelElement_get(state)

def SoLightModelElement_getDefault() -> "SoLightModelElement::Model":
    """SoLightModelElement_getDefault() -> SoLightModelElement::Model"""
    return _coin.SoLightModelElement_getDefault()

def SoLightModelElement_getInstance(state: 'SoState') -> "SoLightModelElement const *":
    """SoLightModelElement_getInstance(SoState state) -> SoLightModelElement"""
    return _coin.SoLightModelElement_getInstance(state)

class SbColor4f(SbVec4f):
    """Proxy of C++ SbColor4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbColor4f self) -> SbColor4f
        __init__(SbColor4f self, SbColor rgb, float const alpha=1.0) -> SbColor4f
        __init__(SbColor4f self, SbColor rgb) -> SbColor4f
        __init__(SbColor4f self, SbVec4f v) -> SbColor4f
        __init__(SbColor4f self, float const *const rgba) -> SbColor4f
        __init__(SbColor4f self, float const r, float const g, float const b, float const a=1.0) -> SbColor4f
        __init__(SbColor4f self, float const r, float const g, float const b) -> SbColor4f
        """
        this = _coin.new_SbColor4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "void":
        """
        setValue(SbColor4f self, float const r, float const g, float const b, float const a=1.0)
        setValue(SbColor4f self, float const r, float const g, float const b)
        setValue(SbColor4f self, float const [4] col)
        """
        return _coin.SbColor4f_setValue(self, *args)


    def getValue(self) -> "void":
        """getValue(SbColor4f self)"""
        return _coin.SbColor4f_getValue(self)


    def setRGB(self, col: 'SbColor') -> "SbColor4f &":
        """setRGB(SbColor4f self, SbColor col) -> SbColor4f"""
        return _coin.SbColor4f_setRGB(self, col)


    def getRGB(self, color: 'SbColor') -> "void":
        """getRGB(SbColor4f self, SbColor color)"""
        return _coin.SbColor4f_getRGB(self, color)


    def setHSVValue(self, *args) -> "SbColor4f &":
        """
        setHSVValue(SbColor4f self, float h, float s, float v, float a=1.0) -> SbColor4f
        setHSVValue(SbColor4f self, float h, float s, float v) -> SbColor4f
        setHSVValue(SbColor4f self, float const [3] hsv, float alpha=1.0) -> SbColor4f
        setHSVValue(SbColor4f self, float const [3] hsv) -> SbColor4f
        """
        return _coin.SbColor4f_setHSVValue(self, *args)


    def getHSVValue(self) -> "void":
        """getHSVValue(SbColor4f self)"""
        return _coin.SbColor4f_getHSVValue(self)


    def setPackedValue(self, rgba: 'uint32_t const') -> "SbColor4f &":
        """setPackedValue(SbColor4f self, uint32_t const rgba) -> SbColor4f"""
        return _coin.SbColor4f_setPackedValue(self, rgba)


    def getPackedValue(self) -> "uint32_t":
        """getPackedValue(SbColor4f self) -> uint32_t"""
        return _coin.SbColor4f_getPackedValue(self)


    def __imul__(self, d: 'float const') -> "SbColor4f &":
        """__imul__(SbColor4f self, float const d) -> SbColor4f"""
        return _coin.SbColor4f___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbColor4f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, c: 'SbColor4f') -> "SbColor4f &":
        """__iadd__(SbColor4f self, SbColor4f c) -> SbColor4f"""
        return _coin.SbColor4f___iadd__(self, c)


    def __isub__(self, c: 'SbColor4f') -> "SbColor4f &":
        """__isub__(SbColor4f self, SbColor4f c) -> SbColor4f"""
        return _coin.SbColor4f___isub__(self, c)


    def __add__(self, u: 'SbColor4f') -> "SbColor4f":
        """__add__(SbColor4f self, SbColor4f u) -> SbColor4f"""
        return _coin.SbColor4f___add__(self, u)


    def __sub__(self, u: 'SbColor4f') -> "SbColor4f":
        """__sub__(SbColor4f self, SbColor4f u) -> SbColor4f"""
        return _coin.SbColor4f___sub__(self, u)


    def __mul__(self, d: 'float const') -> "SbColor4f":
        """__mul__(SbColor4f self, float const d) -> SbColor4f"""
        return _coin.SbColor4f___mul__(self, d)


    def __rmul__(self, d: 'float const') -> "SbColor4f":
        """__rmul__(SbColor4f self, float const d) -> SbColor4f"""
        return _coin.SbColor4f___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbColor4f":
        """__div__(SbColor4f self, float const d) -> SbColor4f"""
        return _coin.SbColor4f___div__(self, d)


    def __eq__(self, u: 'SbColor4f') -> "int":
        """__eq__(SbColor4f self, SbColor4f u) -> int"""
        return _coin.SbColor4f___eq__(self, u)


    def __nq__(self, u: 'SbColor4f') -> "int":
        """__nq__(SbColor4f self, SbColor4f u) -> int"""
        return _coin.SbColor4f___nq__(self, u)


    def __getitem__(self, i: 'int') -> "float":
        """__getitem__(SbColor4f self, int i) -> float"""
        return _coin.SbColor4f___getitem__(self, i)

    __swig_destroy__ = _coin.delete_SbColor4f
    __del__ = lambda self: None
SbColor4f_swigregister = _coin.SbColor4f_swigregister
SbColor4f_swigregister(SbColor4f)

class SoTextureCombineElement(SoElement):
    """Proxy of C++ SoTextureCombineElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCombineElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextureCombineElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextureCombineElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCombineElement_initClass()

    initClass = staticmethod(initClass)
    PRIMARY_COLOR = _coin.SoTextureCombineElement_PRIMARY_COLOR
    TEXTURE = _coin.SoTextureCombineElement_TEXTURE
    CONSTANT = _coin.SoTextureCombineElement_CONSTANT
    PREVIOUS = _coin.SoTextureCombineElement_PREVIOUS
    SRC_COLOR = _coin.SoTextureCombineElement_SRC_COLOR
    ONE_MINUS_SRC_COLOR = _coin.SoTextureCombineElement_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _coin.SoTextureCombineElement_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = _coin.SoTextureCombineElement_ONE_MINUS_SRC_ALPHA
    REPLACE = _coin.SoTextureCombineElement_REPLACE
    MODULATE = _coin.SoTextureCombineElement_MODULATE
    ADD = _coin.SoTextureCombineElement_ADD
    ADD_SIGNED = _coin.SoTextureCombineElement_ADD_SIGNED
    SUBTRACT = _coin.SoTextureCombineElement_SUBTRACT
    INTERPOLATE = _coin.SoTextureCombineElement_INTERPOLATE
    DOT3_RGB = _coin.SoTextureCombineElement_DOT3_RGB
    DOT3_RGBA = _coin.SoTextureCombineElement_DOT3_RGBA

    def init(self, state: 'SoState') -> "void":
        """init(SoTextureCombineElement self, SoState state)"""
        return _coin.SoTextureCombineElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', unit: 'int const', rgboperation: 'SoTextureCombineElement::Operation const', alphaoperation: 'SoTextureCombineElement::Operation const', rgbsource: 'SoTextureCombineElement::Source const *', alphasource: 'SoTextureCombineElement::Source const *', rgboperand: 'SoTextureCombineElement::Operand const *', alphaoperand: 'SoTextureCombineElement::Operand const *', constantcolor: 'SbColor4f', rgbscale: 'float const', alphascale: 'float const') -> "void":
        """set(SoState state, SoNode node, int const unit, SoTextureCombineElement::Operation const rgboperation, SoTextureCombineElement::Operation const alphaoperation, SoTextureCombineElement::Source const * rgbsource, SoTextureCombineElement::Source const * alphasource, SoTextureCombineElement::Operand const * rgboperand, SoTextureCombineElement::Operand const * alphaoperand, SbColor4f constantcolor, float const rgbscale, float const alphascale)"""
        return _coin.SoTextureCombineElement_set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

    set = staticmethod(set)

    def isDefault(state: 'SoState', unit: 'int const') -> "SbBool":
        """isDefault(SoState state, int const unit) -> SbBool"""
        return _coin.SoTextureCombineElement_isDefault(state, unit)

    isDefault = staticmethod(isDefault)

    def get(state: 'SoState', unit: 'int const', rgboperation: 'SoTextureCombineElement::Operation &', alphaoperation: 'SoTextureCombineElement::Operation &', rgbsource: 'SoTextureCombineElement::Source *', alphasource: 'SoTextureCombineElement::Source *', rgboperand: 'SoTextureCombineElement::Operand *', alphaoperand: 'SoTextureCombineElement::Operand *', constantcolor: 'SbColor4f', rgbscale: 'float &', alphascale: 'float &') -> "void":
        """get(SoState state, int const unit, SoTextureCombineElement::Operation & rgboperation, SoTextureCombineElement::Operation & alphaoperation, SoTextureCombineElement::Source * rgbsource, SoTextureCombineElement::Source * alphasource, SoTextureCombineElement::Operand * rgboperand, SoTextureCombineElement::Operand * alphaoperand, SbColor4f constantcolor, float & rgbscale, float & alphascale)"""
        return _coin.SoTextureCombineElement_get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

    get = staticmethod(get)

    def push(self, state: 'SoState') -> "void":
        """push(SoTextureCombineElement self, SoState state)"""
        return _coin.SoTextureCombineElement_push(self, state)


    def matches(self, elem: 'SoElement') -> "SbBool":
        """matches(SoTextureCombineElement self, SoElement elem) -> SbBool"""
        return _coin.SoTextureCombineElement_matches(self, elem)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoTextureCombineElement self) -> SoElement"""
        return _coin.SoTextureCombineElement_copyMatchInfo(self)


    def setElt(self, unit: 'int const', nodeid: 'SbUniqueId const', rgboperation: 'SoTextureCombineElement::Operation const', alphaoperation: 'SoTextureCombineElement::Operation const', rgbsource: 'SoTextureCombineElement::Source const *', alphasource: 'SoTextureCombineElement::Source const *', rgboperand: 'SoTextureCombineElement::Operand const *', alphaoperand: 'SoTextureCombineElement::Operand const *', constantcolor: 'SbColor4f', rgbscale: 'float const', alphascale: 'float const') -> "void":
        """setElt(SoTextureCombineElement self, int const unit, SbUniqueId const nodeid, SoTextureCombineElement::Operation const rgboperation, SoTextureCombineElement::Operation const alphaoperation, SoTextureCombineElement::Source const * rgbsource, SoTextureCombineElement::Source const * alphasource, SoTextureCombineElement::Operand const * rgboperand, SoTextureCombineElement::Operand const * alphaoperand, SbColor4f constantcolor, float const rgbscale, float const alphascale)"""
        return _coin.SoTextureCombineElement_setElt(self, unit, nodeid, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)


    def apply(state: 'SoState', unit: 'int const') -> "void":
        """apply(SoState state, int const unit)"""
        return _coin.SoTextureCombineElement_apply(state, unit)

    apply = staticmethod(apply)
SoTextureCombineElement_swigregister = _coin.SoTextureCombineElement_swigregister
SoTextureCombineElement_swigregister(SoTextureCombineElement)

def SoTextureCombineElement_getClassTypeId() -> "SoType":
    """SoTextureCombineElement_getClassTypeId() -> SoType"""
    return _coin.SoTextureCombineElement_getClassTypeId()

def SoTextureCombineElement_getClassStackIndex() -> "int":
    """SoTextureCombineElement_getClassStackIndex() -> int"""
    return _coin.SoTextureCombineElement_getClassStackIndex()

def SoTextureCombineElement_createInstance() -> "void *":
    """SoTextureCombineElement_createInstance() -> void *"""
    return _coin.SoTextureCombineElement_createInstance()

def SoTextureCombineElement_initClass() -> "void":
    """SoTextureCombineElement_initClass()"""
    return _coin.SoTextureCombineElement_initClass()

def SoTextureCombineElement_set(state: 'SoState', node: 'SoNode', unit: 'int const', rgboperation: 'SoTextureCombineElement::Operation const', alphaoperation: 'SoTextureCombineElement::Operation const', rgbsource: 'SoTextureCombineElement::Source const *', alphasource: 'SoTextureCombineElement::Source const *', rgboperand: 'SoTextureCombineElement::Operand const *', alphaoperand: 'SoTextureCombineElement::Operand const *', constantcolor: 'SbColor4f', rgbscale: 'float const', alphascale: 'float const') -> "void":
    """SoTextureCombineElement_set(SoState state, SoNode node, int const unit, SoTextureCombineElement::Operation const rgboperation, SoTextureCombineElement::Operation const alphaoperation, SoTextureCombineElement::Source const * rgbsource, SoTextureCombineElement::Source const * alphasource, SoTextureCombineElement::Operand const * rgboperand, SoTextureCombineElement::Operand const * alphaoperand, SbColor4f constantcolor, float const rgbscale, float const alphascale)"""
    return _coin.SoTextureCombineElement_set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

def SoTextureCombineElement_isDefault(state: 'SoState', unit: 'int const') -> "SbBool":
    """SoTextureCombineElement_isDefault(SoState state, int const unit) -> SbBool"""
    return _coin.SoTextureCombineElement_isDefault(state, unit)

def SoTextureCombineElement_get(state: 'SoState', unit: 'int const', rgboperation: 'SoTextureCombineElement::Operation &', alphaoperation: 'SoTextureCombineElement::Operation &', rgbsource: 'SoTextureCombineElement::Source *', alphasource: 'SoTextureCombineElement::Source *', rgboperand: 'SoTextureCombineElement::Operand *', alphaoperand: 'SoTextureCombineElement::Operand *', constantcolor: 'SbColor4f', rgbscale: 'float &', alphascale: 'float &') -> "void":
    """SoTextureCombineElement_get(SoState state, int const unit, SoTextureCombineElement::Operation & rgboperation, SoTextureCombineElement::Operation & alphaoperation, SoTextureCombineElement::Source * rgbsource, SoTextureCombineElement::Source * alphasource, SoTextureCombineElement::Operand * rgboperand, SoTextureCombineElement::Operand * alphaoperand, SbColor4f constantcolor, float & rgbscale, float & alphascale)"""
    return _coin.SoTextureCombineElement_get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

def SoTextureCombineElement_apply(state: 'SoState', unit: 'int const') -> "void":
    """SoTextureCombineElement_apply(SoState state, int const unit)"""
    return _coin.SoTextureCombineElement_apply(state, unit)

class SoTextureUnitElement(SoInt32Element):
    """Proxy of C++ SoTextureUnitElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureUnitElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoTextureUnitElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTextureUnitElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureUnitElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoTextureUnitElement self, SoState state)"""
        return _coin.SoTextureUnitElement_init(self, state)


    def set(state: 'SoState', node: 'SoNode', units: 'int const') -> "void":
        """set(SoState state, SoNode node, int const units)"""
        return _coin.SoTextureUnitElement_set(state, node, units)

    set = staticmethod(set)

    def get(state: 'SoState') -> "int":
        """get(SoState state) -> int"""
        return _coin.SoTextureUnitElement_get(state)

    get = staticmethod(get)
SoTextureUnitElement_swigregister = _coin.SoTextureUnitElement_swigregister
SoTextureUnitElement_swigregister(SoTextureUnitElement)

def SoTextureUnitElement_getClassTypeId() -> "SoType":
    """SoTextureUnitElement_getClassTypeId() -> SoType"""
    return _coin.SoTextureUnitElement_getClassTypeId()

def SoTextureUnitElement_getClassStackIndex() -> "int":
    """SoTextureUnitElement_getClassStackIndex() -> int"""
    return _coin.SoTextureUnitElement_getClassStackIndex()

def SoTextureUnitElement_createInstance() -> "void *":
    """SoTextureUnitElement_createInstance() -> void *"""
    return _coin.SoTextureUnitElement_createInstance()

def SoTextureUnitElement_initClass() -> "void":
    """SoTextureUnitElement_initClass()"""
    return _coin.SoTextureUnitElement_initClass()

def SoTextureUnitElement_set(state: 'SoState', node: 'SoNode', units: 'int const') -> "void":
    """SoTextureUnitElement_set(SoState state, SoNode node, int const units)"""
    return _coin.SoTextureUnitElement_set(state, node, units)

def SoTextureUnitElement_get(state: 'SoState') -> "int":
    """SoTextureUnitElement_get(SoState state) -> int"""
    return _coin.SoTextureUnitElement_get(state)

class SoEngine(SoFieldContainer):
    """Proxy of C++ SoEngine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEngine_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoEngine_initClasses()

    initClasses = staticmethod(initClasses)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEngine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def evaluateWrapper(self) -> "void":
        """evaluateWrapper(SoEngine self)"""
        return _coin.SoEngine_evaluateWrapper(self)


    def getOutputs(self, l: 'SoEngineOutputList') -> "int":
        """getOutputs(SoEngine self, SoEngineOutputList l) -> int"""
        return _coin.SoEngine_getOutputs(self, l)


    def getOutput(self, outputname: 'SbName') -> "SoEngineOutput *":
        """getOutput(SoEngine self, SbName outputname) -> SoEngineOutput"""
        return _coin.SoEngine_getOutput(self, outputname)


    def getOutputName(self, output: 'SoEngineOutput', outputname: 'SbName') -> "SbBool":
        """getOutputName(SoEngine self, SoEngineOutput output, SbName outputname) -> SbBool"""
        return _coin.SoEngine_getOutputName(self, output, outputname)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoEngine self) -> SoEngineOutputData"""
        return _coin.SoEngine_getOutputData(self)


    def getByName(*args) -> "int":
        """
        getByName(SbName name) -> SoEngine
        getByName(SbName name, SoEngineList el) -> int
        """
        return _coin.SoEngine_getByName(*args)

    getByName = staticmethod(getByName)

    def isNotifying(self) -> "SbBool":
        """isNotifying(SoEngine self) -> SbBool"""
        return _coin.SoEngine_isNotifying(self)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoEngine self, SoNotList nl)"""
        return _coin.SoEngine_notify(self, nl)


    def copy(self) -> "SoEngine *":
        """copy(SoEngine self) -> SoEngine"""
        return _coin.SoEngine_copy(self)


    def copyThroughConnection(self) -> "SoFieldContainer *":
        """copyThroughConnection(SoEngine self) -> SoFieldContainer"""
        return _coin.SoEngine_copyThroughConnection(self)


    def shouldCopy(self) -> "SbBool":
        """shouldCopy(SoEngine self) -> SbBool"""
        return _coin.SoEngine_shouldCopy(self)


    def writeInstance(self, out: 'SoOutput') -> "void":
        """writeInstance(SoEngine self, SoOutput out)"""
        return _coin.SoEngine_writeInstance(self, out)


    def __getattr__(self, name):
        try:
            return SoFieldContainer.__getattr__(self, name)
        except AttributeError as e:
    ##############################################################
            if name == "this":
                raise AttributeError
    ##############################################################
            out = self.getOutput(SbName(name))
            if out is None:
                raise e
            return out

    def __setattr__(self,name,value):
        if name == 'this':
            return SoFieldContainer.__setattr__(self, name, value)
        out = self.getOutput(SbName(name))
        if out is None:
            return SoFieldContainer.__setattr__(self, name, value)
        raise AttributeError('Cannot set output %s on engine %s' %(name,self.__class__.__name__))


SoEngine_swigregister = _coin.SoEngine_swigregister
SoEngine_swigregister(SoEngine)

def SoEngine_initClass() -> "void":
    """SoEngine_initClass()"""
    return _coin.SoEngine_initClass()

def SoEngine_initClasses() -> "void":
    """SoEngine_initClasses()"""
    return _coin.SoEngine_initClasses()

def SoEngine_getClassTypeId() -> "SoType":
    """SoEngine_getClassTypeId() -> SoType"""
    return _coin.SoEngine_getClassTypeId()

def SoEngine_getByName(*args) -> "int":
    """
    getByName(SbName name) -> SoEngine
    SoEngine_getByName(SbName name, SoEngineList el) -> int
    """
    return _coin.SoEngine_getByName(*args)

class SoEngineOutput(object):
    """Proxy of C++ SoEngineOutput class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoEngineOutput self) -> SoEngineOutput"""
        this = _coin.new_SoEngineOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEngineOutput
    __del__ = lambda self: None

    def getConnectionType(self) -> "SoType":
        """getConnectionType(SoEngineOutput self) -> SoType"""
        return _coin.SoEngineOutput_getConnectionType(self)


    def getForwardConnections(self, fl: 'SoFieldList') -> "int":
        """getForwardConnections(SoEngineOutput self, SoFieldList fl) -> int"""
        return _coin.SoEngineOutput_getForwardConnections(self, fl)


    def enable(self, flag: 'SbBool const') -> "void":
        """enable(SoEngineOutput self, SbBool const flag)"""
        return _coin.SoEngineOutput_enable(self, flag)


    def isEnabled(self) -> "SbBool":
        """isEnabled(SoEngineOutput self) -> SbBool"""
        return _coin.SoEngineOutput_isEnabled(self)


    def getContainer(self) -> "SoEngine *":
        """getContainer(SoEngineOutput self) -> SoEngine"""
        return _coin.SoEngineOutput_getContainer(self)


    def getNodeContainer(self) -> "SoNodeEngine *":
        """getNodeContainer(SoEngineOutput self) -> SoNodeEngine"""
        return _coin.SoEngineOutput_getNodeContainer(self)


    def isNodeEngineOutput(self) -> "SbBool":
        """isNodeEngineOutput(SoEngineOutput self) -> SbBool"""
        return _coin.SoEngineOutput_isNodeEngineOutput(self)


    def setContainer(self, engine: 'SoEngine') -> "void":
        """setContainer(SoEngineOutput self, SoEngine engine)"""
        return _coin.SoEngineOutput_setContainer(self, engine)


    def setNodeContainer(self, nodeengine: 'SoNodeEngine') -> "void":
        """setNodeContainer(SoEngineOutput self, SoNodeEngine nodeengine)"""
        return _coin.SoEngineOutput_setNodeContainer(self, nodeengine)


    def addConnection(self, f: 'SoField') -> "void":
        """addConnection(SoEngineOutput self, SoField f)"""
        return _coin.SoEngineOutput_addConnection(self, f)


    def removeConnection(self, f: 'SoField') -> "void":
        """removeConnection(SoEngineOutput self, SoField f)"""
        return _coin.SoEngineOutput_removeConnection(self, f)


    def getNumConnections(self) -> "int":
        """getNumConnections(SoEngineOutput self) -> int"""
        return _coin.SoEngineOutput_getNumConnections(self)


    def prepareToWrite(self) -> "void":
        """prepareToWrite(SoEngineOutput self)"""
        return _coin.SoEngineOutput_prepareToWrite(self)


    def doneWriting(self) -> "void":
        """doneWriting(SoEngineOutput self)"""
        return _coin.SoEngineOutput_doneWriting(self)


    def touchSlaves(self, nl: 'SoNotList', donotify: 'SbBool') -> "void":
        """touchSlaves(SoEngineOutput self, SoNotList nl, SbBool donotify)"""
        return _coin.SoEngineOutput_touchSlaves(self, nl, donotify)


    def getFieldContainer(self) -> "SoFieldContainer *":
        """getFieldContainer(SoEngineOutput self) -> SoFieldContainer"""
        return _coin.SoEngineOutput_getFieldContainer(self)

SoEngineOutput_swigregister = _coin.SoEngineOutput_swigregister
SoEngineOutput_swigregister(SoEngineOutput)

class SoEngineOutputData(object):
    """Proxy of C++ SoEngineOutputData class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoEngineOutputData self) -> SoEngineOutputData
        __init__(SoEngineOutputData self, SoEngineOutputData data) -> SoEngineOutputData
        __init__(SoEngineOutputData self, int approxnum) -> SoEngineOutputData
        """
        this = _coin.new_SoEngineOutputData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEngineOutputData
    __del__ = lambda self: None

    def addOutput(self, *args) -> "void":
        """
        addOutput(SoEngineOutputData self, SoEngine base, char const * name, SoEngineOutput output, SoType type)
        addOutput(SoEngineOutputData self, SoNodeEngine base, char const * name, SoEngineOutput output, SoType type)
        """
        return _coin.SoEngineOutputData_addOutput(self, *args)


    def getNumOutputs(self) -> "int":
        """getNumOutputs(SoEngineOutputData self) -> int"""
        return _coin.SoEngineOutputData_getNumOutputs(self)


    def getOutputName(self, index: 'int') -> "SbName const &":
        """getOutputName(SoEngineOutputData self, int index) -> SbName"""
        return _coin.SoEngineOutputData_getOutputName(self, index)


    def getOutput(self, *args) -> "SoEngineOutput *":
        """
        getOutput(SoEngineOutputData self, SoEngine engine, int index) -> SoEngineOutput
        getOutput(SoEngineOutputData self, SoNodeEngine engine, int index) -> SoEngineOutput
        """
        return _coin.SoEngineOutputData_getOutput(self, *args)


    def getIndex(self, *args) -> "int":
        """
        getIndex(SoEngineOutputData self, SoEngine engine, SoEngineOutput output) -> int
        getIndex(SoEngineOutputData self, SoNodeEngine engine, SoEngineOutput output) -> int
        """
        return _coin.SoEngineOutputData_getIndex(self, *args)


    def getType(self, index: 'int') -> "SoType const &":
        """getType(SoEngineOutputData self, int index) -> SoType"""
        return _coin.SoEngineOutputData_getType(self, index)


    def readDescriptions(self, input: 'SoInput', engine: 'SoEngine') -> "SbBool":
        """readDescriptions(SoEngineOutputData self, SoInput input, SoEngine engine) -> SbBool"""
        return _coin.SoEngineOutputData_readDescriptions(self, input, engine)


    def writeDescriptions(self, out: 'SoOutput', engine: 'SoEngine') -> "void":
        """writeDescriptions(SoEngineOutputData self, SoOutput out, SoEngine engine)"""
        return _coin.SoEngineOutputData_writeDescriptions(self, out, engine)

SoEngineOutputData_swigregister = _coin.SoEngineOutputData_swigregister
SoEngineOutputData_swigregister(SoEngineOutputData)

class SoMFBool(SoMField):
    """Proxy of C++ SoMFBool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFBool self) -> SoMFBool"""
        this = _coin.new_SoMFBool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFBool
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFBool_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFBool_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFBool self) -> SoType"""
        return _coin.SoMFBool_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFBool self, SoField field)"""
        return _coin.SoMFBool_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFBool self, SoField field) -> SbBool"""
        return _coin.SoMFBool_isSame(self, field)


    def find(self, value: 'SbBool', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFBool self, SbBool value, SbBool addifnotfound=0) -> int
        find(SoMFBool self, SbBool value) -> int
        """
        return _coin.SoMFBool_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFBool):
             val = args[1].getValues()
             return _coin.SoMFBool_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFBool):
             val = args[2].getValues()
             return _coin.SoMFBool_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFBool_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SbBool') -> "void":
        """set1Value(SoMFBool self, int const idx, SbBool value)"""
        return _coin.SoMFBool_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFBool') -> "SbBool":
        """__eq__(SoMFBool self, SoMFBool field) -> SbBool"""
        return _coin.SoMFBool___eq__(self, field)


    def __ne__(self, field: 'SoMFBool') -> "SbBool":
        """__ne__(SoMFBool self, SoMFBool field) -> SbBool"""
        return _coin.SoMFBool___ne__(self, field)


    def startEditing(self) -> "SbBool *":
        """startEditing(SoMFBool self) -> SbBool *"""
        return _coin.SoMFBool_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFBool self)"""
        return _coin.SoMFBool_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFBool self, int const num, SbBool const * userdata)
        setValuesPointer(SoMFBool self, int const num, SbBool * userdata)
        """
        return _coin.SoMFBool_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFBool_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoMFBool self, SbBool value)
        setValue(SoMFBool self, SoMFBool other)
        """
        return _coin.SoMFBool_setValue(self, *args)


    def __getitem__(self, i: 'int') -> "SbBool const":
        """__getitem__(SoMFBool self, int i) -> SbBool const"""
        return _coin.SoMFBool___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbBool') -> "void":
        """__setitem__(SoMFBool self, int i, SbBool value)"""
        return _coin.SoMFBool___setitem__(self, i, value)


    def getValues(self, i: 'int'=0) -> "SbBool const *":
        """
        getValues(SoMFBool self, int i=0) -> SbBool const
        getValues(SoMFBool self) -> SbBool const *
        """
        return _coin.SoMFBool_getValues(self, i)

SoMFBool_swigregister = _coin.SoMFBool_swigregister
SoMFBool_swigregister(SoMFBool)

def SoMFBool_createInstance() -> "void *":
    """SoMFBool_createInstance() -> void *"""
    return _coin.SoMFBool_createInstance()

def SoMFBool_getClassTypeId() -> "SoType":
    """SoMFBool_getClassTypeId() -> SoType"""
    return _coin.SoMFBool_getClassTypeId()

def SoMFBool_initClass() -> "void":
    """SoMFBool_initClass()"""
    return _coin.SoMFBool_initClass()

class SoMFEnum(SoMField):
    """Proxy of C++ SoMFEnum class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFEnum self) -> SoMFEnum"""
        this = _coin.new_SoMFEnum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFEnum
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFEnum_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFEnum_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFEnum self) -> SoType"""
        return _coin.SoMFEnum_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFEnum self, SoField field)"""
        return _coin.SoMFEnum_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFEnum self, SoField field) -> SbBool"""
        return _coin.SoMFEnum_isSame(self, field)


    def find(self, value: 'int', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFEnum self, int value, SbBool addifnotfound=0) -> int
        find(SoMFEnum self, int value) -> int
        """
        return _coin.SoMFEnum_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFEnum):
             val = args[1].getValues()
             return _coin.SoMFEnum_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFEnum):
             val = args[2].getValues()
             return _coin.SoMFEnum_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFEnum_setValues(*args)



    def __eq__(self, field: 'SoMFEnum') -> "SbBool":
        """__eq__(SoMFEnum self, SoMFEnum field) -> SbBool"""
        return _coin.SoMFEnum___eq__(self, field)


    def __ne__(self, field: 'SoMFEnum') -> "SbBool":
        """__ne__(SoMFEnum self, SoMFEnum field) -> SbBool"""
        return _coin.SoMFEnum___ne__(self, field)


    def startEditing(self) -> "int *":
        """startEditing(SoMFEnum self) -> int *"""
        return _coin.SoMFEnum_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFEnum self)"""
        return _coin.SoMFEnum_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFEnum_initClass()

    initClass = staticmethod(initClass)

    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFEnum self, int const idx, int value)
        set1Value(SoMFEnum self, int const idx, SbName name)
        """
        return _coin.SoMFEnum_set1Value(self, *args)


    def setEnums(self, num: 'int const', values: 'int const *const', names: 'SbName') -> "void":
        """setEnums(SoMFEnum self, int const num, int const *const values, SbName names)"""
        return _coin.SoMFEnum_setEnums(self, num, values, names)


    def getNumEnums(self) -> "int":
        """getNumEnums(SoMFEnum self) -> int"""
        return _coin.SoMFEnum_getNumEnums(self)


    def getEnum(self, idx: 'int const', name: 'SbName') -> "int":
        """getEnum(SoMFEnum self, int const idx, SbName name) -> int"""
        return _coin.SoMFEnum_getEnum(self, idx, name)


    def __getitem__(self, i: 'int') -> "int const":
        """__getitem__(SoMFEnum self, int i) -> int const"""
        return _coin.SoMFEnum___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'int') -> "void":
        """__setitem__(SoMFEnum self, int i, int value)"""
        return _coin.SoMFEnum___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFEnum self, int value)
        setValue(SoMFEnum self, SbName name)
        setValue(SoMFEnum self, SoMFEnum other)
        """
        return _coin.SoMFEnum_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "int const *":
        """
        getValues(SoMFEnum self, int i=0) -> int const
        getValues(SoMFEnum self) -> int const *
        """
        return _coin.SoMFEnum_getValues(self, i)

SoMFEnum_swigregister = _coin.SoMFEnum_swigregister
SoMFEnum_swigregister(SoMFEnum)

def SoMFEnum_createInstance() -> "void *":
    """SoMFEnum_createInstance() -> void *"""
    return _coin.SoMFEnum_createInstance()

def SoMFEnum_getClassTypeId() -> "SoType":
    """SoMFEnum_getClassTypeId() -> SoType"""
    return _coin.SoMFEnum_getClassTypeId()

def SoMFEnum_initClass() -> "void":
    """SoMFEnum_initClass()"""
    return _coin.SoMFEnum_initClass()

class SoBoolOperation(SoEngine):
    """Proxy of C++ SoBoolOperation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBoolOperation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBoolOperation self) -> SoType"""
        return _coin.SoBoolOperation_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoBoolOperation self) -> SoFieldData"""
        return _coin.SoBoolOperation_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoBoolOperation self) -> SoEngineOutputData"""
        return _coin.SoBoolOperation_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoBoolOperation_createInstance()

    createInstance = staticmethod(createInstance)
    CLEAR = _coin.SoBoolOperation_CLEAR
    SET = _coin.SoBoolOperation_SET
    A = _coin.SoBoolOperation_A
    NOT_A = _coin.SoBoolOperation_NOT_A
    B = _coin.SoBoolOperation_B
    NOT_B = _coin.SoBoolOperation_NOT_B
    A_OR_B = _coin.SoBoolOperation_A_OR_B
    NOT_A_OR_B = _coin.SoBoolOperation_NOT_A_OR_B
    A_OR_NOT_B = _coin.SoBoolOperation_A_OR_NOT_B
    NOT_A_OR_NOT_B = _coin.SoBoolOperation_NOT_A_OR_NOT_B
    A_AND_B = _coin.SoBoolOperation_A_AND_B
    NOT_A_AND_B = _coin.SoBoolOperation_NOT_A_AND_B
    A_AND_NOT_B = _coin.SoBoolOperation_A_AND_NOT_B
    NOT_A_AND_NOT_B = _coin.SoBoolOperation_NOT_A_AND_NOT_B
    A_EQUALS_B = _coin.SoBoolOperation_A_EQUALS_B
    A_NOT_EQUALS_B = _coin.SoBoolOperation_A_NOT_EQUALS_B
    a = _swig_property(_coin.SoBoolOperation_a_get, _coin.SoBoolOperation_a_set)
    b = _swig_property(_coin.SoBoolOperation_b_get, _coin.SoBoolOperation_b_set)
    operation = _swig_property(_coin.SoBoolOperation_operation_get, _coin.SoBoolOperation_operation_set)
    output = _swig_property(_coin.SoBoolOperation_output_get, _coin.SoBoolOperation_output_set)
    inverse = _swig_property(_coin.SoBoolOperation_inverse_get, _coin.SoBoolOperation_inverse_set)

    def __init__(self):
        """__init__(SoBoolOperation self) -> SoBoolOperation"""
        this = _coin.new_SoBoolOperation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBoolOperation_initClass()

    initClass = staticmethod(initClass)
SoBoolOperation_swigregister = _coin.SoBoolOperation_swigregister
SoBoolOperation_swigregister(SoBoolOperation)

def SoBoolOperation_getClassTypeId() -> "SoType":
    """SoBoolOperation_getClassTypeId() -> SoType"""
    return _coin.SoBoolOperation_getClassTypeId()

def SoBoolOperation_createInstance() -> "void *":
    """SoBoolOperation_createInstance() -> void *"""
    return _coin.SoBoolOperation_createInstance()

def SoBoolOperation_initClass() -> "void":
    """SoBoolOperation_initClass()"""
    return _coin.SoBoolOperation_initClass()

class SoMFFloat(SoMField):
    """Proxy of C++ SoMFFloat class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFFloat self) -> SoMFFloat"""
        this = _coin.new_SoMFFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFFloat
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFFloat_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFFloat_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFFloat self) -> SoType"""
        return _coin.SoMFFloat_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFFloat self, SoField field)"""
        return _coin.SoMFFloat_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFFloat self, SoField field) -> SbBool"""
        return _coin.SoMFFloat_isSame(self, field)


    def find(self, value: 'float', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFFloat self, float value, SbBool addifnotfound=0) -> int
        find(SoMFFloat self, float value) -> int
        """
        return _coin.SoMFFloat_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFFloat):
             val = args[1].getValues()
             return _coin.SoMFFloat_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFFloat):
             val = args[2].getValues()
             return _coin.SoMFFloat_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFFloat_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'float') -> "void":
        """set1Value(SoMFFloat self, int const idx, float value)"""
        return _coin.SoMFFloat_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFFloat') -> "SbBool":
        """__eq__(SoMFFloat self, SoMFFloat field) -> SbBool"""
        return _coin.SoMFFloat___eq__(self, field)


    def __ne__(self, field: 'SoMFFloat') -> "SbBool":
        """__ne__(SoMFFloat self, SoMFFloat field) -> SbBool"""
        return _coin.SoMFFloat___ne__(self, field)


    def startEditing(self) -> "float *":
        """startEditing(SoMFFloat self) -> float *"""
        return _coin.SoMFFloat_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFFloat self)"""
        return _coin.SoMFFloat_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFFloat self, int const num, float const * userdata)
        setValuesPointer(SoMFFloat self, int const num, float * userdata)
        """
        return _coin.SoMFFloat_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFFloat_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "float const":
        """__getitem__(SoMFFloat self, int i) -> float const"""
        return _coin.SoMFFloat___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'float') -> "void":
        """__setitem__(SoMFFloat self, int i, float value)"""
        return _coin.SoMFFloat___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFFloat self, float value)
        setValue(SoMFFloat self, SoMFFloat other)
        """
        return _coin.SoMFFloat_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "float const *":
        """
        getValues(SoMFFloat self, int i=0) -> float const
        getValues(SoMFFloat self) -> float const *
        """
        return _coin.SoMFFloat_getValues(self, i)

SoMFFloat_swigregister = _coin.SoMFFloat_swigregister
SoMFFloat_swigregister(SoMFFloat)

def SoMFFloat_createInstance() -> "void *":
    """SoMFFloat_createInstance() -> void *"""
    return _coin.SoMFFloat_createInstance()

def SoMFFloat_getClassTypeId() -> "SoType":
    """SoMFFloat_getClassTypeId() -> SoType"""
    return _coin.SoMFFloat_getClassTypeId()

def SoMFFloat_initClass() -> "void":
    """SoMFFloat_initClass()"""
    return _coin.SoMFFloat_initClass()

class SoMFVec3f(SoMField):
    """Proxy of C++ SoMFVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec3f self) -> SoMFVec3f"""
        this = _coin.new_SoMFVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec3f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec3f self) -> SoType"""
        return _coin.SoMFVec3f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec3f self, SoField field)"""
        return _coin.SoMFVec3f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec3f self, SoField field) -> SbBool"""
        return _coin.SoMFVec3f_isSame(self, field)


    def find(self, value: 'SbVec3f', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec3f self, SbVec3f value, SbBool addifnotfound=0) -> int
        find(SoMFVec3f self, SbVec3f value) -> int
        """
        return _coin.SoMFVec3f_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec3f') -> "SbBool":
        """__eq__(SoMFVec3f self, SoMFVec3f field) -> SbBool"""
        return _coin.SoMFVec3f___eq__(self, field)


    def __ne__(self, field: 'SoMFVec3f') -> "SbBool":
        """__ne__(SoMFVec3f self, SoMFVec3f field) -> SbBool"""
        return _coin.SoMFVec3f___ne__(self, field)


    def startEditing(self) -> "SbVec3f *":
        """startEditing(SoMFVec3f self) -> SbVec3f"""
        return _coin.SoMFVec3f_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec3f self)"""
        return _coin.SoMFVec3f_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec3f self, int const num, SbVec3f userdata)
        setValuesPointer(SoMFVec3f self, int const num, SbVec3f userdata)
        setValuesPointer(SoMFVec3f self, int const num, float const * userdata)
        setValuesPointer(SoMFVec3f self, int const num, float * userdata)
        """
        return _coin.SoMFVec3f_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec3f_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec3f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec3f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec3f_setValues(*args)



    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec3f self, int const idx, SbVec3f value)
        set1Value(SoMFVec3f self, int idx, float x, float y, float z)
        set1Value(SoMFVec3f self, int idx, float const [3] xyz)
        """
        return _coin.SoMFVec3f_set1Value(self, *args)


    def __getitem__(self, i: 'int') -> "SbVec3f const &":
        """__getitem__(SoMFVec3f self, int i) -> SbVec3f"""
        return _coin.SoMFVec3f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbVec3f') -> "void":
        """__setitem__(SoMFVec3f self, int i, SbVec3f value)"""
        return _coin.SoMFVec3f___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec3f self, SbVec3f value)
        setValue(SoMFVec3f self, float x, float y, float z)
        setValue(SoMFVec3f self, float const [3] xyz)
        setValue(SoMFVec3f self, SoMFVec3f other)
        """
        return _coin.SoMFVec3f_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbVec3f const *":
        """
        getValues(SoMFVec3f self, int i=0) -> SbVec3f
        getValues(SoMFVec3f self) -> SbVec3f
        """
        return _coin.SoMFVec3f_getValues(self, i)

SoMFVec3f_swigregister = _coin.SoMFVec3f_swigregister
SoMFVec3f_swigregister(SoMFVec3f)

def SoMFVec3f_createInstance() -> "void *":
    """SoMFVec3f_createInstance() -> void *"""
    return _coin.SoMFVec3f_createInstance()

def SoMFVec3f_getClassTypeId() -> "SoType":
    """SoMFVec3f_getClassTypeId() -> SoType"""
    return _coin.SoMFVec3f_getClassTypeId()

def SoMFVec3f_initClass() -> "void":
    """SoMFVec3f_initClass()"""
    return _coin.SoMFVec3f_initClass()

class SoMFString(SoMField):
    """Proxy of C++ SoMFString class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFString self) -> SoMFString"""
        this = _coin.new_SoMFString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFString
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFString_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFString_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFString self) -> SoType"""
        return _coin.SoMFString_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFString self, SoField field)"""
        return _coin.SoMFString_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFString self, SoField field) -> SbBool"""
        return _coin.SoMFString_isSame(self, field)


    def find(self, value: 'SbString', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFString self, SbString value, SbBool addifnotfound=0) -> int
        find(SoMFString self, SbString value) -> int
        """
        return _coin.SoMFString_find(self, value, addifnotfound)


    def set1Value(self, idx: 'int const', value: 'SbString') -> "void":
        """set1Value(SoMFString self, int const idx, SbString value)"""
        return _coin.SoMFString_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFString') -> "SbBool":
        """__eq__(SoMFString self, SoMFString field) -> SbBool"""
        return _coin.SoMFString___eq__(self, field)


    def __ne__(self, field: 'SoMFString') -> "SbBool":
        """__ne__(SoMFString self, SoMFString field) -> SbBool"""
        return _coin.SoMFString___ne__(self, field)


    def startEditing(self) -> "SbString *":
        """startEditing(SoMFString self) -> SbString"""
        return _coin.SoMFString_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFString self)"""
        return _coin.SoMFString_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFString_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFString_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFString_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFString_setValues(*args)



    def deleteText(self, fromline: 'int const', fromchar: 'int const', toline: 'int const', tochar: 'int const') -> "void":
        """deleteText(SoMFString self, int const fromline, int const fromchar, int const toline, int const tochar)"""
        return _coin.SoMFString_deleteText(self, fromline, fromchar, toline, tochar)


    def __getitem__(self, i: 'int') -> "SbString const &":
        """__getitem__(SoMFString self, int i) -> SbString"""
        return _coin.SoMFString___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbString') -> "void":
        """__setitem__(SoMFString self, int i, SbString value)"""
        return _coin.SoMFString___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFString self, SbString value)
        setValue(SoMFString self, char const * string)
        setValue(SoMFString self, SoMFString other)
        """
        return _coin.SoMFString_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbString const *":
        """
        getValues(SoMFString self, int i=0) -> SbString
        getValues(SoMFString self) -> SbString
        """
        return _coin.SoMFString_getValues(self, i)

SoMFString_swigregister = _coin.SoMFString_swigregister
SoMFString_swigregister(SoMFString)

def SoMFString_createInstance() -> "void *":
    """SoMFString_createInstance() -> void *"""
    return _coin.SoMFString_createInstance()

def SoMFString_getClassTypeId() -> "SoType":
    """SoMFString_getClassTypeId() -> SoType"""
    return _coin.SoMFString_getClassTypeId()

def SoMFString_initClass() -> "void":
    """SoMFString_initClass()"""
    return _coin.SoMFString_initClass()

class SoCalculator(SoEngine):
    """Proxy of C++ SoCalculator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCalculator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCalculator self) -> SoType"""
        return _coin.SoCalculator_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoCalculator self) -> SoFieldData"""
        return _coin.SoCalculator_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoCalculator self) -> SoEngineOutputData"""
        return _coin.SoCalculator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCalculator_createInstance()

    createInstance = staticmethod(createInstance)
    a = _swig_property(_coin.SoCalculator_a_get, _coin.SoCalculator_a_set)
    b = _swig_property(_coin.SoCalculator_b_get, _coin.SoCalculator_b_set)
    c = _swig_property(_coin.SoCalculator_c_get, _coin.SoCalculator_c_set)
    d = _swig_property(_coin.SoCalculator_d_get, _coin.SoCalculator_d_set)
    e = _swig_property(_coin.SoCalculator_e_get, _coin.SoCalculator_e_set)
    f = _swig_property(_coin.SoCalculator_f_get, _coin.SoCalculator_f_set)
    g = _swig_property(_coin.SoCalculator_g_get, _coin.SoCalculator_g_set)
    h = _swig_property(_coin.SoCalculator_h_get, _coin.SoCalculator_h_set)
    A = _swig_property(_coin.SoCalculator_A_get, _coin.SoCalculator_A_set)
    B = _swig_property(_coin.SoCalculator_B_get, _coin.SoCalculator_B_set)
    C = _swig_property(_coin.SoCalculator_C_get, _coin.SoCalculator_C_set)
    D = _swig_property(_coin.SoCalculator_D_get, _coin.SoCalculator_D_set)
    E = _swig_property(_coin.SoCalculator_E_get, _coin.SoCalculator_E_set)
    F = _swig_property(_coin.SoCalculator_F_get, _coin.SoCalculator_F_set)
    G = _swig_property(_coin.SoCalculator_G_get, _coin.SoCalculator_G_set)
    H = _swig_property(_coin.SoCalculator_H_get, _coin.SoCalculator_H_set)
    expression = _swig_property(_coin.SoCalculator_expression_get, _coin.SoCalculator_expression_set)
    oa = _swig_property(_coin.SoCalculator_oa_get, _coin.SoCalculator_oa_set)
    ob = _swig_property(_coin.SoCalculator_ob_get, _coin.SoCalculator_ob_set)
    oc = _swig_property(_coin.SoCalculator_oc_get, _coin.SoCalculator_oc_set)
    od = _swig_property(_coin.SoCalculator_od_get, _coin.SoCalculator_od_set)
    oA = _swig_property(_coin.SoCalculator_oA_get, _coin.SoCalculator_oA_set)
    oB = _swig_property(_coin.SoCalculator_oB_get, _coin.SoCalculator_oB_set)
    oC = _swig_property(_coin.SoCalculator_oC_get, _coin.SoCalculator_oC_set)
    oD = _swig_property(_coin.SoCalculator_oD_get, _coin.SoCalculator_oD_set)

    def __init__(self):
        """__init__(SoCalculator self) -> SoCalculator"""
        this = _coin.new_SoCalculator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCalculator_initClass()

    initClass = staticmethod(initClass)
SoCalculator_swigregister = _coin.SoCalculator_swigregister
SoCalculator_swigregister(SoCalculator)

def SoCalculator_getClassTypeId() -> "SoType":
    """SoCalculator_getClassTypeId() -> SoType"""
    return _coin.SoCalculator_getClassTypeId()

def SoCalculator_createInstance() -> "void *":
    """SoCalculator_createInstance() -> void *"""
    return _coin.SoCalculator_createInstance()

def SoCalculator_initClass() -> "void":
    """SoCalculator_initClass()"""
    return _coin.SoCalculator_initClass()

class SoMFVec2f(SoMField):
    """Proxy of C++ SoMFVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec2f self) -> SoMFVec2f"""
        this = _coin.new_SoMFVec2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec2f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec2f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec2f self) -> SoType"""
        return _coin.SoMFVec2f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec2f self, SoField field)"""
        return _coin.SoMFVec2f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec2f self, SoField field) -> SbBool"""
        return _coin.SoMFVec2f_isSame(self, field)


    def find(self, value: 'SbVec2f', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec2f self, SbVec2f value, SbBool addifnotfound=0) -> int
        find(SoMFVec2f self, SbVec2f value) -> int
        """
        return _coin.SoMFVec2f_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec2f') -> "SbBool":
        """__eq__(SoMFVec2f self, SoMFVec2f field) -> SbBool"""
        return _coin.SoMFVec2f___eq__(self, field)


    def __ne__(self, field: 'SoMFVec2f') -> "SbBool":
        """__ne__(SoMFVec2f self, SoMFVec2f field) -> SbBool"""
        return _coin.SoMFVec2f___ne__(self, field)


    def startEditing(self) -> "SbVec2f *":
        """startEditing(SoMFVec2f self) -> SbVec2f"""
        return _coin.SoMFVec2f_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec2f self)"""
        return _coin.SoMFVec2f_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec2f self, int const num, SbVec2f userdata)
        setValuesPointer(SoMFVec2f self, int const num, SbVec2f userdata)
        setValuesPointer(SoMFVec2f self, int const num, float const * userdata)
        setValuesPointer(SoMFVec2f self, int const num, float * userdata)
        """
        return _coin.SoMFVec2f_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec2f_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec2f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec2f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec2f_setValues(*args)



    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec2f self, int const idx, SbVec2f value)
        set1Value(SoMFVec2f self, int idx, float x, float y)
        set1Value(SoMFVec2f self, int idx, float const [2] xy)
        """
        return _coin.SoMFVec2f_set1Value(self, *args)


    def __getitem__(self, i: 'int') -> "SbVec2f const &":
        """__getitem__(SoMFVec2f self, int i) -> SbVec2f"""
        return _coin.SoMFVec2f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbVec2f') -> "void":
        """__setitem__(SoMFVec2f self, int i, SbVec2f value)"""
        return _coin.SoMFVec2f___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec2f self, SbVec2f value)
        setValue(SoMFVec2f self, float x, float y)
        setValue(SoMFVec2f self, float const [2] xy)
        setValue(SoMFVec2f self, SoMFVec2f other)
        """
        return _coin.SoMFVec2f_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbVec2f const *":
        """
        getValues(SoMFVec2f self, int i=0) -> SbVec2f
        getValues(SoMFVec2f self) -> SbVec2f
        """
        return _coin.SoMFVec2f_getValues(self, i)

SoMFVec2f_swigregister = _coin.SoMFVec2f_swigregister
SoMFVec2f_swigregister(SoMFVec2f)

def SoMFVec2f_createInstance() -> "void *":
    """SoMFVec2f_createInstance() -> void *"""
    return _coin.SoMFVec2f_createInstance()

def SoMFVec2f_getClassTypeId() -> "SoType":
    """SoMFVec2f_getClassTypeId() -> SoType"""
    return _coin.SoMFVec2f_getClassTypeId()

def SoMFVec2f_initClass() -> "void":
    """SoMFVec2f_initClass()"""
    return _coin.SoMFVec2f_initClass()

class SoComposeVec2f(SoEngine):
    """Proxy of C++ SoComposeVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeVec2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeVec2f self) -> SoType"""
        return _coin.SoComposeVec2f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeVec2f self) -> SoFieldData"""
        return _coin.SoComposeVec2f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeVec2f self) -> SoEngineOutputData"""
        return _coin.SoComposeVec2f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeVec2f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeVec2f self) -> SoComposeVec2f"""
        this = _coin.new_SoComposeVec2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeVec2f_initClass()

    initClass = staticmethod(initClass)
    x = _swig_property(_coin.SoComposeVec2f_x_get, _coin.SoComposeVec2f_x_set)
    y = _swig_property(_coin.SoComposeVec2f_y_get, _coin.SoComposeVec2f_y_set)
    vector = _swig_property(_coin.SoComposeVec2f_vector_get, _coin.SoComposeVec2f_vector_set)
SoComposeVec2f_swigregister = _coin.SoComposeVec2f_swigregister
SoComposeVec2f_swigregister(SoComposeVec2f)

def SoComposeVec2f_getClassTypeId() -> "SoType":
    """SoComposeVec2f_getClassTypeId() -> SoType"""
    return _coin.SoComposeVec2f_getClassTypeId()

def SoComposeVec2f_createInstance() -> "void *":
    """SoComposeVec2f_createInstance() -> void *"""
    return _coin.SoComposeVec2f_createInstance()

def SoComposeVec2f_initClass() -> "void":
    """SoComposeVec2f_initClass()"""
    return _coin.SoComposeVec2f_initClass()

class SoComposeVec3f(SoEngine):
    """Proxy of C++ SoComposeVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeVec3f self) -> SoType"""
        return _coin.SoComposeVec3f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeVec3f self) -> SoFieldData"""
        return _coin.SoComposeVec3f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeVec3f self) -> SoEngineOutputData"""
        return _coin.SoComposeVec3f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeVec3f self) -> SoComposeVec3f"""
        this = _coin.new_SoComposeVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeVec3f_initClass()

    initClass = staticmethod(initClass)
    x = _swig_property(_coin.SoComposeVec3f_x_get, _coin.SoComposeVec3f_x_set)
    y = _swig_property(_coin.SoComposeVec3f_y_get, _coin.SoComposeVec3f_y_set)
    z = _swig_property(_coin.SoComposeVec3f_z_get, _coin.SoComposeVec3f_z_set)
    vector = _swig_property(_coin.SoComposeVec3f_vector_get, _coin.SoComposeVec3f_vector_set)
SoComposeVec3f_swigregister = _coin.SoComposeVec3f_swigregister
SoComposeVec3f_swigregister(SoComposeVec3f)

def SoComposeVec3f_getClassTypeId() -> "SoType":
    """SoComposeVec3f_getClassTypeId() -> SoType"""
    return _coin.SoComposeVec3f_getClassTypeId()

def SoComposeVec3f_createInstance() -> "void *":
    """SoComposeVec3f_createInstance() -> void *"""
    return _coin.SoComposeVec3f_createInstance()

def SoComposeVec3f_initClass() -> "void":
    """SoComposeVec3f_initClass()"""
    return _coin.SoComposeVec3f_initClass()

class SoMFVec4f(SoMField):
    """Proxy of C++ SoMFVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4f self) -> SoMFVec4f"""
        this = _coin.new_SoMFVec4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4f self) -> SoType"""
        return _coin.SoMFVec4f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4f self, SoField field)"""
        return _coin.SoMFVec4f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4f self, SoField field) -> SbBool"""
        return _coin.SoMFVec4f_isSame(self, field)


    def find(self, value: 'SbVec4f', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4f self, SbVec4f value, SbBool addifnotfound=0) -> int
        find(SoMFVec4f self, SbVec4f value) -> int
        """
        return _coin.SoMFVec4f_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4f') -> "SbBool":
        """__eq__(SoMFVec4f self, SoMFVec4f field) -> SbBool"""
        return _coin.SoMFVec4f___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4f') -> "SbBool":
        """__ne__(SoMFVec4f self, SoMFVec4f field) -> SbBool"""
        return _coin.SoMFVec4f___ne__(self, field)


    def startEditing(self) -> "SbVec4f *":
        """startEditing(SoMFVec4f self) -> SbVec4f"""
        return _coin.SoMFVec4f_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4f self)"""
        return _coin.SoMFVec4f_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4f self, int const num, SbVec4f userdata)
        setValuesPointer(SoMFVec4f self, int const num, SbVec4f userdata)
        setValuesPointer(SoMFVec4f self, int const num, float const * userdata)
        setValuesPointer(SoMFVec4f self, int const num, float * userdata)
        """
        return _coin.SoMFVec4f_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4f_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec4f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec4f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec4f_setValues(*args)



    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4f self, int const idx, SbVec4f value)
        set1Value(SoMFVec4f self, int idx, float x, float y, float z, float w)
        set1Value(SoMFVec4f self, int idx, float const [4] xyzw)
        """
        return _coin.SoMFVec4f_set1Value(self, *args)


    def __getitem__(self, i: 'int') -> "SbVec4f const &":
        """__getitem__(SoMFVec4f self, int i) -> SbVec4f"""
        return _coin.SoMFVec4f___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbVec4f') -> "void":
        """__setitem__(SoMFVec4f self, int i, SbVec4f value)"""
        return _coin.SoMFVec4f___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4f self, SbVec4f value)
        setValue(SoMFVec4f self, float x, float y, float z, float w)
        setValue(SoMFVec4f self, float const [4] xyzw)
        setValue(SoMFVec4f self, SoMFVec4f other)
        """
        return _coin.SoMFVec4f_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbVec4f const *":
        """
        getValues(SoMFVec4f self, int i=0) -> SbVec4f
        getValues(SoMFVec4f self) -> SbVec4f
        """
        return _coin.SoMFVec4f_getValues(self, i)

SoMFVec4f_swigregister = _coin.SoMFVec4f_swigregister
SoMFVec4f_swigregister(SoMFVec4f)

def SoMFVec4f_createInstance() -> "void *":
    """SoMFVec4f_createInstance() -> void *"""
    return _coin.SoMFVec4f_createInstance()

def SoMFVec4f_getClassTypeId() -> "SoType":
    """SoMFVec4f_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4f_getClassTypeId()

def SoMFVec4f_initClass() -> "void":
    """SoMFVec4f_initClass()"""
    return _coin.SoMFVec4f_initClass()

class SoComposeVec4f(SoEngine):
    """Proxy of C++ SoComposeVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeVec4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeVec4f self) -> SoType"""
        return _coin.SoComposeVec4f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeVec4f self) -> SoFieldData"""
        return _coin.SoComposeVec4f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeVec4f self) -> SoEngineOutputData"""
        return _coin.SoComposeVec4f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeVec4f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeVec4f self) -> SoComposeVec4f"""
        this = _coin.new_SoComposeVec4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeVec4f_initClass()

    initClass = staticmethod(initClass)
    x = _swig_property(_coin.SoComposeVec4f_x_get, _coin.SoComposeVec4f_x_set)
    y = _swig_property(_coin.SoComposeVec4f_y_get, _coin.SoComposeVec4f_y_set)
    z = _swig_property(_coin.SoComposeVec4f_z_get, _coin.SoComposeVec4f_z_set)
    w = _swig_property(_coin.SoComposeVec4f_w_get, _coin.SoComposeVec4f_w_set)
    vector = _swig_property(_coin.SoComposeVec4f_vector_get, _coin.SoComposeVec4f_vector_set)
SoComposeVec4f_swigregister = _coin.SoComposeVec4f_swigregister
SoComposeVec4f_swigregister(SoComposeVec4f)

def SoComposeVec4f_getClassTypeId() -> "SoType":
    """SoComposeVec4f_getClassTypeId() -> SoType"""
    return _coin.SoComposeVec4f_getClassTypeId()

def SoComposeVec4f_createInstance() -> "void *":
    """SoComposeVec4f_createInstance() -> void *"""
    return _coin.SoComposeVec4f_createInstance()

def SoComposeVec4f_initClass() -> "void":
    """SoComposeVec4f_initClass()"""
    return _coin.SoComposeVec4f_initClass()

class SoDecomposeVec2f(SoEngine):
    """Proxy of C++ SoDecomposeVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecomposeVec2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDecomposeVec2f self) -> SoType"""
        return _coin.SoDecomposeVec2f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoDecomposeVec2f self) -> SoFieldData"""
        return _coin.SoDecomposeVec2f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoDecomposeVec2f self) -> SoEngineOutputData"""
        return _coin.SoDecomposeVec2f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecomposeVec2f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoDecomposeVec2f self) -> SoDecomposeVec2f"""
        this = _coin.new_SoDecomposeVec2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecomposeVec2f_initClass()

    initClass = staticmethod(initClass)
    vector = _swig_property(_coin.SoDecomposeVec2f_vector_get, _coin.SoDecomposeVec2f_vector_set)
    x = _swig_property(_coin.SoDecomposeVec2f_x_get, _coin.SoDecomposeVec2f_x_set)
    y = _swig_property(_coin.SoDecomposeVec2f_y_get, _coin.SoDecomposeVec2f_y_set)
SoDecomposeVec2f_swigregister = _coin.SoDecomposeVec2f_swigregister
SoDecomposeVec2f_swigregister(SoDecomposeVec2f)

def SoDecomposeVec2f_getClassTypeId() -> "SoType":
    """SoDecomposeVec2f_getClassTypeId() -> SoType"""
    return _coin.SoDecomposeVec2f_getClassTypeId()

def SoDecomposeVec2f_createInstance() -> "void *":
    """SoDecomposeVec2f_createInstance() -> void *"""
    return _coin.SoDecomposeVec2f_createInstance()

def SoDecomposeVec2f_initClass() -> "void":
    """SoDecomposeVec2f_initClass()"""
    return _coin.SoDecomposeVec2f_initClass()

class SoDecomposeVec3f(SoEngine):
    """Proxy of C++ SoDecomposeVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecomposeVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDecomposeVec3f self) -> SoType"""
        return _coin.SoDecomposeVec3f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoDecomposeVec3f self) -> SoFieldData"""
        return _coin.SoDecomposeVec3f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoDecomposeVec3f self) -> SoEngineOutputData"""
        return _coin.SoDecomposeVec3f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecomposeVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoDecomposeVec3f self) -> SoDecomposeVec3f"""
        this = _coin.new_SoDecomposeVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecomposeVec3f_initClass()

    initClass = staticmethod(initClass)
    vector = _swig_property(_coin.SoDecomposeVec3f_vector_get, _coin.SoDecomposeVec3f_vector_set)
    x = _swig_property(_coin.SoDecomposeVec3f_x_get, _coin.SoDecomposeVec3f_x_set)
    y = _swig_property(_coin.SoDecomposeVec3f_y_get, _coin.SoDecomposeVec3f_y_set)
    z = _swig_property(_coin.SoDecomposeVec3f_z_get, _coin.SoDecomposeVec3f_z_set)
SoDecomposeVec3f_swigregister = _coin.SoDecomposeVec3f_swigregister
SoDecomposeVec3f_swigregister(SoDecomposeVec3f)

def SoDecomposeVec3f_getClassTypeId() -> "SoType":
    """SoDecomposeVec3f_getClassTypeId() -> SoType"""
    return _coin.SoDecomposeVec3f_getClassTypeId()

def SoDecomposeVec3f_createInstance() -> "void *":
    """SoDecomposeVec3f_createInstance() -> void *"""
    return _coin.SoDecomposeVec3f_createInstance()

def SoDecomposeVec3f_initClass() -> "void":
    """SoDecomposeVec3f_initClass()"""
    return _coin.SoDecomposeVec3f_initClass()

class SoDecomposeVec4f(SoEngine):
    """Proxy of C++ SoDecomposeVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecomposeVec4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDecomposeVec4f self) -> SoType"""
        return _coin.SoDecomposeVec4f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoDecomposeVec4f self) -> SoFieldData"""
        return _coin.SoDecomposeVec4f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoDecomposeVec4f self) -> SoEngineOutputData"""
        return _coin.SoDecomposeVec4f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecomposeVec4f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoDecomposeVec4f self) -> SoDecomposeVec4f"""
        this = _coin.new_SoDecomposeVec4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecomposeVec4f_initClass()

    initClass = staticmethod(initClass)
    vector = _swig_property(_coin.SoDecomposeVec4f_vector_get, _coin.SoDecomposeVec4f_vector_set)
    x = _swig_property(_coin.SoDecomposeVec4f_x_get, _coin.SoDecomposeVec4f_x_set)
    y = _swig_property(_coin.SoDecomposeVec4f_y_get, _coin.SoDecomposeVec4f_y_set)
    z = _swig_property(_coin.SoDecomposeVec4f_z_get, _coin.SoDecomposeVec4f_z_set)
    w = _swig_property(_coin.SoDecomposeVec4f_w_get, _coin.SoDecomposeVec4f_w_set)
SoDecomposeVec4f_swigregister = _coin.SoDecomposeVec4f_swigregister
SoDecomposeVec4f_swigregister(SoDecomposeVec4f)

def SoDecomposeVec4f_getClassTypeId() -> "SoType":
    """SoDecomposeVec4f_getClassTypeId() -> SoType"""
    return _coin.SoDecomposeVec4f_getClassTypeId()

def SoDecomposeVec4f_createInstance() -> "void *":
    """SoDecomposeVec4f_createInstance() -> void *"""
    return _coin.SoDecomposeVec4f_createInstance()

def SoDecomposeVec4f_initClass() -> "void":
    """SoDecomposeVec4f_initClass()"""
    return _coin.SoDecomposeVec4f_initClass()

class SoComposeRotation(SoEngine):
    """Proxy of C++ SoComposeRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeRotation self) -> SoType"""
        return _coin.SoComposeRotation_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeRotation self) -> SoFieldData"""
        return _coin.SoComposeRotation_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeRotation self) -> SoEngineOutputData"""
        return _coin.SoComposeRotation_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeRotation_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeRotation self) -> SoComposeRotation"""
        this = _coin.new_SoComposeRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeRotation_initClass()

    initClass = staticmethod(initClass)
    axis = _swig_property(_coin.SoComposeRotation_axis_get, _coin.SoComposeRotation_axis_set)
    angle = _swig_property(_coin.SoComposeRotation_angle_get, _coin.SoComposeRotation_angle_set)
    rotation = _swig_property(_coin.SoComposeRotation_rotation_get, _coin.SoComposeRotation_rotation_set)
SoComposeRotation_swigregister = _coin.SoComposeRotation_swigregister
SoComposeRotation_swigregister(SoComposeRotation)

def SoComposeRotation_getClassTypeId() -> "SoType":
    """SoComposeRotation_getClassTypeId() -> SoType"""
    return _coin.SoComposeRotation_getClassTypeId()

def SoComposeRotation_createInstance() -> "void *":
    """SoComposeRotation_createInstance() -> void *"""
    return _coin.SoComposeRotation_createInstance()

def SoComposeRotation_initClass() -> "void":
    """SoComposeRotation_initClass()"""
    return _coin.SoComposeRotation_initClass()

class SoMFRotation(SoMField):
    """Proxy of C++ SoMFRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFRotation self) -> SoMFRotation"""
        this = _coin.new_SoMFRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFRotation
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFRotation_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFRotation self) -> SoType"""
        return _coin.SoMFRotation_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFRotation self, SoField field)"""
        return _coin.SoMFRotation_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFRotation self, SoField field) -> SbBool"""
        return _coin.SoMFRotation_isSame(self, field)


    def find(self, value: 'SbRotation', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFRotation self, SbRotation value, SbBool addifnotfound=0) -> int
        find(SoMFRotation self, SbRotation value) -> int
        """
        return _coin.SoMFRotation_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFRotation') -> "SbBool":
        """__eq__(SoMFRotation self, SoMFRotation field) -> SbBool"""
        return _coin.SoMFRotation___eq__(self, field)


    def __ne__(self, field: 'SoMFRotation') -> "SbBool":
        """__ne__(SoMFRotation self, SoMFRotation field) -> SbBool"""
        return _coin.SoMFRotation___ne__(self, field)


    def startEditing(self) -> "SbRotation *":
        """startEditing(SoMFRotation self) -> SbRotation"""
        return _coin.SoMFRotation_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFRotation self)"""
        return _coin.SoMFRotation_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFRotation_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFRotation_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFRotation_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFRotation_setValues(*args)



    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFRotation self, int const idx, SbRotation value)
        set1Value(SoMFRotation self, int const idx, float const q0, float const q1, float const q2, float const q3)
        set1Value(SoMFRotation self, int const idx, float const [4] q)
        set1Value(SoMFRotation self, int const idx, SbVec3f axis, float const angle)
        """
        return _coin.SoMFRotation_set1Value(self, *args)


    def __getitem__(self, i: 'int') -> "SbRotation const &":
        """__getitem__(SoMFRotation self, int i) -> SbRotation"""
        return _coin.SoMFRotation___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbRotation') -> "void":
        """__setitem__(SoMFRotation self, int i, SbRotation value)"""
        return _coin.SoMFRotation___setitem__(self, i, value)


    def getValues(self, i: 'int'=0) -> "SbRotation const *":
        """
        getValues(SoMFRotation self, int i=0) -> SbRotation
        getValues(SoMFRotation self) -> SbRotation
        """
        return _coin.SoMFRotation_getValues(self, i)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFRotation self, SbRotation value)
        setValue(SoMFRotation self, float const q0, float const q1, float const q2, float const q3)
        setValue(SoMFRotation self, float const [4] q)
        setValue(SoMFRotation self, SbVec3f axis, float const angle)
        setValue(SoMFRotation self, SoMFRotation other)
        """
        return _coin.SoMFRotation_setValue(self, *args)

SoMFRotation_swigregister = _coin.SoMFRotation_swigregister
SoMFRotation_swigregister(SoMFRotation)

def SoMFRotation_createInstance() -> "void *":
    """SoMFRotation_createInstance() -> void *"""
    return _coin.SoMFRotation_createInstance()

def SoMFRotation_getClassTypeId() -> "SoType":
    """SoMFRotation_getClassTypeId() -> SoType"""
    return _coin.SoMFRotation_getClassTypeId()

def SoMFRotation_initClass() -> "void":
    """SoMFRotation_initClass()"""
    return _coin.SoMFRotation_initClass()

class SoDecomposeRotation(SoEngine):
    """Proxy of C++ SoDecomposeRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecomposeRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDecomposeRotation self) -> SoType"""
        return _coin.SoDecomposeRotation_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoDecomposeRotation self) -> SoFieldData"""
        return _coin.SoDecomposeRotation_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoDecomposeRotation self) -> SoEngineOutputData"""
        return _coin.SoDecomposeRotation_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecomposeRotation_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoDecomposeRotation self) -> SoDecomposeRotation"""
        this = _coin.new_SoDecomposeRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecomposeRotation_initClass()

    initClass = staticmethod(initClass)
    rotation = _swig_property(_coin.SoDecomposeRotation_rotation_get, _coin.SoDecomposeRotation_rotation_set)
    axis = _swig_property(_coin.SoDecomposeRotation_axis_get, _coin.SoDecomposeRotation_axis_set)
    angle = _swig_property(_coin.SoDecomposeRotation_angle_get, _coin.SoDecomposeRotation_angle_set)
SoDecomposeRotation_swigregister = _coin.SoDecomposeRotation_swigregister
SoDecomposeRotation_swigregister(SoDecomposeRotation)

def SoDecomposeRotation_getClassTypeId() -> "SoType":
    """SoDecomposeRotation_getClassTypeId() -> SoType"""
    return _coin.SoDecomposeRotation_getClassTypeId()

def SoDecomposeRotation_createInstance() -> "void *":
    """SoDecomposeRotation_createInstance() -> void *"""
    return _coin.SoDecomposeRotation_createInstance()

def SoDecomposeRotation_initClass() -> "void":
    """SoDecomposeRotation_initClass()"""
    return _coin.SoDecomposeRotation_initClass()

class SoComposeMatrix(SoEngine):
    """Proxy of C++ SoComposeMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeMatrix_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeMatrix self) -> SoType"""
        return _coin.SoComposeMatrix_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeMatrix self) -> SoFieldData"""
        return _coin.SoComposeMatrix_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeMatrix self) -> SoEngineOutputData"""
        return _coin.SoComposeMatrix_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeMatrix_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeMatrix self) -> SoComposeMatrix"""
        this = _coin.new_SoComposeMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeMatrix_initClass()

    initClass = staticmethod(initClass)
    translation = _swig_property(_coin.SoComposeMatrix_translation_get, _coin.SoComposeMatrix_translation_set)
    rotation = _swig_property(_coin.SoComposeMatrix_rotation_get, _coin.SoComposeMatrix_rotation_set)
    scaleFactor = _swig_property(_coin.SoComposeMatrix_scaleFactor_get, _coin.SoComposeMatrix_scaleFactor_set)
    scaleOrientation = _swig_property(_coin.SoComposeMatrix_scaleOrientation_get, _coin.SoComposeMatrix_scaleOrientation_set)
    center = _swig_property(_coin.SoComposeMatrix_center_get, _coin.SoComposeMatrix_center_set)
    matrix = _swig_property(_coin.SoComposeMatrix_matrix_get, _coin.SoComposeMatrix_matrix_set)
SoComposeMatrix_swigregister = _coin.SoComposeMatrix_swigregister
SoComposeMatrix_swigregister(SoComposeMatrix)

def SoComposeMatrix_getClassTypeId() -> "SoType":
    """SoComposeMatrix_getClassTypeId() -> SoType"""
    return _coin.SoComposeMatrix_getClassTypeId()

def SoComposeMatrix_createInstance() -> "void *":
    """SoComposeMatrix_createInstance() -> void *"""
    return _coin.SoComposeMatrix_createInstance()

def SoComposeMatrix_initClass() -> "void":
    """SoComposeMatrix_initClass()"""
    return _coin.SoComposeMatrix_initClass()

class SoMFMatrix(SoMField):
    """Proxy of C++ SoMFMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFMatrix self) -> SoMFMatrix"""
        this = _coin.new_SoMFMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFMatrix
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFMatrix_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFMatrix_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFMatrix self) -> SoType"""
        return _coin.SoMFMatrix_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFMatrix self, SoField field)"""
        return _coin.SoMFMatrix_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFMatrix self, SoField field) -> SbBool"""
        return _coin.SoMFMatrix_isSame(self, field)


    def find(self, value: 'SbMatrix', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFMatrix self, SbMatrix value, SbBool addifnotfound=0) -> int
        find(SoMFMatrix self, SbMatrix value) -> int
        """
        return _coin.SoMFMatrix_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFMatrix_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFMatrix_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFMatrix_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SbMatrix') -> "void":
        """set1Value(SoMFMatrix self, int const idx, SbMatrix value)"""
        return _coin.SoMFMatrix_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFMatrix') -> "SbBool":
        """__eq__(SoMFMatrix self, SoMFMatrix field) -> SbBool"""
        return _coin.SoMFMatrix___eq__(self, field)


    def __ne__(self, field: 'SoMFMatrix') -> "SbBool":
        """__ne__(SoMFMatrix self, SoMFMatrix field) -> SbBool"""
        return _coin.SoMFMatrix___ne__(self, field)


    def startEditing(self) -> "SbMatrix *":
        """startEditing(SoMFMatrix self) -> SbMatrix"""
        return _coin.SoMFMatrix_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFMatrix self)"""
        return _coin.SoMFMatrix_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFMatrix_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "SbMatrix const &":
        """__getitem__(SoMFMatrix self, int i) -> SbMatrix"""
        return _coin.SoMFMatrix___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbMatrix') -> "void":
        """__setitem__(SoMFMatrix self, int i, SbMatrix value)"""
        return _coin.SoMFMatrix___setitem__(self, i, value)


    def getValues(self, i: 'int'=0) -> "SbMatrix const *":
        """
        getValues(SoMFMatrix self, int i=0) -> SbMatrix
        getValues(SoMFMatrix self) -> SbMatrix
        """
        return _coin.SoMFMatrix_getValues(self, i)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFMatrix self, SbMatrix value)
        setValue(SoMFMatrix self, float const a11, float const a12, float const a13, float const a14, float const a21, float const a22, float const a23, float const a24, float const a31, float const a32, float const a33, float const a34, float const a41, float const a42, float const a43, float const a44)
        setValue(SoMFMatrix self, SoMFMatrix other)
        """
        return _coin.SoMFMatrix_setValue(self, *args)

SoMFMatrix_swigregister = _coin.SoMFMatrix_swigregister
SoMFMatrix_swigregister(SoMFMatrix)

def SoMFMatrix_createInstance() -> "void *":
    """SoMFMatrix_createInstance() -> void *"""
    return _coin.SoMFMatrix_createInstance()

def SoMFMatrix_getClassTypeId() -> "SoType":
    """SoMFMatrix_getClassTypeId() -> SoType"""
    return _coin.SoMFMatrix_getClassTypeId()

def SoMFMatrix_initClass() -> "void":
    """SoMFMatrix_initClass()"""
    return _coin.SoMFMatrix_initClass()

class SoDecomposeMatrix(SoEngine):
    """Proxy of C++ SoDecomposeMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDecomposeMatrix_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDecomposeMatrix self) -> SoType"""
        return _coin.SoDecomposeMatrix_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoDecomposeMatrix self) -> SoFieldData"""
        return _coin.SoDecomposeMatrix_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoDecomposeMatrix self) -> SoEngineOutputData"""
        return _coin.SoDecomposeMatrix_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoDecomposeMatrix_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoDecomposeMatrix self) -> SoDecomposeMatrix"""
        this = _coin.new_SoDecomposeMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDecomposeMatrix_initClass()

    initClass = staticmethod(initClass)
    matrix = _swig_property(_coin.SoDecomposeMatrix_matrix_get, _coin.SoDecomposeMatrix_matrix_set)
    center = _swig_property(_coin.SoDecomposeMatrix_center_get, _coin.SoDecomposeMatrix_center_set)
    translation = _swig_property(_coin.SoDecomposeMatrix_translation_get, _coin.SoDecomposeMatrix_translation_set)
    rotation = _swig_property(_coin.SoDecomposeMatrix_rotation_get, _coin.SoDecomposeMatrix_rotation_set)
    scaleFactor = _swig_property(_coin.SoDecomposeMatrix_scaleFactor_get, _coin.SoDecomposeMatrix_scaleFactor_set)
    scaleOrientation = _swig_property(_coin.SoDecomposeMatrix_scaleOrientation_get, _coin.SoDecomposeMatrix_scaleOrientation_set)
SoDecomposeMatrix_swigregister = _coin.SoDecomposeMatrix_swigregister
SoDecomposeMatrix_swigregister(SoDecomposeMatrix)

def SoDecomposeMatrix_getClassTypeId() -> "SoType":
    """SoDecomposeMatrix_getClassTypeId() -> SoType"""
    return _coin.SoDecomposeMatrix_getClassTypeId()

def SoDecomposeMatrix_createInstance() -> "void *":
    """SoDecomposeMatrix_createInstance() -> void *"""
    return _coin.SoDecomposeMatrix_createInstance()

def SoDecomposeMatrix_initClass() -> "void":
    """SoDecomposeMatrix_initClass()"""
    return _coin.SoDecomposeMatrix_initClass()

class SoComposeRotationFromTo(SoEngine):
    """Proxy of C++ SoComposeRotationFromTo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComposeRotationFromTo_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComposeRotationFromTo self) -> SoType"""
        return _coin.SoComposeRotationFromTo_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComposeRotationFromTo self) -> SoFieldData"""
        return _coin.SoComposeRotationFromTo_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComposeRotationFromTo self) -> SoEngineOutputData"""
        return _coin.SoComposeRotationFromTo_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComposeRotationFromTo_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoComposeRotationFromTo self) -> SoComposeRotationFromTo"""
        this = _coin.new_SoComposeRotationFromTo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComposeRotationFromTo_initClass()

    initClass = staticmethod(initClass)
    srcFrom = _swig_property(_coin.SoComposeRotationFromTo_srcFrom_get, _coin.SoComposeRotationFromTo_srcFrom_set)
    destTo = _swig_property(_coin.SoComposeRotationFromTo_destTo_get, _coin.SoComposeRotationFromTo_destTo_set)
    rotation = _swig_property(_coin.SoComposeRotationFromTo_rotation_get, _coin.SoComposeRotationFromTo_rotation_set)
SoComposeRotationFromTo_swigregister = _coin.SoComposeRotationFromTo_swigregister
SoComposeRotationFromTo_swigregister(SoComposeRotationFromTo)

def SoComposeRotationFromTo_getClassTypeId() -> "SoType":
    """SoComposeRotationFromTo_getClassTypeId() -> SoType"""
    return _coin.SoComposeRotationFromTo_getClassTypeId()

def SoComposeRotationFromTo_createInstance() -> "void *":
    """SoComposeRotationFromTo_createInstance() -> void *"""
    return _coin.SoComposeRotationFromTo_createInstance()

def SoComposeRotationFromTo_initClass() -> "void":
    """SoComposeRotationFromTo_initClass()"""
    return _coin.SoComposeRotationFromTo_initClass()

class SoSFPath(SoSField):
    """Proxy of C++ SoSFPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFPath self) -> SoSFPath"""
        this = _coin.new_SoSFPath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFPath
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFPath_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFPath_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFPath self) -> SoType"""
        return _coin.SoSFPath_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFPath self, SoField field)"""
        return _coin.SoSFPath_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFPath self, SoField field) -> SbBool"""
        return _coin.SoSFPath_isSame(self, field)


    def getValue(self) -> "SoPath *":
        """getValue(SoSFPath self) -> SoPath"""
        return _coin.SoSFPath_getValue(self)


    def __eq__(self, field: 'SoSFPath') -> "int":
        """__eq__(SoSFPath self, SoSFPath field) -> int"""
        return _coin.SoSFPath___eq__(self, field)


    def __ne__(self, field: 'SoSFPath') -> "int":
        """__ne__(SoSFPath self, SoSFPath field) -> int"""
        return _coin.SoSFPath___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFPath_initClass()

    initClass = staticmethod(initClass)

    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoSFPath self, SoNotList l)"""
        return _coin.SoSFPath_notify(self, l)


    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoSFPath self, SbBool copyconnections)"""
        return _coin.SoSFPath_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoSFPath self) -> SbBool"""
        return _coin.SoSFPath_referencesCopy(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFPath self, SoPath newvalue)
        setValue(SoSFPath self, SoSFPath other)
        """
        return _coin.SoSFPath_setValue(self, *args)

SoSFPath_swigregister = _coin.SoSFPath_swigregister
SoSFPath_swigregister(SoSFPath)

def SoSFPath_createInstance() -> "void *":
    """SoSFPath_createInstance() -> void *"""
    return _coin.SoSFPath_createInstance()

def SoSFPath_getClassTypeId() -> "SoType":
    """SoSFPath_getClassTypeId() -> SoType"""
    return _coin.SoSFPath_getClassTypeId()

def SoSFPath_initClass() -> "void":
    """SoSFPath_initClass()"""
    return _coin.SoSFPath_initClass()

class SoComputeBoundingBox(SoEngine):
    """Proxy of C++ SoComputeBoundingBox class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoComputeBoundingBox_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoComputeBoundingBox self) -> SoType"""
        return _coin.SoComputeBoundingBox_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoComputeBoundingBox self) -> SoFieldData"""
        return _coin.SoComputeBoundingBox_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoComputeBoundingBox self) -> SoEngineOutputData"""
        return _coin.SoComputeBoundingBox_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoComputeBoundingBox_createInstance()

    createInstance = staticmethod(createInstance)
    node = _swig_property(_coin.SoComputeBoundingBox_node_get, _coin.SoComputeBoundingBox_node_set)
    path = _swig_property(_coin.SoComputeBoundingBox_path_get, _coin.SoComputeBoundingBox_path_set)
    min = _swig_property(_coin.SoComputeBoundingBox_min_get, _coin.SoComputeBoundingBox_min_set)
    max = _swig_property(_coin.SoComputeBoundingBox_max_get, _coin.SoComputeBoundingBox_max_set)
    boxCenter = _swig_property(_coin.SoComputeBoundingBox_boxCenter_get, _coin.SoComputeBoundingBox_boxCenter_set)
    objectCenter = _swig_property(_coin.SoComputeBoundingBox_objectCenter_get, _coin.SoComputeBoundingBox_objectCenter_set)

    def __init__(self):
        """__init__(SoComputeBoundingBox self) -> SoComputeBoundingBox"""
        this = _coin.new_SoComputeBoundingBox()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoComputeBoundingBox_initClass()

    initClass = staticmethod(initClass)

    def setViewportRegion(self, vpr: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoComputeBoundingBox self, SbViewportRegion vpr)"""
        return _coin.SoComputeBoundingBox_setViewportRegion(self, vpr)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoComputeBoundingBox self) -> SbViewportRegion"""
        return _coin.SoComputeBoundingBox_getViewportRegion(self)

SoComputeBoundingBox_swigregister = _coin.SoComputeBoundingBox_swigregister
SoComputeBoundingBox_swigregister(SoComputeBoundingBox)

def SoComputeBoundingBox_getClassTypeId() -> "SoType":
    """SoComputeBoundingBox_getClassTypeId() -> SoType"""
    return _coin.SoComputeBoundingBox_getClassTypeId()

def SoComputeBoundingBox_createInstance() -> "void *":
    """SoComputeBoundingBox_createInstance() -> void *"""
    return _coin.SoComputeBoundingBox_createInstance()

def SoComputeBoundingBox_initClass() -> "void":
    """SoComputeBoundingBox_initClass()"""
    return _coin.SoComputeBoundingBox_initClass()

class SoConcatenate(SoEngine):
    """Proxy of C++ SoConcatenate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoConcatenate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoConcatenate self) -> SoType"""
        return _coin.SoConcatenate_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoConcatenate self) -> SoFieldData"""
        return _coin.SoConcatenate_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoConcatenate self) -> SoEngineOutputData"""
        return _coin.SoConcatenate_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoConcatenate_createInstance()

    createInstance = staticmethod(createInstance)
    NUMINPUTS = _coin.SoConcatenate_NUMINPUTS

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoConcatenate_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, inputType: 'SoType'):
        """__init__(SoConcatenate self, SoType inputType) -> SoConcatenate"""
        this = _coin.new_SoConcatenate(inputType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    input = _swig_property(_coin.SoConcatenate_input_get, _coin.SoConcatenate_input_set)
    output = _swig_property(_coin.SoConcatenate_output_get, _coin.SoConcatenate_output_set)
SoConcatenate_swigregister = _coin.SoConcatenate_swigregister
SoConcatenate_swigregister(SoConcatenate)

def SoConcatenate_getClassTypeId() -> "SoType":
    """SoConcatenate_getClassTypeId() -> SoType"""
    return _coin.SoConcatenate_getClassTypeId()

def SoConcatenate_createInstance() -> "void *":
    """SoConcatenate_createInstance() -> void *"""
    return _coin.SoConcatenate_createInstance()

def SoConcatenate_initClass() -> "void":
    """SoConcatenate_initClass()"""
    return _coin.SoConcatenate_initClass()

class SoSFTrigger(SoSField):
    """Proxy of C++ SoSFTrigger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFTrigger self) -> SoSFTrigger"""
        this = _coin.new_SoSFTrigger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFTrigger
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFTrigger_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFTrigger_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFTrigger self) -> SoType"""
        return _coin.SoSFTrigger_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFTrigger self, SoField field)"""
        return _coin.SoSFTrigger_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFTrigger self, SoField field) -> SbBool"""
        return _coin.SoSFTrigger_isSame(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFTrigger_initClass()

    initClass = staticmethod(initClass)

    def getValue(self) -> "void":
        """getValue(SoSFTrigger self)"""
        return _coin.SoSFTrigger_getValue(self)


    def __eq__(self, trigger: 'SoSFTrigger') -> "int":
        """__eq__(SoSFTrigger self, SoSFTrigger trigger) -> int"""
        return _coin.SoSFTrigger___eq__(self, trigger)


    def __ne__(self, trigger: 'SoSFTrigger') -> "int":
        """__ne__(SoSFTrigger self, SoSFTrigger trigger) -> int"""
        return _coin.SoSFTrigger___ne__(self, trigger)


    def startNotify(self) -> "void":
        """startNotify(SoSFTrigger self)"""
        return _coin.SoSFTrigger_startNotify(self)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoSFTrigger self, SoNotList l)"""
        return _coin.SoSFTrigger_notify(self, l)


    def touch(self) -> "void":
        """touch(SoSFTrigger self)"""
        return _coin.SoSFTrigger_touch(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFTrigger self)
        setValue(SoSFTrigger self, SoSFTrigger other)
        """
        return _coin.SoSFTrigger_setValue(self, *args)

SoSFTrigger_swigregister = _coin.SoSFTrigger_swigregister
SoSFTrigger_swigregister(SoSFTrigger)

def SoSFTrigger_createInstance() -> "void *":
    """SoSFTrigger_createInstance() -> void *"""
    return _coin.SoSFTrigger_createInstance()

def SoSFTrigger_getClassTypeId() -> "SoType":
    """SoSFTrigger_getClassTypeId() -> SoType"""
    return _coin.SoSFTrigger_getClassTypeId()

def SoSFTrigger_initClass() -> "void":
    """SoSFTrigger_initClass()"""
    return _coin.SoSFTrigger_initClass()

class SoSFShort(SoSField):
    """Proxy of C++ SoSFShort class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFShort self) -> SoSFShort"""
        this = _coin.new_SoSFShort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFShort
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFShort_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFShort_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFShort self) -> SoType"""
        return _coin.SoSFShort_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFShort self, SoField field)"""
        return _coin.SoSFShort_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFShort self, SoField field) -> SbBool"""
        return _coin.SoSFShort_isSame(self, field)


    def getValue(self) -> "short":
        """getValue(SoSFShort self) -> short"""
        return _coin.SoSFShort_getValue(self)


    def __eq__(self, field: 'SoSFShort') -> "int":
        """__eq__(SoSFShort self, SoSFShort field) -> int"""
        return _coin.SoSFShort___eq__(self, field)


    def __ne__(self, field: 'SoSFShort') -> "int":
        """__ne__(SoSFShort self, SoSFShort field) -> int"""
        return _coin.SoSFShort___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFShort_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFShort self, short newvalue)
        setValue(SoSFShort self, SoSFShort other)
        """
        return _coin.SoSFShort_setValue(self, *args)

SoSFShort_swigregister = _coin.SoSFShort_swigregister
SoSFShort_swigregister(SoSFShort)

def SoSFShort_createInstance() -> "void *":
    """SoSFShort_createInstance() -> void *"""
    return _coin.SoSFShort_createInstance()

def SoSFShort_getClassTypeId() -> "SoType":
    """SoSFShort_getClassTypeId() -> SoType"""
    return _coin.SoSFShort_getClassTypeId()

def SoSFShort_initClass() -> "void":
    """SoSFShort_initClass()"""
    return _coin.SoSFShort_initClass()

class SoCounter(SoEngine):
    """Proxy of C++ SoCounter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCounter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCounter self) -> SoType"""
        return _coin.SoCounter_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoCounter self) -> SoFieldData"""
        return _coin.SoCounter_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoCounter self) -> SoEngineOutputData"""
        return _coin.SoCounter_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCounter_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCounter_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCounter self) -> SoCounter"""
        this = _coin.new_SoCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    min = _swig_property(_coin.SoCounter_min_get, _coin.SoCounter_min_set)
    max = _swig_property(_coin.SoCounter_max_get, _coin.SoCounter_max_set)
    step = _swig_property(_coin.SoCounter_step_get, _coin.SoCounter_step_set)
    trigger = _swig_property(_coin.SoCounter_trigger_get, _coin.SoCounter_trigger_set)
    reset = _swig_property(_coin.SoCounter_reset_get, _coin.SoCounter_reset_set)
    output = _swig_property(_coin.SoCounter_output_get, _coin.SoCounter_output_set)
    syncOut = _swig_property(_coin.SoCounter_syncOut_get, _coin.SoCounter_syncOut_set)
SoCounter_swigregister = _coin.SoCounter_swigregister
SoCounter_swigregister(SoCounter)

def SoCounter_getClassTypeId() -> "SoType":
    """SoCounter_getClassTypeId() -> SoType"""
    return _coin.SoCounter_getClassTypeId()

def SoCounter_createInstance() -> "void *":
    """SoCounter_createInstance() -> void *"""
    return _coin.SoCounter_createInstance()

def SoCounter_initClass() -> "void":
    """SoCounter_initClass()"""
    return _coin.SoCounter_initClass()

class SoSFTime(SoSField):
    """Proxy of C++ SoSFTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFTime self) -> SoSFTime"""
        this = _coin.new_SoSFTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFTime
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFTime_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFTime_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFTime self) -> SoType"""
        return _coin.SoSFTime_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFTime self, SoField field)"""
        return _coin.SoSFTime_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFTime self, SoField field) -> SbBool"""
        return _coin.SoSFTime_isSame(self, field)


    def getValue(self) -> "SbTime const &":
        """getValue(SoSFTime self) -> SbTime"""
        return _coin.SoSFTime_getValue(self)


    def __eq__(self, field: 'SoSFTime') -> "int":
        """__eq__(SoSFTime self, SoSFTime field) -> int"""
        return _coin.SoSFTime___eq__(self, field)


    def __ne__(self, field: 'SoSFTime') -> "int":
        """__ne__(SoSFTime self, SoSFTime field) -> int"""
        return _coin.SoSFTime___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFTime_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFTime self, SbTime newvalue)
        setValue(SoSFTime self, SbTime other)
        setValue(SoSFTime self, SoSFTime other)
        """
        return _coin.SoSFTime_setValue(self, *args)

SoSFTime_swigregister = _coin.SoSFTime_swigregister
SoSFTime_swigregister(SoSFTime)

def SoSFTime_createInstance() -> "void *":
    """SoSFTime_createInstance() -> void *"""
    return _coin.SoSFTime_createInstance()

def SoSFTime_getClassTypeId() -> "SoType":
    """SoSFTime_getClassTypeId() -> SoType"""
    return _coin.SoSFTime_getClassTypeId()

def SoSFTime_initClass() -> "void":
    """SoSFTime_initClass()"""
    return _coin.SoSFTime_initClass()

class SoElapsedTime(SoEngine):
    """Proxy of C++ SoElapsedTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoElapsedTime_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoElapsedTime self) -> SoType"""
        return _coin.SoElapsedTime_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoElapsedTime self) -> SoFieldData"""
        return _coin.SoElapsedTime_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoElapsedTime self) -> SoEngineOutputData"""
        return _coin.SoElapsedTime_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoElapsedTime_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoElapsedTime_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoElapsedTime self) -> SoElapsedTime"""
        this = _coin.new_SoElapsedTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    timeIn = _swig_property(_coin.SoElapsedTime_timeIn_get, _coin.SoElapsedTime_timeIn_set)
    speed = _swig_property(_coin.SoElapsedTime_speed_get, _coin.SoElapsedTime_speed_set)
    on = _swig_property(_coin.SoElapsedTime_on_get, _coin.SoElapsedTime_on_set)
    pause = _swig_property(_coin.SoElapsedTime_pause_get, _coin.SoElapsedTime_pause_set)
    reset = _swig_property(_coin.SoElapsedTime_reset_get, _coin.SoElapsedTime_reset_set)
    timeOut = _swig_property(_coin.SoElapsedTime_timeOut_get, _coin.SoElapsedTime_timeOut_set)
SoElapsedTime_swigregister = _coin.SoElapsedTime_swigregister
SoElapsedTime_swigregister(SoElapsedTime)

def SoElapsedTime_getClassTypeId() -> "SoType":
    """SoElapsedTime_getClassTypeId() -> SoType"""
    return _coin.SoElapsedTime_getClassTypeId()

def SoElapsedTime_createInstance() -> "void *":
    """SoElapsedTime_createInstance() -> void *"""
    return _coin.SoElapsedTime_createInstance()

def SoElapsedTime_initClass() -> "void":
    """SoElapsedTime_initClass()"""
    return _coin.SoElapsedTime_initClass()

class SoFieldConverter(SoEngine):
    """Proxy of C++ SoFieldConverter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFieldConverter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFieldConverter self) -> SoType"""
        return _coin.SoFieldConverter_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoFieldConverter self) -> SoFieldData"""
        return _coin.SoFieldConverter_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoFieldConverter self) -> SoEngineOutputData"""
        return _coin.SoFieldConverter_getOutputData(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFieldConverter_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoFieldConverter_initClasses()

    initClasses = staticmethod(initClasses)

    def getInput(self, type: 'SoType') -> "SoField *":
        """getInput(SoFieldConverter self, SoType type) -> SoField"""
        return _coin.SoFieldConverter_getInput(self, type)


    def getOutput(self, type: 'SoType') -> "SoEngineOutput *":
        """getOutput(SoFieldConverter self, SoType type) -> SoEngineOutput"""
        return _coin.SoFieldConverter_getOutput(self, type)


    def getConnectedInput(self) -> "SoField *":
        """getConnectedInput(SoFieldConverter self) -> SoField"""
        return _coin.SoFieldConverter_getConnectedInput(self)


    def getForwardConnections(self, l: 'SoFieldList') -> "int":
        """getForwardConnections(SoFieldConverter self, SoFieldList l) -> int"""
        return _coin.SoFieldConverter_getForwardConnections(self, l)

SoFieldConverter_swigregister = _coin.SoFieldConverter_swigregister
SoFieldConverter_swigregister(SoFieldConverter)

def SoFieldConverter_getClassTypeId() -> "SoType":
    """SoFieldConverter_getClassTypeId() -> SoType"""
    return _coin.SoFieldConverter_getClassTypeId()

def SoFieldConverter_initClass() -> "void":
    """SoFieldConverter_initClass()"""
    return _coin.SoFieldConverter_initClass()

def SoFieldConverter_initClasses() -> "void":
    """SoFieldConverter_initClasses()"""
    return _coin.SoFieldConverter_initClasses()

class SoGate(SoEngine):
    """Proxy of C++ SoGate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGate self) -> SoType"""
        return _coin.SoGate_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoGate self) -> SoFieldData"""
        return _coin.SoGate_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoGate self) -> SoEngineOutputData"""
        return _coin.SoGate_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoGate_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGate_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, type: 'SoType'):
        """__init__(SoGate self, SoType type) -> SoGate"""
        this = _coin.new_SoGate(type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    enable = _swig_property(_coin.SoGate_enable_get, _coin.SoGate_enable_set)
    trigger = _swig_property(_coin.SoGate_trigger_get, _coin.SoGate_trigger_set)
    input = _swig_property(_coin.SoGate_input_get, _coin.SoGate_input_set)
    output = _swig_property(_coin.SoGate_output_get, _coin.SoGate_output_set)
SoGate_swigregister = _coin.SoGate_swigregister
SoGate_swigregister(SoGate)

def SoGate_getClassTypeId() -> "SoType":
    """SoGate_getClassTypeId() -> SoType"""
    return _coin.SoGate_getClassTypeId()

def SoGate_createInstance() -> "void *":
    """SoGate_createInstance() -> void *"""
    return _coin.SoGate_createInstance()

def SoGate_initClass() -> "void":
    """SoGate_initClass()"""
    return _coin.SoGate_initClass()

class SoInterpolate(SoEngine):
    """Proxy of C++ SoInterpolate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolate self) -> SoType"""
        return _coin.SoInterpolate_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolate self) -> SoFieldData"""
        return _coin.SoInterpolate_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolate self) -> SoEngineOutputData"""
        return _coin.SoInterpolate_getOutputData(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolate_initClass()

    initClass = staticmethod(initClass)

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoInterpolate_initClasses()

    initClasses = staticmethod(initClasses)
    alpha = _swig_property(_coin.SoInterpolate_alpha_get, _coin.SoInterpolate_alpha_set)
    output = _swig_property(_coin.SoInterpolate_output_get, _coin.SoInterpolate_output_set)
SoInterpolate_swigregister = _coin.SoInterpolate_swigregister
SoInterpolate_swigregister(SoInterpolate)

def SoInterpolate_getClassTypeId() -> "SoType":
    """SoInterpolate_getClassTypeId() -> SoType"""
    return _coin.SoInterpolate_getClassTypeId()

def SoInterpolate_initClass() -> "void":
    """SoInterpolate_initClass()"""
    return _coin.SoInterpolate_initClass()

def SoInterpolate_initClasses() -> "void":
    """SoInterpolate_initClasses()"""
    return _coin.SoInterpolate_initClasses()

class SoInterpolateFloat(SoInterpolate):
    """Proxy of C++ SoInterpolateFloat class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolateFloat_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolateFloat self) -> SoType"""
        return _coin.SoInterpolateFloat_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolateFloat self) -> SoFieldData"""
        return _coin.SoInterpolateFloat_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolateFloat self) -> SoEngineOutputData"""
        return _coin.SoInterpolateFloat_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoInterpolateFloat_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoInterpolateFloat self) -> SoInterpolateFloat"""
        this = _coin.new_SoInterpolateFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolateFloat_initClass()

    initClass = staticmethod(initClass)
    input0 = _swig_property(_coin.SoInterpolateFloat_input0_get, _coin.SoInterpolateFloat_input0_set)
    input1 = _swig_property(_coin.SoInterpolateFloat_input1_get, _coin.SoInterpolateFloat_input1_set)
SoInterpolateFloat_swigregister = _coin.SoInterpolateFloat_swigregister
SoInterpolateFloat_swigregister(SoInterpolateFloat)

def SoInterpolateFloat_getClassTypeId() -> "SoType":
    """SoInterpolateFloat_getClassTypeId() -> SoType"""
    return _coin.SoInterpolateFloat_getClassTypeId()

def SoInterpolateFloat_createInstance() -> "void *":
    """SoInterpolateFloat_createInstance() -> void *"""
    return _coin.SoInterpolateFloat_createInstance()

def SoInterpolateFloat_initClass() -> "void":
    """SoInterpolateFloat_initClass()"""
    return _coin.SoInterpolateFloat_initClass()

class SoInterpolateVec2f(SoInterpolate):
    """Proxy of C++ SoInterpolateVec2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolateVec2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolateVec2f self) -> SoType"""
        return _coin.SoInterpolateVec2f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolateVec2f self) -> SoFieldData"""
        return _coin.SoInterpolateVec2f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolateVec2f self) -> SoEngineOutputData"""
        return _coin.SoInterpolateVec2f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoInterpolateVec2f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoInterpolateVec2f self) -> SoInterpolateVec2f"""
        this = _coin.new_SoInterpolateVec2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolateVec2f_initClass()

    initClass = staticmethod(initClass)
    input0 = _swig_property(_coin.SoInterpolateVec2f_input0_get, _coin.SoInterpolateVec2f_input0_set)
    input1 = _swig_property(_coin.SoInterpolateVec2f_input1_get, _coin.SoInterpolateVec2f_input1_set)
SoInterpolateVec2f_swigregister = _coin.SoInterpolateVec2f_swigregister
SoInterpolateVec2f_swigregister(SoInterpolateVec2f)

def SoInterpolateVec2f_getClassTypeId() -> "SoType":
    """SoInterpolateVec2f_getClassTypeId() -> SoType"""
    return _coin.SoInterpolateVec2f_getClassTypeId()

def SoInterpolateVec2f_createInstance() -> "void *":
    """SoInterpolateVec2f_createInstance() -> void *"""
    return _coin.SoInterpolateVec2f_createInstance()

def SoInterpolateVec2f_initClass() -> "void":
    """SoInterpolateVec2f_initClass()"""
    return _coin.SoInterpolateVec2f_initClass()

class SoInterpolateVec3f(SoInterpolate):
    """Proxy of C++ SoInterpolateVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolateVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolateVec3f self) -> SoType"""
        return _coin.SoInterpolateVec3f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolateVec3f self) -> SoFieldData"""
        return _coin.SoInterpolateVec3f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolateVec3f self) -> SoEngineOutputData"""
        return _coin.SoInterpolateVec3f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoInterpolateVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoInterpolateVec3f self) -> SoInterpolateVec3f"""
        this = _coin.new_SoInterpolateVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolateVec3f_initClass()

    initClass = staticmethod(initClass)
    input0 = _swig_property(_coin.SoInterpolateVec3f_input0_get, _coin.SoInterpolateVec3f_input0_set)
    input1 = _swig_property(_coin.SoInterpolateVec3f_input1_get, _coin.SoInterpolateVec3f_input1_set)
SoInterpolateVec3f_swigregister = _coin.SoInterpolateVec3f_swigregister
SoInterpolateVec3f_swigregister(SoInterpolateVec3f)

def SoInterpolateVec3f_getClassTypeId() -> "SoType":
    """SoInterpolateVec3f_getClassTypeId() -> SoType"""
    return _coin.SoInterpolateVec3f_getClassTypeId()

def SoInterpolateVec3f_createInstance() -> "void *":
    """SoInterpolateVec3f_createInstance() -> void *"""
    return _coin.SoInterpolateVec3f_createInstance()

def SoInterpolateVec3f_initClass() -> "void":
    """SoInterpolateVec3f_initClass()"""
    return _coin.SoInterpolateVec3f_initClass()

class SoInterpolateVec4f(SoInterpolate):
    """Proxy of C++ SoInterpolateVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolateVec4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolateVec4f self) -> SoType"""
        return _coin.SoInterpolateVec4f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolateVec4f self) -> SoFieldData"""
        return _coin.SoInterpolateVec4f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolateVec4f self) -> SoEngineOutputData"""
        return _coin.SoInterpolateVec4f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoInterpolateVec4f_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoInterpolateVec4f self) -> SoInterpolateVec4f"""
        this = _coin.new_SoInterpolateVec4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolateVec4f_initClass()

    initClass = staticmethod(initClass)
    input0 = _swig_property(_coin.SoInterpolateVec4f_input0_get, _coin.SoInterpolateVec4f_input0_set)
    input1 = _swig_property(_coin.SoInterpolateVec4f_input1_get, _coin.SoInterpolateVec4f_input1_set)
SoInterpolateVec4f_swigregister = _coin.SoInterpolateVec4f_swigregister
SoInterpolateVec4f_swigregister(SoInterpolateVec4f)

def SoInterpolateVec4f_getClassTypeId() -> "SoType":
    """SoInterpolateVec4f_getClassTypeId() -> SoType"""
    return _coin.SoInterpolateVec4f_getClassTypeId()

def SoInterpolateVec4f_createInstance() -> "void *":
    """SoInterpolateVec4f_createInstance() -> void *"""
    return _coin.SoInterpolateVec4f_createInstance()

def SoInterpolateVec4f_initClass() -> "void":
    """SoInterpolateVec4f_initClass()"""
    return _coin.SoInterpolateVec4f_initClass()

class SoInterpolateRotation(SoInterpolate):
    """Proxy of C++ SoInterpolateRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInterpolateRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInterpolateRotation self) -> SoType"""
        return _coin.SoInterpolateRotation_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoInterpolateRotation self) -> SoFieldData"""
        return _coin.SoInterpolateRotation_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoInterpolateRotation self) -> SoEngineOutputData"""
        return _coin.SoInterpolateRotation_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoInterpolateRotation_createInstance()

    createInstance = staticmethod(createInstance)

    def __init__(self):
        """__init__(SoInterpolateRotation self) -> SoInterpolateRotation"""
        this = _coin.new_SoInterpolateRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInterpolateRotation_initClass()

    initClass = staticmethod(initClass)
    input0 = _swig_property(_coin.SoInterpolateRotation_input0_get, _coin.SoInterpolateRotation_input0_set)
    input1 = _swig_property(_coin.SoInterpolateRotation_input1_get, _coin.SoInterpolateRotation_input1_set)
SoInterpolateRotation_swigregister = _coin.SoInterpolateRotation_swigregister
SoInterpolateRotation_swigregister(SoInterpolateRotation)

def SoInterpolateRotation_getClassTypeId() -> "SoType":
    """SoInterpolateRotation_getClassTypeId() -> SoType"""
    return _coin.SoInterpolateRotation_getClassTypeId()

def SoInterpolateRotation_createInstance() -> "void *":
    """SoInterpolateRotation_createInstance() -> void *"""
    return _coin.SoInterpolateRotation_createInstance()

def SoInterpolateRotation_initClass() -> "void":
    """SoInterpolateRotation_initClass()"""
    return _coin.SoInterpolateRotation_initClass()

class SoOnOff(SoEngine):
    """Proxy of C++ SoOnOff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoOnOff_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoOnOff self) -> SoType"""
        return _coin.SoOnOff_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoOnOff self) -> SoFieldData"""
        return _coin.SoOnOff_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoOnOff self) -> SoEngineOutputData"""
        return _coin.SoOnOff_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoOnOff_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoOnOff_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoOnOff self) -> SoOnOff"""
        this = _coin.new_SoOnOff()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    on = _swig_property(_coin.SoOnOff_on_get, _coin.SoOnOff_on_set)
    off = _swig_property(_coin.SoOnOff_off_get, _coin.SoOnOff_off_set)
    toggle = _swig_property(_coin.SoOnOff_toggle_get, _coin.SoOnOff_toggle_set)
    isOn = _swig_property(_coin.SoOnOff_isOn_get, _coin.SoOnOff_isOn_set)
    isOff = _swig_property(_coin.SoOnOff_isOff_get, _coin.SoOnOff_isOff_set)
SoOnOff_swigregister = _coin.SoOnOff_swigregister
SoOnOff_swigregister(SoOnOff)

def SoOnOff_getClassTypeId() -> "SoType":
    """SoOnOff_getClassTypeId() -> SoType"""
    return _coin.SoOnOff_getClassTypeId()

def SoOnOff_createInstance() -> "void *":
    """SoOnOff_createInstance() -> void *"""
    return _coin.SoOnOff_createInstance()

def SoOnOff_initClass() -> "void":
    """SoOnOff_initClass()"""
    return _coin.SoOnOff_initClass()

class SoSFBitMask(SoSFEnum):
    """Proxy of C++ SoSFBitMask class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBitMask self) -> SoSFBitMask"""
        this = _coin.new_SoSFBitMask()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBitMask
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBitMask_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBitMask_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBitMask self) -> SoType"""
        return _coin.SoSFBitMask_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBitMask self, SoField field)"""
        return _coin.SoSFBitMask_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBitMask self, SoField field) -> SbBool"""
        return _coin.SoSFBitMask_isSame(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBitMask_initClass()

    initClass = staticmethod(initClass)
SoSFBitMask_swigregister = _coin.SoSFBitMask_swigregister
SoSFBitMask_swigregister(SoSFBitMask)

def SoSFBitMask_createInstance() -> "void *":
    """SoSFBitMask_createInstance() -> void *"""
    return _coin.SoSFBitMask_createInstance()

def SoSFBitMask_getClassTypeId() -> "SoType":
    """SoSFBitMask_getClassTypeId() -> SoType"""
    return _coin.SoSFBitMask_getClassTypeId()

def SoSFBitMask_initClass() -> "void":
    """SoSFBitMask_initClass()"""
    return _coin.SoSFBitMask_initClass()

class SoOneShot(SoEngine):
    """Proxy of C++ SoOneShot class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoOneShot_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoOneShot self) -> SoType"""
        return _coin.SoOneShot_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoOneShot self) -> SoFieldData"""
        return _coin.SoOneShot_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoOneShot self) -> SoEngineOutputData"""
        return _coin.SoOneShot_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoOneShot_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoOneShot_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoOneShot self) -> SoOneShot"""
        this = _coin.new_SoOneShot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    RETRIGGERABLE = _coin.SoOneShot_RETRIGGERABLE
    HOLD_FINAL = _coin.SoOneShot_HOLD_FINAL
    timeIn = _swig_property(_coin.SoOneShot_timeIn_get, _coin.SoOneShot_timeIn_set)
    duration = _swig_property(_coin.SoOneShot_duration_get, _coin.SoOneShot_duration_set)
    trigger = _swig_property(_coin.SoOneShot_trigger_get, _coin.SoOneShot_trigger_set)
    flags = _swig_property(_coin.SoOneShot_flags_get, _coin.SoOneShot_flags_set)
    disable = _swig_property(_coin.SoOneShot_disable_get, _coin.SoOneShot_disable_set)
    timeOut = _swig_property(_coin.SoOneShot_timeOut_get, _coin.SoOneShot_timeOut_set)
    isActive = _swig_property(_coin.SoOneShot_isActive_get, _coin.SoOneShot_isActive_set)
    ramp = _swig_property(_coin.SoOneShot_ramp_get, _coin.SoOneShot_ramp_set)
SoOneShot_swigregister = _coin.SoOneShot_swigregister
SoOneShot_swigregister(SoOneShot)

def SoOneShot_getClassTypeId() -> "SoType":
    """SoOneShot_getClassTypeId() -> SoType"""
    return _coin.SoOneShot_getClassTypeId()

def SoOneShot_createInstance() -> "void *":
    """SoOneShot_createInstance() -> void *"""
    return _coin.SoOneShot_createInstance()

def SoOneShot_initClass() -> "void":
    """SoOneShot_initClass()"""
    return _coin.SoOneShot_initClass()

class SoSelectOne(SoEngine):
    """Proxy of C++ SoSelectOne class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSelectOne_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSelectOne self) -> SoType"""
        return _coin.SoSelectOne_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoSelectOne self) -> SoFieldData"""
        return _coin.SoSelectOne_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoSelectOne self) -> SoEngineOutputData"""
        return _coin.SoSelectOne_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSelectOne_createInstance()

    createInstance = staticmethod(createInstance)
    index = _swig_property(_coin.SoSelectOne_index_get, _coin.SoSelectOne_index_set)
    input = _swig_property(_coin.SoSelectOne_input_get, _coin.SoSelectOne_input_set)
    output = _swig_property(_coin.SoSelectOne_output_get, _coin.SoSelectOne_output_set)

    def __init__(self, inputtype: 'SoType'):
        """__init__(SoSelectOne self, SoType inputtype) -> SoSelectOne"""
        this = _coin.new_SoSelectOne(inputtype)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSelectOne_initClass()

    initClass = staticmethod(initClass)
SoSelectOne_swigregister = _coin.SoSelectOne_swigregister
SoSelectOne_swigregister(SoSelectOne)

def SoSelectOne_getClassTypeId() -> "SoType":
    """SoSelectOne_getClassTypeId() -> SoType"""
    return _coin.SoSelectOne_getClassTypeId()

def SoSelectOne_createInstance() -> "void *":
    """SoSelectOne_createInstance() -> void *"""
    return _coin.SoSelectOne_createInstance()

def SoSelectOne_initClass() -> "void":
    """SoSelectOne_initClass()"""
    return _coin.SoSelectOne_initClass()

class SoTimeCounter(SoEngine):
    """Proxy of C++ SoTimeCounter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTimeCounter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTimeCounter self) -> SoType"""
        return _coin.SoTimeCounter_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoTimeCounter self) -> SoFieldData"""
        return _coin.SoTimeCounter_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoTimeCounter self) -> SoEngineOutputData"""
        return _coin.SoTimeCounter_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTimeCounter_createInstance()

    createInstance = staticmethod(createInstance)
    timeIn = _swig_property(_coin.SoTimeCounter_timeIn_get, _coin.SoTimeCounter_timeIn_set)
    min = _swig_property(_coin.SoTimeCounter_min_get, _coin.SoTimeCounter_min_set)
    max = _swig_property(_coin.SoTimeCounter_max_get, _coin.SoTimeCounter_max_set)
    step = _swig_property(_coin.SoTimeCounter_step_get, _coin.SoTimeCounter_step_set)
    on = _swig_property(_coin.SoTimeCounter_on_get, _coin.SoTimeCounter_on_set)
    frequency = _swig_property(_coin.SoTimeCounter_frequency_get, _coin.SoTimeCounter_frequency_set)
    duty = _swig_property(_coin.SoTimeCounter_duty_get, _coin.SoTimeCounter_duty_set)
    reset = _swig_property(_coin.SoTimeCounter_reset_get, _coin.SoTimeCounter_reset_set)
    syncIn = _swig_property(_coin.SoTimeCounter_syncIn_get, _coin.SoTimeCounter_syncIn_set)
    output = _swig_property(_coin.SoTimeCounter_output_get, _coin.SoTimeCounter_output_set)
    syncOut = _swig_property(_coin.SoTimeCounter_syncOut_get, _coin.SoTimeCounter_syncOut_set)

    def __init__(self):
        """__init__(SoTimeCounter self) -> SoTimeCounter"""
        this = _coin.new_SoTimeCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTimeCounter_initClass()

    initClass = staticmethod(initClass)
SoTimeCounter_swigregister = _coin.SoTimeCounter_swigregister
SoTimeCounter_swigregister(SoTimeCounter)

def SoTimeCounter_getClassTypeId() -> "SoType":
    """SoTimeCounter_getClassTypeId() -> SoType"""
    return _coin.SoTimeCounter_getClassTypeId()

def SoTimeCounter_createInstance() -> "void *":
    """SoTimeCounter_createInstance() -> void *"""
    return _coin.SoTimeCounter_createInstance()

def SoTimeCounter_initClass() -> "void":
    """SoTimeCounter_initClass()"""
    return _coin.SoTimeCounter_initClass()

class SoTransformVec3f(SoEngine):
    """Proxy of C++ SoTransformVec3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformVec3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformVec3f self) -> SoType"""
        return _coin.SoTransformVec3f_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoTransformVec3f self) -> SoFieldData"""
        return _coin.SoTransformVec3f_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoTransformVec3f self) -> SoEngineOutputData"""
        return _coin.SoTransformVec3f_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTransformVec3f_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformVec3f_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformVec3f self) -> SoTransformVec3f"""
        this = _coin.new_SoTransformVec3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    vector = _swig_property(_coin.SoTransformVec3f_vector_get, _coin.SoTransformVec3f_vector_set)
    matrix = _swig_property(_coin.SoTransformVec3f_matrix_get, _coin.SoTransformVec3f_matrix_set)
    point = _swig_property(_coin.SoTransformVec3f_point_get, _coin.SoTransformVec3f_point_set)
    direction = _swig_property(_coin.SoTransformVec3f_direction_get, _coin.SoTransformVec3f_direction_set)
    normalDirection = _swig_property(_coin.SoTransformVec3f_normalDirection_get, _coin.SoTransformVec3f_normalDirection_set)
SoTransformVec3f_swigregister = _coin.SoTransformVec3f_swigregister
SoTransformVec3f_swigregister(SoTransformVec3f)

def SoTransformVec3f_getClassTypeId() -> "SoType":
    """SoTransformVec3f_getClassTypeId() -> SoType"""
    return _coin.SoTransformVec3f_getClassTypeId()

def SoTransformVec3f_createInstance() -> "void *":
    """SoTransformVec3f_createInstance() -> void *"""
    return _coin.SoTransformVec3f_createInstance()

def SoTransformVec3f_initClass() -> "void":
    """SoTransformVec3f_initClass()"""
    return _coin.SoTransformVec3f_initClass()

class SoTriggerAny(SoEngine):
    """Proxy of C++ SoTriggerAny class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTriggerAny_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTriggerAny self) -> SoType"""
        return _coin.SoTriggerAny_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoTriggerAny self) -> SoFieldData"""
        return _coin.SoTriggerAny_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoTriggerAny self) -> SoEngineOutputData"""
        return _coin.SoTriggerAny_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoTriggerAny_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTriggerAny_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTriggerAny self) -> SoTriggerAny"""
        this = _coin.new_SoTriggerAny()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    input0 = _swig_property(_coin.SoTriggerAny_input0_get, _coin.SoTriggerAny_input0_set)
    input1 = _swig_property(_coin.SoTriggerAny_input1_get, _coin.SoTriggerAny_input1_set)
    input2 = _swig_property(_coin.SoTriggerAny_input2_get, _coin.SoTriggerAny_input2_set)
    input3 = _swig_property(_coin.SoTriggerAny_input3_get, _coin.SoTriggerAny_input3_set)
    input4 = _swig_property(_coin.SoTriggerAny_input4_get, _coin.SoTriggerAny_input4_set)
    input5 = _swig_property(_coin.SoTriggerAny_input5_get, _coin.SoTriggerAny_input5_set)
    input6 = _swig_property(_coin.SoTriggerAny_input6_get, _coin.SoTriggerAny_input6_set)
    input7 = _swig_property(_coin.SoTriggerAny_input7_get, _coin.SoTriggerAny_input7_set)
    input8 = _swig_property(_coin.SoTriggerAny_input8_get, _coin.SoTriggerAny_input8_set)
    input9 = _swig_property(_coin.SoTriggerAny_input9_get, _coin.SoTriggerAny_input9_set)
    output = _swig_property(_coin.SoTriggerAny_output_get, _coin.SoTriggerAny_output_set)
SoTriggerAny_swigregister = _coin.SoTriggerAny_swigregister
SoTriggerAny_swigregister(SoTriggerAny)

def SoTriggerAny_getClassTypeId() -> "SoType":
    """SoTriggerAny_getClassTypeId() -> SoType"""
    return _coin.SoTriggerAny_getClassTypeId()

def SoTriggerAny_createInstance() -> "void *":
    """SoTriggerAny_createInstance() -> void *"""
    return _coin.SoTriggerAny_createInstance()

def SoTriggerAny_initClass() -> "void":
    """SoTriggerAny_initClass()"""
    return _coin.SoTriggerAny_initClass()

class SoTexture2Convert(SoEngine):
    """Proxy of C++ SoTexture2Convert class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture2Convert_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture2Convert self) -> SoType"""
        return _coin.SoTexture2Convert_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoTexture2Convert self) -> SoFieldData"""
        return _coin.SoTexture2Convert_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoTexture2Convert self) -> SoEngineOutputData"""
        return _coin.SoTexture2Convert_getOutputData(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture2Convert_initClass()

    initClass = staticmethod(initClass)
    sourceImage = _swig_property(_coin.SoTexture2Convert_sourceImage_get, _coin.SoTexture2Convert_sourceImage_set)
    image = _swig_property(_coin.SoTexture2Convert_image_get, _coin.SoTexture2Convert_image_set)
    __swig_destroy__ = _coin.delete_SoTexture2Convert
    __del__ = lambda self: None
SoTexture2Convert_swigregister = _coin.SoTexture2Convert_swigregister
SoTexture2Convert_swigregister(SoTexture2Convert)

def SoTexture2Convert_getClassTypeId() -> "SoType":
    """SoTexture2Convert_getClassTypeId() -> SoType"""
    return _coin.SoTexture2Convert_getClassTypeId()

def SoTexture2Convert_initClass() -> "void":
    """SoTexture2Convert_initClass()"""
    return _coin.SoTexture2Convert_initClass()

class SoHeightMapToNormalMap(SoTexture2Convert):
    """Proxy of C++ SoHeightMapToNormalMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoHeightMapToNormalMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoHeightMapToNormalMap self) -> SoType"""
        return _coin.SoHeightMapToNormalMap_getTypeId(self)


    def getFieldData(self) -> "SoFieldData const *":
        """getFieldData(SoHeightMapToNormalMap self) -> SoFieldData"""
        return _coin.SoHeightMapToNormalMap_getFieldData(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoHeightMapToNormalMap self) -> SoEngineOutputData"""
        return _coin.SoHeightMapToNormalMap_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoHeightMapToNormalMap_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoHeightMapToNormalMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoHeightMapToNormalMap self) -> SoHeightMapToNormalMap"""
        this = _coin.new_SoHeightMapToNormalMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    INT8 = _coin.SoHeightMapToNormalMap_INT8
    format = _swig_property(_coin.SoHeightMapToNormalMap_format_get, _coin.SoHeightMapToNormalMap_format_set)

    def convert(srcptr: 'unsigned char const *', size: 'SbVec2s', nc: 'int', dst_out: 'SbImage') -> "void":
        """convert(unsigned char const * srcptr, SbVec2s size, int nc, SbImage dst_out)"""
        return _coin.SoHeightMapToNormalMap_convert(srcptr, size, nc, dst_out)

    convert = staticmethod(convert)
    __swig_destroy__ = _coin.delete_SoHeightMapToNormalMap
    __del__ = lambda self: None
SoHeightMapToNormalMap_swigregister = _coin.SoHeightMapToNormalMap_swigregister
SoHeightMapToNormalMap_swigregister(SoHeightMapToNormalMap)

def SoHeightMapToNormalMap_getClassTypeId() -> "SoType":
    """SoHeightMapToNormalMap_getClassTypeId() -> SoType"""
    return _coin.SoHeightMapToNormalMap_getClassTypeId()

def SoHeightMapToNormalMap_createInstance() -> "void *":
    """SoHeightMapToNormalMap_createInstance() -> void *"""
    return _coin.SoHeightMapToNormalMap_createInstance()

def SoHeightMapToNormalMap_initClass() -> "void":
    """SoHeightMapToNormalMap_initClass()"""
    return _coin.SoHeightMapToNormalMap_initClass()

def SoHeightMapToNormalMap_convert(srcptr: 'unsigned char const *', size: 'SbVec2s', nc: 'int', dst_out: 'SbImage') -> "void":
    """SoHeightMapToNormalMap_convert(unsigned char const * srcptr, SbVec2s size, int nc, SbImage dst_out)"""
    return _coin.SoHeightMapToNormalMap_convert(srcptr, size, nc, dst_out)

class SoNodeEngine(SoNode):
    """Proxy of C++ SoNodeEngine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNodeEngine_initClass()

    initClass = staticmethod(initClass)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNodeEngine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def evaluateWrapper(self) -> "void":
        """evaluateWrapper(SoNodeEngine self)"""
        return _coin.SoNodeEngine_evaluateWrapper(self)


    def getOutputs(self, l: 'SoEngineOutputList') -> "int":
        """getOutputs(SoNodeEngine self, SoEngineOutputList l) -> int"""
        return _coin.SoNodeEngine_getOutputs(self, l)


    def getOutput(self, outputname: 'SbName') -> "SoEngineOutput *":
        """getOutput(SoNodeEngine self, SbName outputname) -> SoEngineOutput"""
        return _coin.SoNodeEngine_getOutput(self, outputname)


    def getOutputName(self, output: 'SoEngineOutput', outputname: 'SbName') -> "SbBool":
        """getOutputName(SoNodeEngine self, SoEngineOutput output, SbName outputname) -> SbBool"""
        return _coin.SoNodeEngine_getOutputName(self, output, outputname)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoNodeEngine self) -> SoEngineOutputData"""
        return _coin.SoNodeEngine_getOutputData(self)


    def isNotifying(self) -> "SbBool":
        """isNotifying(SoNodeEngine self) -> SbBool"""
        return _coin.SoNodeEngine_isNotifying(self)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoNodeEngine self, SoNotList nl)"""
        return _coin.SoNodeEngine_notify(self, nl)


    def writeInstance(self, out: 'SoOutput') -> "void":
        """writeInstance(SoNodeEngine self, SoOutput out)"""
        return _coin.SoNodeEngine_writeInstance(self, out)

SoNodeEngine_swigregister = _coin.SoNodeEngine_swigregister
SoNodeEngine_swigregister(SoNodeEngine)

def SoNodeEngine_initClass() -> "void":
    """SoNodeEngine_initClass()"""
    return _coin.SoNodeEngine_initClass()

def SoNodeEngine_getClassTypeId() -> "SoType":
    """SoNodeEngine_getClassTypeId() -> SoType"""
    return _coin.SoNodeEngine_getClassTypeId()

class SoMemoryError(SoError):
    """Proxy of C++ SoMemoryError class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def setHandlerCallback(callback: 'SoErrorCB *const', data: 'void *const') -> "void":
        """setHandlerCallback(SoErrorCB *const callback, void *const data)"""
        return _coin.SoMemoryError_setHandlerCallback(callback, data)

    setHandlerCallback = staticmethod(setHandlerCallback)

    def getHandlerCallback() -> "SoErrorCB *":
        """getHandlerCallback() -> SoErrorCB *"""
        return _coin.SoMemoryError_getHandlerCallback()

    getHandlerCallback = staticmethod(getHandlerCallback)

    def getHandlerData() -> "void *":
        """getHandlerData() -> void *"""
        return _coin.SoMemoryError_getHandlerData()

    getHandlerData = staticmethod(getHandlerData)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMemoryError_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMemoryError self) -> SoType"""
        return _coin.SoMemoryError_getTypeId(self)


    def post(whatWasAllocated: 'char const *const') -> "void":
        """post(char const *const whatWasAllocated)"""
        return _coin.SoMemoryError_post(whatWasAllocated)

    post = staticmethod(post)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMemoryError_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMemoryError self) -> SoMemoryError"""
        this = _coin.new_SoMemoryError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMemoryError
    __del__ = lambda self: None
SoMemoryError_swigregister = _coin.SoMemoryError_swigregister
SoMemoryError_swigregister(SoMemoryError)

def SoMemoryError_setHandlerCallback(callback: 'SoErrorCB *const', data: 'void *const') -> "void":
    """SoMemoryError_setHandlerCallback(SoErrorCB *const callback, void *const data)"""
    return _coin.SoMemoryError_setHandlerCallback(callback, data)

def SoMemoryError_getHandlerCallback() -> "SoErrorCB *":
    """SoMemoryError_getHandlerCallback() -> SoErrorCB *"""
    return _coin.SoMemoryError_getHandlerCallback()

def SoMemoryError_getHandlerData() -> "void *":
    """SoMemoryError_getHandlerData() -> void *"""
    return _coin.SoMemoryError_getHandlerData()

def SoMemoryError_getClassTypeId() -> "SoType":
    """SoMemoryError_getClassTypeId() -> SoType"""
    return _coin.SoMemoryError_getClassTypeId()

def SoMemoryError_post(whatWasAllocated: 'char const *const') -> "void":
    """SoMemoryError_post(char const *const whatWasAllocated)"""
    return _coin.SoMemoryError_post(whatWasAllocated)

def SoMemoryError_initClass() -> "void":
    """SoMemoryError_initClass()"""
    return _coin.SoMemoryError_initClass()

class SoReadError(SoError):
    """Proxy of C++ SoReadError class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def setHandlerCallback(function: 'SoErrorCB *const', data: 'void *const') -> "void":
        """setHandlerCallback(SoErrorCB *const function, void *const data)"""
        return _coin.SoReadError_setHandlerCallback(function, data)

    setHandlerCallback = staticmethod(setHandlerCallback)

    def getHandlerCallback() -> "SoErrorCB *":
        """getHandlerCallback() -> SoErrorCB *"""
        return _coin.SoReadError_getHandlerCallback()

    getHandlerCallback = staticmethod(getHandlerCallback)

    def getHandlerData() -> "void *":
        """getHandlerData() -> void *"""
        return _coin.SoReadError_getHandlerData()

    getHandlerData = staticmethod(getHandlerData)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoReadError_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoReadError self) -> SoType"""
        return _coin.SoReadError_getTypeId(self)


    def post(input: 'SoInput', format: 'char const *const') -> "void":
        """post(SoInput input, char const *const format)"""
        return _coin.SoReadError_post(input, format)

    post = staticmethod(post)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoReadError_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoReadError self) -> SoReadError"""
        this = _coin.new_SoReadError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoReadError
    __del__ = lambda self: None
SoReadError_swigregister = _coin.SoReadError_swigregister
SoReadError_swigregister(SoReadError)

def SoReadError_setHandlerCallback(function: 'SoErrorCB *const', data: 'void *const') -> "void":
    """SoReadError_setHandlerCallback(SoErrorCB *const function, void *const data)"""
    return _coin.SoReadError_setHandlerCallback(function, data)

def SoReadError_getHandlerCallback() -> "SoErrorCB *":
    """SoReadError_getHandlerCallback() -> SoErrorCB *"""
    return _coin.SoReadError_getHandlerCallback()

def SoReadError_getHandlerData() -> "void *":
    """SoReadError_getHandlerData() -> void *"""
    return _coin.SoReadError_getHandlerData()

def SoReadError_getClassTypeId() -> "SoType":
    """SoReadError_getClassTypeId() -> SoType"""
    return _coin.SoReadError_getClassTypeId()

def SoReadError_post(input: 'SoInput', format: 'char const *const') -> "void":
    """SoReadError_post(SoInput input, char const *const format)"""
    return _coin.SoReadError_post(input, format)

def SoReadError_initClass() -> "void":
    """SoReadError_initClass()"""
    return _coin.SoReadError_initClass()

class SoButtonEvent(SoEvent):
    """Proxy of C++ SoButtonEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoButtonEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoButtonEvent self) -> SoType"""
        return _coin.SoButtonEvent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoButtonEvent_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoButtonEvent self) -> SoButtonEvent"""
        this = _coin.new_SoButtonEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoButtonEvent
    __del__ = lambda self: None
    UP = _coin.SoButtonEvent_UP
    DOWN = _coin.SoButtonEvent_DOWN
    UNKNOWN = _coin.SoButtonEvent_UNKNOWN

    def setState(self, state: 'SoButtonEvent::State') -> "void":
        """setState(SoButtonEvent self, SoButtonEvent::State state)"""
        return _coin.SoButtonEvent_setState(self, state)


    def getState(self) -> "SoButtonEvent::State":
        """getState(SoButtonEvent self) -> SoButtonEvent::State"""
        return _coin.SoButtonEvent_getState(self)


    def enumToString(enumval: 'SoButtonEvent::State', stringrep: 'SbString') -> "SbBool":
        """enumToString(SoButtonEvent::State enumval, SbString stringrep) -> SbBool"""
        return _coin.SoButtonEvent_enumToString(enumval, stringrep)

    enumToString = staticmethod(enumToString)
SoButtonEvent_swigregister = _coin.SoButtonEvent_swigregister
SoButtonEvent_swigregister(SoButtonEvent)

def SoButtonEvent_getClassTypeId() -> "SoType":
    """SoButtonEvent_getClassTypeId() -> SoType"""
    return _coin.SoButtonEvent_getClassTypeId()

def SoButtonEvent_initClass() -> "void":
    """SoButtonEvent_initClass()"""
    return _coin.SoButtonEvent_initClass()

def SoButtonEvent_enumToString(enumval: 'SoButtonEvent::State', stringrep: 'SbString') -> "SbBool":
    """SoButtonEvent_enumToString(SoButtonEvent::State enumval, SbString stringrep) -> SbBool"""
    return _coin.SoButtonEvent_enumToString(enumval, stringrep)

class SoLocation2Event(SoEvent):
    """Proxy of C++ SoLocation2Event class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLocation2Event_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLocation2Event self) -> SoType"""
        return _coin.SoLocation2Event_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLocation2Event_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLocation2Event self) -> SoLocation2Event"""
        this = _coin.new_SoLocation2Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoLocation2Event
    __del__ = lambda self: None
SoLocation2Event_swigregister = _coin.SoLocation2Event_swigregister
SoLocation2Event_swigregister(SoLocation2Event)

def SoLocation2Event_getClassTypeId() -> "SoType":
    """SoLocation2Event_getClassTypeId() -> SoType"""
    return _coin.SoLocation2Event_getClassTypeId()

def SoLocation2Event_initClass() -> "void":
    """SoLocation2Event_initClass()"""
    return _coin.SoLocation2Event_initClass()

class SoMotion3Event(SoEvent):
    """Proxy of C++ SoMotion3Event class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMotion3Event_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMotion3Event self) -> SoType"""
        return _coin.SoMotion3Event_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMotion3Event_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMotion3Event self) -> SoMotion3Event"""
        this = _coin.new_SoMotion3Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMotion3Event
    __del__ = lambda self: None

    def setTranslation(self, t: 'SbVec3f') -> "void":
        """setTranslation(SoMotion3Event self, SbVec3f t)"""
        return _coin.SoMotion3Event_setTranslation(self, t)


    def getTranslation(self) -> "SbVec3f const &":
        """getTranslation(SoMotion3Event self) -> SbVec3f"""
        return _coin.SoMotion3Event_getTranslation(self)


    def setRotation(self, r: 'SbRotation') -> "void":
        """setRotation(SoMotion3Event self, SbRotation r)"""
        return _coin.SoMotion3Event_setRotation(self, r)


    def getRotation(self) -> "SbRotation const &":
        """getRotation(SoMotion3Event self) -> SbRotation"""
        return _coin.SoMotion3Event_getRotation(self)

SoMotion3Event_swigregister = _coin.SoMotion3Event_swigregister
SoMotion3Event_swigregister(SoMotion3Event)

def SoMotion3Event_getClassTypeId() -> "SoType":
    """SoMotion3Event_getClassTypeId() -> SoType"""
    return _coin.SoMotion3Event_getClassTypeId()

def SoMotion3Event_initClass() -> "void":
    """SoMotion3Event_initClass()"""
    return _coin.SoMotion3Event_initClass()

class SoKeyboardEvent(SoButtonEvent):
    """Proxy of C++ SoKeyboardEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoKeyboardEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoKeyboardEvent self) -> SoType"""
        return _coin.SoKeyboardEvent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoKeyboardEvent_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoKeyboardEvent self) -> SoKeyboardEvent"""
        this = _coin.new_SoKeyboardEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoKeyboardEvent
    __del__ = lambda self: None
    ANY = _coin.SoKeyboardEvent_ANY
    UNDEFINED = _coin.SoKeyboardEvent_UNDEFINED
    LEFT_SHIFT = _coin.SoKeyboardEvent_LEFT_SHIFT
    RIGHT_SHIFT = _coin.SoKeyboardEvent_RIGHT_SHIFT
    LEFT_CONTROL = _coin.SoKeyboardEvent_LEFT_CONTROL
    RIGHT_CONTROL = _coin.SoKeyboardEvent_RIGHT_CONTROL
    LEFT_ALT = _coin.SoKeyboardEvent_LEFT_ALT
    RIGHT_ALT = _coin.SoKeyboardEvent_RIGHT_ALT
    NUMBER_0 = _coin.SoKeyboardEvent_NUMBER_0
    NUMBER_1 = _coin.SoKeyboardEvent_NUMBER_1
    NUMBER_2 = _coin.SoKeyboardEvent_NUMBER_2
    NUMBER_3 = _coin.SoKeyboardEvent_NUMBER_3
    NUMBER_4 = _coin.SoKeyboardEvent_NUMBER_4
    NUMBER_5 = _coin.SoKeyboardEvent_NUMBER_5
    NUMBER_6 = _coin.SoKeyboardEvent_NUMBER_6
    NUMBER_7 = _coin.SoKeyboardEvent_NUMBER_7
    NUMBER_8 = _coin.SoKeyboardEvent_NUMBER_8
    NUMBER_9 = _coin.SoKeyboardEvent_NUMBER_9
    A = _coin.SoKeyboardEvent_A
    B = _coin.SoKeyboardEvent_B
    C = _coin.SoKeyboardEvent_C
    D = _coin.SoKeyboardEvent_D
    E = _coin.SoKeyboardEvent_E
    F = _coin.SoKeyboardEvent_F
    G = _coin.SoKeyboardEvent_G
    H = _coin.SoKeyboardEvent_H
    I = _coin.SoKeyboardEvent_I
    J = _coin.SoKeyboardEvent_J
    K = _coin.SoKeyboardEvent_K
    L = _coin.SoKeyboardEvent_L
    M = _coin.SoKeyboardEvent_M
    N = _coin.SoKeyboardEvent_N
    O = _coin.SoKeyboardEvent_O
    P = _coin.SoKeyboardEvent_P
    Q = _coin.SoKeyboardEvent_Q
    R = _coin.SoKeyboardEvent_R
    S = _coin.SoKeyboardEvent_S
    T = _coin.SoKeyboardEvent_T
    U = _coin.SoKeyboardEvent_U
    V = _coin.SoKeyboardEvent_V
    W = _coin.SoKeyboardEvent_W
    X = _coin.SoKeyboardEvent_X
    Y = _coin.SoKeyboardEvent_Y
    Z = _coin.SoKeyboardEvent_Z
    HOME = _coin.SoKeyboardEvent_HOME
    LEFT_ARROW = _coin.SoKeyboardEvent_LEFT_ARROW
    UP_ARROW = _coin.SoKeyboardEvent_UP_ARROW
    RIGHT_ARROW = _coin.SoKeyboardEvent_RIGHT_ARROW
    DOWN_ARROW = _coin.SoKeyboardEvent_DOWN_ARROW
    PAGE_UP = _coin.SoKeyboardEvent_PAGE_UP
    PAGE_DOWN = _coin.SoKeyboardEvent_PAGE_DOWN
    END = _coin.SoKeyboardEvent_END
    PRIOR = _coin.SoKeyboardEvent_PRIOR
    NEXT = _coin.SoKeyboardEvent_NEXT
    PAD_ENTER = _coin.SoKeyboardEvent_PAD_ENTER
    PAD_F1 = _coin.SoKeyboardEvent_PAD_F1
    PAD_F2 = _coin.SoKeyboardEvent_PAD_F2
    PAD_F3 = _coin.SoKeyboardEvent_PAD_F3
    PAD_F4 = _coin.SoKeyboardEvent_PAD_F4
    PAD_0 = _coin.SoKeyboardEvent_PAD_0
    PAD_1 = _coin.SoKeyboardEvent_PAD_1
    PAD_2 = _coin.SoKeyboardEvent_PAD_2
    PAD_3 = _coin.SoKeyboardEvent_PAD_3
    PAD_4 = _coin.SoKeyboardEvent_PAD_4
    PAD_5 = _coin.SoKeyboardEvent_PAD_5
    PAD_6 = _coin.SoKeyboardEvent_PAD_6
    PAD_7 = _coin.SoKeyboardEvent_PAD_7
    PAD_8 = _coin.SoKeyboardEvent_PAD_8
    PAD_9 = _coin.SoKeyboardEvent_PAD_9
    PAD_ADD = _coin.SoKeyboardEvent_PAD_ADD
    PAD_SUBTRACT = _coin.SoKeyboardEvent_PAD_SUBTRACT
    PAD_MULTIPLY = _coin.SoKeyboardEvent_PAD_MULTIPLY
    PAD_DIVIDE = _coin.SoKeyboardEvent_PAD_DIVIDE
    PAD_SPACE = _coin.SoKeyboardEvent_PAD_SPACE
    PAD_TAB = _coin.SoKeyboardEvent_PAD_TAB
    PAD_INSERT = _coin.SoKeyboardEvent_PAD_INSERT
    PAD_DELETE = _coin.SoKeyboardEvent_PAD_DELETE
    PAD_PERIOD = _coin.SoKeyboardEvent_PAD_PERIOD
    F1 = _coin.SoKeyboardEvent_F1
    F2 = _coin.SoKeyboardEvent_F2
    F3 = _coin.SoKeyboardEvent_F3
    F4 = _coin.SoKeyboardEvent_F4
    F5 = _coin.SoKeyboardEvent_F5
    F6 = _coin.SoKeyboardEvent_F6
    F7 = _coin.SoKeyboardEvent_F7
    F8 = _coin.SoKeyboardEvent_F8
    F9 = _coin.SoKeyboardEvent_F9
    F10 = _coin.SoKeyboardEvent_F10
    F11 = _coin.SoKeyboardEvent_F11
    F12 = _coin.SoKeyboardEvent_F12
    BACKSPACE = _coin.SoKeyboardEvent_BACKSPACE
    TAB = _coin.SoKeyboardEvent_TAB
    RETURN = _coin.SoKeyboardEvent_RETURN
    ENTER = _coin.SoKeyboardEvent_ENTER
    PAUSE = _coin.SoKeyboardEvent_PAUSE
    SCROLL_LOCK = _coin.SoKeyboardEvent_SCROLL_LOCK
    ESCAPE = _coin.SoKeyboardEvent_ESCAPE
    DELETE = _coin.SoKeyboardEvent_DELETE
    KEY_DELETE = _coin.SoKeyboardEvent_KEY_DELETE
    PRINT = _coin.SoKeyboardEvent_PRINT
    INSERT = _coin.SoKeyboardEvent_INSERT
    NUM_LOCK = _coin.SoKeyboardEvent_NUM_LOCK
    CAPS_LOCK = _coin.SoKeyboardEvent_CAPS_LOCK
    SHIFT_LOCK = _coin.SoKeyboardEvent_SHIFT_LOCK
    SPACE = _coin.SoKeyboardEvent_SPACE
    APOSTROPHE = _coin.SoKeyboardEvent_APOSTROPHE
    COMMA = _coin.SoKeyboardEvent_COMMA
    MINUS = _coin.SoKeyboardEvent_MINUS
    PERIOD = _coin.SoKeyboardEvent_PERIOD
    SLASH = _coin.SoKeyboardEvent_SLASH
    SEMICOLON = _coin.SoKeyboardEvent_SEMICOLON
    EQUAL = _coin.SoKeyboardEvent_EQUAL
    BRACKETLEFT = _coin.SoKeyboardEvent_BRACKETLEFT
    BACKSLASH = _coin.SoKeyboardEvent_BACKSLASH
    BRACKETRIGHT = _coin.SoKeyboardEvent_BRACKETRIGHT
    GRAVE = _coin.SoKeyboardEvent_GRAVE

    def setKey(self, key: 'SoKeyboardEvent::Key') -> "void":
        """setKey(SoKeyboardEvent self, SoKeyboardEvent::Key key)"""
        return _coin.SoKeyboardEvent_setKey(self, key)


    def getKey(self) -> "SoKeyboardEvent::Key":
        """getKey(SoKeyboardEvent self) -> SoKeyboardEvent::Key"""
        return _coin.SoKeyboardEvent_getKey(self)


    def setPrintableCharacter(self, c: 'char const') -> "void":
        """setPrintableCharacter(SoKeyboardEvent self, char const c)"""
        return _coin.SoKeyboardEvent_setPrintableCharacter(self, c)


    def getPrintableCharacter(self) -> "char":
        """getPrintableCharacter(SoKeyboardEvent self) -> char"""
        return _coin.SoKeyboardEvent_getPrintableCharacter(self)


    def isKeyPressEvent(e: 'SoEvent', whichKey: 'SoKeyboardEvent::Key') -> "SbBool":
        """isKeyPressEvent(SoEvent e, SoKeyboardEvent::Key whichKey) -> SbBool"""
        return _coin.SoKeyboardEvent_isKeyPressEvent(e, whichKey)

    isKeyPressEvent = staticmethod(isKeyPressEvent)

    def isKeyReleaseEvent(e: 'SoEvent', whichKey: 'SoKeyboardEvent::Key') -> "SbBool":
        """isKeyReleaseEvent(SoEvent e, SoKeyboardEvent::Key whichKey) -> SbBool"""
        return _coin.SoKeyboardEvent_isKeyReleaseEvent(e, whichKey)

    isKeyReleaseEvent = staticmethod(isKeyReleaseEvent)

    def enumToString(enumval: 'SoKeyboardEvent::Key', stringrep: 'SbString') -> "SbBool":
        """enumToString(SoKeyboardEvent::Key enumval, SbString stringrep) -> SbBool"""
        return _coin.SoKeyboardEvent_enumToString(enumval, stringrep)

    enumToString = staticmethod(enumToString)
SoKeyboardEvent_swigregister = _coin.SoKeyboardEvent_swigregister
SoKeyboardEvent_swigregister(SoKeyboardEvent)

def SoKeyboardEvent_getClassTypeId() -> "SoType":
    """SoKeyboardEvent_getClassTypeId() -> SoType"""
    return _coin.SoKeyboardEvent_getClassTypeId()

def SoKeyboardEvent_initClass() -> "void":
    """SoKeyboardEvent_initClass()"""
    return _coin.SoKeyboardEvent_initClass()

def SoKeyboardEvent_isKeyPressEvent(e: 'SoEvent', whichKey: 'SoKeyboardEvent::Key') -> "SbBool":
    """SoKeyboardEvent_isKeyPressEvent(SoEvent e, SoKeyboardEvent::Key whichKey) -> SbBool"""
    return _coin.SoKeyboardEvent_isKeyPressEvent(e, whichKey)

def SoKeyboardEvent_isKeyReleaseEvent(e: 'SoEvent', whichKey: 'SoKeyboardEvent::Key') -> "SbBool":
    """SoKeyboardEvent_isKeyReleaseEvent(SoEvent e, SoKeyboardEvent::Key whichKey) -> SbBool"""
    return _coin.SoKeyboardEvent_isKeyReleaseEvent(e, whichKey)

def SoKeyboardEvent_enumToString(enumval: 'SoKeyboardEvent::Key', stringrep: 'SbString') -> "SbBool":
    """SoKeyboardEvent_enumToString(SoKeyboardEvent::Key enumval, SbString stringrep) -> SbBool"""
    return _coin.SoKeyboardEvent_enumToString(enumval, stringrep)

class SoMouseButtonEvent(SoButtonEvent):
    """Proxy of C++ SoMouseButtonEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMouseButtonEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMouseButtonEvent self) -> SoType"""
        return _coin.SoMouseButtonEvent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMouseButtonEvent_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMouseButtonEvent self) -> SoMouseButtonEvent"""
        this = _coin.new_SoMouseButtonEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMouseButtonEvent
    __del__ = lambda self: None
    ANY = _coin.SoMouseButtonEvent_ANY
    BUTTON1 = _coin.SoMouseButtonEvent_BUTTON1
    BUTTON2 = _coin.SoMouseButtonEvent_BUTTON2
    BUTTON3 = _coin.SoMouseButtonEvent_BUTTON3
    BUTTON4 = _coin.SoMouseButtonEvent_BUTTON4
    BUTTON5 = _coin.SoMouseButtonEvent_BUTTON5

    def setButton(self, button: 'SoMouseButtonEvent::Button') -> "void":
        """setButton(SoMouseButtonEvent self, SoMouseButtonEvent::Button button)"""
        return _coin.SoMouseButtonEvent_setButton(self, button)


    def getButton(self) -> "SoMouseButtonEvent::Button":
        """getButton(SoMouseButtonEvent self) -> SoMouseButtonEvent::Button"""
        return _coin.SoMouseButtonEvent_getButton(self)


    def isButtonPressEvent(e: 'SoEvent', whichButton: 'SoMouseButtonEvent::Button') -> "SbBool":
        """isButtonPressEvent(SoEvent e, SoMouseButtonEvent::Button whichButton) -> SbBool"""
        return _coin.SoMouseButtonEvent_isButtonPressEvent(e, whichButton)

    isButtonPressEvent = staticmethod(isButtonPressEvent)

    def isButtonReleaseEvent(e: 'SoEvent', whichButton: 'SoMouseButtonEvent::Button') -> "SbBool":
        """isButtonReleaseEvent(SoEvent e, SoMouseButtonEvent::Button whichButton) -> SbBool"""
        return _coin.SoMouseButtonEvent_isButtonReleaseEvent(e, whichButton)

    isButtonReleaseEvent = staticmethod(isButtonReleaseEvent)

    def enumToString(enumval: 'SoMouseButtonEvent::Button', stringrep: 'SbString') -> "SbBool":
        """enumToString(SoMouseButtonEvent::Button enumval, SbString stringrep) -> SbBool"""
        return _coin.SoMouseButtonEvent_enumToString(enumval, stringrep)

    enumToString = staticmethod(enumToString)
SoMouseButtonEvent_swigregister = _coin.SoMouseButtonEvent_swigregister
SoMouseButtonEvent_swigregister(SoMouseButtonEvent)

def SoMouseButtonEvent_getClassTypeId() -> "SoType":
    """SoMouseButtonEvent_getClassTypeId() -> SoType"""
    return _coin.SoMouseButtonEvent_getClassTypeId()

def SoMouseButtonEvent_initClass() -> "void":
    """SoMouseButtonEvent_initClass()"""
    return _coin.SoMouseButtonEvent_initClass()

def SoMouseButtonEvent_isButtonPressEvent(e: 'SoEvent', whichButton: 'SoMouseButtonEvent::Button') -> "SbBool":
    """SoMouseButtonEvent_isButtonPressEvent(SoEvent e, SoMouseButtonEvent::Button whichButton) -> SbBool"""
    return _coin.SoMouseButtonEvent_isButtonPressEvent(e, whichButton)

def SoMouseButtonEvent_isButtonReleaseEvent(e: 'SoEvent', whichButton: 'SoMouseButtonEvent::Button') -> "SbBool":
    """SoMouseButtonEvent_isButtonReleaseEvent(SoEvent e, SoMouseButtonEvent::Button whichButton) -> SbBool"""
    return _coin.SoMouseButtonEvent_isButtonReleaseEvent(e, whichButton)

def SoMouseButtonEvent_enumToString(enumval: 'SoMouseButtonEvent::Button', stringrep: 'SbString') -> "SbBool":
    """SoMouseButtonEvent_enumToString(SoMouseButtonEvent::Button enumval, SbString stringrep) -> SbBool"""
    return _coin.SoMouseButtonEvent_enumToString(enumval, stringrep)

class SoSpaceballButtonEvent(SoButtonEvent):
    """Proxy of C++ SoSpaceballButtonEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSpaceballButtonEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSpaceballButtonEvent self) -> SoType"""
        return _coin.SoSpaceballButtonEvent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSpaceballButtonEvent_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSpaceballButtonEvent self) -> SoSpaceballButtonEvent"""
        this = _coin.new_SoSpaceballButtonEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSpaceballButtonEvent
    __del__ = lambda self: None
    ANY = _coin.SoSpaceballButtonEvent_ANY
    BUTTON1 = _coin.SoSpaceballButtonEvent_BUTTON1
    BUTTON2 = _coin.SoSpaceballButtonEvent_BUTTON2
    BUTTON3 = _coin.SoSpaceballButtonEvent_BUTTON3
    BUTTON4 = _coin.SoSpaceballButtonEvent_BUTTON4
    BUTTON5 = _coin.SoSpaceballButtonEvent_BUTTON5
    BUTTON6 = _coin.SoSpaceballButtonEvent_BUTTON6
    BUTTON7 = _coin.SoSpaceballButtonEvent_BUTTON7
    BUTTON8 = _coin.SoSpaceballButtonEvent_BUTTON8
    PICK = _coin.SoSpaceballButtonEvent_PICK

    def setButton(self, button: 'SoSpaceballButtonEvent::Button') -> "void":
        """setButton(SoSpaceballButtonEvent self, SoSpaceballButtonEvent::Button button)"""
        return _coin.SoSpaceballButtonEvent_setButton(self, button)


    def getButton(self) -> "SoSpaceballButtonEvent::Button":
        """getButton(SoSpaceballButtonEvent self) -> SoSpaceballButtonEvent::Button"""
        return _coin.SoSpaceballButtonEvent_getButton(self)


    def isButtonPressEvent(e: 'SoEvent', whichButton: 'SoSpaceballButtonEvent::Button') -> "SbBool":
        """isButtonPressEvent(SoEvent e, SoSpaceballButtonEvent::Button whichButton) -> SbBool"""
        return _coin.SoSpaceballButtonEvent_isButtonPressEvent(e, whichButton)

    isButtonPressEvent = staticmethod(isButtonPressEvent)

    def isButtonReleaseEvent(e: 'SoEvent', whichButton: 'SoSpaceballButtonEvent::Button') -> "SbBool":
        """isButtonReleaseEvent(SoEvent e, SoSpaceballButtonEvent::Button whichButton) -> SbBool"""
        return _coin.SoSpaceballButtonEvent_isButtonReleaseEvent(e, whichButton)

    isButtonReleaseEvent = staticmethod(isButtonReleaseEvent)

    def enumToString(enumval: 'SoSpaceballButtonEvent::Button', stringrep: 'SbString') -> "SbBool":
        """enumToString(SoSpaceballButtonEvent::Button enumval, SbString stringrep) -> SbBool"""
        return _coin.SoSpaceballButtonEvent_enumToString(enumval, stringrep)

    enumToString = staticmethod(enumToString)
SoSpaceballButtonEvent_swigregister = _coin.SoSpaceballButtonEvent_swigregister
SoSpaceballButtonEvent_swigregister(SoSpaceballButtonEvent)

def SoSpaceballButtonEvent_getClassTypeId() -> "SoType":
    """SoSpaceballButtonEvent_getClassTypeId() -> SoType"""
    return _coin.SoSpaceballButtonEvent_getClassTypeId()

def SoSpaceballButtonEvent_initClass() -> "void":
    """SoSpaceballButtonEvent_initClass()"""
    return _coin.SoSpaceballButtonEvent_initClass()

def SoSpaceballButtonEvent_isButtonPressEvent(e: 'SoEvent', whichButton: 'SoSpaceballButtonEvent::Button') -> "SbBool":
    """SoSpaceballButtonEvent_isButtonPressEvent(SoEvent e, SoSpaceballButtonEvent::Button whichButton) -> SbBool"""
    return _coin.SoSpaceballButtonEvent_isButtonPressEvent(e, whichButton)

def SoSpaceballButtonEvent_isButtonReleaseEvent(e: 'SoEvent', whichButton: 'SoSpaceballButtonEvent::Button') -> "SbBool":
    """SoSpaceballButtonEvent_isButtonReleaseEvent(SoEvent e, SoSpaceballButtonEvent::Button whichButton) -> SbBool"""
    return _coin.SoSpaceballButtonEvent_isButtonReleaseEvent(e, whichButton)

def SoSpaceballButtonEvent_enumToString(enumval: 'SoSpaceballButtonEvent::Button', stringrep: 'SbString') -> "SbBool":
    """SoSpaceballButtonEvent_enumToString(SoSpaceballButtonEvent::Button enumval, SbString stringrep) -> SbBool"""
    return _coin.SoSpaceballButtonEvent_enumToString(enumval, stringrep)

class SbBox2s(object):
    """Proxy of C++ SbBox2s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox2s self) -> SbBox2s
        __init__(SbBox2s self, short xmin, short ymin, short xmax, short ymax) -> SbBox2s
        __init__(SbBox2s self, SbVec2s minpoint, SbVec2s maxpoint) -> SbBox2s
        __init__(SbBox2s self, SbBox2i32 box) -> SbBox2s
        __init__(SbBox2s self, SbBox2f box) -> SbBox2s
        __init__(SbBox2s self, SbBox2d box) -> SbBox2s
        """
        this = _coin.new_SbBox2s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox2s &":
        """
        setBounds(SbBox2s self, short xmin, short ymin, short xmax, short ymax) -> SbBox2s
        setBounds(SbBox2s self, SbVec2s minpoint, SbVec2s maxpoint) -> SbBox2s
        setBounds(SbBox2s self, SbBox2i32 box) -> SbBox2s
        setBounds(SbBox2s self, SbBox2f box) -> SbBox2s
        setBounds(SbBox2s self, SbBox2d box) -> SbBox2s
        """
        return _coin.SbBox2s_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox2s self, short & xmin, short & ymin, short & xmax, short & ymax)
        getBounds(SbBox2s self, SbVec2s minpoint, SbVec2s maxpoint)
        """
        return _coin.SbBox2s_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec2s &":
        """
        getMin(SbBox2s self) -> SbVec2s
        getMin(SbBox2s self) -> SbVec2s
        """
        return _coin.SbBox2s_getMin(self, *args)


    def getMax(self, *args) -> "SbVec2s &":
        """
        getMax(SbBox2s self) -> SbVec2s
        getMax(SbBox2s self) -> SbVec2s
        """
        return _coin.SbBox2s_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox2s self, SbVec2s point)
        extendBy(SbBox2s self, SbBox2s box)
        """
        return _coin.SbBox2s_extendBy(self, *args)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox2s self)"""
        return _coin.SbBox2s_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox2s self) -> SbBool"""
        return _coin.SbBox2s_isEmpty(self)


    def hasArea(self) -> "SbBool":
        """hasArea(SbBox2s self) -> SbBool"""
        return _coin.SbBox2s_hasArea(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox2s self, SbVec2s point) -> SbBool
        intersect(SbBox2s self, SbBox2s box) -> SbBool
        """
        return _coin.SbBox2s_intersect(self, *args)


    def getCenter(self) -> "SbVec2f":
        """getCenter(SbBox2s self) -> SbVec2f"""
        return _coin.SbBox2s_getCenter(self)


    def getOrigin(self, originX: 'short &', originY: 'short &') -> "void":
        """getOrigin(SbBox2s self, short & originX, short & originY)"""
        return _coin.SbBox2s_getOrigin(self, originX, originY)


    def getSize(self, *args) -> "SbVec2s":
        """
        getSize(SbBox2s self, short & sizeX, short & sizeY)
        getSize(SbBox2s self) -> SbVec2s
        """
        return _coin.SbBox2s_getSize(self, *args)


    def getAspectRatio(self) -> "float":
        """getAspectRatio(SbBox2s self) -> float"""
        return _coin.SbBox2s_getAspectRatio(self)


    def __eq__(self, u: 'SbBox2s') -> "int":
        """__eq__(SbBox2s self, SbBox2s u) -> int"""
        return _coin.SbBox2s___eq__(self, u)


    def __ne__(self, u: 'SbBox2s') -> "int":
        """__ne__(SbBox2s self, SbBox2s u) -> int"""
        return _coin.SbBox2s___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbBox2s
    __del__ = lambda self: None
SbBox2s_swigregister = _coin.SbBox2s_swigregister
SbBox2s_swigregister(SbBox2s)

class SoSFBox2s(SoSField):
    """Proxy of C++ SoSFBox2s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox2s self) -> SoSFBox2s"""
        this = _coin.new_SoSFBox2s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox2s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox2s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox2s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox2s self) -> SoType"""
        return _coin.SoSFBox2s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox2s self, SoField field)"""
        return _coin.SoSFBox2s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox2s self, SoField field) -> SbBool"""
        return _coin.SoSFBox2s_isSame(self, field)


    def __eq__(self, field: 'SoSFBox2s') -> "int":
        """__eq__(SoSFBox2s self, SoSFBox2s field) -> int"""
        return _coin.SoSFBox2s___eq__(self, field)


    def __ne__(self, field: 'SoSFBox2s') -> "int":
        """__ne__(SoSFBox2s self, SoSFBox2s field) -> int"""
        return _coin.SoSFBox2s___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox2s_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox2s self, SbBox2s newvalue)
        setValue(SoSFBox2s self, short xmin, short ymin, short xmax, short ymax)
        setValue(SoSFBox2s self, SbVec2s minvec, SbVec2s maxvec)
        """
        return _coin.SoSFBox2s_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox2s self) -> SbBox2s
        getValue(SoSFBox2s self, SbBox2s box)
        """
        return _coin.SoSFBox2s_getValue(self, *args)

SoSFBox2s_swigregister = _coin.SoSFBox2s_swigregister
SoSFBox2s_swigregister(SoSFBox2s)

def SoSFBox2s_createInstance() -> "void *":
    """SoSFBox2s_createInstance() -> void *"""
    return _coin.SoSFBox2s_createInstance()

def SoSFBox2s_getClassTypeId() -> "SoType":
    """SoSFBox2s_getClassTypeId() -> SoType"""
    return _coin.SoSFBox2s_getClassTypeId()

def SoSFBox2s_initClass() -> "void":
    """SoSFBox2s_initClass()"""
    return _coin.SoSFBox2s_initClass()

class SbVec2i32(object):
    """Proxy of C++ SbVec2i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec2i32 self) -> SbVec2i32
        __init__(SbVec2i32 self, int32_t const [2] v) -> SbVec2i32
        __init__(SbVec2i32 self, int32_t x, int32_t y) -> SbVec2i32
        __init__(SbVec2i32 self, SbVec2ui32 const & v) -> SbVec2i32
        __init__(SbVec2i32 self, SbVec2b v) -> SbVec2i32
        __init__(SbVec2i32 self, SbVec2s v) -> SbVec2i32
        __init__(SbVec2i32 self, SbVec2f v) -> SbVec2i32
        __init__(SbVec2i32 self, SbVec2d v) -> SbVec2i32
        """
        this = _coin.new_SbVec2i32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec2i32 &":
        """
        setValue(SbVec2i32 self, int32_t const [2] v) -> SbVec2i32
        setValue(SbVec2i32 self, int32_t x, int32_t y) -> SbVec2i32
        setValue(SbVec2i32 self, SbVec2ui32 const & v) -> SbVec2i32
        setValue(SbVec2i32 self, SbVec2b v) -> SbVec2i32
        setValue(SbVec2i32 self, SbVec2s v) -> SbVec2i32
        setValue(SbVec2i32 self, SbVec2f v) -> SbVec2i32
        setValue(SbVec2i32 self, SbVec2d v) -> SbVec2i32
        """
        return _coin.SbVec2i32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec2i32 self) -> int32_t const
        getValue(SbVec2i32 self, int32_t & x, int32_t & y)
        """
        return _coin.SbVec2i32_getValue(self, *args)


    def dot(self, v: 'SbVec2i32') -> "int32_t":
        """dot(SbVec2i32 self, SbVec2i32 v) -> int32_t"""
        return _coin.SbVec2i32_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec2i32 self)"""
        return _coin.SbVec2i32_negate(self)


    def __imul__(self, *args) -> "SbVec2i32 &":
        """
        __imul__(SbVec2i32 self, int d) -> SbVec2i32
        __imul__(SbVec2i32 self, double d) -> SbVec2i32
        """
        return _coin.SbVec2i32___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec2i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec2i32') -> "SbVec2i32 &":
        """__iadd__(SbVec2i32 self, SbVec2i32 v) -> SbVec2i32"""
        return _coin.SbVec2i32___iadd__(self, v)


    def __isub__(self, v: 'SbVec2i32') -> "SbVec2i32 &":
        """__isub__(SbVec2i32 self, SbVec2i32 v) -> SbVec2i32"""
        return _coin.SbVec2i32___isub__(self, v)


    def __neg__(self) -> "SbVec2i32":
        """__neg__(SbVec2i32 self) -> SbVec2i32"""
        return _coin.SbVec2i32___neg__(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec2i32 self, FILE * fp)"""
        return _coin.SbVec2i32_output(self, fp)

    __swig_destroy__ = _coin.delete_SbVec2i32
    __del__ = lambda self: None
SbVec2i32_swigregister = _coin.SbVec2i32_swigregister
SbVec2i32_swigregister(SbVec2i32)

class SbBox2i32(object):
    """Proxy of C++ SbBox2i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox2i32 self) -> SbBox2i32
        __init__(SbBox2i32 self, int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax) -> SbBox2i32
        __init__(SbBox2i32 self, SbVec2i32 minpoint, SbVec2i32 maxpoint) -> SbBox2i32
        __init__(SbBox2i32 self, SbBox2s box) -> SbBox2i32
        __init__(SbBox2i32 self, SbBox2f box) -> SbBox2i32
        __init__(SbBox2i32 self, SbBox2d box) -> SbBox2i32
        """
        this = _coin.new_SbBox2i32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox2i32 &":
        """
        setBounds(SbBox2i32 self, int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax) -> SbBox2i32
        setBounds(SbBox2i32 self, SbVec2i32 minpoint, SbVec2i32 maxpoint) -> SbBox2i32
        setBounds(SbBox2i32 self, SbBox2s box) -> SbBox2i32
        setBounds(SbBox2i32 self, SbBox2f box) -> SbBox2i32
        setBounds(SbBox2i32 self, SbBox2d box) -> SbBox2i32
        """
        return _coin.SbBox2i32_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox2i32 self, int32_t & xmin, int32_t & ymin, int32_t & xmax, int32_t & ymax)
        getBounds(SbBox2i32 self, SbVec2i32 minpoint, SbVec2i32 maxpoint)
        """
        return _coin.SbBox2i32_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec2i32 &":
        """
        getMin(SbBox2i32 self) -> SbVec2i32
        getMin(SbBox2i32 self) -> SbVec2i32
        """
        return _coin.SbBox2i32_getMin(self, *args)


    def getMax(self, *args) -> "SbVec2i32 &":
        """
        getMax(SbBox2i32 self) -> SbVec2i32
        getMax(SbBox2i32 self) -> SbVec2i32
        """
        return _coin.SbBox2i32_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox2i32 self, SbVec2i32 point)
        extendBy(SbBox2i32 self, SbBox2i32 box)
        """
        return _coin.SbBox2i32_extendBy(self, *args)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox2i32 self)"""
        return _coin.SbBox2i32_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox2i32 self) -> SbBool"""
        return _coin.SbBox2i32_isEmpty(self)


    def hasArea(self) -> "SbBool":
        """hasArea(SbBox2i32 self) -> SbBool"""
        return _coin.SbBox2i32_hasArea(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox2i32 self, SbVec2i32 point) -> SbBool
        intersect(SbBox2i32 self, SbBox2i32 box) -> SbBool
        """
        return _coin.SbBox2i32_intersect(self, *args)


    def getCenter(self) -> "SbVec2f":
        """getCenter(SbBox2i32 self) -> SbVec2f"""
        return _coin.SbBox2i32_getCenter(self)


    def getOrigin(self, originX: 'int32_t &', originY: 'int32_t &') -> "void":
        """getOrigin(SbBox2i32 self, int32_t & originX, int32_t & originY)"""
        return _coin.SbBox2i32_getOrigin(self, originX, originY)


    def getSize(self, *args) -> "SbVec2i32":
        """
        getSize(SbBox2i32 self, int32_t & sizeX, int32_t & sizeY)
        getSize(SbBox2i32 self) -> SbVec2i32
        """
        return _coin.SbBox2i32_getSize(self, *args)


    def getAspectRatio(self) -> "float":
        """getAspectRatio(SbBox2i32 self) -> float"""
        return _coin.SbBox2i32_getAspectRatio(self)

    __swig_destroy__ = _coin.delete_SbBox2i32
    __del__ = lambda self: None
SbBox2i32_swigregister = _coin.SbBox2i32_swigregister
SbBox2i32_swigregister(SbBox2i32)

class SoSFBox2i32(SoSField):
    """Proxy of C++ SoSFBox2i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox2i32 self) -> SoSFBox2i32"""
        this = _coin.new_SoSFBox2i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox2i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox2i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox2i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox2i32 self) -> SoType"""
        return _coin.SoSFBox2i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox2i32 self, SoField field)"""
        return _coin.SoSFBox2i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox2i32 self, SoField field) -> SbBool"""
        return _coin.SoSFBox2i32_isSame(self, field)


    def __eq__(self, field: 'SoSFBox2i32') -> "int":
        """__eq__(SoSFBox2i32 self, SoSFBox2i32 field) -> int"""
        return _coin.SoSFBox2i32___eq__(self, field)


    def __ne__(self, field: 'SoSFBox2i32') -> "int":
        """__ne__(SoSFBox2i32 self, SoSFBox2i32 field) -> int"""
        return _coin.SoSFBox2i32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox2i32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox2i32 self, SbBox2i32 newvalue)
        setValue(SoSFBox2i32 self, int32_t xmin, int32_t ymin, int32_t xmax, int32_t ymax)
        setValue(SoSFBox2i32 self, SbVec2i32 minvec, SbVec2i32 maxvec)
        """
        return _coin.SoSFBox2i32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox2i32 self) -> SbBox2i32
        getValue(SoSFBox2i32 self, SbBox2i32 box)
        """
        return _coin.SoSFBox2i32_getValue(self, *args)

SoSFBox2i32_swigregister = _coin.SoSFBox2i32_swigregister
SoSFBox2i32_swigregister(SoSFBox2i32)

def SoSFBox2i32_createInstance() -> "void *":
    """SoSFBox2i32_createInstance() -> void *"""
    return _coin.SoSFBox2i32_createInstance()

def SoSFBox2i32_getClassTypeId() -> "SoType":
    """SoSFBox2i32_getClassTypeId() -> SoType"""
    return _coin.SoSFBox2i32_getClassTypeId()

def SoSFBox2i32_initClass() -> "void":
    """SoSFBox2i32_initClass()"""
    return _coin.SoSFBox2i32_initClass()

class SbBox2f(object):
    """Proxy of C++ SbBox2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox2f self) -> SbBox2f
        __init__(SbBox2f self, float xmin, float ymin, float xmax, float ymax) -> SbBox2f
        __init__(SbBox2f self, SbVec2f minpoint, SbVec2f maxpoint) -> SbBox2f
        __init__(SbBox2f self, SbBox2d box) -> SbBox2f
        __init__(SbBox2f self, SbBox2s box) -> SbBox2f
        __init__(SbBox2f self, SbBox2i32 box) -> SbBox2f
        """
        this = _coin.new_SbBox2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox2f &":
        """
        setBounds(SbBox2f self, float xmin, float ymin, float xmax, float ymax) -> SbBox2f
        setBounds(SbBox2f self, SbVec2f minpoint, SbVec2f maxpoint) -> SbBox2f
        setBounds(SbBox2f self, SbBox2d box) -> SbBox2f
        setBounds(SbBox2f self, SbBox2s box) -> SbBox2f
        setBounds(SbBox2f self, SbBox2i32 box) -> SbBox2f
        """
        return _coin.SbBox2f_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox2f self, float & xmin, float & ymin, float & xmax, float & ymax)
        getBounds(SbBox2f self, SbVec2f minpoint, SbVec2f maxpoint)
        """
        return _coin.SbBox2f_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec2f &":
        """
        getMin(SbBox2f self) -> SbVec2f
        getMin(SbBox2f self) -> SbVec2f
        """
        return _coin.SbBox2f_getMin(self, *args)


    def getMax(self, *args) -> "SbVec2f &":
        """
        getMax(SbBox2f self) -> SbVec2f
        getMax(SbBox2f self) -> SbVec2f
        """
        return _coin.SbBox2f_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox2f self, SbVec2f point)
        extendBy(SbBox2f self, SbBox2f box)
        """
        return _coin.SbBox2f_extendBy(self, *args)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox2f self)"""
        return _coin.SbBox2f_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox2f self) -> SbBool"""
        return _coin.SbBox2f_isEmpty(self)


    def hasArea(self) -> "SbBool":
        """hasArea(SbBox2f self) -> SbBool"""
        return _coin.SbBox2f_hasArea(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox2f self, SbVec2f point) -> SbBool
        intersect(SbBox2f self, SbBox2f box) -> SbBool
        """
        return _coin.SbBox2f_intersect(self, *args)


    def getClosestPoint(self, point: 'SbVec2f') -> "SbVec2f":
        """getClosestPoint(SbBox2f self, SbVec2f point) -> SbVec2f"""
        return _coin.SbBox2f_getClosestPoint(self, point)


    def getCenter(self) -> "SbVec2f":
        """getCenter(SbBox2f self) -> SbVec2f"""
        return _coin.SbBox2f_getCenter(self)


    def getOrigin(self, originX: 'float &', originY: 'float &') -> "void":
        """getOrigin(SbBox2f self, float & originX, float & originY)"""
        return _coin.SbBox2f_getOrigin(self, originX, originY)


    def getSize(self, *args) -> "SbVec2f":
        """
        getSize(SbBox2f self, float & sizeX, float & sizeY)
        getSize(SbBox2f self) -> SbVec2f
        """
        return _coin.SbBox2f_getSize(self, *args)


    def getAspectRatio(self) -> "float":
        """getAspectRatio(SbBox2f self) -> float"""
        return _coin.SbBox2f_getAspectRatio(self)


    def __eq__(self, u: 'SbBox2f') -> "int":
        """__eq__(SbBox2f self, SbBox2f u) -> int"""
        return _coin.SbBox2f___eq__(self, u)


    def __ne__(self, u: 'SbBox2f') -> "int":
        """__ne__(SbBox2f self, SbBox2f u) -> int"""
        return _coin.SbBox2f___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbBox2f
    __del__ = lambda self: None
SbBox2f_swigregister = _coin.SbBox2f_swigregister
SbBox2f_swigregister(SbBox2f)

class SoSFBox2f(SoSField):
    """Proxy of C++ SoSFBox2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox2f self) -> SoSFBox2f"""
        this = _coin.new_SoSFBox2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox2f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox2f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox2f self) -> SoType"""
        return _coin.SoSFBox2f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox2f self, SoField field)"""
        return _coin.SoSFBox2f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox2f self, SoField field) -> SbBool"""
        return _coin.SoSFBox2f_isSame(self, field)


    def __eq__(self, field: 'SoSFBox2f') -> "int":
        """__eq__(SoSFBox2f self, SoSFBox2f field) -> int"""
        return _coin.SoSFBox2f___eq__(self, field)


    def __ne__(self, field: 'SoSFBox2f') -> "int":
        """__ne__(SoSFBox2f self, SoSFBox2f field) -> int"""
        return _coin.SoSFBox2f___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox2f_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox2f self, SbBox2f newvalue)
        setValue(SoSFBox2f self, float xmin, float ymin, float xmax, float ymax)
        setValue(SoSFBox2f self, SbVec2f minvec, SbVec2f maxvec)
        """
        return _coin.SoSFBox2f_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox2f self) -> SbBox2f
        getValue(SoSFBox2f self, SbBox2f box)
        """
        return _coin.SoSFBox2f_getValue(self, *args)

SoSFBox2f_swigregister = _coin.SoSFBox2f_swigregister
SoSFBox2f_swigregister(SoSFBox2f)

def SoSFBox2f_createInstance() -> "void *":
    """SoSFBox2f_createInstance() -> void *"""
    return _coin.SoSFBox2f_createInstance()

def SoSFBox2f_getClassTypeId() -> "SoType":
    """SoSFBox2f_getClassTypeId() -> SoType"""
    return _coin.SoSFBox2f_getClassTypeId()

def SoSFBox2f_initClass() -> "void":
    """SoSFBox2f_initClass()"""
    return _coin.SoSFBox2f_initClass()

class SbVec2d(object):
    """Proxy of C++ SbVec2d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec2d self) -> SbVec2d
        __init__(SbVec2d self, double const [2] v) -> SbVec2d
        __init__(SbVec2d self, double x, double y) -> SbVec2d
        __init__(SbVec2d self, SbVec2f v) -> SbVec2d
        __init__(SbVec2d self, SbVec2b v) -> SbVec2d
        __init__(SbVec2d self, SbVec2s v) -> SbVec2d
        __init__(SbVec2d self, SbVec2i32 v) -> SbVec2d
        """
        this = _coin.new_SbVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec2d &":
        """
        setValue(SbVec2d self, double const [2] v) -> SbVec2d
        setValue(SbVec2d self, double x, double y) -> SbVec2d
        setValue(SbVec2d self, SbVec2f v) -> SbVec2d
        setValue(SbVec2d self, SbVec2b v) -> SbVec2d
        setValue(SbVec2d self, SbVec2s v) -> SbVec2d
        setValue(SbVec2d self, SbVec2i32 v) -> SbVec2d
        """
        return _coin.SbVec2d_setValue(self, *args)


    def getValue(self) -> "void":
        """getValue(SbVec2d self)"""
        return _coin.SbVec2d_getValue(self)


    def equals(self, v: 'SbVec2d', tolerance: 'double') -> "SbBool":
        """equals(SbVec2d self, SbVec2d v, double tolerance) -> SbBool"""
        return _coin.SbVec2d_equals(self, v, tolerance)


    def dot(self, v: 'SbVec2d') -> "double":
        """dot(SbVec2d self, SbVec2d v) -> double"""
        return _coin.SbVec2d_dot(self, v)


    def length(self) -> "double":
        """length(SbVec2d self) -> double"""
        return _coin.SbVec2d_length(self)


    def sqrLength(self) -> "double":
        """sqrLength(SbVec2d self) -> double"""
        return _coin.SbVec2d_sqrLength(self)


    def normalize(self) -> "double":
        """normalize(SbVec2d self) -> double"""
        return _coin.SbVec2d_normalize(self)


    def negate(self) -> "void":
        """negate(SbVec2d self)"""
        return _coin.SbVec2d_negate(self)


    def __imul__(self, d: 'double') -> "SbVec2d &":
        """__imul__(SbVec2d self, double d) -> SbVec2d"""
        return _coin.SbVec2d___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec2d') -> "SbVec2d &":
        """__iadd__(SbVec2d self, SbVec2d v) -> SbVec2d"""
        return _coin.SbVec2d___iadd__(self, v)


    def __isub__(self, v: 'SbVec2d') -> "SbVec2d &":
        """__isub__(SbVec2d self, SbVec2d v) -> SbVec2d"""
        return _coin.SbVec2d___isub__(self, v)


    def __neg__(self) -> "SbVec2d":
        """__neg__(SbVec2d self) -> SbVec2d"""
        return _coin.SbVec2d___neg__(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec2d self, FILE * fp)"""
        return _coin.SbVec2d_output(self, fp)


    def __add__(self, u: 'SbVec2d') -> "SbVec2d":
        """__add__(SbVec2d self, SbVec2d u) -> SbVec2d"""
        return _coin.SbVec2d___add__(self, u)


    def __sub__(self, u: 'SbVec2d') -> "SbVec2d":
        """__sub__(SbVec2d self, SbVec2d u) -> SbVec2d"""
        return _coin.SbVec2d___sub__(self, u)


    def __mul__(self, d: 'float const') -> "SbVec2d":
        """__mul__(SbVec2d self, float const d) -> SbVec2d"""
        return _coin.SbVec2d___mul__(self, d)


    def __rmul__(self, d: 'float const') -> "SbVec2d":
        """__rmul__(SbVec2d self, float const d) -> SbVec2d"""
        return _coin.SbVec2d___rmul__(self, d)


    def __div__(self, d: 'float const') -> "SbVec2d":
        """__div__(SbVec2d self, float const d) -> SbVec2d"""
        return _coin.SbVec2d___div__(self, d)


    def __truediv__(self, d: 'float const') -> "SbVec2d":
        """__truediv__(SbVec2d self, float const d) -> SbVec2d"""
        return _coin.SbVec2d___truediv__(self, d)


    def __eq__(self, u: 'SbVec2d') -> "int":
        """__eq__(SbVec2d self, SbVec2d u) -> int"""
        return _coin.SbVec2d___eq__(self, u)


    def __nq__(self, u: 'SbVec2d') -> "int":
        """__nq__(SbVec2d self, SbVec2d u) -> int"""
        return _coin.SbVec2d___nq__(self, u)


    def __getitem__(self, i: 'int') -> "double":
        """__getitem__(SbVec2d self, int i) -> double"""
        return _coin.SbVec2d___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'double') -> "void":
        """__setitem__(SbVec2d self, int i, double value)"""
        return _coin.SbVec2d___setitem__(self, i, value)


    def __iter__(self):
       for i in range(2):
          yield self[i]

    def __len__(self):
          return 2

    __swig_destroy__ = _coin.delete_SbVec2d
    __del__ = lambda self: None
SbVec2d_swigregister = _coin.SbVec2d_swigregister
SbVec2d_swigregister(SbVec2d)

class SbBox2d(object):
    """Proxy of C++ SbBox2d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox2d self) -> SbBox2d
        __init__(SbBox2d self, double xmin, double ymin, double xmax, double ymax) -> SbBox2d
        __init__(SbBox2d self, SbVec2d minpoint, SbVec2d maxpoint) -> SbBox2d
        __init__(SbBox2d self, SbBox2f box) -> SbBox2d
        __init__(SbBox2d self, SbBox2s box) -> SbBox2d
        __init__(SbBox2d self, SbBox2i32 box) -> SbBox2d
        """
        this = _coin.new_SbBox2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox2d &":
        """
        setBounds(SbBox2d self, double xmin, double ymin, double xmax, double ymax) -> SbBox2d
        setBounds(SbBox2d self, SbVec2d minpoint, SbVec2d maxpoint) -> SbBox2d
        setBounds(SbBox2d self, SbBox2f box) -> SbBox2d
        setBounds(SbBox2d self, SbBox2s box) -> SbBox2d
        setBounds(SbBox2d self, SbBox2i32 box) -> SbBox2d
        """
        return _coin.SbBox2d_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox2d self, double & xmin, double & ymin, double & xmax, double & ymax)
        getBounds(SbBox2d self, SbVec2d minpoint, SbVec2d maxpoint)
        """
        return _coin.SbBox2d_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec2d &":
        """
        getMin(SbBox2d self) -> SbVec2d
        getMin(SbBox2d self) -> SbVec2d
        """
        return _coin.SbBox2d_getMin(self, *args)


    def getMax(self, *args) -> "SbVec2d &":
        """
        getMax(SbBox2d self) -> SbVec2d
        getMax(SbBox2d self) -> SbVec2d
        """
        return _coin.SbBox2d_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox2d self, SbVec2d point)
        extendBy(SbBox2d self, SbBox2d box)
        """
        return _coin.SbBox2d_extendBy(self, *args)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox2d self)"""
        return _coin.SbBox2d_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox2d self) -> SbBool"""
        return _coin.SbBox2d_isEmpty(self)


    def hasArea(self) -> "SbBool":
        """hasArea(SbBox2d self) -> SbBool"""
        return _coin.SbBox2d_hasArea(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox2d self, SbVec2d point) -> SbBool
        intersect(SbBox2d self, SbBox2d box) -> SbBool
        """
        return _coin.SbBox2d_intersect(self, *args)


    def getClosestPoint(self, p: 'SbVec2d') -> "SbVec2d":
        """getClosestPoint(SbBox2d self, SbVec2d p) -> SbVec2d"""
        return _coin.SbBox2d_getClosestPoint(self, p)


    def findIntersection(self, a: 'SbVec2d', b: 'SbVec2d', ia: 'SbVec2d', ib: 'SbVec2d') -> "SbBool":
        """findIntersection(SbBox2d self, SbVec2d a, SbVec2d b, SbVec2d ia, SbVec2d ib) -> SbBool"""
        return _coin.SbBox2d_findIntersection(self, a, b, ia, ib)


    def getCenter(self) -> "SbVec2d":
        """getCenter(SbBox2d self) -> SbVec2d"""
        return _coin.SbBox2d_getCenter(self)


    def getOrigin(self, originX: 'double &', originY: 'double &') -> "void":
        """getOrigin(SbBox2d self, double & originX, double & originY)"""
        return _coin.SbBox2d_getOrigin(self, originX, originY)


    def getSize(self, *args) -> "SbVec2d":
        """
        getSize(SbBox2d self, double & sizeX, double & sizeY)
        getSize(SbBox2d self) -> SbVec2d
        """
        return _coin.SbBox2d_getSize(self, *args)


    def getAspectRatio(self) -> "double":
        """getAspectRatio(SbBox2d self) -> double"""
        return _coin.SbBox2d_getAspectRatio(self)


    def __eq__(self, u: 'SbBox2d') -> "int":
        """__eq__(SbBox2d self, SbBox2d u) -> int"""
        return _coin.SbBox2d___eq__(self, u)


    def __ne__(self, u: 'SbBox2d') -> "int":
        """__ne__(SbBox2d self, SbBox2d u) -> int"""
        return _coin.SbBox2d___ne__(self, u)


    def setValue(self, u: 'SbBox2d') -> "SbBox2d &":
        """setValue(SbBox2d self, SbBox2d u) -> SbBox2d"""
        return _coin.SbBox2d_setValue(self, u)

    __swig_destroy__ = _coin.delete_SbBox2d
    __del__ = lambda self: None
SbBox2d_swigregister = _coin.SbBox2d_swigregister
SbBox2d_swigregister(SbBox2d)

class SoSFBox2d(SoSField):
    """Proxy of C++ SoSFBox2d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox2d self) -> SoSFBox2d"""
        this = _coin.new_SoSFBox2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox2d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox2d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox2d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox2d self) -> SoType"""
        return _coin.SoSFBox2d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox2d self, SoField field)"""
        return _coin.SoSFBox2d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox2d self, SoField field) -> SbBool"""
        return _coin.SoSFBox2d_isSame(self, field)


    def __eq__(self, field: 'SoSFBox2d') -> "int":
        """__eq__(SoSFBox2d self, SoSFBox2d field) -> int"""
        return _coin.SoSFBox2d___eq__(self, field)


    def __ne__(self, field: 'SoSFBox2d') -> "int":
        """__ne__(SoSFBox2d self, SoSFBox2d field) -> int"""
        return _coin.SoSFBox2d___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox2d_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox2d self, SbBox2d newvalue)
        setValue(SoSFBox2d self, double xmin, double ymin, double xmax, double ymax)
        setValue(SoSFBox2d self, SbVec2d minvec, SbVec2d maxvec)
        """
        return _coin.SoSFBox2d_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox2d self) -> SbBox2d
        getValue(SoSFBox2d self, SbBox2d box)
        """
        return _coin.SoSFBox2d_getValue(self, *args)

SoSFBox2d_swigregister = _coin.SoSFBox2d_swigregister
SoSFBox2d_swigregister(SoSFBox2d)

def SoSFBox2d_createInstance() -> "void *":
    """SoSFBox2d_createInstance() -> void *"""
    return _coin.SoSFBox2d_createInstance()

def SoSFBox2d_getClassTypeId() -> "SoType":
    """SoSFBox2d_getClassTypeId() -> SoType"""
    return _coin.SoSFBox2d_getClassTypeId()

def SoSFBox2d_initClass() -> "void":
    """SoSFBox2d_initClass()"""
    return _coin.SoSFBox2d_initClass()

class SbBox3s(object):
    """Proxy of C++ SbBox3s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox3s self) -> SbBox3s
        __init__(SbBox3s self, short xmin, short ymin, short zmin, short xmax, short ymax, short zmax) -> SbBox3s
        __init__(SbBox3s self, SbVec3s minpoint, SbVec3s maxpoint) -> SbBox3s
        __init__(SbBox3s self, SbBox3i32 box) -> SbBox3s
        __init__(SbBox3s self, SbBox3f box) -> SbBox3s
        __init__(SbBox3s self, SbBox3d box) -> SbBox3s
        """
        this = _coin.new_SbBox3s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox3s &":
        """
        setBounds(SbBox3s self, short xmin, short ymin, short zmin, short xmax, short ymax, short zmax) -> SbBox3s
        setBounds(SbBox3s self, SbVec3s minpoint, SbVec3s maxpoint) -> SbBox3s
        setBounds(SbBox3s self, SbBox3i32 box) -> SbBox3s
        setBounds(SbBox3s self, SbBox3f box) -> SbBox3s
        setBounds(SbBox3s self, SbBox3d box) -> SbBox3s
        """
        return _coin.SbBox3s_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox3s self, short & xmin, short & ymin, short & zmin, short & xmax, short & ymax, short & zmax)
        getBounds(SbBox3s self, SbVec3s minpoint, SbVec3s maxpoint)
        """
        return _coin.SbBox3s_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec3s &":
        """
        getMin(SbBox3s self) -> SbVec3s
        getMin(SbBox3s self) -> SbVec3s
        """
        return _coin.SbBox3s_getMin(self, *args)


    def getMax(self, *args) -> "SbVec3s &":
        """
        getMax(SbBox3s self) -> SbVec3s
        getMax(SbBox3s self) -> SbVec3s
        """
        return _coin.SbBox3s_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox3s self, SbVec3s pt)
        extendBy(SbBox3s self, SbBox3s box)
        """
        return _coin.SbBox3s_extendBy(self, *args)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox3s self)"""
        return _coin.SbBox3s_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox3s self) -> SbBool"""
        return _coin.SbBox3s_isEmpty(self)


    def hasVolume(self) -> "SbBool":
        """hasVolume(SbBox3s self) -> SbBool"""
        return _coin.SbBox3s_hasVolume(self)


    def getVolume(self) -> "int":
        """getVolume(SbBox3s self) -> int"""
        return _coin.SbBox3s_getVolume(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox3s self, SbVec3s pt) -> SbBool
        intersect(SbBox3s self, SbBox3s box) -> SbBool
        """
        return _coin.SbBox3s_intersect(self, *args)


    def getClosestPoint(self, pt: 'SbVec3f') -> "SbVec3f":
        """getClosestPoint(SbBox3s self, SbVec3f pt) -> SbVec3f"""
        return _coin.SbBox3s_getClosestPoint(self, pt)


    def getCenter(self) -> "SbVec3f":
        """getCenter(SbBox3s self) -> SbVec3f"""
        return _coin.SbBox3s_getCenter(self)


    def getOrigin(self, originX: 'short &', originY: 'short &', originZ: 'short &') -> "void":
        """getOrigin(SbBox3s self, short & originX, short & originY, short & originZ)"""
        return _coin.SbBox3s_getOrigin(self, originX, originY, originZ)


    def getSize(self, *args) -> "SbVec3s":
        """
        getSize(SbBox3s self, short & sizeX, short & sizeY, short & sizeZ)
        getSize(SbBox3s self) -> SbVec3s
        """
        return _coin.SbBox3s_getSize(self, *args)


    def __eq__(self, u: 'SbBox3s') -> "int":
        """__eq__(SbBox3s self, SbBox3s u) -> int"""
        return _coin.SbBox3s___eq__(self, u)


    def __ne__(self, u: 'SbBox3s') -> "int":
        """__ne__(SbBox3s self, SbBox3s u) -> int"""
        return _coin.SbBox3s___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbBox3s
    __del__ = lambda self: None
SbBox3s_swigregister = _coin.SbBox3s_swigregister
SbBox3s_swigregister(SbBox3s)

class SoSFBox3s(SoSField):
    """Proxy of C++ SoSFBox3s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox3s self) -> SoSFBox3s"""
        this = _coin.new_SoSFBox3s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox3s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox3s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox3s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox3s self) -> SoType"""
        return _coin.SoSFBox3s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox3s self, SoField field)"""
        return _coin.SoSFBox3s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox3s self, SoField field) -> SbBool"""
        return _coin.SoSFBox3s_isSame(self, field)


    def __eq__(self, field: 'SoSFBox3s') -> "int":
        """__eq__(SoSFBox3s self, SoSFBox3s field) -> int"""
        return _coin.SoSFBox3s___eq__(self, field)


    def __ne__(self, field: 'SoSFBox3s') -> "int":
        """__ne__(SoSFBox3s self, SoSFBox3s field) -> int"""
        return _coin.SoSFBox3s___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox3s_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox3s self, SbBox3s newvalue)
        setValue(SoSFBox3s self, short xmin, short ymin, short zmin, short xmax, short ymax, short zmax)
        setValue(SoSFBox3s self, SbVec3s minvec, SbVec3s maxvec)
        """
        return _coin.SoSFBox3s_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox3s self) -> SbBox3s
        getValue(SoSFBox3s self, SbBox3s box)
        """
        return _coin.SoSFBox3s_getValue(self, *args)

SoSFBox3s_swigregister = _coin.SoSFBox3s_swigregister
SoSFBox3s_swigregister(SoSFBox3s)

def SoSFBox3s_createInstance() -> "void *":
    """SoSFBox3s_createInstance() -> void *"""
    return _coin.SoSFBox3s_createInstance()

def SoSFBox3s_getClassTypeId() -> "SoType":
    """SoSFBox3s_getClassTypeId() -> SoType"""
    return _coin.SoSFBox3s_getClassTypeId()

def SoSFBox3s_initClass() -> "void":
    """SoSFBox3s_initClass()"""
    return _coin.SoSFBox3s_initClass()

class SbVec3i32(object):
    """Proxy of C++ SbVec3i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec3i32 self) -> SbVec3i32
        __init__(SbVec3i32 self, int32_t const [3] v) -> SbVec3i32
        __init__(SbVec3i32 self, int32_t x, int32_t y, int32_t z) -> SbVec3i32
        __init__(SbVec3i32 self, SbVec3ui32 const & v) -> SbVec3i32
        __init__(SbVec3i32 self, SbVec3b v) -> SbVec3i32
        __init__(SbVec3i32 self, SbVec3s v) -> SbVec3i32
        __init__(SbVec3i32 self, SbVec3f v) -> SbVec3i32
        __init__(SbVec3i32 self, SbVec3d v) -> SbVec3i32
        """
        this = _coin.new_SbVec3i32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec3i32 &":
        """
        setValue(SbVec3i32 self, int32_t const [3] v) -> SbVec3i32
        setValue(SbVec3i32 self, int32_t x, int32_t y, int32_t z) -> SbVec3i32
        setValue(SbVec3i32 self, SbVec3ui32 const & v) -> SbVec3i32
        setValue(SbVec3i32 self, SbVec3b v) -> SbVec3i32
        setValue(SbVec3i32 self, SbVec3s v) -> SbVec3i32
        setValue(SbVec3i32 self, SbVec3f v) -> SbVec3i32
        setValue(SbVec3i32 self, SbVec3d v) -> SbVec3i32
        """
        return _coin.SbVec3i32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec3i32 self) -> int32_t const
        getValue(SbVec3i32 self, int32_t & x, int32_t & y, int32_t & z)
        """
        return _coin.SbVec3i32_getValue(self, *args)


    def dot(self, v: 'SbVec3i32') -> "int32_t":
        """dot(SbVec3i32 self, SbVec3i32 v) -> int32_t"""
        return _coin.SbVec3i32_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec3i32 self)"""
        return _coin.SbVec3i32_negate(self)


    def __imul__(self, *args) -> "SbVec3i32 &":
        """
        __imul__(SbVec3i32 self, int d) -> SbVec3i32
        __imul__(SbVec3i32 self, double d) -> SbVec3i32
        """
        return _coin.SbVec3i32___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec3i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec3i32') -> "SbVec3i32 &":
        """__iadd__(SbVec3i32 self, SbVec3i32 v) -> SbVec3i32"""
        return _coin.SbVec3i32___iadd__(self, v)


    def __isub__(self, v: 'SbVec3i32') -> "SbVec3i32 &":
        """__isub__(SbVec3i32 self, SbVec3i32 v) -> SbVec3i32"""
        return _coin.SbVec3i32___isub__(self, v)


    def __neg__(self) -> "SbVec3i32":
        """__neg__(SbVec3i32 self) -> SbVec3i32"""
        return _coin.SbVec3i32___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec3i32
    __del__ = lambda self: None
SbVec3i32_swigregister = _coin.SbVec3i32_swigregister
SbVec3i32_swigregister(SbVec3i32)

class SbBox3i32(object):
    """Proxy of C++ SbBox3i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox3i32 self) -> SbBox3i32
        __init__(SbBox3i32 self, int32_t xmin, int32_t ymin, int32_t zmin, int32_t xmax, int32_t ymax, int32_t zmax) -> SbBox3i32
        __init__(SbBox3i32 self, SbVec3i32 minpoint, SbVec3i32 maxpoint) -> SbBox3i32
        __init__(SbBox3i32 self, SbBox3s box) -> SbBox3i32
        __init__(SbBox3i32 self, SbBox3f box) -> SbBox3i32
        __init__(SbBox3i32 self, SbBox3d box) -> SbBox3i32
        """
        this = _coin.new_SbBox3i32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox3i32 &":
        """
        setBounds(SbBox3i32 self, int32_t xmin, int32_t ymin, int32_t zmin, int32_t xmax, int32_t ymax, int32_t zmax) -> SbBox3i32
        setBounds(SbBox3i32 self, SbVec3i32 minpoint, SbVec3i32 maxpoint) -> SbBox3i32
        setBounds(SbBox3i32 self, SbBox3s box) -> SbBox3i32
        setBounds(SbBox3i32 self, SbBox3f box) -> SbBox3i32
        setBounds(SbBox3i32 self, SbBox3d box) -> SbBox3i32
        """
        return _coin.SbBox3i32_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox3i32 self, int32_t & xmin, int32_t & ymin, int32_t & zmin, int32_t & xmax, int32_t & ymax, int32_t & zmax)
        getBounds(SbBox3i32 self, SbVec3i32 minpoint, SbVec3i32 maxpoint)
        """
        return _coin.SbBox3i32_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec3i32 &":
        """
        getMin(SbBox3i32 self) -> SbVec3i32
        getMin(SbBox3i32 self) -> SbVec3i32
        """
        return _coin.SbBox3i32_getMin(self, *args)


    def getMax(self, *args) -> "SbVec3i32 &":
        """
        getMax(SbBox3i32 self) -> SbVec3i32
        getMax(SbBox3i32 self) -> SbVec3i32
        """
        return _coin.SbBox3i32_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox3i32 self, SbVec3i32 pt)
        extendBy(SbBox3i32 self, SbBox3i32 bb)
        extendBy(SbBox3i32 self, SbVec3f pt)
        """
        return _coin.SbBox3i32_extendBy(self, *args)


    def transform(self, m: 'SbMatrix') -> "void":
        """transform(SbBox3i32 self, SbMatrix m)"""
        return _coin.SbBox3i32_transform(self, m)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox3i32 self)"""
        return _coin.SbBox3i32_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox3i32 self) -> SbBool"""
        return _coin.SbBox3i32_isEmpty(self)


    def hasVolume(self) -> "SbBool":
        """hasVolume(SbBox3i32 self) -> SbBool"""
        return _coin.SbBox3i32_hasVolume(self)


    def getVolume(self) -> "float":
        """getVolume(SbBox3i32 self) -> float"""
        return _coin.SbBox3i32_getVolume(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox3i32 self, SbVec3i32 pt) -> SbBool
        intersect(SbBox3i32 self, SbBox3i32 bb) -> SbBool
        intersect(SbBox3i32 self, SbVec3f pt) -> SbBool
        """
        return _coin.SbBox3i32_intersect(self, *args)


    def outside(self, MVP: 'SbMatrix', cullBits: 'int &') -> "SbBool":
        """outside(SbBox3i32 self, SbMatrix MVP, int & cullBits) -> SbBool"""
        return _coin.SbBox3i32_outside(self, MVP, cullBits)


    def getClosestPoint(self, pt: 'SbVec3f') -> "SbVec3f":
        """getClosestPoint(SbBox3i32 self, SbVec3f pt) -> SbVec3f"""
        return _coin.SbBox3i32_getClosestPoint(self, pt)


    def getCenter(self) -> "SbVec3f":
        """getCenter(SbBox3i32 self) -> SbVec3f"""
        return _coin.SbBox3i32_getCenter(self)


    def getOrigin(self, originX: 'int32_t &', originY: 'int32_t &', originZ: 'int32_t &') -> "void":
        """getOrigin(SbBox3i32 self, int32_t & originX, int32_t & originY, int32_t & originZ)"""
        return _coin.SbBox3i32_getOrigin(self, originX, originY, originZ)


    def getSize(self, *args) -> "SbVec3i32":
        """
        getSize(SbBox3i32 self, int32_t & sizeX, int32_t & sizeY, int32_t & sizeZ)
        getSize(SbBox3i32 self) -> SbVec3i32
        """
        return _coin.SbBox3i32_getSize(self, *args)


    def getSpan(self, direction: 'SbVec3f', dmin: 'float &', dmax: 'float &') -> "void":
        """getSpan(SbBox3i32 self, SbVec3f direction, float & dmin, float & dmax)"""
        return _coin.SbBox3i32_getSpan(self, direction, dmin, dmax)

    __swig_destroy__ = _coin.delete_SbBox3i32
    __del__ = lambda self: None
SbBox3i32_swigregister = _coin.SbBox3i32_swigregister
SbBox3i32_swigregister(SbBox3i32)

class SoSFBox3i32(SoSField):
    """Proxy of C++ SoSFBox3i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox3i32 self) -> SoSFBox3i32"""
        this = _coin.new_SoSFBox3i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox3i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox3i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox3i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox3i32 self) -> SoType"""
        return _coin.SoSFBox3i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox3i32 self, SoField field)"""
        return _coin.SoSFBox3i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox3i32 self, SoField field) -> SbBool"""
        return _coin.SoSFBox3i32_isSame(self, field)


    def __eq__(self, field: 'SoSFBox3i32') -> "int":
        """__eq__(SoSFBox3i32 self, SoSFBox3i32 field) -> int"""
        return _coin.SoSFBox3i32___eq__(self, field)


    def __ne__(self, field: 'SoSFBox3i32') -> "int":
        """__ne__(SoSFBox3i32 self, SoSFBox3i32 field) -> int"""
        return _coin.SoSFBox3i32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox3i32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox3i32 self, SbBox3i32 newvalue)
        setValue(SoSFBox3i32 self, int32_t xmin, int32_t ymin, int32_t zmin, int32_t xmax, int32_t ymax, int32_t zmax)
        setValue(SoSFBox3i32 self, SbVec3i32 minvec, SbVec3i32 maxvec)
        """
        return _coin.SoSFBox3i32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox3i32 self) -> SbBox3i32
        getValue(SoSFBox3i32 self, SbBox3i32 box)
        """
        return _coin.SoSFBox3i32_getValue(self, *args)

SoSFBox3i32_swigregister = _coin.SoSFBox3i32_swigregister
SoSFBox3i32_swigregister(SoSFBox3i32)

def SoSFBox3i32_createInstance() -> "void *":
    """SoSFBox3i32_createInstance() -> void *"""
    return _coin.SoSFBox3i32_createInstance()

def SoSFBox3i32_getClassTypeId() -> "SoType":
    """SoSFBox3i32_getClassTypeId() -> SoType"""
    return _coin.SoSFBox3i32_getClassTypeId()

def SoSFBox3i32_initClass() -> "void":
    """SoSFBox3i32_initClass()"""
    return _coin.SoSFBox3i32_initClass()

class SoSFBox3f(SoSField):
    """Proxy of C++ SoSFBox3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox3f self) -> SoSFBox3f"""
        this = _coin.new_SoSFBox3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox3f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox3f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox3f self) -> SoType"""
        return _coin.SoSFBox3f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox3f self, SoField field)"""
        return _coin.SoSFBox3f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox3f self, SoField field) -> SbBool"""
        return _coin.SoSFBox3f_isSame(self, field)


    def __eq__(self, field: 'SoSFBox3f') -> "int":
        """__eq__(SoSFBox3f self, SoSFBox3f field) -> int"""
        return _coin.SoSFBox3f___eq__(self, field)


    def __ne__(self, field: 'SoSFBox3f') -> "int":
        """__ne__(SoSFBox3f self, SoSFBox3f field) -> int"""
        return _coin.SoSFBox3f___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox3f_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox3f self, SbBox3f newvalue)
        setValue(SoSFBox3f self, float xmin, float ymin, float zmin, float xmax, float ymax, float zmax)
        setValue(SoSFBox3f self, SbVec3f minvec, SbVec3f maxvec)
        """
        return _coin.SoSFBox3f_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox3f self) -> SbBox3f
        getValue(SoSFBox3f self, SbBox3f box)
        """
        return _coin.SoSFBox3f_getValue(self, *args)

SoSFBox3f_swigregister = _coin.SoSFBox3f_swigregister
SoSFBox3f_swigregister(SoSFBox3f)

def SoSFBox3f_createInstance() -> "void *":
    """SoSFBox3f_createInstance() -> void *"""
    return _coin.SoSFBox3f_createInstance()

def SoSFBox3f_getClassTypeId() -> "SoType":
    """SoSFBox3f_getClassTypeId() -> SoType"""
    return _coin.SoSFBox3f_getClassTypeId()

def SoSFBox3f_initClass() -> "void":
    """SoSFBox3f_initClass()"""
    return _coin.SoSFBox3f_initClass()

class SbBox3d(object):
    """Proxy of C++ SbBox3d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbBox3d self) -> SbBox3d
        __init__(SbBox3d self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax) -> SbBox3d
        __init__(SbBox3d self, SbVec3d minpoint, SbVec3d maxpoint) -> SbBox3d
        __init__(SbBox3d self, SbBox3f box) -> SbBox3d
        __init__(SbBox3d self, SbBox3s box) -> SbBox3d
        __init__(SbBox3d self, SbBox3i32 box) -> SbBox3d
        """
        this = _coin.new_SbBox3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBounds(self, *args) -> "SbBox3d &":
        """
        setBounds(SbBox3d self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax) -> SbBox3d
        setBounds(SbBox3d self, SbVec3d minpoint, SbVec3d maxpoint) -> SbBox3d
        setBounds(SbBox3d self, SbBox3f box) -> SbBox3d
        setBounds(SbBox3d self, SbBox3s box) -> SbBox3d
        setBounds(SbBox3d self, SbBox3i32 box) -> SbBox3d
        """
        return _coin.SbBox3d_setBounds(self, *args)


    def getBounds(self, *args) -> "void":
        """
        getBounds(SbBox3d self, double & xmin, double & ymin, double & zmin, double & xmax, double & ymax, double & zmax)
        getBounds(SbBox3d self, SbVec3d minpoint, SbVec3d maxpoint)
        """
        return _coin.SbBox3d_getBounds(self, *args)


    def getMin(self, *args) -> "SbVec3d &":
        """
        getMin(SbBox3d self) -> SbVec3d
        getMin(SbBox3d self) -> SbVec3d
        """
        return _coin.SbBox3d_getMin(self, *args)


    def getMax(self, *args) -> "SbVec3d &":
        """
        getMax(SbBox3d self) -> SbVec3d
        getMax(SbBox3d self) -> SbVec3d
        """
        return _coin.SbBox3d_getMax(self, *args)


    def extendBy(self, *args) -> "void":
        """
        extendBy(SbBox3d self, SbVec3d pt)
        extendBy(SbBox3d self, SbBox3d box)
        """
        return _coin.SbBox3d_extendBy(self, *args)


    def transform(self, matrix: 'SbDPMatrix') -> "void":
        """transform(SbBox3d self, SbDPMatrix matrix)"""
        return _coin.SbBox3d_transform(self, matrix)


    def makeEmpty(self) -> "void":
        """makeEmpty(SbBox3d self)"""
        return _coin.SbBox3d_makeEmpty(self)


    def isEmpty(self) -> "SbBool":
        """isEmpty(SbBox3d self) -> SbBool"""
        return _coin.SbBox3d_isEmpty(self)


    def hasVolume(self) -> "SbBool":
        """hasVolume(SbBox3d self) -> SbBool"""
        return _coin.SbBox3d_hasVolume(self)


    def getVolume(self) -> "double":
        """getVolume(SbBox3d self) -> double"""
        return _coin.SbBox3d_getVolume(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbBox3d self, SbVec3d point) -> SbBool
        intersect(SbBox3d self, SbBox3d box) -> SbBool
        """
        return _coin.SbBox3d_intersect(self, *args)


    def getClosestPoint(self, point: 'SbVec3d') -> "SbVec3d":
        """getClosestPoint(SbBox3d self, SbVec3d point) -> SbVec3d"""
        return _coin.SbBox3d_getClosestPoint(self, point)


    def outside(self, mvp: 'SbDPMatrix', cullbits: 'int &') -> "SbBool":
        """outside(SbBox3d self, SbDPMatrix mvp, int & cullbits) -> SbBool"""
        return _coin.SbBox3d_outside(self, mvp, cullbits)


    def getCenter(self) -> "SbVec3d":
        """getCenter(SbBox3d self) -> SbVec3d"""
        return _coin.SbBox3d_getCenter(self)


    def getOrigin(self, origoX: 'double &', origoY: 'double &', origoZ: 'double &') -> "void":
        """getOrigin(SbBox3d self, double & origoX, double & origoY, double & origoZ)"""
        return _coin.SbBox3d_getOrigin(self, origoX, origoY, origoZ)


    def getSize(self, *args) -> "SbVec3d":
        """
        getSize(SbBox3d self, double & sizeX, double & sizeY, double & sizeZ)
        getSize(SbBox3d self) -> SbVec3d
        """
        return _coin.SbBox3d_getSize(self, *args)


    def getSpan(self, dir: 'SbVec3d', dmin: 'double &', dmax: 'double &') -> "void":
        """getSpan(SbBox3d self, SbVec3d dir, double & dmin, double & dmax)"""
        return _coin.SbBox3d_getSpan(self, dir, dmin, dmax)


    def output(self, file: 'FILE *') -> "void":
        """output(SbBox3d self, FILE * file)"""
        return _coin.SbBox3d_output(self, file)

    __swig_destroy__ = _coin.delete_SbBox3d
    __del__ = lambda self: None
SbBox3d_swigregister = _coin.SbBox3d_swigregister
SbBox3d_swigregister(SbBox3d)

class SoSFBox3d(SoSField):
    """Proxy of C++ SoSFBox3d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFBox3d self) -> SoSFBox3d"""
        this = _coin.new_SoSFBox3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFBox3d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFBox3d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFBox3d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFBox3d self) -> SoType"""
        return _coin.SoSFBox3d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFBox3d self, SoField field)"""
        return _coin.SoSFBox3d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFBox3d self, SoField field) -> SbBool"""
        return _coin.SoSFBox3d_isSame(self, field)


    def __eq__(self, field: 'SoSFBox3d') -> "int":
        """__eq__(SoSFBox3d self, SoSFBox3d field) -> int"""
        return _coin.SoSFBox3d___eq__(self, field)


    def __ne__(self, field: 'SoSFBox3d') -> "int":
        """__ne__(SoSFBox3d self, SoSFBox3d field) -> int"""
        return _coin.SoSFBox3d___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFBox3d_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFBox3d self, SbBox3d newvalue)
        setValue(SoSFBox3d self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax)
        setValue(SoSFBox3d self, SbVec3d minvec, SbVec3d maxvec)
        """
        return _coin.SoSFBox3d_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SoSFBox3d self) -> SbBox3d
        getValue(SoSFBox3d self, SbBox3d box)
        """
        return _coin.SoSFBox3d_getValue(self, *args)

SoSFBox3d_swigregister = _coin.SoSFBox3d_swigregister
SoSFBox3d_swigregister(SoSFBox3d)

def SoSFBox3d_createInstance() -> "void *":
    """SoSFBox3d_createInstance() -> void *"""
    return _coin.SoSFBox3d_createInstance()

def SoSFBox3d_getClassTypeId() -> "SoType":
    """SoSFBox3d_getClassTypeId() -> SoType"""
    return _coin.SoSFBox3d_getClassTypeId()

def SoSFBox3d_initClass() -> "void":
    """SoSFBox3d_initClass()"""
    return _coin.SoSFBox3d_initClass()

class SoSFColorRGBA(SoSField):
    """Proxy of C++ SoSFColorRGBA class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFColorRGBA self) -> SoSFColorRGBA"""
        this = _coin.new_SoSFColorRGBA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFColorRGBA
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFColorRGBA_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFColorRGBA_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFColorRGBA self) -> SoType"""
        return _coin.SoSFColorRGBA_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFColorRGBA self, SoField field)"""
        return _coin.SoSFColorRGBA_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFColorRGBA self, SoField field) -> SbBool"""
        return _coin.SoSFColorRGBA_isSame(self, field)


    def getValue(self) -> "SbColor4f const &":
        """getValue(SoSFColorRGBA self) -> SbColor4f"""
        return _coin.SoSFColorRGBA_getValue(self)


    def __eq__(self, field: 'SoSFColorRGBA') -> "int":
        """__eq__(SoSFColorRGBA self, SoSFColorRGBA field) -> int"""
        return _coin.SoSFColorRGBA___eq__(self, field)


    def __ne__(self, field: 'SoSFColorRGBA') -> "int":
        """__ne__(SoSFColorRGBA self, SoSFColorRGBA field) -> int"""
        return _coin.SoSFColorRGBA___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFColorRGBA_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFColorRGBA self, SbColor4f newvalue)
        setValue(SoSFColorRGBA self, SbVec4f vec)
        setValue(SoSFColorRGBA self, float red, float green, float blue, float alpha)
        setValue(SoSFColorRGBA self, float const [4] rgba)
        """
        return _coin.SoSFColorRGBA_setValue(self, *args)


    def setHSVValue(self, *args) -> "void":
        """
        setHSVValue(SoSFColorRGBA self, float h, float s, float v, float a)
        setHSVValue(SoSFColorRGBA self, float const [4] hsva)
        """
        return _coin.SoSFColorRGBA_setHSVValue(self, *args)

SoSFColorRGBA_swigregister = _coin.SoSFColorRGBA_swigregister
SoSFColorRGBA_swigregister(SoSFColorRGBA)

def SoSFColorRGBA_createInstance() -> "void *":
    """SoSFColorRGBA_createInstance() -> void *"""
    return _coin.SoSFColorRGBA_createInstance()

def SoSFColorRGBA_getClassTypeId() -> "SoType":
    """SoSFColorRGBA_getClassTypeId() -> SoType"""
    return _coin.SoSFColorRGBA_getClassTypeId()

def SoSFColorRGBA_initClass() -> "void":
    """SoSFColorRGBA_initClass()"""
    return _coin.SoSFColorRGBA_initClass()

class SoSFDouble(SoSField):
    """Proxy of C++ SoSFDouble class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFDouble self) -> SoSFDouble"""
        this = _coin.new_SoSFDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFDouble
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFDouble_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFDouble_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFDouble self) -> SoType"""
        return _coin.SoSFDouble_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFDouble self, SoField field)"""
        return _coin.SoSFDouble_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFDouble self, SoField field) -> SbBool"""
        return _coin.SoSFDouble_isSame(self, field)


    def getValue(self) -> "double":
        """getValue(SoSFDouble self) -> double"""
        return _coin.SoSFDouble_getValue(self)


    def setValue(self, newvalue: 'double') -> "void":
        """setValue(SoSFDouble self, double newvalue)"""
        return _coin.SoSFDouble_setValue(self, newvalue)


    def __eq__(self, field: 'SoSFDouble') -> "int":
        """__eq__(SoSFDouble self, SoSFDouble field) -> int"""
        return _coin.SoSFDouble___eq__(self, field)


    def __ne__(self, field: 'SoSFDouble') -> "int":
        """__ne__(SoSFDouble self, SoSFDouble field) -> int"""
        return _coin.SoSFDouble___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFDouble_initClass()

    initClass = staticmethod(initClass)
SoSFDouble_swigregister = _coin.SoSFDouble_swigregister
SoSFDouble_swigregister(SoSFDouble)

def SoSFDouble_createInstance() -> "void *":
    """SoSFDouble_createInstance() -> void *"""
    return _coin.SoSFDouble_createInstance()

def SoSFDouble_getClassTypeId() -> "SoType":
    """SoSFDouble_getClassTypeId() -> SoType"""
    return _coin.SoSFDouble_getClassTypeId()

def SoSFDouble_initClass() -> "void":
    """SoSFDouble_initClass()"""
    return _coin.SoSFDouble_initClass()

class SoSFEngine(SoSField):
    """Proxy of C++ SoSFEngine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFEngine self) -> SoSFEngine"""
        this = _coin.new_SoSFEngine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFEngine
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFEngine_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFEngine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFEngine self) -> SoType"""
        return _coin.SoSFEngine_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFEngine self, SoField field)"""
        return _coin.SoSFEngine_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFEngine self, SoField field) -> SbBool"""
        return _coin.SoSFEngine_isSame(self, field)


    def getValue(self) -> "SoEngine *":
        """getValue(SoSFEngine self) -> SoEngine"""
        return _coin.SoSFEngine_getValue(self)


    def __eq__(self, field: 'SoSFEngine') -> "int":
        """__eq__(SoSFEngine self, SoSFEngine field) -> int"""
        return _coin.SoSFEngine___eq__(self, field)


    def __ne__(self, field: 'SoSFEngine') -> "int":
        """__ne__(SoSFEngine self, SoSFEngine field) -> int"""
        return _coin.SoSFEngine___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFEngine_initClass()

    initClass = staticmethod(initClass)

    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoSFEngine self, SbBool copyconnections)"""
        return _coin.SoSFEngine_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoSFEngine self) -> SbBool"""
        return _coin.SoSFEngine_referencesCopy(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFEngine self, SoEngine newvalue)
        setValue(SoSFEngine self, SoSFEngine other)
        """
        return _coin.SoSFEngine_setValue(self, *args)

SoSFEngine_swigregister = _coin.SoSFEngine_swigregister
SoSFEngine_swigregister(SoSFEngine)

def SoSFEngine_createInstance() -> "void *":
    """SoSFEngine_createInstance() -> void *"""
    return _coin.SoSFEngine_createInstance()

def SoSFEngine_getClassTypeId() -> "SoType":
    """SoSFEngine_getClassTypeId() -> SoType"""
    return _coin.SoSFEngine_getClassTypeId()

def SoSFEngine_initClass() -> "void":
    """SoSFEngine_initClass()"""
    return _coin.SoSFEngine_initClass()

class SoSFImage3(SoSField):
    """Proxy of C++ SoSFImage3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFImage3 self) -> SoSFImage3"""
        this = _coin.new_SoSFImage3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFImage3
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFImage3_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFImage3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFImage3 self) -> SoType"""
        return _coin.SoSFImage3_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFImage3 self, SoField field)"""
        return _coin.SoSFImage3_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFImage3 self, SoField field) -> SbBool"""
        return _coin.SoSFImage3_isSame(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFImage3_initClass()

    initClass = staticmethod(initClass)

    def getValue(self) -> "unsigned char const *":
        """getValue(SoSFImage3 self) -> unsigned char const *"""
        return _coin.SoSFImage3_getValue(self)


    def __eq__(self, field: 'SoSFImage3') -> "int":
        """__eq__(SoSFImage3 self, SoSFImage3 field) -> int"""
        return _coin.SoSFImage3___eq__(self, field)


    def __ne__(self, field: 'SoSFImage3') -> "int":
        """__ne__(SoSFImage3 self, SoSFImage3 field) -> int"""
        return _coin.SoSFImage3___ne__(self, field)


    def startEditing(self) -> "unsigned char *":
        """startEditing(SoSFImage3 self) -> unsigned char *"""
        return _coin.SoSFImage3_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoSFImage3 self)"""
        return _coin.SoSFImage3_finishEditing(self)


    def setValue(self, *args) -> "void":
        """
        setValue(SoSFImage3 self, SbVec3s size, int const nc, unsigned char const * bytes)
        setValue(SoSFImage3 self, SbVec3s size, int const nc, PyObject * pixels)
        setValue(SoSFImage3 self, SoSFImage3 other)
        """
        return _coin.SoSFImage3_setValue(self, *args)

SoSFImage3_swigregister = _coin.SoSFImage3_swigregister
SoSFImage3_swigregister(SoSFImage3)

def SoSFImage3_createInstance() -> "void *":
    """SoSFImage3_createInstance() -> void *"""
    return _coin.SoSFImage3_createInstance()

def SoSFImage3_getClassTypeId() -> "SoType":
    """SoSFImage3_getClassTypeId() -> SoType"""
    return _coin.SoSFImage3_getClassTypeId()

def SoSFImage3_initClass() -> "void":
    """SoSFImage3_initClass()"""
    return _coin.SoSFImage3_initClass()

class SoSFMatrix(SoSField):
    """Proxy of C++ SoSFMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFMatrix self) -> SoSFMatrix"""
        this = _coin.new_SoSFMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFMatrix
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFMatrix_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFMatrix_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFMatrix self) -> SoType"""
        return _coin.SoSFMatrix_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFMatrix self, SoField field)"""
        return _coin.SoSFMatrix_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFMatrix self, SoField field) -> SbBool"""
        return _coin.SoSFMatrix_isSame(self, field)


    def getValue(self) -> "SbMatrix const &":
        """getValue(SoSFMatrix self) -> SbMatrix"""
        return _coin.SoSFMatrix_getValue(self)


    def __eq__(self, field: 'SoSFMatrix') -> "int":
        """__eq__(SoSFMatrix self, SoSFMatrix field) -> int"""
        return _coin.SoSFMatrix___eq__(self, field)


    def __ne__(self, field: 'SoSFMatrix') -> "int":
        """__ne__(SoSFMatrix self, SoSFMatrix field) -> int"""
        return _coin.SoSFMatrix___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFMatrix_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFMatrix self, SbMatrix newvalue)
        setValue(SoSFMatrix self, float const a11, float const a12, float const a13, float const a14, float const a21, float const a22, float const a23, float const a24, float const a31, float const a32, float const a33, float const a34, float const a41, float const a42, float const a43, float const a44)
        setValue(SoSFMatrix self, SoSFMatrix other)
        """
        return _coin.SoSFMatrix_setValue(self, *args)

SoSFMatrix_swigregister = _coin.SoSFMatrix_swigregister
SoSFMatrix_swigregister(SoSFMatrix)

def SoSFMatrix_createInstance() -> "void *":
    """SoSFMatrix_createInstance() -> void *"""
    return _coin.SoSFMatrix_createInstance()

def SoSFMatrix_getClassTypeId() -> "SoType":
    """SoSFMatrix_getClassTypeId() -> SoType"""
    return _coin.SoSFMatrix_getClassTypeId()

def SoSFMatrix_initClass() -> "void":
    """SoSFMatrix_initClass()"""
    return _coin.SoSFMatrix_initClass()

class SoSFPlane(SoSField):
    """Proxy of C++ SoSFPlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFPlane self) -> SoSFPlane"""
        this = _coin.new_SoSFPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFPlane
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFPlane_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFPlane_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFPlane self) -> SoType"""
        return _coin.SoSFPlane_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFPlane self, SoField field)"""
        return _coin.SoSFPlane_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFPlane self, SoField field) -> SbBool"""
        return _coin.SoSFPlane_isSame(self, field)


    def getValue(self) -> "SbPlane const &":
        """getValue(SoSFPlane self) -> SbPlane"""
        return _coin.SoSFPlane_getValue(self)


    def __eq__(self, field: 'SoSFPlane') -> "int":
        """__eq__(SoSFPlane self, SoSFPlane field) -> int"""
        return _coin.SoSFPlane___eq__(self, field)


    def __ne__(self, field: 'SoSFPlane') -> "int":
        """__ne__(SoSFPlane self, SoSFPlane field) -> int"""
        return _coin.SoSFPlane___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFPlane_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFPlane self, SbPlane newvalue)
        setValue(SoSFPlane self, SoSFPlane other)
        """
        return _coin.SoSFPlane_setValue(self, *args)

SoSFPlane_swigregister = _coin.SoSFPlane_swigregister
SoSFPlane_swigregister(SoSFPlane)

def SoSFPlane_createInstance() -> "void *":
    """SoSFPlane_createInstance() -> void *"""
    return _coin.SoSFPlane_createInstance()

def SoSFPlane_getClassTypeId() -> "SoType":
    """SoSFPlane_getClassTypeId() -> SoType"""
    return _coin.SoSFPlane_getClassTypeId()

def SoSFPlane_initClass() -> "void":
    """SoSFPlane_initClass()"""
    return _coin.SoSFPlane_initClass()

class SoSFUInt32(SoSField):
    """Proxy of C++ SoSFUInt32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFUInt32 self) -> SoSFUInt32"""
        this = _coin.new_SoSFUInt32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFUInt32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFUInt32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFUInt32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFUInt32 self) -> SoType"""
        return _coin.SoSFUInt32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFUInt32 self, SoField field)"""
        return _coin.SoSFUInt32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFUInt32 self, SoField field) -> SbBool"""
        return _coin.SoSFUInt32_isSame(self, field)


    def getValue(self) -> "uint32_t":
        """getValue(SoSFUInt32 self) -> uint32_t"""
        return _coin.SoSFUInt32_getValue(self)


    def __eq__(self, field: 'SoSFUInt32') -> "int":
        """__eq__(SoSFUInt32 self, SoSFUInt32 field) -> int"""
        return _coin.SoSFUInt32___eq__(self, field)


    def __ne__(self, field: 'SoSFUInt32') -> "int":
        """__ne__(SoSFUInt32 self, SoSFUInt32 field) -> int"""
        return _coin.SoSFUInt32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFUInt32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFUInt32 self, uint32_t newvalue)
        setValue(SoSFUInt32 self, SoSFUInt32 other)
        """
        return _coin.SoSFUInt32_setValue(self, *args)

SoSFUInt32_swigregister = _coin.SoSFUInt32_swigregister
SoSFUInt32_swigregister(SoSFUInt32)

def SoSFUInt32_createInstance() -> "void *":
    """SoSFUInt32_createInstance() -> void *"""
    return _coin.SoSFUInt32_createInstance()

def SoSFUInt32_getClassTypeId() -> "SoType":
    """SoSFUInt32_getClassTypeId() -> SoType"""
    return _coin.SoSFUInt32_getClassTypeId()

def SoSFUInt32_initClass() -> "void":
    """SoSFUInt32_initClass()"""
    return _coin.SoSFUInt32_initClass()

class SbVec2b(object):
    """Proxy of C++ SbVec2b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec2b self) -> SbVec2b
        __init__(SbVec2b self, int8_t const [2] v) -> SbVec2b
        __init__(SbVec2b self, int8_t x, int8_t y) -> SbVec2b
        __init__(SbVec2b self, SbVec2ub const & v) -> SbVec2b
        __init__(SbVec2b self, SbVec2s v) -> SbVec2b
        __init__(SbVec2b self, SbVec2i32 v) -> SbVec2b
        __init__(SbVec2b self, SbVec2f v) -> SbVec2b
        __init__(SbVec2b self, SbVec2d v) -> SbVec2b
        """
        this = _coin.new_SbVec2b(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec2b &":
        """
        setValue(SbVec2b self, int8_t const [2] v) -> SbVec2b
        setValue(SbVec2b self, int8_t x, int8_t y) -> SbVec2b
        setValue(SbVec2b self, SbVec2ub const & v) -> SbVec2b
        setValue(SbVec2b self, SbVec2s v) -> SbVec2b
        setValue(SbVec2b self, SbVec2i32 v) -> SbVec2b
        setValue(SbVec2b self, SbVec2f v) -> SbVec2b
        setValue(SbVec2b self, SbVec2d v) -> SbVec2b
        """
        return _coin.SbVec2b_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec2b self) -> int8_t const
        getValue(SbVec2b self, int8_t & x, int8_t & y)
        """
        return _coin.SbVec2b_getValue(self, *args)


    def dot(self, v: 'SbVec2b') -> "int32_t":
        """dot(SbVec2b self, SbVec2b v) -> int32_t"""
        return _coin.SbVec2b_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec2b self)"""
        return _coin.SbVec2b_negate(self)


    def __imul__(self, *args) -> "SbVec2b &":
        """
        __imul__(SbVec2b self, int d) -> SbVec2b
        __imul__(SbVec2b self, double d) -> SbVec2b
        """
        return _coin.SbVec2b___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec2b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec2b') -> "SbVec2b &":
        """__iadd__(SbVec2b self, SbVec2b v) -> SbVec2b"""
        return _coin.SbVec2b___iadd__(self, v)


    def __isub__(self, v: 'SbVec2b') -> "SbVec2b &":
        """__isub__(SbVec2b self, SbVec2b v) -> SbVec2b"""
        return _coin.SbVec2b___isub__(self, v)


    def __neg__(self) -> "SbVec2b":
        """__neg__(SbVec2b self) -> SbVec2b"""
        return _coin.SbVec2b___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec2b
    __del__ = lambda self: None
SbVec2b_swigregister = _coin.SbVec2b_swigregister
SbVec2b_swigregister(SbVec2b)

class SoSFVec2b(SoSField):
    """Proxy of C++ SoSFVec2b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec2b self) -> SoSFVec2b"""
        this = _coin.new_SoSFVec2b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec2b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec2b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec2b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec2b self) -> SoType"""
        return _coin.SoSFVec2b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec2b self, SoField field)"""
        return _coin.SoSFVec2b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec2b self, SoField field) -> SbBool"""
        return _coin.SoSFVec2b_isSame(self, field)


    def getValue(self) -> "SbVec2b":
        """getValue(SoSFVec2b self) -> SbVec2b"""
        return _coin.SoSFVec2b_getValue(self)


    def __eq__(self, field: 'SoSFVec2b') -> "int":
        """__eq__(SoSFVec2b self, SoSFVec2b field) -> int"""
        return _coin.SoSFVec2b___eq__(self, field)


    def __ne__(self, field: 'SoSFVec2b') -> "int":
        """__ne__(SoSFVec2b self, SoSFVec2b field) -> int"""
        return _coin.SoSFVec2b___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec2b_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec2b self, SbVec2b newvalue)
        setValue(SoSFVec2b self, int8_t x, int8_t y)
        setValue(SoSFVec2b self, int8_t const [2] xy)
        """
        return _coin.SoSFVec2b_setValue(self, *args)

SoSFVec2b_swigregister = _coin.SoSFVec2b_swigregister
SoSFVec2b_swigregister(SoSFVec2b)

def SoSFVec2b_createInstance() -> "void *":
    """SoSFVec2b_createInstance() -> void *"""
    return _coin.SoSFVec2b_createInstance()

def SoSFVec2b_getClassTypeId() -> "SoType":
    """SoSFVec2b_getClassTypeId() -> SoType"""
    return _coin.SoSFVec2b_getClassTypeId()

def SoSFVec2b_initClass() -> "void":
    """SoSFVec2b_initClass()"""
    return _coin.SoSFVec2b_initClass()

class SoSFVec2s(SoSField):
    """Proxy of C++ SoSFVec2s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec2s self) -> SoSFVec2s"""
        this = _coin.new_SoSFVec2s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec2s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec2s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec2s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec2s self) -> SoType"""
        return _coin.SoSFVec2s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec2s self, SoField field)"""
        return _coin.SoSFVec2s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec2s self, SoField field) -> SbBool"""
        return _coin.SoSFVec2s_isSame(self, field)


    def getValue(self) -> "SbVec2s":
        """getValue(SoSFVec2s self) -> SbVec2s"""
        return _coin.SoSFVec2s_getValue(self)


    def __eq__(self, field: 'SoSFVec2s') -> "int":
        """__eq__(SoSFVec2s self, SoSFVec2s field) -> int"""
        return _coin.SoSFVec2s___eq__(self, field)


    def __ne__(self, field: 'SoSFVec2s') -> "int":
        """__ne__(SoSFVec2s self, SoSFVec2s field) -> int"""
        return _coin.SoSFVec2s___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec2s_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec2s self, SbVec2s newvalue)
        setValue(SoSFVec2s self, short x, short y)
        setValue(SoSFVec2s self, short const [2] xy)
        """
        return _coin.SoSFVec2s_setValue(self, *args)

SoSFVec2s_swigregister = _coin.SoSFVec2s_swigregister
SoSFVec2s_swigregister(SoSFVec2s)

def SoSFVec2s_createInstance() -> "void *":
    """SoSFVec2s_createInstance() -> void *"""
    return _coin.SoSFVec2s_createInstance()

def SoSFVec2s_getClassTypeId() -> "SoType":
    """SoSFVec2s_getClassTypeId() -> SoType"""
    return _coin.SoSFVec2s_getClassTypeId()

def SoSFVec2s_initClass() -> "void":
    """SoSFVec2s_initClass()"""
    return _coin.SoSFVec2s_initClass()

class SoSFVec2i32(SoSField):
    """Proxy of C++ SoSFVec2i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec2i32 self) -> SoSFVec2i32"""
        this = _coin.new_SoSFVec2i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec2i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec2i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec2i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec2i32 self) -> SoType"""
        return _coin.SoSFVec2i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec2i32 self, SoField field)"""
        return _coin.SoSFVec2i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec2i32 self, SoField field) -> SbBool"""
        return _coin.SoSFVec2i32_isSame(self, field)


    def getValue(self) -> "SbVec2i32 const &":
        """getValue(SoSFVec2i32 self) -> SbVec2i32"""
        return _coin.SoSFVec2i32_getValue(self)


    def __eq__(self, field: 'SoSFVec2i32') -> "int":
        """__eq__(SoSFVec2i32 self, SoSFVec2i32 field) -> int"""
        return _coin.SoSFVec2i32___eq__(self, field)


    def __ne__(self, field: 'SoSFVec2i32') -> "int":
        """__ne__(SoSFVec2i32 self, SoSFVec2i32 field) -> int"""
        return _coin.SoSFVec2i32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec2i32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec2i32 self, SbVec2i32 newvalue)
        setValue(SoSFVec2i32 self, int32_t x, int32_t y)
        setValue(SoSFVec2i32 self, int32_t const [2] xy)
        """
        return _coin.SoSFVec2i32_setValue(self, *args)

SoSFVec2i32_swigregister = _coin.SoSFVec2i32_swigregister
SoSFVec2i32_swigregister(SoSFVec2i32)

def SoSFVec2i32_createInstance() -> "void *":
    """SoSFVec2i32_createInstance() -> void *"""
    return _coin.SoSFVec2i32_createInstance()

def SoSFVec2i32_getClassTypeId() -> "SoType":
    """SoSFVec2i32_getClassTypeId() -> SoType"""
    return _coin.SoSFVec2i32_getClassTypeId()

def SoSFVec2i32_initClass() -> "void":
    """SoSFVec2i32_initClass()"""
    return _coin.SoSFVec2i32_initClass()

class SoSFVec2d(SoSField):
    """Proxy of C++ SoSFVec2d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec2d self) -> SoSFVec2d"""
        this = _coin.new_SoSFVec2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec2d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec2d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec2d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec2d self) -> SoType"""
        return _coin.SoSFVec2d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec2d self, SoField field)"""
        return _coin.SoSFVec2d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec2d self, SoField field) -> SbBool"""
        return _coin.SoSFVec2d_isSame(self, field)


    def getValue(self) -> "SbVec2d const &":
        """getValue(SoSFVec2d self) -> SbVec2d"""
        return _coin.SoSFVec2d_getValue(self)


    def __eq__(self, field: 'SoSFVec2d') -> "int":
        """__eq__(SoSFVec2d self, SoSFVec2d field) -> int"""
        return _coin.SoSFVec2d___eq__(self, field)


    def __ne__(self, field: 'SoSFVec2d') -> "int":
        """__ne__(SoSFVec2d self, SoSFVec2d field) -> int"""
        return _coin.SoSFVec2d___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec2d_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec2d self, SbVec2d newvalue)
        setValue(SoSFVec2d self, double x, double y)
        setValue(SoSFVec2d self, double const [2] xy)
        """
        return _coin.SoSFVec2d_setValue(self, *args)

SoSFVec2d_swigregister = _coin.SoSFVec2d_swigregister
SoSFVec2d_swigregister(SoSFVec2d)

def SoSFVec2d_createInstance() -> "void *":
    """SoSFVec2d_createInstance() -> void *"""
    return _coin.SoSFVec2d_createInstance()

def SoSFVec2d_getClassTypeId() -> "SoType":
    """SoSFVec2d_getClassTypeId() -> SoType"""
    return _coin.SoSFVec2d_getClassTypeId()

def SoSFVec2d_initClass() -> "void":
    """SoSFVec2d_initClass()"""
    return _coin.SoSFVec2d_initClass()

class SbVec3b(object):
    """Proxy of C++ SbVec3b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec3b self) -> SbVec3b
        __init__(SbVec3b self, int8_t const [3] v) -> SbVec3b
        __init__(SbVec3b self, int8_t x, int8_t y, int8_t z) -> SbVec3b
        __init__(SbVec3b self, SbVec3ub const & v) -> SbVec3b
        __init__(SbVec3b self, SbVec3s v) -> SbVec3b
        __init__(SbVec3b self, SbVec3i32 v) -> SbVec3b
        __init__(SbVec3b self, SbVec3f v) -> SbVec3b
        __init__(SbVec3b self, SbVec3d v) -> SbVec3b
        """
        this = _coin.new_SbVec3b(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec3b &":
        """
        setValue(SbVec3b self, int8_t [3] v) -> SbVec3b
        setValue(SbVec3b self, int8_t x, int8_t y, int8_t z) -> SbVec3b
        setValue(SbVec3b self, SbVec3ub const & v) -> SbVec3b
        setValue(SbVec3b self, SbVec3s v) -> SbVec3b
        setValue(SbVec3b self, SbVec3i32 v) -> SbVec3b
        setValue(SbVec3b self, SbVec3f v) -> SbVec3b
        setValue(SbVec3b self, SbVec3d v) -> SbVec3b
        """
        return _coin.SbVec3b_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec3b self) -> int8_t const
        getValue(SbVec3b self, int8_t & x, int8_t & y, int8_t & z)
        """
        return _coin.SbVec3b_getValue(self, *args)


    def dot(self, v: 'SbVec3b') -> "int32_t":
        """dot(SbVec3b self, SbVec3b v) -> int32_t"""
        return _coin.SbVec3b_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec3b self)"""
        return _coin.SbVec3b_negate(self)


    def __imul__(self, *args) -> "SbVec3b &":
        """
        __imul__(SbVec3b self, int d) -> SbVec3b
        __imul__(SbVec3b self, double d) -> SbVec3b
        """
        return _coin.SbVec3b___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec3b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec3b') -> "SbVec3b &":
        """__iadd__(SbVec3b self, SbVec3b v) -> SbVec3b"""
        return _coin.SbVec3b___iadd__(self, v)


    def __isub__(self, v: 'SbVec3b') -> "SbVec3b &":
        """__isub__(SbVec3b self, SbVec3b v) -> SbVec3b"""
        return _coin.SbVec3b___isub__(self, v)


    def __neg__(self) -> "SbVec3b":
        """__neg__(SbVec3b self) -> SbVec3b"""
        return _coin.SbVec3b___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec3b
    __del__ = lambda self: None
SbVec3b_swigregister = _coin.SbVec3b_swigregister
SbVec3b_swigregister(SbVec3b)

class SoSFVec3b(SoSField):
    """Proxy of C++ SoSFVec3b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec3b self) -> SoSFVec3b"""
        this = _coin.new_SoSFVec3b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec3b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec3b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec3b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec3b self) -> SoType"""
        return _coin.SoSFVec3b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec3b self, SoField field)"""
        return _coin.SoSFVec3b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec3b self, SoField field) -> SbBool"""
        return _coin.SoSFVec3b_isSame(self, field)


    def getValue(self) -> "SbVec3b":
        """getValue(SoSFVec3b self) -> SbVec3b"""
        return _coin.SoSFVec3b_getValue(self)


    def __eq__(self, field: 'SoSFVec3b') -> "int":
        """__eq__(SoSFVec3b self, SoSFVec3b field) -> int"""
        return _coin.SoSFVec3b___eq__(self, field)


    def __ne__(self, field: 'SoSFVec3b') -> "int":
        """__ne__(SoSFVec3b self, SoSFVec3b field) -> int"""
        return _coin.SoSFVec3b___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec3b_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec3b self, SbVec3b newvalue)
        setValue(SoSFVec3b self, int8_t x, int8_t y, int8_t z)
        setValue(SoSFVec3b self, int8_t const [3] xyz)
        """
        return _coin.SoSFVec3b_setValue(self, *args)

SoSFVec3b_swigregister = _coin.SoSFVec3b_swigregister
SoSFVec3b_swigregister(SoSFVec3b)

def SoSFVec3b_createInstance() -> "void *":
    """SoSFVec3b_createInstance() -> void *"""
    return _coin.SoSFVec3b_createInstance()

def SoSFVec3b_getClassTypeId() -> "SoType":
    """SoSFVec3b_getClassTypeId() -> SoType"""
    return _coin.SoSFVec3b_getClassTypeId()

def SoSFVec3b_initClass() -> "void":
    """SoSFVec3b_initClass()"""
    return _coin.SoSFVec3b_initClass()

class SoSFVec3s(SoSField):
    """Proxy of C++ SoSFVec3s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec3s self) -> SoSFVec3s"""
        this = _coin.new_SoSFVec3s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec3s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec3s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec3s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec3s self) -> SoType"""
        return _coin.SoSFVec3s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec3s self, SoField field)"""
        return _coin.SoSFVec3s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec3s self, SoField field) -> SbBool"""
        return _coin.SoSFVec3s_isSame(self, field)


    def getValue(self) -> "SbVec3s const &":
        """getValue(SoSFVec3s self) -> SbVec3s"""
        return _coin.SoSFVec3s_getValue(self)


    def __eq__(self, field: 'SoSFVec3s') -> "int":
        """__eq__(SoSFVec3s self, SoSFVec3s field) -> int"""
        return _coin.SoSFVec3s___eq__(self, field)


    def __ne__(self, field: 'SoSFVec3s') -> "int":
        """__ne__(SoSFVec3s self, SoSFVec3s field) -> int"""
        return _coin.SoSFVec3s___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec3s_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec3s self, SbVec3s newvalue)
        setValue(SoSFVec3s self, short x, short y, short z)
        setValue(SoSFVec3s self, short const [3] xyz)
        """
        return _coin.SoSFVec3s_setValue(self, *args)

SoSFVec3s_swigregister = _coin.SoSFVec3s_swigregister
SoSFVec3s_swigregister(SoSFVec3s)

def SoSFVec3s_createInstance() -> "void *":
    """SoSFVec3s_createInstance() -> void *"""
    return _coin.SoSFVec3s_createInstance()

def SoSFVec3s_getClassTypeId() -> "SoType":
    """SoSFVec3s_getClassTypeId() -> SoType"""
    return _coin.SoSFVec3s_getClassTypeId()

def SoSFVec3s_initClass() -> "void":
    """SoSFVec3s_initClass()"""
    return _coin.SoSFVec3s_initClass()

class SoSFVec3i32(SoSField):
    """Proxy of C++ SoSFVec3i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec3i32 self) -> SoSFVec3i32"""
        this = _coin.new_SoSFVec3i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec3i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec3i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec3i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec3i32 self) -> SoType"""
        return _coin.SoSFVec3i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec3i32 self, SoField field)"""
        return _coin.SoSFVec3i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec3i32 self, SoField field) -> SbBool"""
        return _coin.SoSFVec3i32_isSame(self, field)


    def getValue(self) -> "SbVec3i32 const &":
        """getValue(SoSFVec3i32 self) -> SbVec3i32"""
        return _coin.SoSFVec3i32_getValue(self)


    def __eq__(self, field: 'SoSFVec3i32') -> "int":
        """__eq__(SoSFVec3i32 self, SoSFVec3i32 field) -> int"""
        return _coin.SoSFVec3i32___eq__(self, field)


    def __ne__(self, field: 'SoSFVec3i32') -> "int":
        """__ne__(SoSFVec3i32 self, SoSFVec3i32 field) -> int"""
        return _coin.SoSFVec3i32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec3i32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec3i32 self, SbVec3i32 newvalue)
        setValue(SoSFVec3i32 self, int32_t x, int32_t y, int32_t z)
        setValue(SoSFVec3i32 self, int32_t const [3] xyz)
        """
        return _coin.SoSFVec3i32_setValue(self, *args)

SoSFVec3i32_swigregister = _coin.SoSFVec3i32_swigregister
SoSFVec3i32_swigregister(SoSFVec3i32)

def SoSFVec3i32_createInstance() -> "void *":
    """SoSFVec3i32_createInstance() -> void *"""
    return _coin.SoSFVec3i32_createInstance()

def SoSFVec3i32_getClassTypeId() -> "SoType":
    """SoSFVec3i32_getClassTypeId() -> SoType"""
    return _coin.SoSFVec3i32_getClassTypeId()

def SoSFVec3i32_initClass() -> "void":
    """SoSFVec3i32_initClass()"""
    return _coin.SoSFVec3i32_initClass()

class SoSFVec3d(SoSField):
    """Proxy of C++ SoSFVec3d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec3d self) -> SoSFVec3d"""
        this = _coin.new_SoSFVec3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec3d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec3d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec3d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec3d self) -> SoType"""
        return _coin.SoSFVec3d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec3d self, SoField field)"""
        return _coin.SoSFVec3d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec3d self, SoField field) -> SbBool"""
        return _coin.SoSFVec3d_isSame(self, field)


    def getValue(self) -> "SbVec3d const &":
        """getValue(SoSFVec3d self) -> SbVec3d"""
        return _coin.SoSFVec3d_getValue(self)


    def __eq__(self, field: 'SoSFVec3d') -> "int":
        """__eq__(SoSFVec3d self, SoSFVec3d field) -> int"""
        return _coin.SoSFVec3d___eq__(self, field)


    def __ne__(self, field: 'SoSFVec3d') -> "int":
        """__ne__(SoSFVec3d self, SoSFVec3d field) -> int"""
        return _coin.SoSFVec3d___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec3d_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec3d self, SbVec3d newvalue)
        setValue(SoSFVec3d self, double x, double y, double z)
        setValue(SoSFVec3d self, double const [3] xyz)
        """
        return _coin.SoSFVec3d_setValue(self, *args)

SoSFVec3d_swigregister = _coin.SoSFVec3d_swigregister
SoSFVec3d_swigregister(SoSFVec3d)

def SoSFVec3d_createInstance() -> "void *":
    """SoSFVec3d_createInstance() -> void *"""
    return _coin.SoSFVec3d_createInstance()

def SoSFVec3d_getClassTypeId() -> "SoType":
    """SoSFVec3d_getClassTypeId() -> SoType"""
    return _coin.SoSFVec3d_getClassTypeId()

def SoSFVec3d_initClass() -> "void":
    """SoSFVec3d_initClass()"""
    return _coin.SoSFVec3d_initClass()

class SbVec4b(object):
    """Proxy of C++ SbVec4b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4b self) -> SbVec4b
        __init__(SbVec4b self, int8_t const [4] v) -> SbVec4b
        __init__(SbVec4b self, int8_t x, int8_t y, int8_t z, int8_t w) -> SbVec4b
        __init__(SbVec4b self, SbVec4ub v) -> SbVec4b
        __init__(SbVec4b self, SbVec4s v) -> SbVec4b
        __init__(SbVec4b self, SbVec4i32 v) -> SbVec4b
        __init__(SbVec4b self, SbVec4f v) -> SbVec4b
        __init__(SbVec4b self, SbVec4d v) -> SbVec4b
        """
        this = _coin.new_SbVec4b(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4b &":
        """
        setValue(SbVec4b self, int8_t const [4] v) -> SbVec4b
        setValue(SbVec4b self, int8_t x, int8_t y, int8_t z, int8_t w) -> SbVec4b
        setValue(SbVec4b self, SbVec4ub v) -> SbVec4b
        setValue(SbVec4b self, SbVec4s v) -> SbVec4b
        setValue(SbVec4b self, SbVec4i32 v) -> SbVec4b
        setValue(SbVec4b self, SbVec4f v) -> SbVec4b
        setValue(SbVec4b self, SbVec4d v) -> SbVec4b
        """
        return _coin.SbVec4b_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4b self) -> int8_t const
        getValue(SbVec4b self, int8_t & x, int8_t & y, int8_t & z, int8_t & w)
        """
        return _coin.SbVec4b_getValue(self, *args)


    def dot(self, v: 'SbVec4b') -> "int32_t":
        """dot(SbVec4b self, SbVec4b v) -> int32_t"""
        return _coin.SbVec4b_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4b self)"""
        return _coin.SbVec4b_negate(self)


    def __imul__(self, *args) -> "SbVec4b &":
        """
        __imul__(SbVec4b self, int d) -> SbVec4b
        __imul__(SbVec4b self, double d) -> SbVec4b
        """
        return _coin.SbVec4b___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4b') -> "SbVec4b &":
        """__iadd__(SbVec4b self, SbVec4b v) -> SbVec4b"""
        return _coin.SbVec4b___iadd__(self, v)


    def __isub__(self, v: 'SbVec4b') -> "SbVec4b &":
        """__isub__(SbVec4b self, SbVec4b v) -> SbVec4b"""
        return _coin.SbVec4b___isub__(self, v)


    def __neg__(self) -> "SbVec4b":
        """__neg__(SbVec4b self) -> SbVec4b"""
        return _coin.SbVec4b___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4b
    __del__ = lambda self: None
SbVec4b_swigregister = _coin.SbVec4b_swigregister
SbVec4b_swigregister(SbVec4b)

class SoSFVec4b(SoSField):
    """Proxy of C++ SoSFVec4b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4b self) -> SoSFVec4b"""
        this = _coin.new_SoSFVec4b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4b self) -> SoType"""
        return _coin.SoSFVec4b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4b self, SoField field)"""
        return _coin.SoSFVec4b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4b self, SoField field) -> SbBool"""
        return _coin.SoSFVec4b_isSame(self, field)


    def getValue(self) -> "SbVec4b":
        """getValue(SoSFVec4b self) -> SbVec4b"""
        return _coin.SoSFVec4b_getValue(self)


    def __eq__(self, field: 'SoSFVec4b') -> "int":
        """__eq__(SoSFVec4b self, SoSFVec4b field) -> int"""
        return _coin.SoSFVec4b___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4b') -> "int":
        """__ne__(SoSFVec4b self, SoSFVec4b field) -> int"""
        return _coin.SoSFVec4b___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4b_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4b self, SbVec4b newvalue)
        setValue(SoSFVec4b self, int8_t x, int8_t y, int8_t z, int8_t w)
        setValue(SoSFVec4b self, int8_t const [4] xyzw)
        """
        return _coin.SoSFVec4b_setValue(self, *args)

SoSFVec4b_swigregister = _coin.SoSFVec4b_swigregister
SoSFVec4b_swigregister(SoSFVec4b)

def SoSFVec4b_createInstance() -> "void *":
    """SoSFVec4b_createInstance() -> void *"""
    return _coin.SoSFVec4b_createInstance()

def SoSFVec4b_getClassTypeId() -> "SoType":
    """SoSFVec4b_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4b_getClassTypeId()

def SoSFVec4b_initClass() -> "void":
    """SoSFVec4b_initClass()"""
    return _coin.SoSFVec4b_initClass()

class SbVec4ub(object):
    """Proxy of C++ SbVec4ub class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4ub self) -> SbVec4ub
        __init__(SbVec4ub self, uint8_t const [4] v) -> SbVec4ub
        __init__(SbVec4ub self, uint8_t x, uint8_t y, uint8_t z, uint8_t w) -> SbVec4ub
        __init__(SbVec4ub self, SbVec4b v) -> SbVec4ub
        __init__(SbVec4ub self, SbVec4us v) -> SbVec4ub
        __init__(SbVec4ub self, SbVec4ui32 v) -> SbVec4ub
        """
        this = _coin.new_SbVec4ub(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4ub &":
        """
        setValue(SbVec4ub self, uint8_t const [4] v) -> SbVec4ub
        setValue(SbVec4ub self, uint8_t x, uint8_t y, uint8_t z, uint8_t w) -> SbVec4ub
        setValue(SbVec4ub self, SbVec4b v) -> SbVec4ub
        setValue(SbVec4ub self, SbVec4us v) -> SbVec4ub
        setValue(SbVec4ub self, SbVec4ui32 v) -> SbVec4ub
        """
        return _coin.SbVec4ub_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4ub self) -> uint8_t const
        getValue(SbVec4ub self, uint8_t & x, uint8_t & y, uint8_t & z, uint8_t & w)
        """
        return _coin.SbVec4ub_getValue(self, *args)


    def dot(self, v: 'SbVec4ub') -> "int32_t":
        """dot(SbVec4ub self, SbVec4ub v) -> int32_t"""
        return _coin.SbVec4ub_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4ub self)"""
        return _coin.SbVec4ub_negate(self)


    def __imul__(self, *args) -> "SbVec4ub &":
        """
        __imul__(SbVec4ub self, int d) -> SbVec4ub
        __imul__(SbVec4ub self, double d) -> SbVec4ub
        """
        return _coin.SbVec4ub___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4ub___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4ub') -> "SbVec4ub &":
        """__iadd__(SbVec4ub self, SbVec4ub v) -> SbVec4ub"""
        return _coin.SbVec4ub___iadd__(self, v)


    def __isub__(self, v: 'SbVec4ub') -> "SbVec4ub &":
        """__isub__(SbVec4ub self, SbVec4ub v) -> SbVec4ub"""
        return _coin.SbVec4ub___isub__(self, v)


    def __neg__(self) -> "SbVec4ub":
        """__neg__(SbVec4ub self) -> SbVec4ub"""
        return _coin.SbVec4ub___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4ub
    __del__ = lambda self: None
SbVec4ub_swigregister = _coin.SbVec4ub_swigregister
SbVec4ub_swigregister(SbVec4ub)

class SoSFVec4ub(SoSField):
    """Proxy of C++ SoSFVec4ub class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4ub self) -> SoSFVec4ub"""
        this = _coin.new_SoSFVec4ub()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4ub
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4ub_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4ub_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4ub self) -> SoType"""
        return _coin.SoSFVec4ub_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4ub self, SoField field)"""
        return _coin.SoSFVec4ub_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4ub self, SoField field) -> SbBool"""
        return _coin.SoSFVec4ub_isSame(self, field)


    def getValue(self) -> "SbVec4ub":
        """getValue(SoSFVec4ub self) -> SbVec4ub"""
        return _coin.SoSFVec4ub_getValue(self)


    def __eq__(self, field: 'SoSFVec4ub') -> "int":
        """__eq__(SoSFVec4ub self, SoSFVec4ub field) -> int"""
        return _coin.SoSFVec4ub___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4ub') -> "int":
        """__ne__(SoSFVec4ub self, SoSFVec4ub field) -> int"""
        return _coin.SoSFVec4ub___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4ub_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4ub self, SbVec4ub newvalue)
        setValue(SoSFVec4ub self, uint8_t x, uint8_t y, uint8_t z, uint8_t w)
        setValue(SoSFVec4ub self, uint8_t const [4] xyzw)
        """
        return _coin.SoSFVec4ub_setValue(self, *args)

SoSFVec4ub_swigregister = _coin.SoSFVec4ub_swigregister
SoSFVec4ub_swigregister(SoSFVec4ub)

def SoSFVec4ub_createInstance() -> "void *":
    """SoSFVec4ub_createInstance() -> void *"""
    return _coin.SoSFVec4ub_createInstance()

def SoSFVec4ub_getClassTypeId() -> "SoType":
    """SoSFVec4ub_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4ub_getClassTypeId()

def SoSFVec4ub_initClass() -> "void":
    """SoSFVec4ub_initClass()"""
    return _coin.SoSFVec4ub_initClass()

class SbVec4s(object):
    """Proxy of C++ SbVec4s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4s self) -> SbVec4s
        __init__(SbVec4s self, short const [4] v) -> SbVec4s
        __init__(SbVec4s self, short x, short y, short z, short w) -> SbVec4s
        __init__(SbVec4s self, SbVec4us v) -> SbVec4s
        __init__(SbVec4s self, SbVec4b v) -> SbVec4s
        __init__(SbVec4s self, SbVec4i32 v) -> SbVec4s
        __init__(SbVec4s self, SbVec4f v) -> SbVec4s
        __init__(SbVec4s self, SbVec4d v) -> SbVec4s
        """
        this = _coin.new_SbVec4s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4s &":
        """
        setValue(SbVec4s self, short const [4] v) -> SbVec4s
        setValue(SbVec4s self, short x, short y, short z, short w) -> SbVec4s
        setValue(SbVec4s self, SbVec4s v) -> SbVec4s
        setValue(SbVec4s self, SbVec4us v) -> SbVec4s
        setValue(SbVec4s self, SbVec4b v) -> SbVec4s
        setValue(SbVec4s self, SbVec4i32 v) -> SbVec4s
        setValue(SbVec4s self, SbVec4f v) -> SbVec4s
        setValue(SbVec4s self, SbVec4d v) -> SbVec4s
        """
        return _coin.SbVec4s_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4s self) -> short const
        getValue(SbVec4s self, short & w)
        """
        return _coin.SbVec4s_getValue(self, *args)


    def dot(self, v: 'SbVec4s') -> "int32_t":
        """dot(SbVec4s self, SbVec4s v) -> int32_t"""
        return _coin.SbVec4s_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4s self)"""
        return _coin.SbVec4s_negate(self)


    def __imul__(self, *args) -> "SbVec4s &":
        """
        __imul__(SbVec4s self, int d) -> SbVec4s
        __imul__(SbVec4s self, double d) -> SbVec4s
        """
        return _coin.SbVec4s___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4s') -> "SbVec4s &":
        """__iadd__(SbVec4s self, SbVec4s v) -> SbVec4s"""
        return _coin.SbVec4s___iadd__(self, v)


    def __isub__(self, v: 'SbVec4s') -> "SbVec4s &":
        """__isub__(SbVec4s self, SbVec4s v) -> SbVec4s"""
        return _coin.SbVec4s___isub__(self, v)


    def __neg__(self) -> "SbVec4s":
        """__neg__(SbVec4s self) -> SbVec4s"""
        return _coin.SbVec4s___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4s
    __del__ = lambda self: None
SbVec4s_swigregister = _coin.SbVec4s_swigregister
SbVec4s_swigregister(SbVec4s)

class SoSFVec4s(SoSField):
    """Proxy of C++ SoSFVec4s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4s self) -> SoSFVec4s"""
        this = _coin.new_SoSFVec4s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4s self) -> SoType"""
        return _coin.SoSFVec4s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4s self, SoField field)"""
        return _coin.SoSFVec4s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4s self, SoField field) -> SbBool"""
        return _coin.SoSFVec4s_isSame(self, field)


    def getValue(self) -> "SbVec4s const &":
        """getValue(SoSFVec4s self) -> SbVec4s"""
        return _coin.SoSFVec4s_getValue(self)


    def __eq__(self, field: 'SoSFVec4s') -> "int":
        """__eq__(SoSFVec4s self, SoSFVec4s field) -> int"""
        return _coin.SoSFVec4s___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4s') -> "int":
        """__ne__(SoSFVec4s self, SoSFVec4s field) -> int"""
        return _coin.SoSFVec4s___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4s_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4s self, SbVec4s newvalue)
        setValue(SoSFVec4s self, short x, short y, short z, short w)
        setValue(SoSFVec4s self, short const [4] xyzw)
        """
        return _coin.SoSFVec4s_setValue(self, *args)

SoSFVec4s_swigregister = _coin.SoSFVec4s_swigregister
SoSFVec4s_swigregister(SoSFVec4s)

def SoSFVec4s_createInstance() -> "void *":
    """SoSFVec4s_createInstance() -> void *"""
    return _coin.SoSFVec4s_createInstance()

def SoSFVec4s_getClassTypeId() -> "SoType":
    """SoSFVec4s_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4s_getClassTypeId()

def SoSFVec4s_initClass() -> "void":
    """SoSFVec4s_initClass()"""
    return _coin.SoSFVec4s_initClass()

class SbVec4us(object):
    """Proxy of C++ SbVec4us class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4us self) -> SbVec4us
        __init__(SbVec4us self, unsigned short const [4] v) -> SbVec4us
        __init__(SbVec4us self, unsigned short x, unsigned short y, unsigned short z, unsigned short w) -> SbVec4us
        __init__(SbVec4us self, SbVec4s v) -> SbVec4us
        __init__(SbVec4us self, SbVec4ub v) -> SbVec4us
        __init__(SbVec4us self, SbVec4ui32 v) -> SbVec4us
        """
        this = _coin.new_SbVec4us(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4us &":
        """
        setValue(SbVec4us self, unsigned short const [4] v) -> SbVec4us
        setValue(SbVec4us self, unsigned short x, unsigned short y, unsigned short z, unsigned short w) -> SbVec4us
        setValue(SbVec4us self, SbVec4s v) -> SbVec4us
        setValue(SbVec4us self, SbVec4ub v) -> SbVec4us
        setValue(SbVec4us self, SbVec4ui32 v) -> SbVec4us
        """
        return _coin.SbVec4us_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4us self) -> unsigned short const
        getValue(SbVec4us self, unsigned short & x, unsigned short & y, unsigned short & z, unsigned short & w)
        """
        return _coin.SbVec4us_getValue(self, *args)


    def dot(self, v: 'SbVec4us') -> "int32_t":
        """dot(SbVec4us self, SbVec4us v) -> int32_t"""
        return _coin.SbVec4us_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4us self)"""
        return _coin.SbVec4us_negate(self)


    def __imul__(self, *args) -> "SbVec4us &":
        """
        __imul__(SbVec4us self, int d) -> SbVec4us
        __imul__(SbVec4us self, double d) -> SbVec4us
        """
        return _coin.SbVec4us___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4us___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4us') -> "SbVec4us &":
        """__iadd__(SbVec4us self, SbVec4us v) -> SbVec4us"""
        return _coin.SbVec4us___iadd__(self, v)


    def __isub__(self, v: 'SbVec4us') -> "SbVec4us &":
        """__isub__(SbVec4us self, SbVec4us v) -> SbVec4us"""
        return _coin.SbVec4us___isub__(self, v)


    def __neg__(self) -> "SbVec4us":
        """__neg__(SbVec4us self) -> SbVec4us"""
        return _coin.SbVec4us___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4us
    __del__ = lambda self: None
SbVec4us_swigregister = _coin.SbVec4us_swigregister
SbVec4us_swigregister(SbVec4us)

class SoSFVec4us(SoSField):
    """Proxy of C++ SoSFVec4us class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4us self) -> SoSFVec4us"""
        this = _coin.new_SoSFVec4us()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4us
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4us_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4us_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4us self) -> SoType"""
        return _coin.SoSFVec4us_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4us self, SoField field)"""
        return _coin.SoSFVec4us_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4us self, SoField field) -> SbBool"""
        return _coin.SoSFVec4us_isSame(self, field)


    def getValue(self) -> "SbVec4us const &":
        """getValue(SoSFVec4us self) -> SbVec4us"""
        return _coin.SoSFVec4us_getValue(self)


    def __eq__(self, field: 'SoSFVec4us') -> "int":
        """__eq__(SoSFVec4us self, SoSFVec4us field) -> int"""
        return _coin.SoSFVec4us___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4us') -> "int":
        """__ne__(SoSFVec4us self, SoSFVec4us field) -> int"""
        return _coin.SoSFVec4us___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4us_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4us self, SbVec4us newvalue)
        setValue(SoSFVec4us self, unsigned short x, unsigned short y, unsigned short z, unsigned short w)
        setValue(SoSFVec4us self, unsigned short const [4] xyzw)
        """
        return _coin.SoSFVec4us_setValue(self, *args)

SoSFVec4us_swigregister = _coin.SoSFVec4us_swigregister
SoSFVec4us_swigregister(SoSFVec4us)

def SoSFVec4us_createInstance() -> "void *":
    """SoSFVec4us_createInstance() -> void *"""
    return _coin.SoSFVec4us_createInstance()

def SoSFVec4us_getClassTypeId() -> "SoType":
    """SoSFVec4us_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4us_getClassTypeId()

def SoSFVec4us_initClass() -> "void":
    """SoSFVec4us_initClass()"""
    return _coin.SoSFVec4us_initClass()

class SbVec4i32(object):
    """Proxy of C++ SbVec4i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4i32 self) -> SbVec4i32
        __init__(SbVec4i32 self, int32_t const [4] v) -> SbVec4i32
        __init__(SbVec4i32 self, int32_t x, int32_t y, int32_t z, int32_t w) -> SbVec4i32
        __init__(SbVec4i32 self, SbVec4ui32 v) -> SbVec4i32
        __init__(SbVec4i32 self, SbVec4b v) -> SbVec4i32
        __init__(SbVec4i32 self, SbVec4s v) -> SbVec4i32
        __init__(SbVec4i32 self, SbVec4f v) -> SbVec4i32
        __init__(SbVec4i32 self, SbVec4d v) -> SbVec4i32
        """
        this = _coin.new_SbVec4i32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4i32 &":
        """
        setValue(SbVec4i32 self, int32_t const [4] v) -> SbVec4i32
        setValue(SbVec4i32 self, int32_t x, int32_t y, int32_t z, int32_t w) -> SbVec4i32
        setValue(SbVec4i32 self, SbVec4ui32 v) -> SbVec4i32
        setValue(SbVec4i32 self, SbVec4b v) -> SbVec4i32
        setValue(SbVec4i32 self, SbVec4s v) -> SbVec4i32
        setValue(SbVec4i32 self, SbVec4f v) -> SbVec4i32
        setValue(SbVec4i32 self, SbVec4d v) -> SbVec4i32
        """
        return _coin.SbVec4i32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4i32 self) -> int32_t const
        getValue(SbVec4i32 self, int32_t & x, int32_t & y, int32_t & z, int32_t & w)
        """
        return _coin.SbVec4i32_getValue(self, *args)


    def dot(self, v: 'SbVec4i32') -> "int32_t":
        """dot(SbVec4i32 self, SbVec4i32 v) -> int32_t"""
        return _coin.SbVec4i32_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4i32 self)"""
        return _coin.SbVec4i32_negate(self)


    def __imul__(self, *args) -> "SbVec4i32 &":
        """
        __imul__(SbVec4i32 self, int d) -> SbVec4i32
        __imul__(SbVec4i32 self, double d) -> SbVec4i32
        """
        return _coin.SbVec4i32___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4i32') -> "SbVec4i32 &":
        """__iadd__(SbVec4i32 self, SbVec4i32 v) -> SbVec4i32"""
        return _coin.SbVec4i32___iadd__(self, v)


    def __isub__(self, v: 'SbVec4i32') -> "SbVec4i32 &":
        """__isub__(SbVec4i32 self, SbVec4i32 v) -> SbVec4i32"""
        return _coin.SbVec4i32___isub__(self, v)


    def __neg__(self) -> "SbVec4i32":
        """__neg__(SbVec4i32 self) -> SbVec4i32"""
        return _coin.SbVec4i32___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4i32
    __del__ = lambda self: None
SbVec4i32_swigregister = _coin.SbVec4i32_swigregister
SbVec4i32_swigregister(SbVec4i32)

class SoSFVec4i32(SoSField):
    """Proxy of C++ SoSFVec4i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4i32 self) -> SoSFVec4i32"""
        this = _coin.new_SoSFVec4i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4i32 self) -> SoType"""
        return _coin.SoSFVec4i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4i32 self, SoField field)"""
        return _coin.SoSFVec4i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4i32 self, SoField field) -> SbBool"""
        return _coin.SoSFVec4i32_isSame(self, field)


    def getValue(self) -> "SbVec4i32 const &":
        """getValue(SoSFVec4i32 self) -> SbVec4i32"""
        return _coin.SoSFVec4i32_getValue(self)


    def __eq__(self, field: 'SoSFVec4i32') -> "int":
        """__eq__(SoSFVec4i32 self, SoSFVec4i32 field) -> int"""
        return _coin.SoSFVec4i32___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4i32') -> "int":
        """__ne__(SoSFVec4i32 self, SoSFVec4i32 field) -> int"""
        return _coin.SoSFVec4i32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4i32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4i32 self, SbVec4i32 newvalue)
        setValue(SoSFVec4i32 self, int32_t x, int32_t y, int32_t z, int32_t w)
        setValue(SoSFVec4i32 self, int32_t const [4] xyzw)
        """
        return _coin.SoSFVec4i32_setValue(self, *args)

SoSFVec4i32_swigregister = _coin.SoSFVec4i32_swigregister
SoSFVec4i32_swigregister(SoSFVec4i32)

def SoSFVec4i32_createInstance() -> "void *":
    """SoSFVec4i32_createInstance() -> void *"""
    return _coin.SoSFVec4i32_createInstance()

def SoSFVec4i32_getClassTypeId() -> "SoType":
    """SoSFVec4i32_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4i32_getClassTypeId()

def SoSFVec4i32_initClass() -> "void":
    """SoSFVec4i32_initClass()"""
    return _coin.SoSFVec4i32_initClass()

class SbVec4ui32(object):
    """Proxy of C++ SbVec4ui32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4ui32 self) -> SbVec4ui32
        __init__(SbVec4ui32 self, uint32_t const [4] v) -> SbVec4ui32
        __init__(SbVec4ui32 self, uint32_t x, uint32_t y, uint32_t z, uint32_t w) -> SbVec4ui32
        __init__(SbVec4ui32 self, SbVec4i32 v) -> SbVec4ui32
        __init__(SbVec4ui32 self, SbVec4ub v) -> SbVec4ui32
        __init__(SbVec4ui32 self, SbVec4us v) -> SbVec4ui32
        """
        this = _coin.new_SbVec4ui32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4ui32 &":
        """
        setValue(SbVec4ui32 self, uint32_t const [4] v) -> SbVec4ui32
        setValue(SbVec4ui32 self, uint32_t x, uint32_t y, uint32_t z, uint32_t w) -> SbVec4ui32
        setValue(SbVec4ui32 self, SbVec4i32 v) -> SbVec4ui32
        setValue(SbVec4ui32 self, SbVec4ub v) -> SbVec4ui32
        setValue(SbVec4ui32 self, SbVec4us v) -> SbVec4ui32
        """
        return _coin.SbVec4ui32_setValue(self, *args)


    def getValue(self, *args) -> "void":
        """
        getValue(SbVec4ui32 self) -> uint32_t const
        getValue(SbVec4ui32 self, uint32_t & x, uint32_t & y, uint32_t & z, uint32_t & w)
        """
        return _coin.SbVec4ui32_getValue(self, *args)


    def dot(self, v: 'SbVec4ui32') -> "int32_t":
        """dot(SbVec4ui32 self, SbVec4ui32 v) -> int32_t"""
        return _coin.SbVec4ui32_dot(self, v)


    def negate(self) -> "void":
        """negate(SbVec4ui32 self)"""
        return _coin.SbVec4ui32_negate(self)


    def __imul__(self, *args) -> "SbVec4ui32 &":
        """
        __imul__(SbVec4ui32 self, int d) -> SbVec4ui32
        __imul__(SbVec4ui32 self, double d) -> SbVec4ui32
        """
        return _coin.SbVec4ui32___imul__(self, *args)


    def __itruediv__(self, *args):
        return _coin.SbVec4ui32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4ui32') -> "SbVec4ui32 &":
        """__iadd__(SbVec4ui32 self, SbVec4ui32 v) -> SbVec4ui32"""
        return _coin.SbVec4ui32___iadd__(self, v)


    def __isub__(self, v: 'SbVec4ui32') -> "SbVec4ui32 &":
        """__isub__(SbVec4ui32 self, SbVec4ui32 v) -> SbVec4ui32"""
        return _coin.SbVec4ui32___isub__(self, v)


    def __neg__(self) -> "SbVec4ui32":
        """__neg__(SbVec4ui32 self) -> SbVec4ui32"""
        return _coin.SbVec4ui32___neg__(self)

    __swig_destroy__ = _coin.delete_SbVec4ui32
    __del__ = lambda self: None
SbVec4ui32_swigregister = _coin.SbVec4ui32_swigregister
SbVec4ui32_swigregister(SbVec4ui32)

class SoSFVec4ui32(SoSField):
    """Proxy of C++ SoSFVec4ui32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4ui32 self) -> SoSFVec4ui32"""
        this = _coin.new_SoSFVec4ui32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4ui32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4ui32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4ui32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4ui32 self) -> SoType"""
        return _coin.SoSFVec4ui32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4ui32 self, SoField field)"""
        return _coin.SoSFVec4ui32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4ui32 self, SoField field) -> SbBool"""
        return _coin.SoSFVec4ui32_isSame(self, field)


    def getValue(self) -> "SbVec4ui32 const &":
        """getValue(SoSFVec4ui32 self) -> SbVec4ui32"""
        return _coin.SoSFVec4ui32_getValue(self)


    def __eq__(self, field: 'SoSFVec4ui32') -> "int":
        """__eq__(SoSFVec4ui32 self, SoSFVec4ui32 field) -> int"""
        return _coin.SoSFVec4ui32___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4ui32') -> "int":
        """__ne__(SoSFVec4ui32 self, SoSFVec4ui32 field) -> int"""
        return _coin.SoSFVec4ui32___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4ui32_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4ui32 self, SbVec4ui32 newvalue)
        setValue(SoSFVec4ui32 self, uint32_t x, uint32_t y, uint32_t z, uint32_t w)
        setValue(SoSFVec4ui32 self, uint32_t const [4] xyzw)
        """
        return _coin.SoSFVec4ui32_setValue(self, *args)

SoSFVec4ui32_swigregister = _coin.SoSFVec4ui32_swigregister
SoSFVec4ui32_swigregister(SoSFVec4ui32)

def SoSFVec4ui32_createInstance() -> "void *":
    """SoSFVec4ui32_createInstance() -> void *"""
    return _coin.SoSFVec4ui32_createInstance()

def SoSFVec4ui32_getClassTypeId() -> "SoType":
    """SoSFVec4ui32_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4ui32_getClassTypeId()

def SoSFVec4ui32_initClass() -> "void":
    """SoSFVec4ui32_initClass()"""
    return _coin.SoSFVec4ui32_initClass()

class SoSFVec4f(SoSField):
    """Proxy of C++ SoSFVec4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4f self) -> SoSFVec4f"""
        this = _coin.new_SoSFVec4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4f
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4f_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4f self) -> SoType"""
        return _coin.SoSFVec4f_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4f self, SoField field)"""
        return _coin.SoSFVec4f_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4f self, SoField field) -> SbBool"""
        return _coin.SoSFVec4f_isSame(self, field)


    def getValue(self) -> "SbVec4f const &":
        """getValue(SoSFVec4f self) -> SbVec4f"""
        return _coin.SoSFVec4f_getValue(self)


    def __eq__(self, field: 'SoSFVec4f') -> "int":
        """__eq__(SoSFVec4f self, SoSFVec4f field) -> int"""
        return _coin.SoSFVec4f___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4f') -> "int":
        """__ne__(SoSFVec4f self, SoSFVec4f field) -> int"""
        return _coin.SoSFVec4f___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4f_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4f self, SbVec4f newvalue)
        setValue(SoSFVec4f self, float x, float y, float z, float w)
        setValue(SoSFVec4f self, float const [4] xyzw)
        setValue(SoSFVec4f self, SoSFVec4f other)
        """
        return _coin.SoSFVec4f_setValue(self, *args)

SoSFVec4f_swigregister = _coin.SoSFVec4f_swigregister
SoSFVec4f_swigregister(SoSFVec4f)

def SoSFVec4f_createInstance() -> "void *":
    """SoSFVec4f_createInstance() -> void *"""
    return _coin.SoSFVec4f_createInstance()

def SoSFVec4f_getClassTypeId() -> "SoType":
    """SoSFVec4f_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4f_getClassTypeId()

def SoSFVec4f_initClass() -> "void":
    """SoSFVec4f_initClass()"""
    return _coin.SoSFVec4f_initClass()

class SbVec4d(object):
    """Proxy of C++ SbVec4d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbVec4d self) -> SbVec4d
        __init__(SbVec4d self, double const [4] v) -> SbVec4d
        __init__(SbVec4d self, double x, double y, double z, double w) -> SbVec4d
        __init__(SbVec4d self, SbVec4f v) -> SbVec4d
        __init__(SbVec4d self, SbVec4b v) -> SbVec4d
        __init__(SbVec4d self, SbVec4s v) -> SbVec4d
        __init__(SbVec4d self, SbVec4i32 v) -> SbVec4d
        """
        this = _coin.new_SbVec4d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, *args) -> "SbVec4d &":
        """
        setValue(SbVec4d self, double const [4] v) -> SbVec4d
        setValue(SbVec4d self, double x, double y, double z, double w) -> SbVec4d
        setValue(SbVec4d self, SbVec4f v) -> SbVec4d
        setValue(SbVec4d self, SbVec4b v) -> SbVec4d
        setValue(SbVec4d self, SbVec4s v) -> SbVec4d
        setValue(SbVec4d self, SbVec4i32 v) -> SbVec4d
        """
        return _coin.SbVec4d_setValue(self, *args)


    def getValue(self) -> "double const *":
        """getValue(SbVec4d self) -> double const *"""
        return _coin.SbVec4d_getValue(self)


    def dot(self, v: 'SbVec4d') -> "double":
        """dot(SbVec4d self, SbVec4d v) -> double"""
        return _coin.SbVec4d_dot(self, v)


    def equals(self, v: 'SbVec4d', tolerance: 'double') -> "SbBool":
        """equals(SbVec4d self, SbVec4d v, double tolerance) -> SbBool"""
        return _coin.SbVec4d_equals(self, v, tolerance)


    def getReal(self, v: 'SbVec3d') -> "void":
        """getReal(SbVec4d self, SbVec3d v)"""
        return _coin.SbVec4d_getReal(self, v)


    def length(self) -> "double":
        """length(SbVec4d self) -> double"""
        return _coin.SbVec4d_length(self)


    def sqrLength(self) -> "double":
        """sqrLength(SbVec4d self) -> double"""
        return _coin.SbVec4d_sqrLength(self)


    def negate(self) -> "void":
        """negate(SbVec4d self)"""
        return _coin.SbVec4d_negate(self)


    def normalize(self) -> "double":
        """normalize(SbVec4d self) -> double"""
        return _coin.SbVec4d_normalize(self)


    def __imul__(self, d: 'double') -> "SbVec4d &":
        """__imul__(SbVec4d self, double d) -> SbVec4d"""
        return _coin.SbVec4d___imul__(self, d)


    def __itruediv__(self, *args):
        return _coin.SbVec4d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v: 'SbVec4d') -> "SbVec4d &":
        """__iadd__(SbVec4d self, SbVec4d v) -> SbVec4d"""
        return _coin.SbVec4d___iadd__(self, v)


    def __isub__(self, v: 'SbVec4d') -> "SbVec4d &":
        """__isub__(SbVec4d self, SbVec4d v) -> SbVec4d"""
        return _coin.SbVec4d___isub__(self, v)


    def __neg__(self) -> "SbVec4d":
        """__neg__(SbVec4d self) -> SbVec4d"""
        return _coin.SbVec4d___neg__(self)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbVec4d self, FILE * fp)"""
        return _coin.SbVec4d_output(self, fp)


    def __add__(self, u: 'SbVec4d') -> "SbVec4d":
        """__add__(SbVec4d self, SbVec4d u) -> SbVec4d"""
        return _coin.SbVec4d___add__(self, u)


    def __sub__(self, u: 'SbVec4d') -> "SbVec4d":
        """__sub__(SbVec4d self, SbVec4d u) -> SbVec4d"""
        return _coin.SbVec4d___sub__(self, u)


    def __mul__(self, *args) -> "SbVec4d":
        """
        __mul__(SbVec4d self, double const d) -> SbVec4d
        __mul__(SbVec4d self, SbDPMatrix m) -> SbVec4d
        """
        return _coin.SbVec4d___mul__(self, *args)


    def __rmul__(self, d: 'double const') -> "SbVec4d":
        """__rmul__(SbVec4d self, double const d) -> SbVec4d"""
        return _coin.SbVec4d___rmul__(self, d)


    def __div__(self, d: 'double const') -> "SbVec4d":
        """__div__(SbVec4d self, double const d) -> SbVec4d"""
        return _coin.SbVec4d___div__(self, d)


    def __truediv__(self, d: 'double const') -> "SbVec4d":
        """__truediv__(SbVec4d self, double const d) -> SbVec4d"""
        return _coin.SbVec4d___truediv__(self, d)


    def __eq__(self, u: 'SbVec4d') -> "int":
        """__eq__(SbVec4d self, SbVec4d u) -> int"""
        return _coin.SbVec4d___eq__(self, u)


    def __nq__(self, u: 'SbVec4d') -> "int":
        """__nq__(SbVec4d self, SbVec4d u) -> int"""
        return _coin.SbVec4d___nq__(self, u)


    def __getitem__(self, i: 'int') -> "double":
        """__getitem__(SbVec4d self, int i) -> double"""
        return _coin.SbVec4d___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'double') -> "void":
        """__setitem__(SbVec4d self, int i, double value)"""
        return _coin.SbVec4d___setitem__(self, i, value)


    def __iter__(self):
       for i in range(4):
          yield self[i]

    def __len__(self):
          return 4

    __swig_destroy__ = _coin.delete_SbVec4d
    __del__ = lambda self: None
SbVec4d_swigregister = _coin.SbVec4d_swigregister
SbVec4d_swigregister(SbVec4d)

class SoSFVec4d(SoSField):
    """Proxy of C++ SoSFVec4d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSFVec4d self) -> SoSFVec4d"""
        this = _coin.new_SoSFVec4d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSFVec4d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoSFVec4d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSFVec4d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSFVec4d self) -> SoType"""
        return _coin.SoSFVec4d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoSFVec4d self, SoField field)"""
        return _coin.SoSFVec4d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoSFVec4d self, SoField field) -> SbBool"""
        return _coin.SoSFVec4d_isSame(self, field)


    def getValue(self) -> "SbVec4d const &":
        """getValue(SoSFVec4d self) -> SbVec4d"""
        return _coin.SoSFVec4d_getValue(self)


    def __eq__(self, field: 'SoSFVec4d') -> "int":
        """__eq__(SoSFVec4d self, SoSFVec4d field) -> int"""
        return _coin.SoSFVec4d___eq__(self, field)


    def __ne__(self, field: 'SoSFVec4d') -> "int":
        """__ne__(SoSFVec4d self, SoSFVec4d field) -> int"""
        return _coin.SoSFVec4d___ne__(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSFVec4d_initClass()

    initClass = staticmethod(initClass)

    def setValue(self, *args) -> "void":
        """
        setValue(SoSFVec4d self, SbVec4d newvalue)
        setValue(SoSFVec4d self, double x, double y, double z, double w)
        setValue(SoSFVec4d self, double const [4] xyzw)
        """
        return _coin.SoSFVec4d_setValue(self, *args)

SoSFVec4d_swigregister = _coin.SoSFVec4d_swigregister
SoSFVec4d_swigregister(SoSFVec4d)

def SoSFVec4d_createInstance() -> "void *":
    """SoSFVec4d_createInstance() -> void *"""
    return _coin.SoSFVec4d_createInstance()

def SoSFVec4d_getClassTypeId() -> "SoType":
    """SoSFVec4d_getClassTypeId() -> SoType"""
    return _coin.SoSFVec4d_getClassTypeId()

def SoSFVec4d_initClass() -> "void":
    """SoSFVec4d_initClass()"""
    return _coin.SoSFVec4d_initClass()

class SoMFColor(SoMField):
    """Proxy of C++ SoMFColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFColor self) -> SoMFColor"""
        this = _coin.new_SoMFColor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFColor
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFColor_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFColor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFColor self) -> SoType"""
        return _coin.SoMFColor_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFColor self, SoField field)"""
        return _coin.SoMFColor_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFColor self, SoField field) -> SbBool"""
        return _coin.SoMFColor_isSame(self, field)


    def find(self, value: 'SbColor', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFColor self, SbColor value, SbBool addifnotfound=0) -> int
        find(SoMFColor self, SbColor value) -> int
        """
        return _coin.SoMFColor_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFColor') -> "SbBool":
        """__eq__(SoMFColor self, SoMFColor field) -> SbBool"""
        return _coin.SoMFColor___eq__(self, field)


    def __ne__(self, field: 'SoMFColor') -> "SbBool":
        """__ne__(SoMFColor self, SoMFColor field) -> SbBool"""
        return _coin.SoMFColor___ne__(self, field)


    def startEditing(self) -> "SbColor *":
        """startEditing(SoMFColor self) -> SbColor"""
        return _coin.SoMFColor_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFColor self)"""
        return _coin.SoMFColor_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFColor self, int const num, float const * userdata)
        setValuesPointer(SoMFColor self, int const num, float * userdata)
        setValuesPointer(SoMFColor self, int const num, SbColor userdata)
        setValuesPointer(SoMFColor self, int const num, SbColor userdata)
        """
        return _coin.SoMFColor_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFColor_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
      if len(args) == 2:
        return _coin.SoMFColor_setValues(args[0], 0, len(args[1]), args[1])
      elif len(args) == 3:
        return _coin.SoMFColor_setValues(args[0], args[1], len(args[2]), args[2])

      return _coin.SoMFColor_setValues(*args)



    def setHSVValues(self, start: 'int', num: 'int', hsv: 'float const [][3]') -> "void":
        """setHSVValues(SoMFColor self, int start, int num, float const [][3] hsv)"""
        return _coin.SoMFColor_setHSVValues(self, start, num, hsv)


    def setHSVValue(self, *args) -> "void":
        """
        setHSVValue(SoMFColor self, float h, float s, float v)
        setHSVValue(SoMFColor self, float const [3] hsv)
        """
        return _coin.SoMFColor_setHSVValue(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFColor self, int const idx, SbColor value)
        set1Value(SoMFColor self, int idx, SbVec3f vec)
        set1Value(SoMFColor self, int idx, float r, float g, float b)
        set1Value(SoMFColor self, int idx, float const [3] rgb)
        """
        return _coin.SoMFColor_set1Value(self, *args)


    def set1HSVValue(self, *args) -> "void":
        """
        set1HSVValue(SoMFColor self, int idx, float h, float s, float v)
        set1HSVValue(SoMFColor self, int idx, float const [3] hsv)
        """
        return _coin.SoMFColor_set1HSVValue(self, *args)


    def __getitem__(self, i: 'int') -> "SbColor const &":
        """__getitem__(SoMFColor self, int i) -> SbColor"""
        return _coin.SoMFColor___getitem__(self, i)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(SoMFColor self, int i, SbColor value)
        __setitem__(SoMFColor self, int i, float const [3] rgb)
        """
        return _coin.SoMFColor___setitem__(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFColor self, SbColor value)
        setValue(SoMFColor self, SbVec3f vec)
        setValue(SoMFColor self, float r, float g, float b)
        setValue(SoMFColor self, float const [3] rgb)
        setValue(SoMFColor self, SoMFColor other)
        """
        return _coin.SoMFColor_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbColor const *":
        """
        getValues(SoMFColor self, int i=0) -> SbColor
        getValues(SoMFColor self) -> SbColor
        """
        return _coin.SoMFColor_getValues(self, i)

SoMFColor_swigregister = _coin.SoMFColor_swigregister
SoMFColor_swigregister(SoMFColor)

def SoMFColor_createInstance() -> "void *":
    """SoMFColor_createInstance() -> void *"""
    return _coin.SoMFColor_createInstance()

def SoMFColor_getClassTypeId() -> "SoType":
    """SoMFColor_getClassTypeId() -> SoType"""
    return _coin.SoMFColor_getClassTypeId()

def SoMFColor_initClass() -> "void":
    """SoMFColor_initClass()"""
    return _coin.SoMFColor_initClass()

class SoMFColorRGBA(SoMField):
    """Proxy of C++ SoMFColorRGBA class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFColorRGBA self) -> SoMFColorRGBA"""
        this = _coin.new_SoMFColorRGBA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFColorRGBA
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFColorRGBA_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFColorRGBA_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFColorRGBA self) -> SoType"""
        return _coin.SoMFColorRGBA_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFColorRGBA self, SoField field)"""
        return _coin.SoMFColorRGBA_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFColorRGBA self, SoField field) -> SbBool"""
        return _coin.SoMFColorRGBA_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbColor4f const *":
        """getValues(SoMFColorRGBA self, int const start) -> SbColor4f"""
        return _coin.SoMFColorRGBA_getValues(self, start)


    def find(self, value: 'SbColor4f', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFColorRGBA self, SbColor4f value, SbBool addifnotfound=0) -> int
        find(SoMFColorRGBA self, SbColor4f value) -> int
        """
        return _coin.SoMFColorRGBA_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFColorRGBA') -> "SbBool":
        """__eq__(SoMFColorRGBA self, SoMFColorRGBA field) -> SbBool"""
        return _coin.SoMFColorRGBA___eq__(self, field)


    def __ne__(self, field: 'SoMFColorRGBA') -> "SbBool":
        """__ne__(SoMFColorRGBA self, SoMFColorRGBA field) -> SbBool"""
        return _coin.SoMFColorRGBA___ne__(self, field)


    def startEditing(self) -> "SbColor4f *":
        """startEditing(SoMFColorRGBA self) -> SbColor4f"""
        return _coin.SoMFColorRGBA_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFColorRGBA self)"""
        return _coin.SoMFColorRGBA_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFColorRGBA self, int const num, float const * userdata)
        setValuesPointer(SoMFColorRGBA self, int const num, float * userdata)
        setValuesPointer(SoMFColorRGBA self, int const num, SbColor4f userdata)
        setValuesPointer(SoMFColorRGBA self, int const num, SbColor4f userdata)
        """
        return _coin.SoMFColorRGBA_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFColorRGBA_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFColorRGBA self, int const start, int const num, SbColor4f newvals)
        setValues(SoMFColorRGBA self, int start, int num, float const [][4] rgba)
        """
        return _coin.SoMFColorRGBA_setValues(self, *args)


    def setHSVValues(self, start: 'int', num: 'int', hsv: 'float const [][4]') -> "void":
        """setHSVValues(SoMFColorRGBA self, int start, int num, float const [][4] hsv)"""
        return _coin.SoMFColorRGBA_setHSVValues(self, start, num, hsv)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFColorRGBA self, SbColor4f value)
        setValue(SoMFColorRGBA self, SbVec4f vec)
        setValue(SoMFColorRGBA self, float r, float g, float b, float a)
        setValue(SoMFColorRGBA self, float const [4] rgba)
        """
        return _coin.SoMFColorRGBA_setValue(self, *args)


    def setHSVValue(self, *args) -> "void":
        """
        setHSVValue(SoMFColorRGBA self, float h, float s, float v, float a)
        setHSVValue(SoMFColorRGBA self, float const [4] hsva)
        """
        return _coin.SoMFColorRGBA_setHSVValue(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFColorRGBA self, int const idx, SbColor4f value)
        set1Value(SoMFColorRGBA self, int idx, SbVec4f vec)
        set1Value(SoMFColorRGBA self, int idx, float r, float g, float b, float a)
        set1Value(SoMFColorRGBA self, int idx, float const [4] rgba)
        """
        return _coin.SoMFColorRGBA_set1Value(self, *args)


    def set1HSVValue(self, *args) -> "void":
        """
        set1HSVValue(SoMFColorRGBA self, int idx, float h, float s, float v, float a)
        set1HSVValue(SoMFColorRGBA self, int idx, float const [4] hsva)
        """
        return _coin.SoMFColorRGBA_set1HSVValue(self, *args)

SoMFColorRGBA_swigregister = _coin.SoMFColorRGBA_swigregister
SoMFColorRGBA_swigregister(SoMFColorRGBA)

def SoMFColorRGBA_createInstance() -> "void *":
    """SoMFColorRGBA_createInstance() -> void *"""
    return _coin.SoMFColorRGBA_createInstance()

def SoMFColorRGBA_getClassTypeId() -> "SoType":
    """SoMFColorRGBA_getClassTypeId() -> SoType"""
    return _coin.SoMFColorRGBA_getClassTypeId()

def SoMFColorRGBA_initClass() -> "void":
    """SoMFColorRGBA_initClass()"""
    return _coin.SoMFColorRGBA_initClass()

class SoMFDouble(SoMField):
    """Proxy of C++ SoMFDouble class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFDouble self) -> SoMFDouble"""
        this = _coin.new_SoMFDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFDouble
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFDouble_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFDouble_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFDouble self) -> SoType"""
        return _coin.SoMFDouble_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFDouble self, SoField field)"""
        return _coin.SoMFDouble_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFDouble self, SoField field) -> SbBool"""
        return _coin.SoMFDouble_isSame(self, field)


    def getValues(self, start: 'int const') -> "double const *":
        """getValues(SoMFDouble self, int const start) -> double const *"""
        return _coin.SoMFDouble_getValues(self, start)


    def find(self, value: 'double', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFDouble self, double value, SbBool addifnotfound=0) -> int
        find(SoMFDouble self, double value) -> int
        """
        return _coin.SoMFDouble_find(self, value, addifnotfound)


    def setValues(self, start: 'int const', num: 'int const', newvals: 'double const *') -> "void":
        """setValues(SoMFDouble self, int const start, int const num, double const * newvals)"""
        return _coin.SoMFDouble_setValues(self, start, num, newvals)


    def set1Value(self, idx: 'int const', value: 'double') -> "void":
        """set1Value(SoMFDouble self, int const idx, double value)"""
        return _coin.SoMFDouble_set1Value(self, idx, value)


    def setValue(self, value: 'double') -> "void":
        """setValue(SoMFDouble self, double value)"""
        return _coin.SoMFDouble_setValue(self, value)


    def __eq__(self, field: 'SoMFDouble') -> "SbBool":
        """__eq__(SoMFDouble self, SoMFDouble field) -> SbBool"""
        return _coin.SoMFDouble___eq__(self, field)


    def __ne__(self, field: 'SoMFDouble') -> "SbBool":
        """__ne__(SoMFDouble self, SoMFDouble field) -> SbBool"""
        return _coin.SoMFDouble___ne__(self, field)


    def startEditing(self) -> "double *":
        """startEditing(SoMFDouble self) -> double *"""
        return _coin.SoMFDouble_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFDouble self)"""
        return _coin.SoMFDouble_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFDouble self, int const num, double const * userdata)
        setValuesPointer(SoMFDouble self, int const num, double * userdata)
        """
        return _coin.SoMFDouble_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFDouble_initClass()

    initClass = staticmethod(initClass)
SoMFDouble_swigregister = _coin.SoMFDouble_swigregister
SoMFDouble_swigregister(SoMFDouble)

def SoMFDouble_createInstance() -> "void *":
    """SoMFDouble_createInstance() -> void *"""
    return _coin.SoMFDouble_createInstance()

def SoMFDouble_getClassTypeId() -> "SoType":
    """SoMFDouble_getClassTypeId() -> SoType"""
    return _coin.SoMFDouble_getClassTypeId()

def SoMFDouble_initClass() -> "void":
    """SoMFDouble_initClass()"""
    return _coin.SoMFDouble_initClass()

class SoMFEngine(SoMField):
    """Proxy of C++ SoMFEngine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFEngine self) -> SoMFEngine"""
        this = _coin.new_SoMFEngine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFEngine
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFEngine_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFEngine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFEngine self) -> SoType"""
        return _coin.SoMFEngine_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFEngine self, SoField field)"""
        return _coin.SoMFEngine_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFEngine self, SoField field) -> SbBool"""
        return _coin.SoMFEngine_isSame(self, field)


    def find(self, value: 'SoEngine', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFEngine self, SoEngine value, SbBool addifnotfound=0) -> int
        find(SoMFEngine self, SoEngine value) -> int
        """
        return _coin.SoMFEngine_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFEngine_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFEngine_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFEngine_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SoEngine') -> "void":
        """set1Value(SoMFEngine self, int const idx, SoEngine value)"""
        return _coin.SoMFEngine_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFEngine') -> "SbBool":
        """__eq__(SoMFEngine self, SoMFEngine field) -> SbBool"""
        return _coin.SoMFEngine___eq__(self, field)


    def __ne__(self, field: 'SoMFEngine') -> "SbBool":
        """__ne__(SoMFEngine self, SoMFEngine field) -> SbBool"""
        return _coin.SoMFEngine___ne__(self, field)


    def startEditing(self) -> "SoEngine **":
        """startEditing(SoMFEngine self) -> SoEngine **"""
        return _coin.SoMFEngine_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFEngine self)"""
        return _coin.SoMFEngine_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFEngine_initClass()

    initClass = staticmethod(initClass)

    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoMFEngine self, SbBool copyconnections)"""
        return _coin.SoMFEngine_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoMFEngine self) -> SbBool"""
        return _coin.SoMFEngine_referencesCopy(self)


    def deleteValues(self, start: 'int', num: 'int'=-1) -> "void":
        """
        deleteValues(SoMFEngine self, int start, int num=-1)
        deleteValues(SoMFEngine self, int start)
        """
        return _coin.SoMFEngine_deleteValues(self, start, num)


    def insertSpace(self, start: 'int', num: 'int') -> "void":
        """insertSpace(SoMFEngine self, int start, int num)"""
        return _coin.SoMFEngine_insertSpace(self, start, num)


    def __getitem__(self, i: 'int') -> "SoEngine const *":
        """__getitem__(SoMFEngine self, int i) -> SoEngine"""
        return _coin.SoMFEngine___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SoEngine') -> "void":
        """__setitem__(SoMFEngine self, int i, SoEngine value)"""
        return _coin.SoMFEngine___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFEngine self, SoEngine value)
        setValue(SoMFEngine self, SoMFEngine other)
        """
        return _coin.SoMFEngine_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SoEngine const **":
        """
        getValues(SoMFEngine self, int i=0) -> SoEngine
        getValues(SoMFEngine self) -> SoEngine const **
        """
        return _coin.SoMFEngine_getValues(self, i)

SoMFEngine_swigregister = _coin.SoMFEngine_swigregister
SoMFEngine_swigregister(SoMFEngine)

def SoMFEngine_createInstance() -> "void *":
    """SoMFEngine_createInstance() -> void *"""
    return _coin.SoMFEngine_createInstance()

def SoMFEngine_getClassTypeId() -> "SoType":
    """SoMFEngine_getClassTypeId() -> SoType"""
    return _coin.SoMFEngine_getClassTypeId()

def SoMFEngine_initClass() -> "void":
    """SoMFEngine_initClass()"""
    return _coin.SoMFEngine_initClass()

class SoMFBitMask(SoMFEnum):
    """Proxy of C++ SoMFBitMask class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFBitMask self) -> SoMFBitMask"""
        this = _coin.new_SoMFBitMask()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFBitMask
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFBitMask_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFBitMask_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFBitMask self) -> SoType"""
        return _coin.SoMFBitMask_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFBitMask self, SoField field)"""
        return _coin.SoMFBitMask_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFBitMask self, SoField field) -> SbBool"""
        return _coin.SoMFBitMask_isSame(self, field)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFBitMask_initClass()

    initClass = staticmethod(initClass)
SoMFBitMask_swigregister = _coin.SoMFBitMask_swigregister
SoMFBitMask_swigregister(SoMFBitMask)

def SoMFBitMask_createInstance() -> "void *":
    """SoMFBitMask_createInstance() -> void *"""
    return _coin.SoMFBitMask_createInstance()

def SoMFBitMask_getClassTypeId() -> "SoType":
    """SoMFBitMask_getClassTypeId() -> SoType"""
    return _coin.SoMFBitMask_getClassTypeId()

def SoMFBitMask_initClass() -> "void":
    """SoMFBitMask_initClass()"""
    return _coin.SoMFBitMask_initClass()

class SoMFInt32(SoMField):
    """Proxy of C++ SoMFInt32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFInt32 self) -> SoMFInt32"""
        this = _coin.new_SoMFInt32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFInt32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFInt32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFInt32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFInt32 self) -> SoType"""
        return _coin.SoMFInt32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFInt32 self, SoField field)"""
        return _coin.SoMFInt32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFInt32 self, SoField field) -> SbBool"""
        return _coin.SoMFInt32_isSame(self, field)


    def find(self, value: 'int32_t', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFInt32 self, int32_t value, SbBool addifnotfound=0) -> int
        find(SoMFInt32 self, int32_t value) -> int
        """
        return _coin.SoMFInt32_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFInt32):
             val = args[1].getValues()
             return _coin.SoMFInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFInt32):
             val = args[2].getValues()
             return _coin.SoMFInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFInt32_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'int32_t') -> "void":
        """set1Value(SoMFInt32 self, int const idx, int32_t value)"""
        return _coin.SoMFInt32_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFInt32') -> "SbBool":
        """__eq__(SoMFInt32 self, SoMFInt32 field) -> SbBool"""
        return _coin.SoMFInt32___eq__(self, field)


    def __ne__(self, field: 'SoMFInt32') -> "SbBool":
        """__ne__(SoMFInt32 self, SoMFInt32 field) -> SbBool"""
        return _coin.SoMFInt32___ne__(self, field)


    def startEditing(self) -> "int32_t *":
        """startEditing(SoMFInt32 self) -> int32_t *"""
        return _coin.SoMFInt32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFInt32 self)"""
        return _coin.SoMFInt32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFInt32 self, int const num, int32_t const * userdata)
        setValuesPointer(SoMFInt32 self, int const num, int32_t * userdata)
        """
        return _coin.SoMFInt32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFInt32_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "int32_t const":
        """__getitem__(SoMFInt32 self, int i) -> int32_t const"""
        return _coin.SoMFInt32___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'int32_t') -> "void":
        """__setitem__(SoMFInt32 self, int i, int32_t value)"""
        return _coin.SoMFInt32___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFInt32 self, int32_t value)
        setValue(SoMFInt32 self, SoMFInt32 other)
        """
        return _coin.SoMFInt32_setValue(self, *args)


    def getValues(self, i: 'int32_t'=0) -> "int32_t const *":
        """
        getValues(SoMFInt32 self, int32_t i=0) -> int32_t const
        getValues(SoMFInt32 self) -> int32_t const *
        """
        return _coin.SoMFInt32_getValues(self, i)

SoMFInt32_swigregister = _coin.SoMFInt32_swigregister
SoMFInt32_swigregister(SoMFInt32)

def SoMFInt32_createInstance() -> "void *":
    """SoMFInt32_createInstance() -> void *"""
    return _coin.SoMFInt32_createInstance()

def SoMFInt32_getClassTypeId() -> "SoType":
    """SoMFInt32_getClassTypeId() -> SoType"""
    return _coin.SoMFInt32_getClassTypeId()

def SoMFInt32_initClass() -> "void":
    """SoMFInt32_initClass()"""
    return _coin.SoMFInt32_initClass()

class SoMFNode(SoMField):
    """Proxy of C++ SoMFNode class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFNode self) -> SoMFNode"""
        this = _coin.new_SoMFNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFNode
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFNode_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFNode_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFNode self) -> SoType"""
        return _coin.SoMFNode_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFNode self, SoField field)"""
        return _coin.SoMFNode_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFNode self, SoField field) -> SbBool"""
        return _coin.SoMFNode_isSame(self, field)


    def find(self, value: 'SoNode', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFNode self, SoNode value, SbBool addifnotfound=0) -> int
        find(SoMFNode self, SoNode value) -> int
        """
        return _coin.SoMFNode_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFNode_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFNode_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFNode_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SoNode') -> "void":
        """set1Value(SoMFNode self, int const idx, SoNode value)"""
        return _coin.SoMFNode_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFNode') -> "SbBool":
        """__eq__(SoMFNode self, SoMFNode field) -> SbBool"""
        return _coin.SoMFNode___eq__(self, field)


    def __ne__(self, field: 'SoMFNode') -> "SbBool":
        """__ne__(SoMFNode self, SoMFNode field) -> SbBool"""
        return _coin.SoMFNode___ne__(self, field)


    def startEditing(self) -> "SoNode **":
        """startEditing(SoMFNode self) -> SoNode **"""
        return _coin.SoMFNode_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFNode self)"""
        return _coin.SoMFNode_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFNode_initClass()

    initClass = staticmethod(initClass)

    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoMFNode self, SbBool copyconnections)"""
        return _coin.SoMFNode_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoMFNode self) -> SbBool"""
        return _coin.SoMFNode_referencesCopy(self)


    def addNode(self, node: 'SoNode') -> "void":
        """addNode(SoMFNode self, SoNode node)"""
        return _coin.SoMFNode_addNode(self, node)


    def insertNode(self, node: 'SoNode', idx: 'int') -> "void":
        """insertNode(SoMFNode self, SoNode node, int idx)"""
        return _coin.SoMFNode_insertNode(self, node, idx)


    def getNode(self, idx: 'int') -> "SoNode *":
        """getNode(SoMFNode self, int idx) -> SoNode"""
        return _coin.SoMFNode_getNode(self, idx)


    def findNode(self, node: 'SoNode') -> "int":
        """findNode(SoMFNode self, SoNode node) -> int"""
        return _coin.SoMFNode_findNode(self, node)


    def getNumNodes(self) -> "int":
        """getNumNodes(SoMFNode self) -> int"""
        return _coin.SoMFNode_getNumNodes(self)


    def removeNode(self, *args) -> "void":
        """
        removeNode(SoMFNode self, int index)
        removeNode(SoMFNode self, SoNode node)
        """
        return _coin.SoMFNode_removeNode(self, *args)


    def removeAllNodes(self) -> "void":
        """removeAllNodes(SoMFNode self)"""
        return _coin.SoMFNode_removeAllNodes(self)


    def replaceNode(self, *args) -> "void":
        """
        replaceNode(SoMFNode self, int idx, SoNode newnode)
        replaceNode(SoMFNode self, SoNode oldnode, SoNode newnode)
        """
        return _coin.SoMFNode_replaceNode(self, *args)


    def deleteValues(self, start: 'int', num: 'int'=-1) -> "void":
        """
        deleteValues(SoMFNode self, int start, int num=-1)
        deleteValues(SoMFNode self, int start)
        """
        return _coin.SoMFNode_deleteValues(self, start, num)


    def insertSpace(self, start: 'int', num: 'int') -> "void":
        """insertSpace(SoMFNode self, int start, int num)"""
        return _coin.SoMFNode_insertSpace(self, start, num)


    def __getitem__(self, i: 'int') -> "SoNode const *":
        """__getitem__(SoMFNode self, int i) -> SoNode"""
        return _coin.SoMFNode___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SoNode') -> "void":
        """__setitem__(SoMFNode self, int i, SoNode value)"""
        return _coin.SoMFNode___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFNode self, SoNode value)
        setValue(SoMFNode self, SoMFNode other)
        """
        return _coin.SoMFNode_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SoNode const **":
        """
        getValues(SoMFNode self, int i=0) -> SoNode
        getValues(SoMFNode self) -> SoNode const **
        """
        return _coin.SoMFNode_getValues(self, i)

SoMFNode_swigregister = _coin.SoMFNode_swigregister
SoMFNode_swigregister(SoMFNode)

def SoMFNode_createInstance() -> "void *":
    """SoMFNode_createInstance() -> void *"""
    return _coin.SoMFNode_createInstance()

def SoMFNode_getClassTypeId() -> "SoType":
    """SoMFNode_getClassTypeId() -> SoType"""
    return _coin.SoMFNode_getClassTypeId()

def SoMFNode_initClass() -> "void":
    """SoMFNode_initClass()"""
    return _coin.SoMFNode_initClass()

class SoMFPath(SoMField):
    """Proxy of C++ SoMFPath class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFPath self) -> SoMFPath"""
        this = _coin.new_SoMFPath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFPath
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFPath_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFPath_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFPath self) -> SoType"""
        return _coin.SoMFPath_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFPath self, SoField field)"""
        return _coin.SoMFPath_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFPath self, SoField field) -> SbBool"""
        return _coin.SoMFPath_isSame(self, field)


    def find(self, value: 'SoPath', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFPath self, SoPath value, SbBool addifnotfound=0) -> int
        find(SoMFPath self, SoPath value) -> int
        """
        return _coin.SoMFPath_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFPath_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFPath_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFPath_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SoPath') -> "void":
        """set1Value(SoMFPath self, int const idx, SoPath value)"""
        return _coin.SoMFPath_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFPath') -> "SbBool":
        """__eq__(SoMFPath self, SoMFPath field) -> SbBool"""
        return _coin.SoMFPath___eq__(self, field)


    def __ne__(self, field: 'SoMFPath') -> "SbBool":
        """__ne__(SoMFPath self, SoMFPath field) -> SbBool"""
        return _coin.SoMFPath___ne__(self, field)


    def startEditing(self) -> "SoPath **":
        """startEditing(SoMFPath self) -> SoPath **"""
        return _coin.SoMFPath_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFPath self)"""
        return _coin.SoMFPath_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFPath_initClass()

    initClass = staticmethod(initClass)

    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoMFPath self, SoNotList l)"""
        return _coin.SoMFPath_notify(self, l)


    def fixCopy(self, copyconnections: 'SbBool') -> "void":
        """fixCopy(SoMFPath self, SbBool copyconnections)"""
        return _coin.SoMFPath_fixCopy(self, copyconnections)


    def referencesCopy(self) -> "SbBool":
        """referencesCopy(SoMFPath self) -> SbBool"""
        return _coin.SoMFPath_referencesCopy(self)


    def deleteValues(self, start: 'int', num: 'int'=-1) -> "void":
        """
        deleteValues(SoMFPath self, int start, int num=-1)
        deleteValues(SoMFPath self, int start)
        """
        return _coin.SoMFPath_deleteValues(self, start, num)


    def insertSpace(self, start: 'int', num: 'int') -> "void":
        """insertSpace(SoMFPath self, int start, int num)"""
        return _coin.SoMFPath_insertSpace(self, start, num)


    def __getitem__(self, i: 'int') -> "SoPath const *":
        """__getitem__(SoMFPath self, int i) -> SoPath"""
        return _coin.SoMFPath___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SoPath') -> "void":
        """__setitem__(SoMFPath self, int i, SoPath value)"""
        return _coin.SoMFPath___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFPath self, SoPath value)
        setValue(SoMFPath self, SoMFPath other)
        """
        return _coin.SoMFPath_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SoPath const **":
        """
        getValues(SoMFPath self, int i=0) -> SoPath
        getValues(SoMFPath self) -> SoPath const **
        """
        return _coin.SoMFPath_getValues(self, i)

SoMFPath_swigregister = _coin.SoMFPath_swigregister
SoMFPath_swigregister(SoMFPath)

def SoMFPath_createInstance() -> "void *":
    """SoMFPath_createInstance() -> void *"""
    return _coin.SoMFPath_createInstance()

def SoMFPath_getClassTypeId() -> "SoType":
    """SoMFPath_getClassTypeId() -> SoType"""
    return _coin.SoMFPath_getClassTypeId()

def SoMFPath_initClass() -> "void":
    """SoMFPath_initClass()"""
    return _coin.SoMFPath_initClass()

class SoMFPlane(SoMField):
    """Proxy of C++ SoMFPlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFPlane self) -> SoMFPlane"""
        this = _coin.new_SoMFPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFPlane
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFPlane_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFPlane_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFPlane self) -> SoType"""
        return _coin.SoMFPlane_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFPlane self, SoField field)"""
        return _coin.SoMFPlane_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFPlane self, SoField field) -> SbBool"""
        return _coin.SoMFPlane_isSame(self, field)


    def find(self, value: 'SbPlane', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFPlane self, SbPlane value, SbBool addifnotfound=0) -> int
        find(SoMFPlane self, SbPlane value) -> int
        """
        return _coin.SoMFPlane_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFPlane_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFPlane_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFPlane_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SbPlane') -> "void":
        """set1Value(SoMFPlane self, int const idx, SbPlane value)"""
        return _coin.SoMFPlane_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFPlane') -> "SbBool":
        """__eq__(SoMFPlane self, SoMFPlane field) -> SbBool"""
        return _coin.SoMFPlane___eq__(self, field)


    def __ne__(self, field: 'SoMFPlane') -> "SbBool":
        """__ne__(SoMFPlane self, SoMFPlane field) -> SbBool"""
        return _coin.SoMFPlane___ne__(self, field)


    def startEditing(self) -> "SbPlane *":
        """startEditing(SoMFPlane self) -> SbPlane"""
        return _coin.SoMFPlane_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFPlane self)"""
        return _coin.SoMFPlane_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFPlane_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "SbPlane const &":
        """__getitem__(SoMFPlane self, int i) -> SbPlane"""
        return _coin.SoMFPlane___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbPlane') -> "void":
        """__setitem__(SoMFPlane self, int i, SbPlane value)"""
        return _coin.SoMFPlane___setitem__(self, i, value)


    def getValues(self, i: 'int'=0) -> "SbPlane const *":
        """
        getValues(SoMFPlane self, int i=0) -> SbPlane
        getValues(SoMFPlane self) -> SbPlane
        """
        return _coin.SoMFPlane_getValues(self, i)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFPlane self, SbPlane value)
        setValue(SoMFPlane self, SoMFPlane other)
        """
        return _coin.SoMFPlane_setValue(self, *args)

SoMFPlane_swigregister = _coin.SoMFPlane_swigregister
SoMFPlane_swigregister(SoMFPlane)

def SoMFPlane_createInstance() -> "void *":
    """SoMFPlane_createInstance() -> void *"""
    return _coin.SoMFPlane_createInstance()

def SoMFPlane_getClassTypeId() -> "SoType":
    """SoMFPlane_getClassTypeId() -> SoType"""
    return _coin.SoMFPlane_getClassTypeId()

def SoMFPlane_initClass() -> "void":
    """SoMFPlane_initClass()"""
    return _coin.SoMFPlane_initClass()

class SoMFShort(SoMField):
    """Proxy of C++ SoMFShort class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFShort self) -> SoMFShort"""
        this = _coin.new_SoMFShort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFShort
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFShort_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFShort_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFShort self) -> SoType"""
        return _coin.SoMFShort_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFShort self, SoField field)"""
        return _coin.SoMFShort_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFShort self, SoField field) -> SbBool"""
        return _coin.SoMFShort_isSame(self, field)


    def find(self, value: 'short', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFShort self, short value, SbBool addifnotfound=0) -> int
        find(SoMFShort self, short value) -> int
        """
        return _coin.SoMFShort_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFShort_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'short') -> "void":
        """set1Value(SoMFShort self, int const idx, short value)"""
        return _coin.SoMFShort_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFShort') -> "SbBool":
        """__eq__(SoMFShort self, SoMFShort field) -> SbBool"""
        return _coin.SoMFShort___eq__(self, field)


    def __ne__(self, field: 'SoMFShort') -> "SbBool":
        """__ne__(SoMFShort self, SoMFShort field) -> SbBool"""
        return _coin.SoMFShort___ne__(self, field)


    def startEditing(self) -> "short *":
        """startEditing(SoMFShort self) -> short *"""
        return _coin.SoMFShort_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFShort self)"""
        return _coin.SoMFShort_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFShort self, int const num, short const * userdata)
        setValuesPointer(SoMFShort self, int const num, short * userdata)
        """
        return _coin.SoMFShort_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFShort_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "short const":
        """__getitem__(SoMFShort self, int i) -> short const"""
        return _coin.SoMFShort___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'short') -> "void":
        """__setitem__(SoMFShort self, int i, short value)"""
        return _coin.SoMFShort___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFShort self, short value)
        setValue(SoMFShort self, SoMFShort other)
        """
        return _coin.SoMFShort_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "short const *":
        """
        getValues(SoMFShort self, int i=0) -> short const
        getValues(SoMFShort self) -> short const *
        """
        return _coin.SoMFShort_getValues(self, i)

SoMFShort_swigregister = _coin.SoMFShort_swigregister
SoMFShort_swigregister(SoMFShort)

def SoMFShort_createInstance() -> "void *":
    """SoMFShort_createInstance() -> void *"""
    return _coin.SoMFShort_createInstance()

def SoMFShort_getClassTypeId() -> "SoType":
    """SoMFShort_getClassTypeId() -> SoType"""
    return _coin.SoMFShort_getClassTypeId()

def SoMFShort_initClass() -> "void":
    """SoMFShort_initClass()"""
    return _coin.SoMFShort_initClass()

class SoMFTime(SoMField):
    """Proxy of C++ SoMFTime class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFTime self) -> SoMFTime"""
        this = _coin.new_SoMFTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFTime
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFTime_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFTime_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFTime self) -> SoType"""
        return _coin.SoMFTime_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFTime self, SoField field)"""
        return _coin.SoMFTime_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFTime self, SoField field) -> SbBool"""
        return _coin.SoMFTime_isSame(self, field)


    def find(self, value: 'SbTime', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFTime self, SbTime value, SbBool addifnotfound=0) -> int
        find(SoMFTime self, SbTime value) -> int
        """
        return _coin.SoMFTime_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFTime_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFTime_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFTime_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'SbTime') -> "void":
        """set1Value(SoMFTime self, int const idx, SbTime value)"""
        return _coin.SoMFTime_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFTime') -> "SbBool":
        """__eq__(SoMFTime self, SoMFTime field) -> SbBool"""
        return _coin.SoMFTime___eq__(self, field)


    def __ne__(self, field: 'SoMFTime') -> "SbBool":
        """__ne__(SoMFTime self, SoMFTime field) -> SbBool"""
        return _coin.SoMFTime___ne__(self, field)


    def startEditing(self) -> "SbTime *":
        """startEditing(SoMFTime self) -> SbTime"""
        return _coin.SoMFTime_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFTime self)"""
        return _coin.SoMFTime_finishEditing(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFTime_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "SbTime const &":
        """__getitem__(SoMFTime self, int i) -> SbTime"""
        return _coin.SoMFTime___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbTime') -> "void":
        """__setitem__(SoMFTime self, int i, SbTime value)"""
        return _coin.SoMFTime___setitem__(self, i, value)


    def getValues(self, i: 'int'=0) -> "SbTime const *":
        """
        getValues(SoMFTime self, int i=0) -> SbTime
        getValues(SoMFTime self) -> SbTime
        """
        return _coin.SoMFTime_getValues(self, i)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFTime self, SbTime value)
        setValue(SoMFTime self, SoMFTime other)
        """
        return _coin.SoMFTime_setValue(self, *args)

SoMFTime_swigregister = _coin.SoMFTime_swigregister
SoMFTime_swigregister(SoMFTime)

def SoMFTime_createInstance() -> "void *":
    """SoMFTime_createInstance() -> void *"""
    return _coin.SoMFTime_createInstance()

def SoMFTime_getClassTypeId() -> "SoType":
    """SoMFTime_getClassTypeId() -> SoType"""
    return _coin.SoMFTime_getClassTypeId()

def SoMFTime_initClass() -> "void":
    """SoMFTime_initClass()"""
    return _coin.SoMFTime_initClass()

class SoMFUInt32(SoMField):
    """Proxy of C++ SoMFUInt32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFUInt32 self) -> SoMFUInt32"""
        this = _coin.new_SoMFUInt32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFUInt32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFUInt32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFUInt32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFUInt32 self) -> SoType"""
        return _coin.SoMFUInt32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFUInt32 self, SoField field)"""
        return _coin.SoMFUInt32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFUInt32 self, SoField field) -> SbBool"""
        return _coin.SoMFUInt32_isSame(self, field)


    def find(self, value: 'uint32_t', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFUInt32 self, uint32_t value, SbBool addifnotfound=0) -> int
        find(SoMFUInt32 self, uint32_t value) -> int
        """
        return _coin.SoMFUInt32_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFUInt32):
             val = args[1].getValues()
             return _coin.SoMFUInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFUInt32):
             val = args[2].getValues()
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUInt32_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'uint32_t') -> "void":
        """set1Value(SoMFUInt32 self, int const idx, uint32_t value)"""
        return _coin.SoMFUInt32_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFUInt32') -> "SbBool":
        """__eq__(SoMFUInt32 self, SoMFUInt32 field) -> SbBool"""
        return _coin.SoMFUInt32___eq__(self, field)


    def __ne__(self, field: 'SoMFUInt32') -> "SbBool":
        """__ne__(SoMFUInt32 self, SoMFUInt32 field) -> SbBool"""
        return _coin.SoMFUInt32___ne__(self, field)


    def startEditing(self) -> "uint32_t *":
        """startEditing(SoMFUInt32 self) -> uint32_t *"""
        return _coin.SoMFUInt32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFUInt32 self)"""
        return _coin.SoMFUInt32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFUInt32 self, int const num, uint32_t const * userdata)
        setValuesPointer(SoMFUInt32 self, int const num, uint32_t * userdata)
        """
        return _coin.SoMFUInt32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFUInt32_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "uint32_t const":
        """__getitem__(SoMFUInt32 self, int i) -> uint32_t const"""
        return _coin.SoMFUInt32___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'uint32_t') -> "void":
        """__setitem__(SoMFUInt32 self, int i, uint32_t value)"""
        return _coin.SoMFUInt32___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFUInt32 self, uint32_t value)
        setValue(SoMFUInt32 self, SoMFUInt32 other)
        """
        return _coin.SoMFUInt32_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "uint32_t const *":
        """
        getValues(SoMFUInt32 self, int i=0) -> uint32_t const
        getValues(SoMFUInt32 self) -> uint32_t const *
        """
        return _coin.SoMFUInt32_getValues(self, i)

SoMFUInt32_swigregister = _coin.SoMFUInt32_swigregister
SoMFUInt32_swigregister(SoMFUInt32)

def SoMFUInt32_createInstance() -> "void *":
    """SoMFUInt32_createInstance() -> void *"""
    return _coin.SoMFUInt32_createInstance()

def SoMFUInt32_getClassTypeId() -> "SoType":
    """SoMFUInt32_getClassTypeId() -> SoType"""
    return _coin.SoMFUInt32_getClassTypeId()

def SoMFUInt32_initClass() -> "void":
    """SoMFUInt32_initClass()"""
    return _coin.SoMFUInt32_initClass()

class SoMFUShort(SoMField):
    """Proxy of C++ SoMFUShort class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFUShort self) -> SoMFUShort"""
        this = _coin.new_SoMFUShort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFUShort
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFUShort_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFUShort_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFUShort self) -> SoType"""
        return _coin.SoMFUShort_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFUShort self, SoField field)"""
        return _coin.SoMFUShort_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFUShort self, SoField field) -> SbBool"""
        return _coin.SoMFUShort_isSame(self, field)


    def find(self, value: 'unsigned short', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFUShort self, unsigned short value, SbBool addifnotfound=0) -> int
        find(SoMFUShort self, unsigned short value) -> int
        """
        return _coin.SoMFUShort_find(self, value, addifnotfound)


    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFUShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFUShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUShort_setValues(*args)



    def set1Value(self, idx: 'int const', value: 'unsigned short') -> "void":
        """set1Value(SoMFUShort self, int const idx, unsigned short value)"""
        return _coin.SoMFUShort_set1Value(self, idx, value)


    def __eq__(self, field: 'SoMFUShort') -> "SbBool":
        """__eq__(SoMFUShort self, SoMFUShort field) -> SbBool"""
        return _coin.SoMFUShort___eq__(self, field)


    def __ne__(self, field: 'SoMFUShort') -> "SbBool":
        """__ne__(SoMFUShort self, SoMFUShort field) -> SbBool"""
        return _coin.SoMFUShort___ne__(self, field)


    def startEditing(self) -> "unsigned short *":
        """startEditing(SoMFUShort self) -> unsigned short *"""
        return _coin.SoMFUShort_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFUShort self)"""
        return _coin.SoMFUShort_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFUShort self, int const num, unsigned short const * userdata)
        setValuesPointer(SoMFUShort self, int const num, unsigned short * userdata)
        """
        return _coin.SoMFUShort_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFUShort_initClass()

    initClass = staticmethod(initClass)

    def __getitem__(self, i: 'int') -> "short const":
        """__getitem__(SoMFUShort self, int i) -> short const"""
        return _coin.SoMFUShort___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'short') -> "void":
        """__setitem__(SoMFUShort self, int i, short value)"""
        return _coin.SoMFUShort___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFUShort self, unsigned short value)
        setValue(SoMFUShort self, SoMFUShort other)
        """
        return _coin.SoMFUShort_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "unsigned short const *":
        """
        getValues(SoMFUShort self, int i=0) -> unsigned short const
        getValues(SoMFUShort self) -> unsigned short const *
        """
        return _coin.SoMFUShort_getValues(self, i)

SoMFUShort_swigregister = _coin.SoMFUShort_swigregister
SoMFUShort_swigregister(SoMFUShort)

def SoMFUShort_createInstance() -> "void *":
    """SoMFUShort_createInstance() -> void *"""
    return _coin.SoMFUShort_createInstance()

def SoMFUShort_getClassTypeId() -> "SoType":
    """SoMFUShort_getClassTypeId() -> SoType"""
    return _coin.SoMFUShort_getClassTypeId()

def SoMFUShort_initClass() -> "void":
    """SoMFUShort_initClass()"""
    return _coin.SoMFUShort_initClass()

class SoMFVec2b(SoMField):
    """Proxy of C++ SoMFVec2b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec2b self) -> SoMFVec2b"""
        this = _coin.new_SoMFVec2b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec2b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec2b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec2b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec2b self) -> SoType"""
        return _coin.SoMFVec2b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec2b self, SoField field)"""
        return _coin.SoMFVec2b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec2b self, SoField field) -> SbBool"""
        return _coin.SoMFVec2b_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec2b const *":
        """getValues(SoMFVec2b self, int const start) -> SbVec2b"""
        return _coin.SoMFVec2b_getValues(self, start)


    def find(self, value: 'SbVec2b', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec2b self, SbVec2b value, SbBool addifnotfound=0) -> int
        find(SoMFVec2b self, SbVec2b value) -> int
        """
        return _coin.SoMFVec2b_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec2b') -> "SbBool":
        """__eq__(SoMFVec2b self, SoMFVec2b field) -> SbBool"""
        return _coin.SoMFVec2b___eq__(self, field)


    def __ne__(self, field: 'SoMFVec2b') -> "SbBool":
        """__ne__(SoMFVec2b self, SoMFVec2b field) -> SbBool"""
        return _coin.SoMFVec2b___ne__(self, field)


    def startEditing(self) -> "SbVec2b *":
        """startEditing(SoMFVec2b self) -> SbVec2b"""
        return _coin.SoMFVec2b_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec2b self)"""
        return _coin.SoMFVec2b_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec2b self, int const num, SbVec2b userdata)
        setValuesPointer(SoMFVec2b self, int const num, SbVec2b userdata)
        setValuesPointer(SoMFVec2b self, int const num, int8_t const * userdata)
        setValuesPointer(SoMFVec2b self, int const num, int8_t * userdata)
        """
        return _coin.SoMFVec2b_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec2b_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec2b self, int const start, int const num, SbVec2b newvals)
        setValues(SoMFVec2b self, int start, int num, int8_t const [][2] xy)
        """
        return _coin.SoMFVec2b_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec2b self, int const idx, SbVec2b value)
        set1Value(SoMFVec2b self, int idx, int8_t x, int8_t y)
        set1Value(SoMFVec2b self, int idx, int8_t const [2] xy)
        """
        return _coin.SoMFVec2b_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec2b self, SbVec2b value)
        setValue(SoMFVec2b self, int8_t x, int8_t y)
        setValue(SoMFVec2b self, int8_t const [2] xy)
        """
        return _coin.SoMFVec2b_setValue(self, *args)

SoMFVec2b_swigregister = _coin.SoMFVec2b_swigregister
SoMFVec2b_swigregister(SoMFVec2b)

def SoMFVec2b_createInstance() -> "void *":
    """SoMFVec2b_createInstance() -> void *"""
    return _coin.SoMFVec2b_createInstance()

def SoMFVec2b_getClassTypeId() -> "SoType":
    """SoMFVec2b_getClassTypeId() -> SoType"""
    return _coin.SoMFVec2b_getClassTypeId()

def SoMFVec2b_initClass() -> "void":
    """SoMFVec2b_initClass()"""
    return _coin.SoMFVec2b_initClass()

class SoMFVec2s(SoMField):
    """Proxy of C++ SoMFVec2s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec2s self) -> SoMFVec2s"""
        this = _coin.new_SoMFVec2s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec2s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec2s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec2s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec2s self) -> SoType"""
        return _coin.SoMFVec2s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec2s self, SoField field)"""
        return _coin.SoMFVec2s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec2s self, SoField field) -> SbBool"""
        return _coin.SoMFVec2s_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec2s const *":
        """getValues(SoMFVec2s self, int const start) -> SbVec2s"""
        return _coin.SoMFVec2s_getValues(self, start)


    def find(self, value: 'SbVec2s', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec2s self, SbVec2s value, SbBool addifnotfound=0) -> int
        find(SoMFVec2s self, SbVec2s value) -> int
        """
        return _coin.SoMFVec2s_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec2s') -> "SbBool":
        """__eq__(SoMFVec2s self, SoMFVec2s field) -> SbBool"""
        return _coin.SoMFVec2s___eq__(self, field)


    def __ne__(self, field: 'SoMFVec2s') -> "SbBool":
        """__ne__(SoMFVec2s self, SoMFVec2s field) -> SbBool"""
        return _coin.SoMFVec2s___ne__(self, field)


    def startEditing(self) -> "SbVec2s *":
        """startEditing(SoMFVec2s self) -> SbVec2s"""
        return _coin.SoMFVec2s_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec2s self)"""
        return _coin.SoMFVec2s_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec2s self, int const num, SbVec2s userdata)
        setValuesPointer(SoMFVec2s self, int const num, SbVec2s userdata)
        setValuesPointer(SoMFVec2s self, int const num, short const * userdata)
        setValuesPointer(SoMFVec2s self, int const num, short * userdata)
        """
        return _coin.SoMFVec2s_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec2s_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec2s self, int const start, int const num, SbVec2s newvals)
        setValues(SoMFVec2s self, int start, int num, short const [][2] xy)
        """
        return _coin.SoMFVec2s_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec2s self, int const idx, SbVec2s value)
        set1Value(SoMFVec2s self, int idx, short x, short y)
        set1Value(SoMFVec2s self, int idx, short const [2] xy)
        """
        return _coin.SoMFVec2s_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec2s self, SbVec2s value)
        setValue(SoMFVec2s self, short x, short y)
        setValue(SoMFVec2s self, short const [2] xy)
        """
        return _coin.SoMFVec2s_setValue(self, *args)

SoMFVec2s_swigregister = _coin.SoMFVec2s_swigregister
SoMFVec2s_swigregister(SoMFVec2s)

def SoMFVec2s_createInstance() -> "void *":
    """SoMFVec2s_createInstance() -> void *"""
    return _coin.SoMFVec2s_createInstance()

def SoMFVec2s_getClassTypeId() -> "SoType":
    """SoMFVec2s_getClassTypeId() -> SoType"""
    return _coin.SoMFVec2s_getClassTypeId()

def SoMFVec2s_initClass() -> "void":
    """SoMFVec2s_initClass()"""
    return _coin.SoMFVec2s_initClass()

class SoMFVec2i32(SoMField):
    """Proxy of C++ SoMFVec2i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec2i32 self) -> SoMFVec2i32"""
        this = _coin.new_SoMFVec2i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec2i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec2i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec2i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec2i32 self) -> SoType"""
        return _coin.SoMFVec2i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec2i32 self, SoField field)"""
        return _coin.SoMFVec2i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec2i32 self, SoField field) -> SbBool"""
        return _coin.SoMFVec2i32_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec2i32 const *":
        """getValues(SoMFVec2i32 self, int const start) -> SbVec2i32"""
        return _coin.SoMFVec2i32_getValues(self, start)


    def find(self, value: 'SbVec2i32', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec2i32 self, SbVec2i32 value, SbBool addifnotfound=0) -> int
        find(SoMFVec2i32 self, SbVec2i32 value) -> int
        """
        return _coin.SoMFVec2i32_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec2i32') -> "SbBool":
        """__eq__(SoMFVec2i32 self, SoMFVec2i32 field) -> SbBool"""
        return _coin.SoMFVec2i32___eq__(self, field)


    def __ne__(self, field: 'SoMFVec2i32') -> "SbBool":
        """__ne__(SoMFVec2i32 self, SoMFVec2i32 field) -> SbBool"""
        return _coin.SoMFVec2i32___ne__(self, field)


    def startEditing(self) -> "SbVec2i32 *":
        """startEditing(SoMFVec2i32 self) -> SbVec2i32"""
        return _coin.SoMFVec2i32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec2i32 self)"""
        return _coin.SoMFVec2i32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec2i32 self, int const num, SbVec2i32 userdata)
        setValuesPointer(SoMFVec2i32 self, int const num, SbVec2i32 userdata)
        setValuesPointer(SoMFVec2i32 self, int const num, int32_t const * userdata)
        setValuesPointer(SoMFVec2i32 self, int const num, int32_t * userdata)
        """
        return _coin.SoMFVec2i32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec2i32_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec2i32 self, int const start, int const num, SbVec2i32 newvals)
        setValues(SoMFVec2i32 self, int start, int num, int32_t const [][2] xy)
        """
        return _coin.SoMFVec2i32_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec2i32 self, int const idx, SbVec2i32 value)
        set1Value(SoMFVec2i32 self, int idx, int32_t x, int32_t y)
        set1Value(SoMFVec2i32 self, int idx, int32_t const [2] xy)
        """
        return _coin.SoMFVec2i32_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec2i32 self, SbVec2i32 value)
        setValue(SoMFVec2i32 self, int32_t x, int32_t y)
        setValue(SoMFVec2i32 self, int32_t const [2] xy)
        """
        return _coin.SoMFVec2i32_setValue(self, *args)

SoMFVec2i32_swigregister = _coin.SoMFVec2i32_swigregister
SoMFVec2i32_swigregister(SoMFVec2i32)

def SoMFVec2i32_createInstance() -> "void *":
    """SoMFVec2i32_createInstance() -> void *"""
    return _coin.SoMFVec2i32_createInstance()

def SoMFVec2i32_getClassTypeId() -> "SoType":
    """SoMFVec2i32_getClassTypeId() -> SoType"""
    return _coin.SoMFVec2i32_getClassTypeId()

def SoMFVec2i32_initClass() -> "void":
    """SoMFVec2i32_initClass()"""
    return _coin.SoMFVec2i32_initClass()

class SoMFVec2d(SoMField):
    """Proxy of C++ SoMFVec2d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec2d self) -> SoMFVec2d"""
        this = _coin.new_SoMFVec2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec2d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec2d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec2d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec2d self) -> SoType"""
        return _coin.SoMFVec2d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec2d self, SoField field)"""
        return _coin.SoMFVec2d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec2d self, SoField field) -> SbBool"""
        return _coin.SoMFVec2d_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec2d const *":
        """getValues(SoMFVec2d self, int const start) -> SbVec2d"""
        return _coin.SoMFVec2d_getValues(self, start)


    def find(self, value: 'SbVec2d', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec2d self, SbVec2d value, SbBool addifnotfound=0) -> int
        find(SoMFVec2d self, SbVec2d value) -> int
        """
        return _coin.SoMFVec2d_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec2d') -> "SbBool":
        """__eq__(SoMFVec2d self, SoMFVec2d field) -> SbBool"""
        return _coin.SoMFVec2d___eq__(self, field)


    def __ne__(self, field: 'SoMFVec2d') -> "SbBool":
        """__ne__(SoMFVec2d self, SoMFVec2d field) -> SbBool"""
        return _coin.SoMFVec2d___ne__(self, field)


    def startEditing(self) -> "SbVec2d *":
        """startEditing(SoMFVec2d self) -> SbVec2d"""
        return _coin.SoMFVec2d_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec2d self)"""
        return _coin.SoMFVec2d_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec2d self, int const num, SbVec2d userdata)
        setValuesPointer(SoMFVec2d self, int const num, SbVec2d userdata)
        setValuesPointer(SoMFVec2d self, int const num, double const * userdata)
        setValuesPointer(SoMFVec2d self, int const num, double * userdata)
        """
        return _coin.SoMFVec2d_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec2d_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec2d self, int const start, int const num, SbVec2d newvals)
        setValues(SoMFVec2d self, int start, int num, double const [][2] xy)
        """
        return _coin.SoMFVec2d_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec2d self, int const idx, SbVec2d value)
        set1Value(SoMFVec2d self, int idx, double x, double y)
        set1Value(SoMFVec2d self, int idx, double const [2] xy)
        """
        return _coin.SoMFVec2d_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec2d self, SbVec2d value)
        setValue(SoMFVec2d self, double x, double y)
        setValue(SoMFVec2d self, double const [2] xy)
        """
        return _coin.SoMFVec2d_setValue(self, *args)

SoMFVec2d_swigregister = _coin.SoMFVec2d_swigregister
SoMFVec2d_swigregister(SoMFVec2d)

def SoMFVec2d_createInstance() -> "void *":
    """SoMFVec2d_createInstance() -> void *"""
    return _coin.SoMFVec2d_createInstance()

def SoMFVec2d_getClassTypeId() -> "SoType":
    """SoMFVec2d_getClassTypeId() -> SoType"""
    return _coin.SoMFVec2d_getClassTypeId()

def SoMFVec2d_initClass() -> "void":
    """SoMFVec2d_initClass()"""
    return _coin.SoMFVec2d_initClass()

class SoMFVec3b(SoMField):
    """Proxy of C++ SoMFVec3b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec3b self) -> SoMFVec3b"""
        this = _coin.new_SoMFVec3b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec3b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec3b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec3b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec3b self) -> SoType"""
        return _coin.SoMFVec3b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec3b self, SoField field)"""
        return _coin.SoMFVec3b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec3b self, SoField field) -> SbBool"""
        return _coin.SoMFVec3b_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec3b const *":
        """getValues(SoMFVec3b self, int const start) -> SbVec3b"""
        return _coin.SoMFVec3b_getValues(self, start)


    def find(self, value: 'SbVec3b', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec3b self, SbVec3b value, SbBool addifnotfound=0) -> int
        find(SoMFVec3b self, SbVec3b value) -> int
        """
        return _coin.SoMFVec3b_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec3b') -> "SbBool":
        """__eq__(SoMFVec3b self, SoMFVec3b field) -> SbBool"""
        return _coin.SoMFVec3b___eq__(self, field)


    def __ne__(self, field: 'SoMFVec3b') -> "SbBool":
        """__ne__(SoMFVec3b self, SoMFVec3b field) -> SbBool"""
        return _coin.SoMFVec3b___ne__(self, field)


    def startEditing(self) -> "SbVec3b *":
        """startEditing(SoMFVec3b self) -> SbVec3b"""
        return _coin.SoMFVec3b_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec3b self)"""
        return _coin.SoMFVec3b_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec3b self, int const num, SbVec3b userdata)
        setValuesPointer(SoMFVec3b self, int const num, SbVec3b userdata)
        setValuesPointer(SoMFVec3b self, int const num, int8_t const * userdata)
        setValuesPointer(SoMFVec3b self, int const num, int8_t * userdata)
        """
        return _coin.SoMFVec3b_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec3b_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec3b self, int const start, int const num, SbVec3b newvals)
        setValues(SoMFVec3b self, int start, int num, int8_t const [][3] xyz)
        """
        return _coin.SoMFVec3b_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec3b self, int const idx, SbVec3b value)
        set1Value(SoMFVec3b self, int idx, int8_t x, int8_t y, int8_t z)
        set1Value(SoMFVec3b self, int idx, int8_t const [3] xyz)
        """
        return _coin.SoMFVec3b_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec3b self, SbVec3b value)
        setValue(SoMFVec3b self, int8_t x, int8_t y, int8_t z)
        setValue(SoMFVec3b self, int8_t const [3] xyz)
        """
        return _coin.SoMFVec3b_setValue(self, *args)

SoMFVec3b_swigregister = _coin.SoMFVec3b_swigregister
SoMFVec3b_swigregister(SoMFVec3b)

def SoMFVec3b_createInstance() -> "void *":
    """SoMFVec3b_createInstance() -> void *"""
    return _coin.SoMFVec3b_createInstance()

def SoMFVec3b_getClassTypeId() -> "SoType":
    """SoMFVec3b_getClassTypeId() -> SoType"""
    return _coin.SoMFVec3b_getClassTypeId()

def SoMFVec3b_initClass() -> "void":
    """SoMFVec3b_initClass()"""
    return _coin.SoMFVec3b_initClass()

class SoMFVec3s(SoMField):
    """Proxy of C++ SoMFVec3s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec3s self) -> SoMFVec3s"""
        this = _coin.new_SoMFVec3s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec3s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec3s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec3s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec3s self) -> SoType"""
        return _coin.SoMFVec3s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec3s self, SoField field)"""
        return _coin.SoMFVec3s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec3s self, SoField field) -> SbBool"""
        return _coin.SoMFVec3s_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec3s const *":
        """getValues(SoMFVec3s self, int const start) -> SbVec3s"""
        return _coin.SoMFVec3s_getValues(self, start)


    def find(self, value: 'SbVec3s', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec3s self, SbVec3s value, SbBool addifnotfound=0) -> int
        find(SoMFVec3s self, SbVec3s value) -> int
        """
        return _coin.SoMFVec3s_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec3s') -> "SbBool":
        """__eq__(SoMFVec3s self, SoMFVec3s field) -> SbBool"""
        return _coin.SoMFVec3s___eq__(self, field)


    def __ne__(self, field: 'SoMFVec3s') -> "SbBool":
        """__ne__(SoMFVec3s self, SoMFVec3s field) -> SbBool"""
        return _coin.SoMFVec3s___ne__(self, field)


    def startEditing(self) -> "SbVec3s *":
        """startEditing(SoMFVec3s self) -> SbVec3s"""
        return _coin.SoMFVec3s_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec3s self)"""
        return _coin.SoMFVec3s_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec3s self, int const num, SbVec3s userdata)
        setValuesPointer(SoMFVec3s self, int const num, SbVec3s userdata)
        setValuesPointer(SoMFVec3s self, int const num, short const * userdata)
        setValuesPointer(SoMFVec3s self, int const num, short * userdata)
        """
        return _coin.SoMFVec3s_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec3s_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec3s self, int const start, int const num, SbVec3s newvals)
        setValues(SoMFVec3s self, int start, int num, short const [][3] xyz)
        """
        return _coin.SoMFVec3s_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec3s self, int const idx, SbVec3s value)
        set1Value(SoMFVec3s self, int idx, short x, short y, short z)
        set1Value(SoMFVec3s self, int idx, short const [3] xyz)
        """
        return _coin.SoMFVec3s_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec3s self, SbVec3s value)
        setValue(SoMFVec3s self, short x, short y, short z)
        setValue(SoMFVec3s self, short const [3] xyz)
        """
        return _coin.SoMFVec3s_setValue(self, *args)

SoMFVec3s_swigregister = _coin.SoMFVec3s_swigregister
SoMFVec3s_swigregister(SoMFVec3s)

def SoMFVec3s_createInstance() -> "void *":
    """SoMFVec3s_createInstance() -> void *"""
    return _coin.SoMFVec3s_createInstance()

def SoMFVec3s_getClassTypeId() -> "SoType":
    """SoMFVec3s_getClassTypeId() -> SoType"""
    return _coin.SoMFVec3s_getClassTypeId()

def SoMFVec3s_initClass() -> "void":
    """SoMFVec3s_initClass()"""
    return _coin.SoMFVec3s_initClass()

class SoMFVec3i32(SoMField):
    """Proxy of C++ SoMFVec3i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec3i32 self) -> SoMFVec3i32"""
        this = _coin.new_SoMFVec3i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec3i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec3i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec3i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec3i32 self) -> SoType"""
        return _coin.SoMFVec3i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec3i32 self, SoField field)"""
        return _coin.SoMFVec3i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec3i32 self, SoField field) -> SbBool"""
        return _coin.SoMFVec3i32_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec3i32 const *":
        """getValues(SoMFVec3i32 self, int const start) -> SbVec3i32"""
        return _coin.SoMFVec3i32_getValues(self, start)


    def find(self, value: 'SbVec3i32', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec3i32 self, SbVec3i32 value, SbBool addifnotfound=0) -> int
        find(SoMFVec3i32 self, SbVec3i32 value) -> int
        """
        return _coin.SoMFVec3i32_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec3i32') -> "SbBool":
        """__eq__(SoMFVec3i32 self, SoMFVec3i32 field) -> SbBool"""
        return _coin.SoMFVec3i32___eq__(self, field)


    def __ne__(self, field: 'SoMFVec3i32') -> "SbBool":
        """__ne__(SoMFVec3i32 self, SoMFVec3i32 field) -> SbBool"""
        return _coin.SoMFVec3i32___ne__(self, field)


    def startEditing(self) -> "SbVec3i32 *":
        """startEditing(SoMFVec3i32 self) -> SbVec3i32"""
        return _coin.SoMFVec3i32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec3i32 self)"""
        return _coin.SoMFVec3i32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec3i32 self, int const num, SbVec3i32 userdata)
        setValuesPointer(SoMFVec3i32 self, int const num, SbVec3i32 userdata)
        setValuesPointer(SoMFVec3i32 self, int const num, int32_t const * userdata)
        setValuesPointer(SoMFVec3i32 self, int const num, int32_t * userdata)
        """
        return _coin.SoMFVec3i32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec3i32_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec3i32 self, int const start, int const num, SbVec3i32 newvals)
        setValues(SoMFVec3i32 self, int start, int num, int32_t const [][3] xyz)
        """
        return _coin.SoMFVec3i32_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec3i32 self, int const idx, SbVec3i32 value)
        set1Value(SoMFVec3i32 self, int idx, int32_t x, int32_t y, int32_t z)
        set1Value(SoMFVec3i32 self, int idx, int32_t const [3] xyz)
        """
        return _coin.SoMFVec3i32_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec3i32 self, SbVec3i32 value)
        setValue(SoMFVec3i32 self, int32_t x, int32_t y, int32_t z)
        setValue(SoMFVec3i32 self, int32_t const [3] xyz)
        """
        return _coin.SoMFVec3i32_setValue(self, *args)

SoMFVec3i32_swigregister = _coin.SoMFVec3i32_swigregister
SoMFVec3i32_swigregister(SoMFVec3i32)

def SoMFVec3i32_createInstance() -> "void *":
    """SoMFVec3i32_createInstance() -> void *"""
    return _coin.SoMFVec3i32_createInstance()

def SoMFVec3i32_getClassTypeId() -> "SoType":
    """SoMFVec3i32_getClassTypeId() -> SoType"""
    return _coin.SoMFVec3i32_getClassTypeId()

def SoMFVec3i32_initClass() -> "void":
    """SoMFVec3i32_initClass()"""
    return _coin.SoMFVec3i32_initClass()

class SoMFVec3d(SoMField):
    """Proxy of C++ SoMFVec3d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec3d self) -> SoMFVec3d"""
        this = _coin.new_SoMFVec3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec3d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec3d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec3d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec3d self) -> SoType"""
        return _coin.SoMFVec3d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec3d self, SoField field)"""
        return _coin.SoMFVec3d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec3d self, SoField field) -> SbBool"""
        return _coin.SoMFVec3d_isSame(self, field)


    def find(self, value: 'SbVec3d', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec3d self, SbVec3d value, SbBool addifnotfound=0) -> int
        find(SoMFVec3d self, SbVec3d value) -> int
        """
        return _coin.SoMFVec3d_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec3d') -> "SbBool":
        """__eq__(SoMFVec3d self, SoMFVec3d field) -> SbBool"""
        return _coin.SoMFVec3d___eq__(self, field)


    def __ne__(self, field: 'SoMFVec3d') -> "SbBool":
        """__ne__(SoMFVec3d self, SoMFVec3d field) -> SbBool"""
        return _coin.SoMFVec3d___ne__(self, field)


    def startEditing(self) -> "SbVec3d *":
        """startEditing(SoMFVec3d self) -> SbVec3d"""
        return _coin.SoMFVec3d_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec3d self)"""
        return _coin.SoMFVec3d_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec3d self, int const num, SbVec3d userdata)
        setValuesPointer(SoMFVec3d self, int const num, SbVec3d userdata)
        setValuesPointer(SoMFVec3d self, int const num, double const * userdata)
        setValuesPointer(SoMFVec3d self, int const num, double * userdata)
        """
        return _coin.SoMFVec3d_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec3d_initClass()

    initClass = staticmethod(initClass)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec3d_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec3d_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec3d_setValues(*args)



    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec3d self, int const idx, SbVec3d value)
        set1Value(SoMFVec3d self, int idx, double x, double y, double z)
        set1Value(SoMFVec3d self, int idx, double const [3] xyz)
        """
        return _coin.SoMFVec3d_set1Value(self, *args)


    def __getitem__(self, i: 'int') -> "SbVec3d const &":
        """__getitem__(SoMFVec3d self, int i) -> SbVec3d"""
        return _coin.SoMFVec3d___getitem__(self, i)


    def __setitem__(self, i: 'int', value: 'SbVec3d') -> "void":
        """__setitem__(SoMFVec3d self, int i, SbVec3d value)"""
        return _coin.SoMFVec3d___setitem__(self, i, value)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec3d self, SbVec3d value)
        setValue(SoMFVec3d self, double x, double y, double z)
        setValue(SoMFVec3d self, double const [3] xyz)
        setValue(SoMFVec3d self, SoMFVec3d other)
        """
        return _coin.SoMFVec3d_setValue(self, *args)


    def getValues(self, i: 'int'=0) -> "SbVec3d const *":
        """
        getValues(SoMFVec3d self, int i=0) -> SbVec3d
        getValues(SoMFVec3d self) -> SbVec3d
        """
        return _coin.SoMFVec3d_getValues(self, i)

SoMFVec3d_swigregister = _coin.SoMFVec3d_swigregister
SoMFVec3d_swigregister(SoMFVec3d)

def SoMFVec3d_createInstance() -> "void *":
    """SoMFVec3d_createInstance() -> void *"""
    return _coin.SoMFVec3d_createInstance()

def SoMFVec3d_getClassTypeId() -> "SoType":
    """SoMFVec3d_getClassTypeId() -> SoType"""
    return _coin.SoMFVec3d_getClassTypeId()

def SoMFVec3d_initClass() -> "void":
    """SoMFVec3d_initClass()"""
    return _coin.SoMFVec3d_initClass()

class SoMFVec4b(SoMField):
    """Proxy of C++ SoMFVec4b class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4b self) -> SoMFVec4b"""
        this = _coin.new_SoMFVec4b()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4b
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4b_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4b_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4b self) -> SoType"""
        return _coin.SoMFVec4b_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4b self, SoField field)"""
        return _coin.SoMFVec4b_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4b self, SoField field) -> SbBool"""
        return _coin.SoMFVec4b_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4b const *":
        """getValues(SoMFVec4b self, int const start) -> SbVec4b"""
        return _coin.SoMFVec4b_getValues(self, start)


    def find(self, value: 'SbVec4b', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4b self, SbVec4b value, SbBool addifnotfound=0) -> int
        find(SoMFVec4b self, SbVec4b value) -> int
        """
        return _coin.SoMFVec4b_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4b') -> "SbBool":
        """__eq__(SoMFVec4b self, SoMFVec4b field) -> SbBool"""
        return _coin.SoMFVec4b___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4b') -> "SbBool":
        """__ne__(SoMFVec4b self, SoMFVec4b field) -> SbBool"""
        return _coin.SoMFVec4b___ne__(self, field)


    def startEditing(self) -> "SbVec4b *":
        """startEditing(SoMFVec4b self) -> SbVec4b"""
        return _coin.SoMFVec4b_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4b self)"""
        return _coin.SoMFVec4b_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4b self, int const num, SbVec4b userdata)
        setValuesPointer(SoMFVec4b self, int const num, SbVec4b userdata)
        setValuesPointer(SoMFVec4b self, int const num, int8_t const * userdata)
        setValuesPointer(SoMFVec4b self, int const num, int8_t * userdata)
        """
        return _coin.SoMFVec4b_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4b_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4b self, int const start, int const num, SbVec4b newvals)
        setValues(SoMFVec4b self, int start, int num, int8_t const [][4] xyzw)
        """
        return _coin.SoMFVec4b_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4b self, int const idx, SbVec4b value)
        set1Value(SoMFVec4b self, int idx, int8_t x, int8_t y, int8_t z, int8_t w)
        set1Value(SoMFVec4b self, int idx, int8_t const [4] xyzw)
        """
        return _coin.SoMFVec4b_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4b self, SbVec4b value)
        setValue(SoMFVec4b self, int8_t x, int8_t y, int8_t z, int8_t w)
        setValue(SoMFVec4b self, int8_t const [4] xyzw)
        """
        return _coin.SoMFVec4b_setValue(self, *args)

SoMFVec4b_swigregister = _coin.SoMFVec4b_swigregister
SoMFVec4b_swigregister(SoMFVec4b)

def SoMFVec4b_createInstance() -> "void *":
    """SoMFVec4b_createInstance() -> void *"""
    return _coin.SoMFVec4b_createInstance()

def SoMFVec4b_getClassTypeId() -> "SoType":
    """SoMFVec4b_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4b_getClassTypeId()

def SoMFVec4b_initClass() -> "void":
    """SoMFVec4b_initClass()"""
    return _coin.SoMFVec4b_initClass()

class SoMFVec4ub(SoMField):
    """Proxy of C++ SoMFVec4ub class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4ub self) -> SoMFVec4ub"""
        this = _coin.new_SoMFVec4ub()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4ub
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4ub_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4ub_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4ub self) -> SoType"""
        return _coin.SoMFVec4ub_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4ub self, SoField field)"""
        return _coin.SoMFVec4ub_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4ub self, SoField field) -> SbBool"""
        return _coin.SoMFVec4ub_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4ub const *":
        """getValues(SoMFVec4ub self, int const start) -> SbVec4ub"""
        return _coin.SoMFVec4ub_getValues(self, start)


    def find(self, value: 'SbVec4ub', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4ub self, SbVec4ub value, SbBool addifnotfound=0) -> int
        find(SoMFVec4ub self, SbVec4ub value) -> int
        """
        return _coin.SoMFVec4ub_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4ub') -> "SbBool":
        """__eq__(SoMFVec4ub self, SoMFVec4ub field) -> SbBool"""
        return _coin.SoMFVec4ub___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4ub') -> "SbBool":
        """__ne__(SoMFVec4ub self, SoMFVec4ub field) -> SbBool"""
        return _coin.SoMFVec4ub___ne__(self, field)


    def startEditing(self) -> "SbVec4ub *":
        """startEditing(SoMFVec4ub self) -> SbVec4ub"""
        return _coin.SoMFVec4ub_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4ub self)"""
        return _coin.SoMFVec4ub_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4ub self, int const num, SbVec4ub userdata)
        setValuesPointer(SoMFVec4ub self, int const num, SbVec4ub userdata)
        setValuesPointer(SoMFVec4ub self, int const num, uint8_t const * userdata)
        setValuesPointer(SoMFVec4ub self, int const num, uint8_t * userdata)
        """
        return _coin.SoMFVec4ub_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4ub_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4ub self, int const start, int const num, SbVec4ub newvals)
        setValues(SoMFVec4ub self, int start, int num, uint8_t const [][4] xyzw)
        """
        return _coin.SoMFVec4ub_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4ub self, int const idx, SbVec4ub value)
        set1Value(SoMFVec4ub self, int idx, uint8_t x, uint8_t y, uint8_t z, uint8_t w)
        set1Value(SoMFVec4ub self, int idx, uint8_t const [4] xyzw)
        """
        return _coin.SoMFVec4ub_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4ub self, SbVec4ub value)
        setValue(SoMFVec4ub self, uint8_t x, uint8_t y, uint8_t z, uint8_t w)
        setValue(SoMFVec4ub self, uint8_t const [4] xyzw)
        """
        return _coin.SoMFVec4ub_setValue(self, *args)

SoMFVec4ub_swigregister = _coin.SoMFVec4ub_swigregister
SoMFVec4ub_swigregister(SoMFVec4ub)

def SoMFVec4ub_createInstance() -> "void *":
    """SoMFVec4ub_createInstance() -> void *"""
    return _coin.SoMFVec4ub_createInstance()

def SoMFVec4ub_getClassTypeId() -> "SoType":
    """SoMFVec4ub_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4ub_getClassTypeId()

def SoMFVec4ub_initClass() -> "void":
    """SoMFVec4ub_initClass()"""
    return _coin.SoMFVec4ub_initClass()

class SoMFVec4s(SoMField):
    """Proxy of C++ SoMFVec4s class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4s self) -> SoMFVec4s"""
        this = _coin.new_SoMFVec4s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4s
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4s_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4s_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4s self) -> SoType"""
        return _coin.SoMFVec4s_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4s self, SoField field)"""
        return _coin.SoMFVec4s_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4s self, SoField field) -> SbBool"""
        return _coin.SoMFVec4s_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4s const *":
        """getValues(SoMFVec4s self, int const start) -> SbVec4s"""
        return _coin.SoMFVec4s_getValues(self, start)


    def find(self, value: 'SbVec4s', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4s self, SbVec4s value, SbBool addifnotfound=0) -> int
        find(SoMFVec4s self, SbVec4s value) -> int
        """
        return _coin.SoMFVec4s_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4s') -> "SbBool":
        """__eq__(SoMFVec4s self, SoMFVec4s field) -> SbBool"""
        return _coin.SoMFVec4s___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4s') -> "SbBool":
        """__ne__(SoMFVec4s self, SoMFVec4s field) -> SbBool"""
        return _coin.SoMFVec4s___ne__(self, field)


    def startEditing(self) -> "SbVec4s *":
        """startEditing(SoMFVec4s self) -> SbVec4s"""
        return _coin.SoMFVec4s_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4s self)"""
        return _coin.SoMFVec4s_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4s self, int const num, SbVec4s userdata)
        setValuesPointer(SoMFVec4s self, int const num, SbVec4s userdata)
        setValuesPointer(SoMFVec4s self, int const num, short const * userdata)
        setValuesPointer(SoMFVec4s self, int const num, short * userdata)
        """
        return _coin.SoMFVec4s_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4s_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4s self, int const start, int const num, SbVec4s newvals)
        setValues(SoMFVec4s self, int start, int num, short const [][4] xyzw)
        """
        return _coin.SoMFVec4s_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4s self, int const idx, SbVec4s value)
        set1Value(SoMFVec4s self, int idx, short x, short y, short z, short w)
        set1Value(SoMFVec4s self, int idx, short const [4] xyzw)
        """
        return _coin.SoMFVec4s_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4s self, SbVec4s value)
        setValue(SoMFVec4s self, short x, short y, short z, short w)
        setValue(SoMFVec4s self, short const [4] xyzw)
        """
        return _coin.SoMFVec4s_setValue(self, *args)

SoMFVec4s_swigregister = _coin.SoMFVec4s_swigregister
SoMFVec4s_swigregister(SoMFVec4s)

def SoMFVec4s_createInstance() -> "void *":
    """SoMFVec4s_createInstance() -> void *"""
    return _coin.SoMFVec4s_createInstance()

def SoMFVec4s_getClassTypeId() -> "SoType":
    """SoMFVec4s_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4s_getClassTypeId()

def SoMFVec4s_initClass() -> "void":
    """SoMFVec4s_initClass()"""
    return _coin.SoMFVec4s_initClass()

class SoMFVec4us(SoMField):
    """Proxy of C++ SoMFVec4us class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4us self) -> SoMFVec4us"""
        this = _coin.new_SoMFVec4us()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4us
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4us_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4us_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4us self) -> SoType"""
        return _coin.SoMFVec4us_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4us self, SoField field)"""
        return _coin.SoMFVec4us_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4us self, SoField field) -> SbBool"""
        return _coin.SoMFVec4us_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4us const *":
        """getValues(SoMFVec4us self, int const start) -> SbVec4us"""
        return _coin.SoMFVec4us_getValues(self, start)


    def find(self, value: 'SbVec4us', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4us self, SbVec4us value, SbBool addifnotfound=0) -> int
        find(SoMFVec4us self, SbVec4us value) -> int
        """
        return _coin.SoMFVec4us_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4us') -> "SbBool":
        """__eq__(SoMFVec4us self, SoMFVec4us field) -> SbBool"""
        return _coin.SoMFVec4us___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4us') -> "SbBool":
        """__ne__(SoMFVec4us self, SoMFVec4us field) -> SbBool"""
        return _coin.SoMFVec4us___ne__(self, field)


    def startEditing(self) -> "SbVec4us *":
        """startEditing(SoMFVec4us self) -> SbVec4us"""
        return _coin.SoMFVec4us_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4us self)"""
        return _coin.SoMFVec4us_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4us self, int const num, SbVec4us userdata)
        setValuesPointer(SoMFVec4us self, int const num, SbVec4us userdata)
        setValuesPointer(SoMFVec4us self, int const num, unsigned short const * userdata)
        setValuesPointer(SoMFVec4us self, int const num, unsigned short * userdata)
        """
        return _coin.SoMFVec4us_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4us_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4us self, int const start, int const num, SbVec4us newvals)
        setValues(SoMFVec4us self, int start, int num, unsigned short const [][4] xyzw)
        """
        return _coin.SoMFVec4us_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4us self, int const idx, SbVec4us value)
        set1Value(SoMFVec4us self, int idx, unsigned short x, unsigned short y, unsigned short z, unsigned short w)
        set1Value(SoMFVec4us self, int idx, unsigned short const [4] xyzw)
        """
        return _coin.SoMFVec4us_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4us self, SbVec4us value)
        setValue(SoMFVec4us self, unsigned short x, unsigned short y, unsigned short z, unsigned short w)
        setValue(SoMFVec4us self, unsigned short const [4] xyzw)
        """
        return _coin.SoMFVec4us_setValue(self, *args)

SoMFVec4us_swigregister = _coin.SoMFVec4us_swigregister
SoMFVec4us_swigregister(SoMFVec4us)

def SoMFVec4us_createInstance() -> "void *":
    """SoMFVec4us_createInstance() -> void *"""
    return _coin.SoMFVec4us_createInstance()

def SoMFVec4us_getClassTypeId() -> "SoType":
    """SoMFVec4us_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4us_getClassTypeId()

def SoMFVec4us_initClass() -> "void":
    """SoMFVec4us_initClass()"""
    return _coin.SoMFVec4us_initClass()

class SoMFVec4i32(SoMField):
    """Proxy of C++ SoMFVec4i32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4i32 self) -> SoMFVec4i32"""
        this = _coin.new_SoMFVec4i32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4i32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4i32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4i32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4i32 self) -> SoType"""
        return _coin.SoMFVec4i32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4i32 self, SoField field)"""
        return _coin.SoMFVec4i32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4i32 self, SoField field) -> SbBool"""
        return _coin.SoMFVec4i32_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4i32 const *":
        """getValues(SoMFVec4i32 self, int const start) -> SbVec4i32"""
        return _coin.SoMFVec4i32_getValues(self, start)


    def find(self, value: 'SbVec4i32', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4i32 self, SbVec4i32 value, SbBool addifnotfound=0) -> int
        find(SoMFVec4i32 self, SbVec4i32 value) -> int
        """
        return _coin.SoMFVec4i32_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4i32') -> "SbBool":
        """__eq__(SoMFVec4i32 self, SoMFVec4i32 field) -> SbBool"""
        return _coin.SoMFVec4i32___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4i32') -> "SbBool":
        """__ne__(SoMFVec4i32 self, SoMFVec4i32 field) -> SbBool"""
        return _coin.SoMFVec4i32___ne__(self, field)


    def startEditing(self) -> "SbVec4i32 *":
        """startEditing(SoMFVec4i32 self) -> SbVec4i32"""
        return _coin.SoMFVec4i32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4i32 self)"""
        return _coin.SoMFVec4i32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4i32 self, int const num, SbVec4i32 userdata)
        setValuesPointer(SoMFVec4i32 self, int const num, SbVec4i32 userdata)
        setValuesPointer(SoMFVec4i32 self, int const num, int32_t const * userdata)
        setValuesPointer(SoMFVec4i32 self, int const num, int32_t * userdata)
        """
        return _coin.SoMFVec4i32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4i32_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4i32 self, int const start, int const num, SbVec4i32 newvals)
        setValues(SoMFVec4i32 self, int start, int num, int32_t const [][4] xyzw)
        """
        return _coin.SoMFVec4i32_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4i32 self, int const idx, SbVec4i32 value)
        set1Value(SoMFVec4i32 self, int idx, int32_t x, int32_t y, int32_t z, int32_t w)
        set1Value(SoMFVec4i32 self, int idx, int32_t const [4] xyzw)
        """
        return _coin.SoMFVec4i32_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4i32 self, SbVec4i32 value)
        setValue(SoMFVec4i32 self, int32_t x, int32_t y, int32_t z, int32_t w)
        setValue(SoMFVec4i32 self, int32_t const [4] xyzw)
        """
        return _coin.SoMFVec4i32_setValue(self, *args)

SoMFVec4i32_swigregister = _coin.SoMFVec4i32_swigregister
SoMFVec4i32_swigregister(SoMFVec4i32)

def SoMFVec4i32_createInstance() -> "void *":
    """SoMFVec4i32_createInstance() -> void *"""
    return _coin.SoMFVec4i32_createInstance()

def SoMFVec4i32_getClassTypeId() -> "SoType":
    """SoMFVec4i32_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4i32_getClassTypeId()

def SoMFVec4i32_initClass() -> "void":
    """SoMFVec4i32_initClass()"""
    return _coin.SoMFVec4i32_initClass()

class SoMFVec4ui32(SoMField):
    """Proxy of C++ SoMFVec4ui32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4ui32 self) -> SoMFVec4ui32"""
        this = _coin.new_SoMFVec4ui32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4ui32
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4ui32_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4ui32_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4ui32 self) -> SoType"""
        return _coin.SoMFVec4ui32_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4ui32 self, SoField field)"""
        return _coin.SoMFVec4ui32_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4ui32 self, SoField field) -> SbBool"""
        return _coin.SoMFVec4ui32_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4ui32 const *":
        """getValues(SoMFVec4ui32 self, int const start) -> SbVec4ui32"""
        return _coin.SoMFVec4ui32_getValues(self, start)


    def find(self, value: 'SbVec4ui32', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4ui32 self, SbVec4ui32 value, SbBool addifnotfound=0) -> int
        find(SoMFVec4ui32 self, SbVec4ui32 value) -> int
        """
        return _coin.SoMFVec4ui32_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4ui32') -> "SbBool":
        """__eq__(SoMFVec4ui32 self, SoMFVec4ui32 field) -> SbBool"""
        return _coin.SoMFVec4ui32___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4ui32') -> "SbBool":
        """__ne__(SoMFVec4ui32 self, SoMFVec4ui32 field) -> SbBool"""
        return _coin.SoMFVec4ui32___ne__(self, field)


    def startEditing(self) -> "SbVec4ui32 *":
        """startEditing(SoMFVec4ui32 self) -> SbVec4ui32"""
        return _coin.SoMFVec4ui32_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4ui32 self)"""
        return _coin.SoMFVec4ui32_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4ui32 self, int const num, SbVec4ui32 userdata)
        setValuesPointer(SoMFVec4ui32 self, int const num, SbVec4ui32 userdata)
        setValuesPointer(SoMFVec4ui32 self, int const num, uint32_t const * userdata)
        setValuesPointer(SoMFVec4ui32 self, int const num, uint32_t * userdata)
        """
        return _coin.SoMFVec4ui32_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4ui32_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4ui32 self, int const start, int const num, SbVec4ui32 newvals)
        setValues(SoMFVec4ui32 self, int start, int num, uint32_t const [][4] xyzw)
        """
        return _coin.SoMFVec4ui32_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4ui32 self, int const idx, SbVec4ui32 value)
        set1Value(SoMFVec4ui32 self, int idx, uint32_t x, uint32_t y, uint32_t z, uint32_t w)
        set1Value(SoMFVec4ui32 self, int idx, uint32_t const [4] xyzw)
        """
        return _coin.SoMFVec4ui32_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4ui32 self, SbVec4ui32 value)
        setValue(SoMFVec4ui32 self, uint32_t x, uint32_t y, uint32_t z, uint32_t w)
        setValue(SoMFVec4ui32 self, uint32_t const [4] xyzw)
        """
        return _coin.SoMFVec4ui32_setValue(self, *args)

SoMFVec4ui32_swigregister = _coin.SoMFVec4ui32_swigregister
SoMFVec4ui32_swigregister(SoMFVec4ui32)

def SoMFVec4ui32_createInstance() -> "void *":
    """SoMFVec4ui32_createInstance() -> void *"""
    return _coin.SoMFVec4ui32_createInstance()

def SoMFVec4ui32_getClassTypeId() -> "SoType":
    """SoMFVec4ui32_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4ui32_getClassTypeId()

def SoMFVec4ui32_initClass() -> "void":
    """SoMFVec4ui32_initClass()"""
    return _coin.SoMFVec4ui32_initClass()

class SoMFVec4d(SoMField):
    """Proxy of C++ SoMFVec4d class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoMFVec4d self) -> SoMFVec4d"""
        this = _coin.new_SoMFVec4d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoMFVec4d
    __del__ = lambda self: None

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoMFVec4d_createInstance()

    createInstance = staticmethod(createInstance)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMFVec4d_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMFVec4d self) -> SoType"""
        return _coin.SoMFVec4d_getTypeId(self)


    def copyFrom(self, field: 'SoField') -> "void":
        """copyFrom(SoMFVec4d self, SoField field)"""
        return _coin.SoMFVec4d_copyFrom(self, field)


    def isSame(self, field: 'SoField') -> "SbBool":
        """isSame(SoMFVec4d self, SoField field) -> SbBool"""
        return _coin.SoMFVec4d_isSame(self, field)


    def getValues(self, start: 'int const') -> "SbVec4d const *":
        """getValues(SoMFVec4d self, int const start) -> SbVec4d"""
        return _coin.SoMFVec4d_getValues(self, start)


    def find(self, value: 'SbVec4d', addifnotfound: 'SbBool'=0) -> "int":
        """
        find(SoMFVec4d self, SbVec4d value, SbBool addifnotfound=0) -> int
        find(SoMFVec4d self, SbVec4d value) -> int
        """
        return _coin.SoMFVec4d_find(self, value, addifnotfound)


    def __eq__(self, field: 'SoMFVec4d') -> "SbBool":
        """__eq__(SoMFVec4d self, SoMFVec4d field) -> SbBool"""
        return _coin.SoMFVec4d___eq__(self, field)


    def __ne__(self, field: 'SoMFVec4d') -> "SbBool":
        """__ne__(SoMFVec4d self, SoMFVec4d field) -> SbBool"""
        return _coin.SoMFVec4d___ne__(self, field)


    def startEditing(self) -> "SbVec4d *":
        """startEditing(SoMFVec4d self) -> SbVec4d"""
        return _coin.SoMFVec4d_startEditing(self)


    def finishEditing(self) -> "void":
        """finishEditing(SoMFVec4d self)"""
        return _coin.SoMFVec4d_finishEditing(self)


    def setValuesPointer(self, *args) -> "void":
        """
        setValuesPointer(SoMFVec4d self, int const num, SbVec4d userdata)
        setValuesPointer(SoMFVec4d self, int const num, SbVec4d userdata)
        setValuesPointer(SoMFVec4d self, int const num, double const * userdata)
        setValuesPointer(SoMFVec4d self, int const num, double * userdata)
        """
        return _coin.SoMFVec4d_setValuesPointer(self, *args)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMFVec4d_initClass()

    initClass = staticmethod(initClass)

    def setValues(self, *args) -> "void":
        """
        setValues(SoMFVec4d self, int const start, int const num, SbVec4d newvals)
        setValues(SoMFVec4d self, int start, int num, double const [][4] xyzw)
        """
        return _coin.SoMFVec4d_setValues(self, *args)


    def set1Value(self, *args) -> "void":
        """
        set1Value(SoMFVec4d self, int const idx, SbVec4d value)
        set1Value(SoMFVec4d self, int idx, double x, double y, double z, double w)
        set1Value(SoMFVec4d self, int idx, double const [4] xyzw)
        """
        return _coin.SoMFVec4d_set1Value(self, *args)


    def setValue(self, *args) -> "void":
        """
        setValue(SoMFVec4d self, SbVec4d value)
        setValue(SoMFVec4d self, double x, double y, double z, double w)
        setValue(SoMFVec4d self, double const [4] xyzw)
        """
        return _coin.SoMFVec4d_setValue(self, *args)

SoMFVec4d_swigregister = _coin.SoMFVec4d_swigregister
SoMFVec4d_swigregister(SoMFVec4d)

def SoMFVec4d_createInstance() -> "void *":
    """SoMFVec4d_createInstance() -> void *"""
    return _coin.SoMFVec4d_createInstance()

def SoMFVec4d_getClassTypeId() -> "SoType":
    """SoMFVec4d_getClassTypeId() -> SoType"""
    return _coin.SoMFVec4d_getClassTypeId()

def SoMFVec4d_initClass() -> "void":
    """SoMFVec4d_initClass()"""
    return _coin.SoMFVec4d_initClass()

class SbStringList(SbPList):
    """Proxy of C++ SbStringList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbStringList self) -> SbStringList
        __init__(SbStringList self, int const sizehint) -> SbStringList
        """
        this = _coin.new_SbStringList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, string: 'SbString') -> "void":
        """append(SbStringList self, SbString string)"""
        return _coin.SbStringList_append(self, string)


    def find(self, string: 'SbString') -> "int":
        """find(SbStringList self, SbString string) -> int"""
        return _coin.SbStringList_find(self, string)


    def insert(self, string: 'SbString', insertbefore: 'int') -> "void":
        """insert(SbStringList self, SbString string, int insertbefore)"""
        return _coin.SbStringList_insert(self, string, insertbefore)


    def getArrayPtr(self) -> "SbString const **":
        """getArrayPtr(SbStringList self) -> SbString const **"""
        return _coin.SbStringList_getArrayPtr(self)


    def __setitem__(self, i: 'int const', value: 'SbString') -> "void":
        """__setitem__(SbStringList self, int const i, SbString value)"""
        return _coin.SbStringList___setitem__(self, i, value)


    def __getitem__(self, i: 'int') -> "SbString *":
        """__getitem__(SbStringList self, int i) -> SbString"""
        return _coin.SbStringList___getitem__(self, i)


    def get(self, i: 'int const') -> "SbString *":
        """get(SbStringList self, int const i) -> SbString"""
        return _coin.SbStringList_get(self, i)

    __swig_destroy__ = _coin.delete_SbStringList
    __del__ = lambda self: None
SbStringList_swigregister = _coin.SbStringList_swigregister
SbStringList_swigregister(SbStringList)

class SbVec3fList(SbPList):
    """Proxy of C++ SbVec3fList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbVec3fList self) -> SbVec3fList"""
        this = _coin.new_SbVec3fList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbVec3fList
    __del__ = lambda self: None

    def append(self, item: 'SbVec3f') -> "void":
        """append(SbVec3fList self, SbVec3f item)"""
        return _coin.SbVec3fList_append(self, item)


    def insert(self, item: 'SbVec3f', insertbefore: 'int const') -> "void":
        """insert(SbVec3fList self, SbVec3f item, int const insertbefore)"""
        return _coin.SbVec3fList_insert(self, item, insertbefore)


    def __setitem__(self, i: 'int const', value: 'SbVec3f') -> "void":
        """__setitem__(SbVec3fList self, int const i, SbVec3f value)"""
        return _coin.SbVec3fList___setitem__(self, i, value)


    def __getitem__(self, i: 'int') -> "SbVec3f *":
        """__getitem__(SbVec3fList self, int i) -> SbVec3f"""
        return _coin.SbVec3fList___getitem__(self, i)


    def get(self, i: 'int const') -> "SbVec3f *":
        """get(SbVec3fList self, int const i) -> SbVec3f"""
        return _coin.SbVec3fList_get(self, i)

SbVec3fList_swigregister = _coin.SbVec3fList_swigregister
SbVec3fList_swigregister(SbVec3fList)

class SoLockManager(object):
    """Proxy of C++ SoLockManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetUnlockString(unlockstr: 'char *') -> "void":
        """SetUnlockString(char * unlockstr)"""
        return _coin.SoLockManager_SetUnlockString(unlockstr)

    SetUnlockString = staticmethod(SetUnlockString)

    def GetUnlockString() -> "char *":
        """GetUnlockString() -> char *"""
        return _coin.SoLockManager_GetUnlockString()

    GetUnlockString = staticmethod(GetUnlockString)

    def __init__(self):
        """__init__(SoLockManager self) -> SoLockManager"""
        this = _coin.new_SoLockManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoLockManager
    __del__ = lambda self: None
SoLockManager_swigregister = _coin.SoLockManager_swigregister
SoLockManager_swigregister(SoLockManager)

def SoLockManager_SetUnlockString(unlockstr: 'char *') -> "void":
    """SoLockManager_SetUnlockString(char * unlockstr)"""
    return _coin.SoLockManager_SetUnlockString(unlockstr)

def SoLockManager_GetUnlockString() -> "char *":
    """SoLockManager_GetUnlockString() -> char *"""
    return _coin.SoLockManager_GetUnlockString()

class SoTransform(SoTransformation):
    """Proxy of C++ SoTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransform self) -> SoType"""
        return _coin.SoTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransform self) -> SoTransform"""
        this = _coin.new_SoTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTransform_translation_get, _coin.SoTransform_translation_set)
    rotation = _swig_property(_coin.SoTransform_rotation_get, _coin.SoTransform_rotation_set)
    scaleFactor = _swig_property(_coin.SoTransform_scaleFactor_get, _coin.SoTransform_scaleFactor_set)
    scaleOrientation = _swig_property(_coin.SoTransform_scaleOrientation_get, _coin.SoTransform_scaleOrientation_set)
    center = _swig_property(_coin.SoTransform_center_get, _coin.SoTransform_center_set)

    def pointAt(self, frompoint: 'SbVec3f', topoint: 'SbVec3f') -> "void":
        """pointAt(SoTransform self, SbVec3f frompoint, SbVec3f topoint)"""
        return _coin.SoTransform_pointAt(self, frompoint, topoint)


    def getScaleSpaceMatrix(self, mat: 'SbMatrix', inv: 'SbMatrix') -> "void":
        """getScaleSpaceMatrix(SoTransform self, SbMatrix mat, SbMatrix inv)"""
        return _coin.SoTransform_getScaleSpaceMatrix(self, mat, inv)


    def getRotationSpaceMatrix(self, mat: 'SbMatrix', inv: 'SbMatrix') -> "void":
        """getRotationSpaceMatrix(SoTransform self, SbMatrix mat, SbMatrix inv)"""
        return _coin.SoTransform_getRotationSpaceMatrix(self, mat, inv)


    def getTranslationSpaceMatrix(self, mat: 'SbMatrix', inv: 'SbMatrix') -> "void":
        """getTranslationSpaceMatrix(SoTransform self, SbMatrix mat, SbMatrix inv)"""
        return _coin.SoTransform_getTranslationSpaceMatrix(self, mat, inv)


    def multLeft(self, mat: 'SbMatrix') -> "void":
        """multLeft(SoTransform self, SbMatrix mat)"""
        return _coin.SoTransform_multLeft(self, mat)


    def multRight(self, mat: 'SbMatrix') -> "void":
        """multRight(SoTransform self, SbMatrix mat)"""
        return _coin.SoTransform_multRight(self, mat)


    def combineLeft(self, nodeonright: 'SoTransformation') -> "void":
        """combineLeft(SoTransform self, SoTransformation nodeonright)"""
        return _coin.SoTransform_combineLeft(self, nodeonright)


    def combineRight(self, nodeonleft: 'SoTransformation') -> "void":
        """combineRight(SoTransform self, SoTransformation nodeonleft)"""
        return _coin.SoTransform_combineRight(self, nodeonleft)


    def setMatrix(self, mat: 'SbMatrix') -> "void":
        """setMatrix(SoTransform self, SbMatrix mat)"""
        return _coin.SoTransform_setMatrix(self, mat)


    def recenter(self, newcenter: 'SbVec3f') -> "void":
        """recenter(SoTransform self, SbVec3f newcenter)"""
        return _coin.SoTransform_recenter(self, newcenter)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTransform self, SoAction action)"""
        return _coin.SoTransform_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTransform self, SoGLRenderAction action)"""
        return _coin.SoTransform_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTransform self, SoCallbackAction action)"""
        return _coin.SoTransform_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoTransform self, SoGetBoundingBoxAction action)"""
        return _coin.SoTransform_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTransform self, SoGetMatrixAction action)"""
        return _coin.SoTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTransform self, SoPickAction action)"""
        return _coin.SoTransform_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoTransform self, SoGetPrimitiveCountAction action)"""
        return _coin.SoTransform_getPrimitiveCount(self, action)

SoTransform_swigregister = _coin.SoTransform_swigregister
SoTransform_swigregister(SoTransform)

def SoTransform_getClassTypeId() -> "SoType":
    """SoTransform_getClassTypeId() -> SoType"""
    return _coin.SoTransform_getClassTypeId()

def SoTransform_initClass() -> "void":
    """SoTransform_initClass()"""
    return _coin.SoTransform_initClass()

class SoTransformManip(SoTransform):
    """Proxy of C++ SoTransformManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformManip self) -> SoType"""
        return _coin.SoTransformManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformManip self) -> SoTransformManip"""
        this = _coin.new_SoTransformManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDragger(self) -> "SoDragger *":
        """getDragger(SoTransformManip self) -> SoDragger"""
        return _coin.SoTransformManip_getDragger(self)


    def replaceNode(self, p: 'SoPath') -> "SbBool":
        """replaceNode(SoTransformManip self, SoPath p) -> SbBool"""
        return _coin.SoTransformManip_replaceNode(self, p)


    def replaceManip(self, p: 'SoPath', newone: 'SoTransform') -> "SbBool":
        """replaceManip(SoTransformManip self, SoPath p, SoTransform newone) -> SbBool"""
        return _coin.SoTransformManip_replaceManip(self, p, newone)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTransformManip self, SoAction action)"""
        return _coin.SoTransformManip_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTransformManip self, SoCallbackAction action)"""
        return _coin.SoTransformManip_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTransformManip self, SoGLRenderAction action)"""
        return _coin.SoTransformManip_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoTransformManip self, SoGetBoundingBoxAction action)"""
        return _coin.SoTransformManip_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTransformManip self, SoGetMatrixAction action)"""
        return _coin.SoTransformManip_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoTransformManip self, SoHandleEventAction action)"""
        return _coin.SoTransformManip_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTransformManip self, SoPickAction action)"""
        return _coin.SoTransformManip_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoTransformManip self, SoSearchAction action)"""
        return _coin.SoTransformManip_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoTransformManip self) -> SoChildList"""
        return _coin.SoTransformManip_getChildren(self)

SoTransformManip_swigregister = _coin.SoTransformManip_swigregister
SoTransformManip_swigregister(SoTransformManip)

def SoTransformManip_getClassTypeId() -> "SoType":
    """SoTransformManip_getClassTypeId() -> SoType"""
    return _coin.SoTransformManip_getClassTypeId()

def SoTransformManip_initClass() -> "void":
    """SoTransformManip_initClass()"""
    return _coin.SoTransformManip_initClass()

class SoCenterballManip(SoTransformManip):
    """Proxy of C++ SoCenterballManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCenterballManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCenterballManip self) -> SoType"""
        return _coin.SoCenterballManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCenterballManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCenterballManip self) -> SoCenterballManip"""
        this = _coin.new_SoCenterballManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoCenterballManip_swigregister = _coin.SoCenterballManip_swigregister
SoCenterballManip_swigregister(SoCenterballManip)

def SoCenterballManip_getClassTypeId() -> "SoType":
    """SoCenterballManip_getClassTypeId() -> SoType"""
    return _coin.SoCenterballManip_getClassTypeId()

def SoCenterballManip_initClass() -> "void":
    """SoCenterballManip_initClass()"""
    return _coin.SoCenterballManip_initClass()

class SoClipPlane(SoNode):
    """Proxy of C++ SoClipPlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoClipPlane_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoClipPlane self) -> SoType"""
        return _coin.SoClipPlane_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoClipPlane_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoClipPlane self) -> SoClipPlane"""
        this = _coin.new_SoClipPlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    plane = _swig_property(_coin.SoClipPlane_plane_get, _coin.SoClipPlane_plane_set)
    on = _swig_property(_coin.SoClipPlane_on_get, _coin.SoClipPlane_on_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoClipPlane self, SoAction action)"""
        return _coin.SoClipPlane_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoClipPlane self, SoGLRenderAction action)"""
        return _coin.SoClipPlane_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoClipPlane self, SoCallbackAction action)"""
        return _coin.SoClipPlane_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoClipPlane self, SoPickAction action)"""
        return _coin.SoClipPlane_pick(self, action)

SoClipPlane_swigregister = _coin.SoClipPlane_swigregister
SoClipPlane_swigregister(SoClipPlane)

def SoClipPlane_getClassTypeId() -> "SoType":
    """SoClipPlane_getClassTypeId() -> SoType"""
    return _coin.SoClipPlane_getClassTypeId()

def SoClipPlane_initClass() -> "void":
    """SoClipPlane_initClass()"""
    return _coin.SoClipPlane_initClass()

class SoClipPlaneManip(SoClipPlane):
    """Proxy of C++ SoClipPlaneManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoClipPlaneManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoClipPlaneManip self) -> SoType"""
        return _coin.SoClipPlaneManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoClipPlaneManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoClipPlaneManip self) -> SoClipPlaneManip"""
        this = _coin.new_SoClipPlaneManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDragger(self) -> "SoDragger *":
        """getDragger(SoClipPlaneManip self) -> SoDragger"""
        return _coin.SoClipPlaneManip_getDragger(self)


    def setValue(self, box: 'SbBox3f', planenormal: 'SbVec3f', draggerscalefactor: 'float') -> "void":
        """setValue(SoClipPlaneManip self, SbBox3f box, SbVec3f planenormal, float draggerscalefactor)"""
        return _coin.SoClipPlaneManip_setValue(self, box, planenormal, draggerscalefactor)


    def replaceNode(self, p: 'SoPath') -> "SbBool":
        """replaceNode(SoClipPlaneManip self, SoPath p) -> SbBool"""
        return _coin.SoClipPlaneManip_replaceNode(self, p)


    def replaceManip(self, p: 'SoPath', newone: 'SoClipPlane') -> "SbBool":
        """replaceManip(SoClipPlaneManip self, SoPath p, SoClipPlane newone) -> SbBool"""
        return _coin.SoClipPlaneManip_replaceManip(self, p, newone)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoClipPlaneManip self, SoAction action)"""
        return _coin.SoClipPlaneManip_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoClipPlaneManip self, SoCallbackAction action)"""
        return _coin.SoClipPlaneManip_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoClipPlaneManip self, SoGLRenderAction action)"""
        return _coin.SoClipPlaneManip_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoClipPlaneManip self, SoGetBoundingBoxAction action)"""
        return _coin.SoClipPlaneManip_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoClipPlaneManip self, SoGetMatrixAction action)"""
        return _coin.SoClipPlaneManip_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoClipPlaneManip self, SoHandleEventAction action)"""
        return _coin.SoClipPlaneManip_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoClipPlaneManip self, SoPickAction action)"""
        return _coin.SoClipPlaneManip_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoClipPlaneManip self, SoSearchAction action)"""
        return _coin.SoClipPlaneManip_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoClipPlaneManip self) -> SoChildList"""
        return _coin.SoClipPlaneManip_getChildren(self)

    draggerPosition = _swig_property(_coin.SoClipPlaneManip_draggerPosition_get, _coin.SoClipPlaneManip_draggerPosition_set)
SoClipPlaneManip_swigregister = _coin.SoClipPlaneManip_swigregister
SoClipPlaneManip_swigregister(SoClipPlaneManip)

def SoClipPlaneManip_getClassTypeId() -> "SoType":
    """SoClipPlaneManip_getClassTypeId() -> SoType"""
    return _coin.SoClipPlaneManip_getClassTypeId()

def SoClipPlaneManip_initClass() -> "void":
    """SoClipPlaneManip_initClass()"""
    return _coin.SoClipPlaneManip_initClass()

class SoLight(SoNode):
    """Proxy of C++ SoLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLight self) -> SoType"""
        return _coin.SoLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLight_initClass()

    initClass = staticmethod(initClass)
    on = _swig_property(_coin.SoLight_on_get, _coin.SoLight_on_set)
    intensity = _swig_property(_coin.SoLight_intensity_get, _coin.SoLight_intensity_set)
    color = _swig_property(_coin.SoLight_color_get, _coin.SoLight_color_set)

    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoLight self, SoCallbackAction action)"""
        return _coin.SoLight_callback(self, action)

SoLight_swigregister = _coin.SoLight_swigregister
SoLight_swigregister(SoLight)

def SoLight_getClassTypeId() -> "SoType":
    """SoLight_getClassTypeId() -> SoType"""
    return _coin.SoLight_getClassTypeId()

def SoLight_initClass() -> "void":
    """SoLight_initClass()"""
    return _coin.SoLight_initClass()

class SoDirectionalLight(SoLight):
    """Proxy of C++ SoDirectionalLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDirectionalLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDirectionalLight self) -> SoType"""
        return _coin.SoDirectionalLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDirectionalLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDirectionalLight self) -> SoDirectionalLight"""
        this = _coin.new_SoDirectionalLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    direction = _swig_property(_coin.SoDirectionalLight_direction_get, _coin.SoDirectionalLight_direction_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoDirectionalLight self, SoGLRenderAction action)"""
        return _coin.SoDirectionalLight_GLRender(self, action)

SoDirectionalLight_swigregister = _coin.SoDirectionalLight_swigregister
SoDirectionalLight_swigregister(SoDirectionalLight)

def SoDirectionalLight_getClassTypeId() -> "SoType":
    """SoDirectionalLight_getClassTypeId() -> SoType"""
    return _coin.SoDirectionalLight_getClassTypeId()

def SoDirectionalLight_initClass() -> "void":
    """SoDirectionalLight_initClass()"""
    return _coin.SoDirectionalLight_initClass()

class SoDirectionalLightManip(SoDirectionalLight):
    """Proxy of C++ SoDirectionalLightManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDirectionalLightManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDirectionalLightManip self) -> SoType"""
        return _coin.SoDirectionalLightManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDirectionalLightManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDirectionalLightManip self) -> SoDirectionalLightManip"""
        this = _coin.new_SoDirectionalLightManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDragger(self) -> "SoDragger *":
        """getDragger(SoDirectionalLightManip self) -> SoDragger"""
        return _coin.SoDirectionalLightManip_getDragger(self)


    def replaceNode(self, path: 'SoPath') -> "SbBool":
        """replaceNode(SoDirectionalLightManip self, SoPath path) -> SbBool"""
        return _coin.SoDirectionalLightManip_replaceNode(self, path)


    def replaceManip(self, path: 'SoPath', newone: 'SoDirectionalLight') -> "SbBool":
        """replaceManip(SoDirectionalLightManip self, SoPath path, SoDirectionalLight newone) -> SbBool"""
        return _coin.SoDirectionalLightManip_replaceManip(self, path, newone)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoDirectionalLightManip self, SoAction action)"""
        return _coin.SoDirectionalLightManip_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoDirectionalLightManip self, SoCallbackAction action)"""
        return _coin.SoDirectionalLightManip_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoDirectionalLightManip self, SoGLRenderAction action)"""
        return _coin.SoDirectionalLightManip_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoDirectionalLightManip self, SoGetBoundingBoxAction action)"""
        return _coin.SoDirectionalLightManip_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoDirectionalLightManip self, SoGetMatrixAction action)"""
        return _coin.SoDirectionalLightManip_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoDirectionalLightManip self, SoHandleEventAction action)"""
        return _coin.SoDirectionalLightManip_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoDirectionalLightManip self, SoPickAction action)"""
        return _coin.SoDirectionalLightManip_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoDirectionalLightManip self, SoSearchAction action)"""
        return _coin.SoDirectionalLightManip_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoDirectionalLightManip self) -> SoChildList"""
        return _coin.SoDirectionalLightManip_getChildren(self)

SoDirectionalLightManip_swigregister = _coin.SoDirectionalLightManip_swigregister
SoDirectionalLightManip_swigregister(SoDirectionalLightManip)

def SoDirectionalLightManip_getClassTypeId() -> "SoType":
    """SoDirectionalLightManip_getClassTypeId() -> SoType"""
    return _coin.SoDirectionalLightManip_getClassTypeId()

def SoDirectionalLightManip_initClass() -> "void":
    """SoDirectionalLightManip_initClass()"""
    return _coin.SoDirectionalLightManip_initClass()

class SoHandleBoxManip(SoTransformManip):
    """Proxy of C++ SoHandleBoxManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoHandleBoxManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoHandleBoxManip self) -> SoType"""
        return _coin.SoHandleBoxManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoHandleBoxManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoHandleBoxManip self) -> SoHandleBoxManip"""
        this = _coin.new_SoHandleBoxManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoHandleBoxManip_swigregister = _coin.SoHandleBoxManip_swigregister
SoHandleBoxManip_swigregister(SoHandleBoxManip)

def SoHandleBoxManip_getClassTypeId() -> "SoType":
    """SoHandleBoxManip_getClassTypeId() -> SoType"""
    return _coin.SoHandleBoxManip_getClassTypeId()

def SoHandleBoxManip_initClass() -> "void":
    """SoHandleBoxManip_initClass()"""
    return _coin.SoHandleBoxManip_initClass()

class SoJackManip(SoTransformManip):
    """Proxy of C++ SoJackManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoJackManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoJackManip self) -> SoType"""
        return _coin.SoJackManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoJackManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoJackManip self) -> SoJackManip"""
        this = _coin.new_SoJackManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoJackManip_swigregister = _coin.SoJackManip_swigregister
SoJackManip_swigregister(SoJackManip)

def SoJackManip_getClassTypeId() -> "SoType":
    """SoJackManip_getClassTypeId() -> SoType"""
    return _coin.SoJackManip_getClassTypeId()

def SoJackManip_initClass() -> "void":
    """SoJackManip_initClass()"""
    return _coin.SoJackManip_initClass()

class SoPointLight(SoLight):
    """Proxy of C++ SoPointLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPointLight self) -> SoType"""
        return _coin.SoPointLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPointLight self) -> SoPointLight"""
        this = _coin.new_SoPointLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    location = _swig_property(_coin.SoPointLight_location_get, _coin.SoPointLight_location_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPointLight self, SoGLRenderAction action)"""
        return _coin.SoPointLight_GLRender(self, action)

SoPointLight_swigregister = _coin.SoPointLight_swigregister
SoPointLight_swigregister(SoPointLight)

def SoPointLight_getClassTypeId() -> "SoType":
    """SoPointLight_getClassTypeId() -> SoType"""
    return _coin.SoPointLight_getClassTypeId()

def SoPointLight_initClass() -> "void":
    """SoPointLight_initClass()"""
    return _coin.SoPointLight_initClass()

class SoPointLightManip(SoPointLight):
    """Proxy of C++ SoPointLightManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointLightManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPointLightManip self) -> SoType"""
        return _coin.SoPointLightManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointLightManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPointLightManip self) -> SoPointLightManip"""
        this = _coin.new_SoPointLightManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDragger(self) -> "SoDragger *":
        """getDragger(SoPointLightManip self) -> SoDragger"""
        return _coin.SoPointLightManip_getDragger(self)


    def replaceNode(self, path: 'SoPath') -> "SbBool":
        """replaceNode(SoPointLightManip self, SoPath path) -> SbBool"""
        return _coin.SoPointLightManip_replaceNode(self, path)


    def replaceManip(self, path: 'SoPath', newone: 'SoPointLight') -> "SbBool":
        """replaceManip(SoPointLightManip self, SoPath path, SoPointLight newone) -> SbBool"""
        return _coin.SoPointLightManip_replaceManip(self, path, newone)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoPointLightManip self, SoAction action)"""
        return _coin.SoPointLightManip_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoPointLightManip self, SoCallbackAction action)"""
        return _coin.SoPointLightManip_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPointLightManip self, SoGLRenderAction action)"""
        return _coin.SoPointLightManip_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoPointLightManip self, SoGetBoundingBoxAction action)"""
        return _coin.SoPointLightManip_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoPointLightManip self, SoGetMatrixAction action)"""
        return _coin.SoPointLightManip_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoPointLightManip self, SoHandleEventAction action)"""
        return _coin.SoPointLightManip_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoPointLightManip self, SoPickAction action)"""
        return _coin.SoPointLightManip_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoPointLightManip self, SoSearchAction action)"""
        return _coin.SoPointLightManip_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoPointLightManip self) -> SoChildList"""
        return _coin.SoPointLightManip_getChildren(self)

SoPointLightManip_swigregister = _coin.SoPointLightManip_swigregister
SoPointLightManip_swigregister(SoPointLightManip)

def SoPointLightManip_getClassTypeId() -> "SoType":
    """SoPointLightManip_getClassTypeId() -> SoType"""
    return _coin.SoPointLightManip_getClassTypeId()

def SoPointLightManip_initClass() -> "void":
    """SoPointLightManip_initClass()"""
    return _coin.SoPointLightManip_initClass()

class SoSpotLight(SoLight):
    """Proxy of C++ SoSpotLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSpotLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSpotLight self) -> SoType"""
        return _coin.SoSpotLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSpotLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSpotLight self) -> SoSpotLight"""
        this = _coin.new_SoSpotLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    location = _swig_property(_coin.SoSpotLight_location_get, _coin.SoSpotLight_location_set)
    direction = _swig_property(_coin.SoSpotLight_direction_get, _coin.SoSpotLight_direction_set)
    dropOffRate = _swig_property(_coin.SoSpotLight_dropOffRate_get, _coin.SoSpotLight_dropOffRate_set)
    cutOffAngle = _swig_property(_coin.SoSpotLight_cutOffAngle_get, _coin.SoSpotLight_cutOffAngle_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSpotLight self, SoGLRenderAction action)"""
        return _coin.SoSpotLight_GLRender(self, action)

SoSpotLight_swigregister = _coin.SoSpotLight_swigregister
SoSpotLight_swigregister(SoSpotLight)

def SoSpotLight_getClassTypeId() -> "SoType":
    """SoSpotLight_getClassTypeId() -> SoType"""
    return _coin.SoSpotLight_getClassTypeId()

def SoSpotLight_initClass() -> "void":
    """SoSpotLight_initClass()"""
    return _coin.SoSpotLight_initClass()

class SoSpotLightManip(SoSpotLight):
    """Proxy of C++ SoSpotLightManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSpotLightManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSpotLightManip self) -> SoType"""
        return _coin.SoSpotLightManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSpotLightManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSpotLightManip self) -> SoSpotLightManip"""
        this = _coin.new_SoSpotLightManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDragger(self) -> "SoDragger *":
        """getDragger(SoSpotLightManip self) -> SoDragger"""
        return _coin.SoSpotLightManip_getDragger(self)


    def replaceNode(self, p: 'SoPath') -> "SbBool":
        """replaceNode(SoSpotLightManip self, SoPath p) -> SbBool"""
        return _coin.SoSpotLightManip_replaceNode(self, p)


    def replaceManip(self, p: 'SoPath', newone: 'SoSpotLight') -> "SbBool":
        """replaceManip(SoSpotLightManip self, SoPath p, SoSpotLight newone) -> SbBool"""
        return _coin.SoSpotLightManip_replaceManip(self, p, newone)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSpotLightManip self, SoAction action)"""
        return _coin.SoSpotLightManip_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoSpotLightManip self, SoCallbackAction action)"""
        return _coin.SoSpotLightManip_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSpotLightManip self, SoGLRenderAction action)"""
        return _coin.SoSpotLightManip_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoSpotLightManip self, SoGetBoundingBoxAction action)"""
        return _coin.SoSpotLightManip_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoSpotLightManip self, SoGetMatrixAction action)"""
        return _coin.SoSpotLightManip_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoSpotLightManip self, SoHandleEventAction action)"""
        return _coin.SoSpotLightManip_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoSpotLightManip self, SoPickAction action)"""
        return _coin.SoSpotLightManip_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoSpotLightManip self, SoSearchAction action)"""
        return _coin.SoSpotLightManip_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoSpotLightManip self) -> SoChildList"""
        return _coin.SoSpotLightManip_getChildren(self)

SoSpotLightManip_swigregister = _coin.SoSpotLightManip_swigregister
SoSpotLightManip_swigregister(SoSpotLightManip)

def SoSpotLightManip_getClassTypeId() -> "SoType":
    """SoSpotLightManip_getClassTypeId() -> SoType"""
    return _coin.SoSpotLightManip_getClassTypeId()

def SoSpotLightManip_initClass() -> "void":
    """SoSpotLightManip_initClass()"""
    return _coin.SoSpotLightManip_initClass()

class SoTabBoxManip(SoTransformManip):
    """Proxy of C++ SoTabBoxManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTabBoxManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTabBoxManip self) -> SoType"""
        return _coin.SoTabBoxManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTabBoxManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTabBoxManip self) -> SoTabBoxManip"""
        this = _coin.new_SoTabBoxManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoTabBoxManip_swigregister = _coin.SoTabBoxManip_swigregister
SoTabBoxManip_swigregister(SoTabBoxManip)

def SoTabBoxManip_getClassTypeId() -> "SoType":
    """SoTabBoxManip_getClassTypeId() -> SoType"""
    return _coin.SoTabBoxManip_getClassTypeId()

def SoTabBoxManip_initClass() -> "void":
    """SoTabBoxManip_initClass()"""
    return _coin.SoTabBoxManip_initClass()

class SoTrackballManip(SoTransformManip):
    """Proxy of C++ SoTrackballManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTrackballManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTrackballManip self) -> SoType"""
        return _coin.SoTrackballManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTrackballManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTrackballManip self) -> SoTrackballManip"""
        this = _coin.new_SoTrackballManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoTrackballManip_swigregister = _coin.SoTrackballManip_swigregister
SoTrackballManip_swigregister(SoTrackballManip)

def SoTrackballManip_getClassTypeId() -> "SoType":
    """SoTrackballManip_getClassTypeId() -> SoType"""
    return _coin.SoTrackballManip_getClassTypeId()

def SoTrackballManip_initClass() -> "void":
    """SoTrackballManip_initClass()"""
    return _coin.SoTrackballManip_initClass()

class SoTransformBoxManip(SoTransformManip):
    """Proxy of C++ SoTransformBoxManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformBoxManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformBoxManip self) -> SoType"""
        return _coin.SoTransformBoxManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformBoxManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformBoxManip self) -> SoTransformBoxManip"""
        this = _coin.new_SoTransformBoxManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoTransformBoxManip_swigregister = _coin.SoTransformBoxManip_swigregister
SoTransformBoxManip_swigregister(SoTransformBoxManip)

def SoTransformBoxManip_getClassTypeId() -> "SoType":
    """SoTransformBoxManip_getClassTypeId() -> SoType"""
    return _coin.SoTransformBoxManip_getClassTypeId()

def SoTransformBoxManip_initClass() -> "void":
    """SoTransformBoxManip_initClass()"""
    return _coin.SoTransformBoxManip_initClass()

class SoTransformerManip(SoTransformManip):
    """Proxy of C++ SoTransformerManip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformerManip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformerManip self) -> SoType"""
        return _coin.SoTransformerManip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformerManip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransformerManip self) -> SoTransformerManip"""
        this = _coin.new_SoTransformerManip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isLocateHighlighting(self) -> "SbBool":
        """isLocateHighlighting(SoTransformerManip self) -> SbBool"""
        return _coin.SoTransformerManip_isLocateHighlighting(self)


    def setLocateHighlighting(self, onoff: 'SbBool') -> "void":
        """setLocateHighlighting(SoTransformerManip self, SbBool onoff)"""
        return _coin.SoTransformerManip_setLocateHighlighting(self, onoff)


    def unsquishKnobs(self) -> "void":
        """unsquishKnobs(SoTransformerManip self)"""
        return _coin.SoTransformerManip_unsquishKnobs(self)

SoTransformerManip_swigregister = _coin.SoTransformerManip_swigregister
SoTransformerManip_swigregister(SoTransformerManip)

def SoTransformerManip_getClassTypeId() -> "SoType":
    """SoTransformerManip_getClassTypeId() -> SoType"""
    return _coin.SoTransformerManip_getClassTypeId()

def SoTransformerManip_initClass() -> "void":
    """SoTransformerManip_initClass()"""
    return _coin.SoTransformerManip_initClass()

class SoAudioDevice(object):
    """Proxy of C++ SoAudioDevice class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def instance() -> "SoAudioDevice *":
        """instance() -> SoAudioDevice"""
        return _coin.SoAudioDevice_instance()

    instance = staticmethod(instance)

    def init(self, devicetype: 'SbString', devicename: 'SbString') -> "SbBool":
        """init(SoAudioDevice self, SbString devicetype, SbString devicename) -> SbBool"""
        return _coin.SoAudioDevice_init(self, devicetype, devicename)


    def enable(self) -> "SbBool":
        """enable(SoAudioDevice self) -> SbBool"""
        return _coin.SoAudioDevice_enable(self)


    def disable(self) -> "void":
        """disable(SoAudioDevice self)"""
        return _coin.SoAudioDevice_disable(self)


    def isEnabled(self) -> "SbBool":
        """isEnabled(SoAudioDevice self) -> SbBool"""
        return _coin.SoAudioDevice_isEnabled(self)


    def haveSound(self) -> "SbBool":
        """haveSound(SoAudioDevice self) -> SbBool"""
        return _coin.SoAudioDevice_haveSound(self)


    def setGain(self, gain: 'float') -> "void":
        """setGain(SoAudioDevice self, float gain)"""
        return _coin.SoAudioDevice_setGain(self, gain)


    def mute(self, mute: 'SbBool'=1) -> "void":
        """
        mute(SoAudioDevice self, SbBool mute=1)
        mute(SoAudioDevice self)
        """
        return _coin.SoAudioDevice_mute(self, mute)

SoAudioDevice_swigregister = _coin.SoAudioDevice_swigregister
SoAudioDevice_swigregister(SoAudioDevice)

def SoAudioDevice_instance() -> "SoAudioDevice *":
    """SoAudioDevice_instance() -> SoAudioDevice"""
    return _coin.SoAudioDevice_instance()

class SoByteStream(object):
    """Proxy of C++ SoByteStream class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoByteStream self) -> SoByteStream"""
        this = _coin.new_SoByteStream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoByteStream
    __del__ = lambda self: None

    def convert(self, *args) -> "void":
        """
        convert(SoByteStream self, SoNode node, SbBool binary=1)
        convert(SoByteStream self, SoNode node)
        convert(SoByteStream self, SoPath path, SbBool binary=1)
        convert(SoByteStream self, SoPath path)
        convert(SoByteStream self, SoPathList pl, SbBool binary=1)
        convert(SoByteStream self, SoPathList pl)
        """
        return _coin.SoByteStream_convert(self, *args)


    def getData(self) -> "void *":
        """getData(SoByteStream self) -> void *"""
        return _coin.SoByteStream_getData(self)


    def getNumBytes(self) -> "uint32_t":
        """getNumBytes(SoByteStream self) -> uint32_t"""
        return _coin.SoByteStream_getNumBytes(self)


    def unconvert(*args) -> "SoPathList *":
        """
        unconvert(SoByteStream stream) -> SoPathList
        unconvert(void * data, uint32_t bytesinstream) -> SoPathList
        """
        return _coin.SoByteStream_unconvert(*args)

    unconvert = staticmethod(unconvert)

    def copy(self, d: 'void *', len: 'size_t') -> "void":
        """copy(SoByteStream self, void * d, size_t len)"""
        return _coin.SoByteStream_copy(self, d, len)


    def isRawData(self) -> "SbBool":
        """isRawData(SoByteStream self) -> SbBool"""
        return _coin.SoByteStream_isRawData(self)

SoByteStream_swigregister = _coin.SoByteStream_swigregister
SoByteStream_swigregister(SoByteStream)

def SoByteStream_unconvert(*args) -> "SoPathList *":
    """
    unconvert(SoByteStream stream) -> SoPathList
    SoByteStream_unconvert(void * data, uint32_t bytesinstream) -> SoPathList
    """
    return _coin.SoByteStream_unconvert(*args)

class SoContextHandler(object):
    """Proxy of C++ SoContextHandler class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def destructingContext(contextid: 'uint32_t') -> "void":
        """destructingContext(uint32_t contextid)"""
        return _coin.SoContextHandler_destructingContext(contextid)

    destructingContext = staticmethod(destructingContext)

    def addContextDestructionCallback(func: 'SoContextHandler::ContextDestructionCB *', closure: 'void *') -> "void":
        """addContextDestructionCallback(SoContextHandler::ContextDestructionCB * func, void * closure)"""
        return _coin.SoContextHandler_addContextDestructionCallback(func, closure)

    addContextDestructionCallback = staticmethod(addContextDestructionCallback)

    def removeContextDestructionCallback(func: 'SoContextHandler::ContextDestructionCB *', closure: 'void *') -> "void":
        """removeContextDestructionCallback(SoContextHandler::ContextDestructionCB * func, void * closure)"""
        return _coin.SoContextHandler_removeContextDestructionCallback(func, closure)

    removeContextDestructionCallback = staticmethod(removeContextDestructionCallback)

    def __init__(self):
        """__init__(SoContextHandler self) -> SoContextHandler"""
        this = _coin.new_SoContextHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoContextHandler
    __del__ = lambda self: None
SoContextHandler_swigregister = _coin.SoContextHandler_swigregister
SoContextHandler_swigregister(SoContextHandler)

def SoContextHandler_destructingContext(contextid: 'uint32_t') -> "void":
    """SoContextHandler_destructingContext(uint32_t contextid)"""
    return _coin.SoContextHandler_destructingContext(contextid)

def SoContextHandler_addContextDestructionCallback(func: 'SoContextHandler::ContextDestructionCB *', closure: 'void *') -> "void":
    """SoContextHandler_addContextDestructionCallback(SoContextHandler::ContextDestructionCB * func, void * closure)"""
    return _coin.SoContextHandler_addContextDestructionCallback(func, closure)

def SoContextHandler_removeContextDestructionCallback(func: 'SoContextHandler::ContextDestructionCB *', closure: 'void *') -> "void":
    """SoContextHandler_removeContextDestructionCallback(SoContextHandler::ContextDestructionCB * func, void * closure)"""
    return _coin.SoContextHandler_removeContextDestructionCallback(func, closure)

class SoGLImage(object):
    """Proxy of C++ SoGLImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoGLImage self) -> SoGLImage"""
        this = _coin.new_SoGLImage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def unref(self, state: 'SoState'=None) -> "void":
        """
        unref(SoGLImage self, SoState state=None)
        unref(SoGLImage self)
        """
        return _coin.SoGLImage_unref(self, state)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLImage_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGLImage self) -> SoType"""
        return _coin.SoGLImage_getTypeId(self)


    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(SoGLImage self, SoType type) -> SbBool"""
        return _coin.SoGLImage_isOfType(self, type)

    REPEAT = _coin.SoGLImage_REPEAT
    CLAMP = _coin.SoGLImage_CLAMP
    CLAMP_TO_EDGE = _coin.SoGLImage_CLAMP_TO_EDGE
    CLAMP_TO_BORDER = _coin.SoGLImage_CLAMP_TO_BORDER
    IMAGE = _coin.SoGLImage_IMAGE
    SUBIMAGE = _coin.SoGLImage_SUBIMAGE
    MIPMAP = _coin.SoGLImage_MIPMAP

    def setGLDisplayList(self, *args) -> "void":
        """
        setGLDisplayList(SoGLImage self, SoGLDisplayList dl, SoState state, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5)
        setGLDisplayList(SoGLImage self, SoGLDisplayList dl, SoState state, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setGLDisplayList(SoGLImage self, SoGLDisplayList dl, SoState state, SoGLImage::Wrap const wraps)
        setGLDisplayList(SoGLImage self, SoGLDisplayList dl, SoState state)
        """
        return _coin.SoGLImage_setGLDisplayList(self, *args)


    def setPBuffer(self, *args) -> "void":
        """
        setPBuffer(SoGLImage self, SoState state, void * context, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5)
        setPBuffer(SoGLImage self, SoState state, void * context, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setPBuffer(SoGLImage self, SoState state, void * context, SoGLImage::Wrap const wraps)
        setPBuffer(SoGLImage self, SoState state, void * context)
        """
        return _coin.SoGLImage_setPBuffer(self, *args)


    def setData(self, *args) -> "void":
        """
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0)
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5)
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents, SoGLImage::Wrap const wraps)
        setData(SoGLImage self, unsigned char const * bytes, SbVec2s size, int const numcomponents)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents, SoGLImage::Wrap const wraps)
        setData(SoGLImage self, unsigned char const * bytes, SbVec3s size, int const numcomponents)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps)
        setData(SoGLImage self, SbImage image)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5)
        setData(SoGLImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr)
        """
        return _coin.SoGLImage_setData(self, *args)

    SCALE_DOWN = _coin.SoGLImage_SCALE_DOWN
    NO_MIPMAP = _coin.SoGLImage_NO_MIPMAP
    LINEAR_MAG_FILTER = _coin.SoGLImage_LINEAR_MAG_FILTER
    LINEAR_MIN_FILTER = _coin.SoGLImage_LINEAR_MIN_FILTER
    LINEAR_MIPMAP_FILTER = _coin.SoGLImage_LINEAR_MIPMAP_FILTER
    FORCE_TRANSPARENCY_TRUE = _coin.SoGLImage_FORCE_TRANSPARENCY_TRUE
    FORCE_TRANSPARENCY_FALSE = _coin.SoGLImage_FORCE_TRANSPARENCY_FALSE
    FORCE_ALPHA_TEST_TRUE = _coin.SoGLImage_FORCE_ALPHA_TEST_TRUE
    FORCE_ALPHA_TEST_FALSE = _coin.SoGLImage_FORCE_ALPHA_TEST_FALSE
    INVINCIBLE = _coin.SoGLImage_INVINCIBLE
    RECTANGLE = _coin.SoGLImage_RECTANGLE
    COMPRESSED = _coin.SoGLImage_COMPRESSED
    USE_QUALITY_VALUE = _coin.SoGLImage_USE_QUALITY_VALUE

    def setFlags(self, flags: 'uint32_t const') -> "void":
        """setFlags(SoGLImage self, uint32_t const flags)"""
        return _coin.SoGLImage_setFlags(self, flags)


    def getFlags(self) -> "uint32_t":
        """getFlags(SoGLImage self) -> uint32_t"""
        return _coin.SoGLImage_getFlags(self)


    def getImage(self) -> "SbImage const *":
        """getImage(SoGLImage self) -> SbImage"""
        return _coin.SoGLImage_getImage(self)


    def getGLDisplayList(self, state: 'SoState') -> "SoGLDisplayList *":
        """getGLDisplayList(SoGLImage self, SoState state) -> SoGLDisplayList"""
        return _coin.SoGLImage_getGLDisplayList(self, state)


    def hasTransparency(self) -> "SbBool":
        """hasTransparency(SoGLImage self) -> SbBool"""
        return _coin.SoGLImage_hasTransparency(self)


    def useAlphaTest(self) -> "SbBool":
        """useAlphaTest(SoGLImage self) -> SbBool"""
        return _coin.SoGLImage_useAlphaTest(self)


    def getWrapS(self) -> "SoGLImage::Wrap":
        """getWrapS(SoGLImage self) -> SoGLImage::Wrap"""
        return _coin.SoGLImage_getWrapS(self)


    def getWrapT(self) -> "SoGLImage::Wrap":
        """getWrapT(SoGLImage self) -> SoGLImage::Wrap"""
        return _coin.SoGLImage_getWrapT(self)


    def getWrapR(self) -> "SoGLImage::Wrap":
        """getWrapR(SoGLImage self) -> SoGLImage::Wrap"""
        return _coin.SoGLImage_getWrapR(self)


    def getQuality(self) -> "float":
        """getQuality(SoGLImage self) -> float"""
        return _coin.SoGLImage_getQuality(self)


    def getGLImageId(self) -> "uint32_t":
        """getGLImageId(SoGLImage self) -> uint32_t"""
        return _coin.SoGLImage_getGLImageId(self)


    def beginFrame(state: 'SoState') -> "void":
        """beginFrame(SoState state)"""
        return _coin.SoGLImage_beginFrame(state)

    beginFrame = staticmethod(beginFrame)

    def tagImage(state: 'SoState', image: 'SoGLImage') -> "void":
        """tagImage(SoState state, SoGLImage image)"""
        return _coin.SoGLImage_tagImage(state, image)

    tagImage = staticmethod(tagImage)

    def endFrame(state: 'SoState') -> "void":
        """endFrame(SoState state)"""
        return _coin.SoGLImage_endFrame(state)

    endFrame = staticmethod(endFrame)

    def setDisplayListMaxAge(maxage: 'uint32_t const') -> "void":
        """setDisplayListMaxAge(uint32_t const maxage)"""
        return _coin.SoGLImage_setDisplayListMaxAge(maxage)

    setDisplayListMaxAge = staticmethod(setDisplayListMaxAge)

    def freeAllImages(state: 'SoState'=None) -> "void":
        """
        freeAllImages(SoState state=None)
        freeAllImages()
        """
        return _coin.SoGLImage_freeAllImages(state)

    freeAllImages = staticmethod(freeAllImages)

    def setEndFrameCallback(self, cb: 'void (*)(void *)', closure: 'void *') -> "void":
        """setEndFrameCallback(SoGLImage self, void (*)(void *) cb, void * closure)"""
        return _coin.SoGLImage_setEndFrameCallback(self, cb, closure)


    def getNumFramesSinceUsed(self) -> "int":
        """getNumFramesSinceUsed(SoGLImage self) -> int"""
        return _coin.SoGLImage_getNumFramesSinceUsed(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLImage_initClass()

    initClass = staticmethod(initClass)

    def setResizeCallback(f: 'SoGLImage::SoGLImageResizeCB *', closure: 'void *') -> "void":
        """setResizeCallback(SoGLImage::SoGLImageResizeCB * f, void * closure)"""
        return _coin.SoGLImage_setResizeCallback(f, closure)

    setResizeCallback = staticmethod(setResizeCallback)
SoGLImage_swigregister = _coin.SoGLImage_swigregister
SoGLImage_swigregister(SoGLImage)

def SoGLImage_getClassTypeId() -> "SoType":
    """SoGLImage_getClassTypeId() -> SoType"""
    return _coin.SoGLImage_getClassTypeId()

def SoGLImage_beginFrame(state: 'SoState') -> "void":
    """SoGLImage_beginFrame(SoState state)"""
    return _coin.SoGLImage_beginFrame(state)

def SoGLImage_tagImage(state: 'SoState', image: 'SoGLImage') -> "void":
    """SoGLImage_tagImage(SoState state, SoGLImage image)"""
    return _coin.SoGLImage_tagImage(state, image)

def SoGLImage_endFrame(state: 'SoState') -> "void":
    """SoGLImage_endFrame(SoState state)"""
    return _coin.SoGLImage_endFrame(state)

def SoGLImage_setDisplayListMaxAge(maxage: 'uint32_t const') -> "void":
    """SoGLImage_setDisplayListMaxAge(uint32_t const maxage)"""
    return _coin.SoGLImage_setDisplayListMaxAge(maxage)

def SoGLImage_freeAllImages(state: 'SoState'=None) -> "void":
    """
    freeAllImages(SoState state=None)
    SoGLImage_freeAllImages()
    """
    return _coin.SoGLImage_freeAllImages(state)

def SoGLImage_initClass() -> "void":
    """SoGLImage_initClass()"""
    return _coin.SoGLImage_initClass()

def SoGLImage_setResizeCallback(f: 'SoGLImage::SoGLImageResizeCB *', closure: 'void *') -> "void":
    """SoGLImage_setResizeCallback(SoGLImage::SoGLImageResizeCB * f, void * closure)"""
    return _coin.SoGLImage_setResizeCallback(f, closure)

class SoGLBigImage(SoGLImage):
    """Proxy of C++ SoGLBigImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoGLBigImage self) -> SoGLBigImage"""
        this = _coin.new_SoGLBigImage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def unref(self, state: 'SoState'=None) -> "void":
        """
        unref(SoGLBigImage self, SoState state=None)
        unref(SoGLBigImage self)
        """
        return _coin.SoGLBigImage_unref(self, state)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGLBigImage_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGLBigImage self) -> SoType"""
        return _coin.SoGLBigImage_getTypeId(self)


    def setData(self, *args) -> "void":
        """
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5, int const border=0)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, float const quality=0.5)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps)
        setData(SoGLBigImage self, SbImage image)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0, SoState createinstate=None)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5, int const border=0)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr, float const quality=0.5)
        setData(SoGLBigImage self, SbImage image, SoGLImage::Wrap const wraps, SoGLImage::Wrap const wrapt, SoGLImage::Wrap const wrapr)
        """
        return _coin.SoGLBigImage_setData(self, *args)


    def initSubImages(self, subimagesize: 'SbVec2s') -> "int":
        """initSubImages(SoGLBigImage self, SbVec2s subimagesize) -> int"""
        return _coin.SoGLBigImage_initSubImages(self, subimagesize)


    def handleSubImage(self, idx: 'int const', start: 'SbVec2f', end: 'SbVec2f', tcmul: 'SbVec2f') -> "void":
        """handleSubImage(SoGLBigImage self, int const idx, SbVec2f start, SbVec2f end, SbVec2f tcmul)"""
        return _coin.SoGLBigImage_handleSubImage(self, idx, start, end, tcmul)


    def applySubImage(self, state: 'SoState', idx: 'int const', quality: 'float const', projsize: 'SbVec2s') -> "void":
        """applySubImage(SoGLBigImage self, SoState state, int const idx, float const quality, SbVec2s projsize)"""
        return _coin.SoGLBigImage_applySubImage(self, state, idx, quality, projsize)


    def exceededChangeLimit(self) -> "SbBool":
        """exceededChangeLimit(SoGLBigImage self) -> SbBool"""
        return _coin.SoGLBigImage_exceededChangeLimit(self)


    def setChangeLimit(limit: 'int const') -> "int":
        """setChangeLimit(int const limit) -> int"""
        return _coin.SoGLBigImage_setChangeLimit(limit)

    setChangeLimit = staticmethod(setChangeLimit)

    def getGLDisplayList(self, state: 'SoState') -> "SoGLDisplayList *":
        """getGLDisplayList(SoGLBigImage self, SoState state) -> SoGLDisplayList"""
        return _coin.SoGLBigImage_getGLDisplayList(self, state)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGLBigImage_initClass()

    initClass = staticmethod(initClass)
SoGLBigImage_swigregister = _coin.SoGLBigImage_swigregister
SoGLBigImage_swigregister(SoGLBigImage)

def SoGLBigImage_getClassTypeId() -> "SoType":
    """SoGLBigImage_getClassTypeId() -> SoType"""
    return _coin.SoGLBigImage_getClassTypeId()

def SoGLBigImage_setChangeLimit(limit: 'int const') -> "int":
    """SoGLBigImage_setChangeLimit(int const limit) -> int"""
    return _coin.SoGLBigImage_setChangeLimit(limit)

def SoGLBigImage_initClass() -> "void":
    """SoGLBigImage_initClass()"""
    return _coin.SoGLBigImage_initClass()

class SoGlyph(object):
    """Proxy of C++ SoGlyph class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    FONT2D = _coin.SoGlyph_FONT2D
    FONT3D = _coin.SoGlyph_FONT3D

    def unref(self) -> "void":
        """unref(SoGlyph self)"""
        return _coin.SoGlyph_unref(self)


    def getCoords(self) -> "SbVec2f const *":
        """getCoords(SoGlyph self) -> SbVec2f"""
        return _coin.SoGlyph_getCoords(self)


    def getFaceIndices(self) -> "int const *":
        """getFaceIndices(SoGlyph self) -> int const *"""
        return _coin.SoGlyph_getFaceIndices(self)


    def getEdgeIndices(self) -> "int const *":
        """getEdgeIndices(SoGlyph self) -> int const *"""
        return _coin.SoGlyph_getEdgeIndices(self)


    def getNextCWEdge(self, edgeidx: 'int const') -> "int const *":
        """getNextCWEdge(SoGlyph self, int const edgeidx) -> int const *"""
        return _coin.SoGlyph_getNextCWEdge(self, edgeidx)


    def getNextCCWEdge(self, edgeidx: 'int const') -> "int const *":
        """getNextCCWEdge(SoGlyph self, int const edgeidx) -> int const *"""
        return _coin.SoGlyph_getNextCCWEdge(self, edgeidx)


    def getWidth(self) -> "float":
        """getWidth(SoGlyph self) -> float"""
        return _coin.SoGlyph_getWidth(self)


    def getBoundingBox(self) -> "SbBox2f const &":
        """getBoundingBox(SoGlyph self) -> SbBox2f"""
        return _coin.SoGlyph_getBoundingBox(self)


    def getGlyph(*args) -> "SoGlyph const *":
        """
        getGlyph(char const character, SbName font) -> SoGlyph
        getGlyph(SoState state, unsigned int const character, SbVec2s size, float const angle) -> SoGlyph
        """
        return _coin.SoGlyph_getGlyph(*args)

    getGlyph = staticmethod(getGlyph)

    def getAdvance(self) -> "SbVec2s":
        """getAdvance(SoGlyph self) -> SbVec2s"""
        return _coin.SoGlyph_getAdvance(self)


    def getKerning(self, rightglyph: 'SoGlyph') -> "SbVec2s":
        """getKerning(SoGlyph self, SoGlyph rightglyph) -> SbVec2s"""
        return _coin.SoGlyph_getKerning(self, rightglyph)


    def getBitmap(self, size: 'SbVec2s', pos: 'SbVec2s', antialiased: 'SbBool const') -> "unsigned char *":
        """getBitmap(SoGlyph self, SbVec2s size, SbVec2s pos, SbBool const antialiased) -> unsigned char *"""
        return _coin.SoGlyph_getBitmap(self, size, pos, antialiased)

SoGlyph_swigregister = _coin.SoGlyph_swigregister
SoGlyph_swigregister(SoGlyph)

def SoGlyph_getGlyph(*args) -> "SoGlyph const *":
    """
    getGlyph(char const character, SbName font) -> SoGlyph
    SoGlyph_getGlyph(SoState state, unsigned int const character, SbVec2s size, float const angle) -> SoGlyph
    """
    return _coin.SoGlyph_getGlyph(*args)

class SoProto(SoNode):
    """Proxy of C++ SoProto class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, externproto: 'SbBool const'=0):
        """
        __init__(SoProto self, SbBool const externproto=0) -> SoProto
        __init__(SoProto self) -> SoProto
        """
        this = _coin.new_SoProto(externproto)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFetchExternProtoCallback(cb: 'SoFetchExternProtoCB *', closure: 'void *') -> "void":
        """setFetchExternProtoCallback(SoFetchExternProtoCB * cb, void * closure)"""
        return _coin.SoProto_setFetchExternProtoCallback(cb, closure)

    setFetchExternProtoCallback = staticmethod(setFetchExternProtoCallback)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoProto self) -> SoType"""
        return _coin.SoProto_getTypeId(self)


    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProto_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def findProto(name: 'SbName') -> "SoProto *":
        """findProto(SbName name) -> SoProto"""
        return _coin.SoProto_findProto(name)

    findProto = staticmethod(findProto)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProto_initClass()

    initClass = staticmethod(initClass)

    def createProtoInstance(self) -> "SoProtoInstance *":
        """createProtoInstance(SoProto self) -> SoProtoInstance"""
        return _coin.SoProto_createProtoInstance(self)


    def addISReference(self, container: 'SoNode', fieldname: 'SbName', interfacename: 'SbName') -> "void":
        """addISReference(SoProto self, SoNode container, SbName fieldname, SbName interfacename)"""
        return _coin.SoProto_addISReference(self, container, fieldname, interfacename)


    def findISReference(self, container: 'SoFieldContainer', fieldname: 'SbName') -> "SbName":
        """findISReference(SoProto self, SoFieldContainer container, SbName fieldname) -> SbName"""
        return _coin.SoProto_findISReference(self, container, fieldname)


    def addReference(self, name: 'SbName', base: 'SoBase') -> "void":
        """addReference(SoProto self, SbName name, SoBase base)"""
        return _coin.SoProto_addReference(self, name, base)


    def removeReference(self, name: 'SbName') -> "void":
        """removeReference(SoProto self, SbName name)"""
        return _coin.SoProto_removeReference(self, name)


    def findReference(self, name: 'SbName') -> "SoBase *":
        """findReference(SoProto self, SbName name) -> SoBase"""
        return _coin.SoProto_findReference(self, name)


    def addRoute(self, fromnode: 'SbName', fromfield: 'SbName', tonode: 'SbName', tofield: 'SbName') -> "void":
        """addRoute(SoProto self, SbName fromnode, SbName fromfield, SbName tonode, SbName tofield)"""
        return _coin.SoProto_addRoute(self, fromnode, fromfield, tonode, tofield)


    def getProtoName(self) -> "SbName":
        """getProtoName(SoProto self) -> SbName"""
        return _coin.SoProto_getProtoName(self)


    def readInstance(self, input: 'SoInput', flags: 'unsigned short') -> "SbBool":
        """readInstance(SoProto self, SoInput input, unsigned short flags) -> SbBool"""
        return _coin.SoProto_readInstance(self, input, flags)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoProto self, SoWriteAction action)"""
        return _coin.SoProto_write(self, action)

SoProto_swigregister = _coin.SoProto_swigregister
SoProto_swigregister(SoProto)

def SoProto_setFetchExternProtoCallback(cb: 'SoFetchExternProtoCB *', closure: 'void *') -> "void":
    """SoProto_setFetchExternProtoCallback(SoFetchExternProtoCB * cb, void * closure)"""
    return _coin.SoProto_setFetchExternProtoCallback(cb, closure)

def SoProto_getClassTypeId() -> "SoType":
    """SoProto_getClassTypeId() -> SoType"""
    return _coin.SoProto_getClassTypeId()

def SoProto_findProto(name: 'SbName') -> "SoProto *":
    """SoProto_findProto(SbName name) -> SoProto"""
    return _coin.SoProto_findProto(name)

def SoProto_initClass() -> "void":
    """SoProto_initClass()"""
    return _coin.SoProto_initClass()

class SoProtoInstance(SoNode):
    """Proxy of C++ SoProtoInstance class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProtoInstance_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoProtoInstance self) -> SoType"""
        return _coin.SoProtoInstance_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProtoInstance_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, proto: 'SoProto', deffielddata: 'SoFieldData'):
        """__init__(SoProtoInstance self, SoProto proto, SoFieldData deffielddata) -> SoProtoInstance"""
        this = _coin.new_SoProtoInstance(proto, deffielddata)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def findProtoInstance(rootnode: 'SoNode') -> "SoProtoInstance *":
        """findProtoInstance(SoNode rootnode) -> SoProtoInstance"""
        return _coin.SoProtoInstance_findProtoInstance(rootnode)

    findProtoInstance = staticmethod(findProtoInstance)

    def setRootNode(self, root: 'SoNode') -> "void":
        """setRootNode(SoProtoInstance self, SoNode root)"""
        return _coin.SoProtoInstance_setRootNode(self, root)


    def getRootNode(self) -> "SoNode *":
        """getRootNode(SoProtoInstance self) -> SoNode"""
        return _coin.SoProtoInstance_getRootNode(self)


    def getProtoDefinition(self) -> "SoProto *":
        """getProtoDefinition(SoProtoInstance self) -> SoProto"""
        return _coin.SoProtoInstance_getProtoDefinition(self)


    def getProtoName(self) -> "SbName":
        """getProtoName(SoProtoInstance self) -> SbName"""
        return _coin.SoProtoInstance_getProtoName(self)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoProtoInstance self, SoWriteAction action)"""
        return _coin.SoProtoInstance_write(self, action)

SoProtoInstance_swigregister = _coin.SoProtoInstance_swigregister
SoProtoInstance_swigregister(SoProtoInstance)

def SoProtoInstance_getClassTypeId() -> "SoType":
    """SoProtoInstance_getClassTypeId() -> SoType"""
    return _coin.SoProtoInstance_getClassTypeId()

def SoProtoInstance_initClass() -> "void":
    """SoProtoInstance_initClass()"""
    return _coin.SoProtoInstance_initClass()

def SoProtoInstance_findProtoInstance(rootnode: 'SoNode') -> "SoProtoInstance *":
    """SoProtoInstance_findProtoInstance(SoNode rootnode) -> SoProtoInstance"""
    return _coin.SoProtoInstance_findProtoInstance(rootnode)

class SoTranReceiver(object):
    """Proxy of C++ SoTranReceiver class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, root: 'SoGroup'):
        """__init__(SoTranReceiver self, SoGroup root) -> SoTranReceiver"""
        this = _coin.new_SoTranReceiver(root)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoTranReceiver
    __del__ = lambda self: None

    def interpret(self, input: 'SoInput') -> "SbBool":
        """interpret(SoTranReceiver self, SoInput input) -> SbBool"""
        return _coin.SoTranReceiver_interpret(self, input)

SoTranReceiver_swigregister = _coin.SoTranReceiver_swigregister
SoTranReceiver_swigregister(SoTranReceiver)

class SoTranSender(object):
    """Proxy of C++ SoTranSender class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, output: 'SoOutput'):
        """__init__(SoTranSender self, SoOutput output) -> SoTranSender"""
        this = _coin.new_SoTranSender(output)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoTranSender
    __del__ = lambda self: None

    def getOutput(self) -> "SoOutput *":
        """getOutput(SoTranSender self) -> SoOutput"""
        return _coin.SoTranSender_getOutput(self)


    def insert(self, *args) -> "void":
        """
        insert(SoTranSender self, SoNode node)
        insert(SoTranSender self, SoNode node, SoNode parent, int n)
        """
        return _coin.SoTranSender_insert(self, *args)


    def remove(self, parent: 'SoNode', n: 'int') -> "void":
        """remove(SoTranSender self, SoNode parent, int n)"""
        return _coin.SoTranSender_remove(self, parent, n)


    def replace(self, parent: 'SoNode', n: 'int', newnode: 'SoNode') -> "void":
        """replace(SoTranSender self, SoNode parent, int n, SoNode newnode)"""
        return _coin.SoTranSender_replace(self, parent, n, newnode)


    def modify(self, node: 'SoNode') -> "void":
        """modify(SoTranSender self, SoNode node)"""
        return _coin.SoTranSender_modify(self, node)


    def prepareToSend(self) -> "void":
        """prepareToSend(SoTranSender self)"""
        return _coin.SoTranSender_prepareToSend(self)

SoTranSender_swigregister = _coin.SoTranSender_swigregister
SoTranSender_swigregister(SoTranSender)

class SoAppearanceKit(SoBaseKit):
    """Proxy of C++ SoAppearanceKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAppearanceKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAppearanceKit self) -> SoType"""
        return _coin.SoAppearanceKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoAppearanceKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoAppearanceKit self) -> SoNodekitCatalog"""
        return _coin.SoAppearanceKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoAppearanceKit self) -> SoAppearanceKit"""
        this = _coin.new_SoAppearanceKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAppearanceKit_initClass()

    initClass = staticmethod(initClass)
SoAppearanceKit_swigregister = _coin.SoAppearanceKit_swigregister
SoAppearanceKit_swigregister(SoAppearanceKit)

def SoAppearanceKit_getClassTypeId() -> "SoType":
    """SoAppearanceKit_getClassTypeId() -> SoType"""
    return _coin.SoAppearanceKit_getClassTypeId()

def SoAppearanceKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoAppearanceKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoAppearanceKit_getClassNodekitCatalog()

def SoAppearanceKit_initClass() -> "void":
    """SoAppearanceKit_initClass()"""
    return _coin.SoAppearanceKit_initClass()

class SoCameraKit(SoBaseKit):
    """Proxy of C++ SoCameraKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCameraKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCameraKit self) -> SoType"""
        return _coin.SoCameraKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoCameraKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoCameraKit self) -> SoNodekitCatalog"""
        return _coin.SoCameraKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoCameraKit self) -> SoCameraKit"""
        this = _coin.new_SoCameraKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCameraKit_initClass()

    initClass = staticmethod(initClass)
SoCameraKit_swigregister = _coin.SoCameraKit_swigregister
SoCameraKit_swigregister(SoCameraKit)

def SoCameraKit_getClassTypeId() -> "SoType":
    """SoCameraKit_getClassTypeId() -> SoType"""
    return _coin.SoCameraKit_getClassTypeId()

def SoCameraKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoCameraKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoCameraKit_getClassNodekitCatalog()

def SoCameraKit_initClass() -> "void":
    """SoCameraKit_initClass()"""
    return _coin.SoCameraKit_initClass()

class SoLightKit(SoBaseKit):
    """Proxy of C++ SoLightKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLightKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLightKit self) -> SoType"""
        return _coin.SoLightKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoLightKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoLightKit self) -> SoNodekitCatalog"""
        return _coin.SoLightKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoLightKit self) -> SoLightKit"""
        this = _coin.new_SoLightKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLightKit_initClass()

    initClass = staticmethod(initClass)
SoLightKit_swigregister = _coin.SoLightKit_swigregister
SoLightKit_swigregister(SoLightKit)

def SoLightKit_getClassTypeId() -> "SoType":
    """SoLightKit_getClassTypeId() -> SoType"""
    return _coin.SoLightKit_getClassTypeId()

def SoLightKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoLightKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoLightKit_getClassNodekitCatalog()

def SoLightKit_initClass() -> "void":
    """SoLightKit_initClass()"""
    return _coin.SoLightKit_initClass()

class SoNodeKit(object):
    """Proxy of C++ SoNodeKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def init() -> "void":
        """init()"""
        return _coin.SoNodeKit_init()

    init = staticmethod(init)

    def __init__(self):
        """__init__(SoNodeKit self) -> SoNodeKit"""
        this = _coin.new_SoNodeKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoNodeKit
    __del__ = lambda self: None
SoNodeKit_swigregister = _coin.SoNodeKit_swigregister
SoNodeKit_swigregister(SoNodeKit)

def SoNodeKit_init() -> "void":
    """SoNodeKit_init()"""
    return _coin.SoNodeKit_init()

class SoSceneKit(SoBaseKit):
    """Proxy of C++ SoSceneKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSceneKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSceneKit self) -> SoType"""
        return _coin.SoSceneKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoSceneKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoSceneKit self) -> SoNodekitCatalog"""
        return _coin.SoSceneKit_getNodekitCatalog(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSceneKit_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSceneKit self) -> SoSceneKit"""
        this = _coin.new_SoSceneKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCameraNumber(self) -> "int":
        """getCameraNumber(SoSceneKit self) -> int"""
        return _coin.SoSceneKit_getCameraNumber(self)


    def setCameraNumber(self, camNum: 'int') -> "void":
        """setCameraNumber(SoSceneKit self, int camNum)"""
        return _coin.SoSceneKit_setCameraNumber(self, camNum)


    def affectsState(self) -> "SbBool":
        """affectsState(SoSceneKit self) -> SbBool"""
        return _coin.SoSceneKit_affectsState(self)

SoSceneKit_swigregister = _coin.SoSceneKit_swigregister
SoSceneKit_swigregister(SoSceneKit)

def SoSceneKit_getClassTypeId() -> "SoType":
    """SoSceneKit_getClassTypeId() -> SoType"""
    return _coin.SoSceneKit_getClassTypeId()

def SoSceneKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoSceneKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoSceneKit_getClassNodekitCatalog()

def SoSceneKit_initClass() -> "void":
    """SoSceneKit_initClass()"""
    return _coin.SoSceneKit_initClass()

class SoSeparatorKit(SoBaseKit):
    """Proxy of C++ SoSeparatorKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSeparatorKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSeparatorKit self) -> SoType"""
        return _coin.SoSeparatorKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoSeparatorKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoSeparatorKit self) -> SoNodekitCatalog"""
        return _coin.SoSeparatorKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoSeparatorKit self) -> SoSeparatorKit"""
        this = _coin.new_SoSeparatorKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OFF = _coin.SoSeparatorKit_OFF
    ON = _coin.SoSeparatorKit_ON
    AUTO = _coin.SoSeparatorKit_AUTO
    renderCaching = _swig_property(_coin.SoSeparatorKit_renderCaching_get, _coin.SoSeparatorKit_renderCaching_set)
    boundingBoxCaching = _swig_property(_coin.SoSeparatorKit_boundingBoxCaching_get, _coin.SoSeparatorKit_boundingBoxCaching_set)
    renderCulling = _swig_property(_coin.SoSeparatorKit_renderCulling_get, _coin.SoSeparatorKit_renderCulling_set)
    pickCulling = _swig_property(_coin.SoSeparatorKit_pickCulling_get, _coin.SoSeparatorKit_pickCulling_set)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSeparatorKit_initClass()

    initClass = staticmethod(initClass)
SoSeparatorKit_swigregister = _coin.SoSeparatorKit_swigregister
SoSeparatorKit_swigregister(SoSeparatorKit)

def SoSeparatorKit_getClassTypeId() -> "SoType":
    """SoSeparatorKit_getClassTypeId() -> SoType"""
    return _coin.SoSeparatorKit_getClassTypeId()

def SoSeparatorKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoSeparatorKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoSeparatorKit_getClassNodekitCatalog()

def SoSeparatorKit_initClass() -> "void":
    """SoSeparatorKit_initClass()"""
    return _coin.SoSeparatorKit_initClass()

class SoShapeKit(SoSeparatorKit):
    """Proxy of C++ SoShapeKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShapeKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShapeKit self) -> SoType"""
        return _coin.SoShapeKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoShapeKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoShapeKit self) -> SoNodekitCatalog"""
        return _coin.SoShapeKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoShapeKit self) -> SoShapeKit"""
        this = _coin.new_SoShapeKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShapeKit_initClass()

    initClass = staticmethod(initClass)
SoShapeKit_swigregister = _coin.SoShapeKit_swigregister
SoShapeKit_swigregister(SoShapeKit)

def SoShapeKit_getClassTypeId() -> "SoType":
    """SoShapeKit_getClassTypeId() -> SoType"""
    return _coin.SoShapeKit_getClassTypeId()

def SoShapeKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoShapeKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoShapeKit_getClassNodekitCatalog()

def SoShapeKit_initClass() -> "void":
    """SoShapeKit_initClass()"""
    return _coin.SoShapeKit_initClass()

class SoWrapperKit(SoSeparatorKit):
    """Proxy of C++ SoWrapperKit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoWrapperKit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoWrapperKit self) -> SoType"""
        return _coin.SoWrapperKit_getTypeId(self)


    def getClassNodekitCatalog() -> "SoNodekitCatalog const *":
        """getClassNodekitCatalog() -> SoNodekitCatalog"""
        return _coin.SoWrapperKit_getClassNodekitCatalog()

    getClassNodekitCatalog = staticmethod(getClassNodekitCatalog)

    def getNodekitCatalog(self) -> "SoNodekitCatalog const *":
        """getNodekitCatalog(SoWrapperKit self) -> SoNodekitCatalog"""
        return _coin.SoWrapperKit_getNodekitCatalog(self)


    def __init__(self):
        """__init__(SoWrapperKit self) -> SoWrapperKit"""
        this = _coin.new_SoWrapperKit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoWrapperKit_initClass()

    initClass = staticmethod(initClass)
SoWrapperKit_swigregister = _coin.SoWrapperKit_swigregister
SoWrapperKit_swigregister(SoWrapperKit)

def SoWrapperKit_getClassTypeId() -> "SoType":
    """SoWrapperKit_getClassTypeId() -> SoType"""
    return _coin.SoWrapperKit_getClassTypeId()

def SoWrapperKit_getClassNodekitCatalog() -> "SoNodekitCatalog const *":
    """SoWrapperKit_getClassNodekitCatalog() -> SoNodekitCatalog"""
    return _coin.SoWrapperKit_getClassNodekitCatalog()

def SoWrapperKit_initClass() -> "void":
    """SoWrapperKit_initClass()"""
    return _coin.SoWrapperKit_initClass()

class SoGroup(SoNode):
    """Proxy of C++ SoGroup class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoGroup_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoGroup self) -> SoType"""
        return _coin.SoGroup_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoGroup_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoGroup self) -> SoGroup
        __init__(SoGroup self, int nchildren) -> SoGroup
        """
        this = _coin.new_SoGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addChild(self, node: 'SoNode') -> "void":
        """addChild(SoGroup self, SoNode node)"""
        return _coin.SoGroup_addChild(self, node)


    def insertChild(self, child: 'SoNode', newchildindex: 'int') -> "void":
        """insertChild(SoGroup self, SoNode child, int newchildindex)"""
        return _coin.SoGroup_insertChild(self, child, newchildindex)


    def getChild(self, index: 'int') -> "SoNode *":
        """getChild(SoGroup self, int index) -> SoNode"""
        return _coin.SoGroup_getChild(self, index)


    def findChild(self, node: 'SoNode') -> "int":
        """findChild(SoGroup self, SoNode node) -> int"""
        return _coin.SoGroup_findChild(self, node)


    def getNumChildren(self) -> "int":
        """getNumChildren(SoGroup self) -> int"""
        return _coin.SoGroup_getNumChildren(self)


    def removeChild(self, *args) -> "void":
        """
        removeChild(SoGroup self, int childindex)
        removeChild(SoGroup self, SoNode child)
        """
        return _coin.SoGroup_removeChild(self, *args)


    def removeAllChildren(self) -> "void":
        """removeAllChildren(SoGroup self)"""
        return _coin.SoGroup_removeAllChildren(self)


    def replaceChild(self, *args) -> "void":
        """
        replaceChild(SoGroup self, int index, SoNode newchild)
        replaceChild(SoGroup self, SoNode oldchild, SoNode newchild)
        """
        return _coin.SoGroup_replaceChild(self, *args)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoGroup self, SoAction action)"""
        return _coin.SoGroup_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoGroup self, SoGLRenderAction action)"""
        return _coin.SoGroup_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoGroup self, SoCallbackAction action)"""
        return _coin.SoGroup_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoGroup self, SoGetBoundingBoxAction action)"""
        return _coin.SoGroup_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoGroup self, SoGetMatrixAction action)"""
        return _coin.SoGroup_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoGroup self, SoHandleEventAction action)"""
        return _coin.SoGroup_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoGroup self, SoPickAction action)"""
        return _coin.SoGroup_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoGroup self, SoSearchAction action)"""
        return _coin.SoGroup_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoGroup self, SoWriteAction action)"""
        return _coin.SoGroup_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoGroup self, SoGetPrimitiveCountAction action)"""
        return _coin.SoGroup_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoGroup self, SoAudioRenderAction action)"""
        return _coin.SoGroup_audioRender(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoGroup self) -> SoChildList"""
        return _coin.SoGroup_getChildren(self)


    def addWriteReference(self, out: 'SoOutput', isfromfield: 'SbBool'=0) -> "void":
        """
        addWriteReference(SoGroup self, SoOutput out, SbBool isfromfield=0)
        addWriteReference(SoGroup self, SoOutput out)
        """
        return _coin.SoGroup_addWriteReference(self, out, isfromfield)


    def __iter__(self):
        i = 0
        while i < self.getNumChildren():
            yield self.getChild(i)
            i += 1

    def __iadd__(self, other):
        if isinstance(other, (list, tuple)):
            for other_i in other:
                self.__iadd__(other_i)
            return self
        else:
            try:
                self.addChild(other)
                return self
            except TypeError as e:
                raise TypeError(str(self.__class__) + " accepts only objects of type pivy.coin.SoNode")

    def __isub__(self, other):
        if isinstance(other, (list, tuple)):
            for other_i in other:
                self.__isub__(other_i)
            return self
        else:
            try:
                self.removeChild(other)
                return self
            except TypeError as e:
                raise TypeError(str(self.__class__) + " can't remove child of type " + str(type(other)))

    def getByName(self, name):
        for child in self:
            if name == child.getName():
                return child
        return None

    def __bool__(self):
        return True


    def __len__(self) -> "int":
        """__len__(SoGroup self) -> int"""
        return _coin.SoGroup___len__(self)


    def __contains__(self, node: 'SoNode') -> "int":
        """__contains__(SoGroup self, SoNode node) -> int"""
        return _coin.SoGroup___contains__(self, node)


    def __getitem__(self, index: 'int') -> "SoNode *":
        """__getitem__(SoGroup self, int index) -> SoNode"""
        return _coin.SoGroup___getitem__(self, index)

SoGroup_swigregister = _coin.SoGroup_swigregister
SoGroup_swigregister(SoGroup)

def SoGroup_getClassTypeId() -> "SoType":
    """SoGroup_getClassTypeId() -> SoType"""
    return _coin.SoGroup_getClassTypeId()

def SoGroup_initClass() -> "void":
    """SoGroup_initClass()"""
    return _coin.SoGroup_initClass()

class SoSeparator(SoGroup):
    """Proxy of C++ SoSeparator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSeparator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSeparator self) -> SoType"""
        return _coin.SoSeparator_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSeparator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoSeparator self) -> SoSeparator
        __init__(SoSeparator self, int const nchildren) -> SoSeparator
        """
        this = _coin.new_SoSeparator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OFF = _coin.SoSeparator_OFF
    ON = _coin.SoSeparator_ON
    AUTO = _coin.SoSeparator_AUTO
    renderCaching = _swig_property(_coin.SoSeparator_renderCaching_get, _coin.SoSeparator_renderCaching_set)
    boundingBoxCaching = _swig_property(_coin.SoSeparator_boundingBoxCaching_get, _coin.SoSeparator_boundingBoxCaching_set)
    renderCulling = _swig_property(_coin.SoSeparator_renderCulling_get, _coin.SoSeparator_renderCulling_set)
    pickCulling = _swig_property(_coin.SoSeparator_pickCulling_get, _coin.SoSeparator_pickCulling_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSeparator self, SoAction action)"""
        return _coin.SoSeparator_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSeparator self, SoGLRenderAction action)"""
        return _coin.SoSeparator_GLRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoSeparator self, SoGLRenderAction action)"""
        return _coin.SoSeparator_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoSeparator self, SoGLRenderAction action)"""
        return _coin.SoSeparator_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoSeparator self, SoGLRenderAction action)"""
        return _coin.SoSeparator_GLRenderOffPath(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoSeparator self, SoCallbackAction action)"""
        return _coin.SoSeparator_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoSeparator self, SoGetBoundingBoxAction action)"""
        return _coin.SoSeparator_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoSeparator self, SoGetMatrixAction action)"""
        return _coin.SoSeparator_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoSeparator self, SoHandleEventAction action)"""
        return _coin.SoSeparator_handleEvent(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoSeparator self, SoRayPickAction action)"""
        return _coin.SoSeparator_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoSeparator self, SoSearchAction action)"""
        return _coin.SoSeparator_search(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoSeparator self, SoGetPrimitiveCountAction action)"""
        return _coin.SoSeparator_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoSeparator self, SoAudioRenderAction action)"""
        return _coin.SoSeparator_audioRender(self, action)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoSeparator self, SoNotList nl)"""
        return _coin.SoSeparator_notify(self, nl)


    def setNumRenderCaches(howmany: 'int const') -> "void":
        """setNumRenderCaches(int const howmany)"""
        return _coin.SoSeparator_setNumRenderCaches(howmany)

    setNumRenderCaches = staticmethod(setNumRenderCaches)

    def getNumRenderCaches() -> "int":
        """getNumRenderCaches() -> int"""
        return _coin.SoSeparator_getNumRenderCaches()

    getNumRenderCaches = staticmethod(getNumRenderCaches)

    def affectsState(self) -> "SbBool":
        """affectsState(SoSeparator self) -> SbBool"""
        return _coin.SoSeparator_affectsState(self)

SoSeparator_swigregister = _coin.SoSeparator_swigregister
SoSeparator_swigregister(SoSeparator)

def SoSeparator_getClassTypeId() -> "SoType":
    """SoSeparator_getClassTypeId() -> SoType"""
    return _coin.SoSeparator_getClassTypeId()

def SoSeparator_initClass() -> "void":
    """SoSeparator_initClass()"""
    return _coin.SoSeparator_initClass()

def SoSeparator_setNumRenderCaches(howmany: 'int const') -> "void":
    """SoSeparator_setNumRenderCaches(int const howmany)"""
    return _coin.SoSeparator_setNumRenderCaches(howmany)

def SoSeparator_getNumRenderCaches() -> "int":
    """SoSeparator_getNumRenderCaches() -> int"""
    return _coin.SoSeparator_getNumRenderCaches()

class SoAnnotation(SoSeparator):
    """Proxy of C++ SoAnnotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAnnotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAnnotation self) -> SoType"""
        return _coin.SoAnnotation_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAnnotation_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoAnnotation self) -> SoAnnotation"""
        this = _coin.new_SoAnnotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoAnnotation self, SoGLRenderAction action)"""
        return _coin.SoAnnotation_GLRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoAnnotation self, SoGLRenderAction action)"""
        return _coin.SoAnnotation_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoAnnotation self, SoGLRenderAction action)"""
        return _coin.SoAnnotation_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoAnnotation self, SoGLRenderAction action)"""
        return _coin.SoAnnotation_GLRenderOffPath(self, action)

SoAnnotation_swigregister = _coin.SoAnnotation_swigregister
SoAnnotation_swigregister(SoAnnotation)

def SoAnnotation_getClassTypeId() -> "SoType":
    """SoAnnotation_getClassTypeId() -> SoType"""
    return _coin.SoAnnotation_getClassTypeId()

def SoAnnotation_initClass() -> "void":
    """SoAnnotation_initClass()"""
    return _coin.SoAnnotation_initClass()

class SoAntiSquish(SoTransformation):
    """Proxy of C++ SoAntiSquish class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAntiSquish_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAntiSquish self) -> SoType"""
        return _coin.SoAntiSquish_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAntiSquish_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoAntiSquish self) -> SoAntiSquish"""
        this = _coin.new_SoAntiSquish()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    X = _coin.SoAntiSquish_X
    Y = _coin.SoAntiSquish_Y
    Z = _coin.SoAntiSquish_Z
    AVERAGE_DIMENSION = _coin.SoAntiSquish_AVERAGE_DIMENSION
    BIGGEST_DIMENSION = _coin.SoAntiSquish_BIGGEST_DIMENSION
    SMALLEST_DIMENSION = _coin.SoAntiSquish_SMALLEST_DIMENSION
    LONGEST_DIAGONAL = _coin.SoAntiSquish_LONGEST_DIAGONAL
    sizing = _swig_property(_coin.SoAntiSquish_sizing_get, _coin.SoAntiSquish_sizing_set)
    recalcAlways = _swig_property(_coin.SoAntiSquish_recalcAlways_get, _coin.SoAntiSquish_recalcAlways_set)

    def recalc(self) -> "void":
        """recalc(SoAntiSquish self)"""
        return _coin.SoAntiSquish_recalc(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoAntiSquish self, SoAction action)"""
        return _coin.SoAntiSquish_doAction(self, action)

SoAntiSquish_swigregister = _coin.SoAntiSquish_swigregister
SoAntiSquish_swigregister(SoAntiSquish)

def SoAntiSquish_getClassTypeId() -> "SoType":
    """SoAntiSquish_getClassTypeId() -> SoType"""
    return _coin.SoAntiSquish_getClassTypeId()

def SoAntiSquish_initClass() -> "void":
    """SoAntiSquish_initClass()"""
    return _coin.SoAntiSquish_initClass()

class SoArray(SoGroup):
    """Proxy of C++ SoArray class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoArray_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoArray self) -> SoType"""
        return _coin.SoArray_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoArray_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoArray self) -> SoArray"""
        this = _coin.new_SoArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    FIRST = _coin.SoArray_FIRST
    CENTER = _coin.SoArray_CENTER
    LAST = _coin.SoArray_LAST
    origin = _swig_property(_coin.SoArray_origin_get, _coin.SoArray_origin_set)
    numElements1 = _swig_property(_coin.SoArray_numElements1_get, _coin.SoArray_numElements1_set)
    numElements2 = _swig_property(_coin.SoArray_numElements2_get, _coin.SoArray_numElements2_set)
    numElements3 = _swig_property(_coin.SoArray_numElements3_get, _coin.SoArray_numElements3_set)
    separation1 = _swig_property(_coin.SoArray_separation1_get, _coin.SoArray_separation1_set)
    separation2 = _swig_property(_coin.SoArray_separation2_get, _coin.SoArray_separation2_set)
    separation3 = _swig_property(_coin.SoArray_separation3_get, _coin.SoArray_separation3_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoArray self) -> SbBool"""
        return _coin.SoArray_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoArray self, SoAction action)"""
        return _coin.SoArray_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoArray self, SoCallbackAction action)"""
        return _coin.SoArray_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoArray self, SoGLRenderAction action)"""
        return _coin.SoArray_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoArray self, SoPickAction action)"""
        return _coin.SoArray_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoArray self, SoGetBoundingBoxAction action)"""
        return _coin.SoArray_getBoundingBox(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoArray self, SoHandleEventAction action)"""
        return _coin.SoArray_handleEvent(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoArray self, SoGetMatrixAction action)"""
        return _coin.SoArray_getMatrix(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoArray self, SoSearchAction action)"""
        return _coin.SoArray_search(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoArray self, SoGetPrimitiveCountAction action)"""
        return _coin.SoArray_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoArray self, SoAudioRenderAction action)"""
        return _coin.SoArray_audioRender(self, action)

SoArray_swigregister = _coin.SoArray_swigregister
SoArray_swigregister(SoArray)

def SoArray_getClassTypeId() -> "SoType":
    """SoArray_getClassTypeId() -> SoType"""
    return _coin.SoArray_getClassTypeId()

def SoArray_initClass() -> "void":
    """SoArray_initClass()"""
    return _coin.SoArray_initClass()

class SoAsciiText(SoShape):
    """Proxy of C++ SoAsciiText class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAsciiText_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAsciiText self) -> SoType"""
        return _coin.SoAsciiText_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAsciiText_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoAsciiText self) -> SoAsciiText"""
        this = _coin.new_SoAsciiText()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    LEFT = _coin.SoAsciiText_LEFT
    RIGHT = _coin.SoAsciiText_RIGHT
    CENTER = _coin.SoAsciiText_CENTER
    string = _swig_property(_coin.SoAsciiText_string_get, _coin.SoAsciiText_string_set)
    spacing = _swig_property(_coin.SoAsciiText_spacing_get, _coin.SoAsciiText_spacing_set)
    justification = _swig_property(_coin.SoAsciiText_justification_get, _coin.SoAsciiText_justification_set)
    width = _swig_property(_coin.SoAsciiText_width_get, _coin.SoAsciiText_width_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoAsciiText self, SoGLRenderAction action)"""
        return _coin.SoAsciiText_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoAsciiText self, SoGetPrimitiveCountAction action)"""
        return _coin.SoAsciiText_getPrimitiveCount(self, action)

SoAsciiText_swigregister = _coin.SoAsciiText_swigregister
SoAsciiText_swigregister(SoAsciiText)

def SoAsciiText_getClassTypeId() -> "SoType":
    """SoAsciiText_getClassTypeId() -> SoType"""
    return _coin.SoAsciiText_getClassTypeId()

def SoAsciiText_initClass() -> "void":
    """SoAsciiText_initClass()"""
    return _coin.SoAsciiText_initClass()

class SoBaseColor(SoNode):
    """Proxy of C++ SoBaseColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBaseColor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBaseColor self) -> SoType"""
        return _coin.SoBaseColor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBaseColor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBaseColor self) -> SoBaseColor"""
        this = _coin.new_SoBaseColor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rgb = _swig_property(_coin.SoBaseColor_rgb_get, _coin.SoBaseColor_rgb_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoBaseColor self, SoAction action)"""
        return _coin.SoBaseColor_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoBaseColor self, SoGLRenderAction action)"""
        return _coin.SoBaseColor_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoBaseColor self, SoCallbackAction action)"""
        return _coin.SoBaseColor_callback(self, action)

SoBaseColor_swigregister = _coin.SoBaseColor_swigregister
SoBaseColor_swigregister(SoBaseColor)

def SoBaseColor_getClassTypeId() -> "SoType":
    """SoBaseColor_getClassTypeId() -> SoType"""
    return _coin.SoBaseColor_getClassTypeId()

def SoBaseColor_initClass() -> "void":
    """SoBaseColor_initClass()"""
    return _coin.SoBaseColor_initClass()

SO_SWITCH_NONE = _coin.SO_SWITCH_NONE
SO_SWITCH_INHERIT = _coin.SO_SWITCH_INHERIT
SO_SWITCH_ALL = _coin.SO_SWITCH_ALL
class SoSwitch(SoGroup):
    """Proxy of C++ SoSwitch class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSwitch_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSwitch self) -> SoType"""
        return _coin.SoSwitch_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSwitch_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoSwitch self) -> SoSwitch
        __init__(SoSwitch self, int numchildren) -> SoSwitch
        """
        this = _coin.new_SoSwitch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    whichChild = _swig_property(_coin.SoSwitch_whichChild_get, _coin.SoSwitch_whichChild_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoSwitch self) -> SbBool"""
        return _coin.SoSwitch_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSwitch self, SoAction action)"""
        return _coin.SoSwitch_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoSwitch self, SoCallbackAction action)"""
        return _coin.SoSwitch_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSwitch self, SoGLRenderAction action)"""
        return _coin.SoSwitch_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoSwitch self, SoPickAction action)"""
        return _coin.SoSwitch_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoSwitch self, SoGetBoundingBoxAction action)"""
        return _coin.SoSwitch_getBoundingBox(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoSwitch self, SoHandleEventAction action)"""
        return _coin.SoSwitch_handleEvent(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoSwitch self, SoGetMatrixAction action)"""
        return _coin.SoSwitch_getMatrix(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoSwitch self, SoSearchAction action)"""
        return _coin.SoSwitch_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoSwitch self, SoWriteAction action)"""
        return _coin.SoSwitch_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoSwitch self, SoGetPrimitiveCountAction action)"""
        return _coin.SoSwitch_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoSwitch self, SoAudioRenderAction action)"""
        return _coin.SoSwitch_audioRender(self, action)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoSwitch self, SoNotList nl)"""
        return _coin.SoSwitch_notify(self, nl)

SoSwitch_swigregister = _coin.SoSwitch_swigregister
SoSwitch_swigregister(SoSwitch)

def SoSwitch_getClassTypeId() -> "SoType":
    """SoSwitch_getClassTypeId() -> SoType"""
    return _coin.SoSwitch_getClassTypeId()

def SoSwitch_initClass() -> "void":
    """SoSwitch_initClass()"""
    return _coin.SoSwitch_initClass()

class SoBlinker(SoSwitch):
    """Proxy of C++ SoBlinker class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBlinker_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBlinker self) -> SoType"""
        return _coin.SoBlinker_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBlinker_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBlinker self) -> SoBlinker"""
        this = _coin.new_SoBlinker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    speed = _swig_property(_coin.SoBlinker_speed_get, _coin.SoBlinker_speed_set)
    on = _swig_property(_coin.SoBlinker_on_get, _coin.SoBlinker_on_set)

    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoBlinker self, SoGetBoundingBoxAction action)"""
        return _coin.SoBlinker_getBoundingBox(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoBlinker self, SoWriteAction action)"""
        return _coin.SoBlinker_write(self, action)

SoBlinker_swigregister = _coin.SoBlinker_swigregister
SoBlinker_swigregister(SoBlinker)

def SoBlinker_getClassTypeId() -> "SoType":
    """SoBlinker_getClassTypeId() -> SoType"""
    return _coin.SoBlinker_getClassTypeId()

def SoBlinker_initClass() -> "void":
    """SoBlinker_initClass()"""
    return _coin.SoBlinker_initClass()

class SoBumpMapCoordinate(SoNode):
    """Proxy of C++ SoBumpMapCoordinate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMapCoordinate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBumpMapCoordinate self) -> SoType"""
        return _coin.SoBumpMapCoordinate_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMapCoordinate_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBumpMapCoordinate self) -> SoBumpMapCoordinate"""
        this = _coin.new_SoBumpMapCoordinate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoBumpMapCoordinate_point_get, _coin.SoBumpMapCoordinate_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoBumpMapCoordinate self, SoAction action)"""
        return _coin.SoBumpMapCoordinate_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoBumpMapCoordinate self, SoGLRenderAction action)"""
        return _coin.SoBumpMapCoordinate_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoBumpMapCoordinate self, SoCallbackAction action)"""
        return _coin.SoBumpMapCoordinate_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoBumpMapCoordinate self, SoPickAction action)"""
        return _coin.SoBumpMapCoordinate_pick(self, action)

SoBumpMapCoordinate_swigregister = _coin.SoBumpMapCoordinate_swigregister
SoBumpMapCoordinate_swigregister(SoBumpMapCoordinate)

def SoBumpMapCoordinate_getClassTypeId() -> "SoType":
    """SoBumpMapCoordinate_getClassTypeId() -> SoType"""
    return _coin.SoBumpMapCoordinate_getClassTypeId()

def SoBumpMapCoordinate_initClass() -> "void":
    """SoBumpMapCoordinate_initClass()"""
    return _coin.SoBumpMapCoordinate_initClass()

class SoBumpMap(SoNode):
    """Proxy of C++ SoBumpMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBumpMap self) -> SoType"""
        return _coin.SoBumpMap_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBumpMap self) -> SoBumpMap"""
        this = _coin.new_SoBumpMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    REPEAT = _coin.SoBumpMap_REPEAT
    CLAMP = _coin.SoBumpMap_CLAMP
    filename = _swig_property(_coin.SoBumpMap_filename_get, _coin.SoBumpMap_filename_set)
    image = _swig_property(_coin.SoBumpMap_image_get, _coin.SoBumpMap_image_set)
    wrapS = _swig_property(_coin.SoBumpMap_wrapS_get, _coin.SoBumpMap_wrapS_set)
    wrapT = _swig_property(_coin.SoBumpMap_wrapT_get, _coin.SoBumpMap_wrapT_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoBumpMap self, SoAction action)"""
        return _coin.SoBumpMap_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoBumpMap self, SoGLRenderAction action)"""
        return _coin.SoBumpMap_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoBumpMap self, SoCallbackAction action)"""
        return _coin.SoBumpMap_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoBumpMap self, SoRayPickAction action)"""
        return _coin.SoBumpMap_rayPick(self, action)

SoBumpMap_swigregister = _coin.SoBumpMap_swigregister
SoBumpMap_swigregister(SoBumpMap)

def SoBumpMap_getClassTypeId() -> "SoType":
    """SoBumpMap_getClassTypeId() -> SoType"""
    return _coin.SoBumpMap_getClassTypeId()

def SoBumpMap_initClass() -> "void":
    """SoBumpMap_initClass()"""
    return _coin.SoBumpMap_initClass()

class SoBumpMapTransform(SoNode):
    """Proxy of C++ SoBumpMapTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoBumpMapTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoBumpMapTransform self) -> SoType"""
        return _coin.SoBumpMapTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoBumpMapTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoBumpMapTransform self) -> SoBumpMapTransform"""
        this = _coin.new_SoBumpMapTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoBumpMapTransform_translation_get, _coin.SoBumpMapTransform_translation_set)
    rotation = _swig_property(_coin.SoBumpMapTransform_rotation_get, _coin.SoBumpMapTransform_rotation_set)
    scaleFactor = _swig_property(_coin.SoBumpMapTransform_scaleFactor_get, _coin.SoBumpMapTransform_scaleFactor_set)
    center = _swig_property(_coin.SoBumpMapTransform_center_get, _coin.SoBumpMapTransform_center_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoBumpMapTransform self, SoAction action)"""
        return _coin.SoBumpMapTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoBumpMapTransform self, SoCallbackAction action)"""
        return _coin.SoBumpMapTransform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoBumpMapTransform self, SoGLRenderAction action)"""
        return _coin.SoBumpMapTransform_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoBumpMapTransform self, SoGetMatrixAction action)"""
        return _coin.SoBumpMapTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoBumpMapTransform self, SoPickAction action)"""
        return _coin.SoBumpMapTransform_pick(self, action)

SoBumpMapTransform_swigregister = _coin.SoBumpMapTransform_swigregister
SoBumpMapTransform_swigregister(SoBumpMapTransform)

def SoBumpMapTransform_getClassTypeId() -> "SoType":
    """SoBumpMapTransform_getClassTypeId() -> SoType"""
    return _coin.SoBumpMapTransform_getClassTypeId()

def SoBumpMapTransform_initClass() -> "void":
    """SoBumpMapTransform_initClass()"""
    return _coin.SoBumpMapTransform_initClass()

class SoCallback(SoNode):
    """Proxy of C++ SoCallback class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCallback_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCallback self) -> SoType"""
        return _coin.SoCallback_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCallback_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCallback self) -> SoCallback"""
        this = _coin.new_SoCallback()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoCallback self, SoAction action)"""
        return _coin.SoCallback_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoCallback self, SoCallbackAction action)"""
        return _coin.SoCallback_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCallback self, SoGLRenderAction action)"""
        return _coin.SoCallback_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoCallback self, SoGetBoundingBoxAction action)"""
        return _coin.SoCallback_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoCallback self, SoGetMatrixAction action)"""
        return _coin.SoCallback_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoCallback self, SoHandleEventAction action)"""
        return _coin.SoCallback_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoCallback self, SoPickAction action)"""
        return _coin.SoCallback_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoCallback self, SoSearchAction action)"""
        return _coin.SoCallback_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoCallback self, SoWriteAction action)"""
        return _coin.SoCallback_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCallback self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCallback_getPrimitiveCount(self, action)


    def setCallback(self, *args) -> "void":
        """
        setCallback(SoCallback self, SoCallbackCB * function, void * userdata=None)
        setCallback(SoCallback self, SoCallbackCB * function)
        setCallback(SoCallback self, PyObject * pyfunc, PyObject * userdata=None)
        setCallback(SoCallback self, PyObject * pyfunc)
        """
        return _coin.SoCallback_setCallback(self, *args)

SoCallback_swigregister = _coin.SoCallback_swigregister
SoCallback_swigregister(SoCallback)

def SoCallback_getClassTypeId() -> "SoType":
    """SoCallback_getClassTypeId() -> SoType"""
    return _coin.SoCallback_getClassTypeId()

def SoCallback_initClass() -> "void":
    """SoCallback_initClass()"""
    return _coin.SoCallback_initClass()

SO_ASPECT_SQUARE = _coin.SO_ASPECT_SQUARE
SO_ASPECT_VIDEO = _coin.SO_ASPECT_VIDEO
SO_ASPECT_35mm_ACADEMY = _coin.SO_ASPECT_35mm_ACADEMY
SO_ASPECT_16mm = _coin.SO_ASPECT_16mm
SO_ASPECT_35mm_FULL = _coin.SO_ASPECT_35mm_FULL
SO_ASPECT_70mm = _coin.SO_ASPECT_70mm
SO_ASPECT_CINEMASCOPE = _coin.SO_ASPECT_CINEMASCOPE
SO_ASPECT_HDTV = _coin.SO_ASPECT_HDTV
SO_ASPECT_PANAVISION = _coin.SO_ASPECT_PANAVISION
SO_ASPECT_35mm = _coin.SO_ASPECT_35mm
SO_ASPECT_VISTAVISION = _coin.SO_ASPECT_VISTAVISION
class SoCamera(SoNode):
    """Proxy of C++ SoCamera class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCamera_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCamera self) -> SoType"""
        return _coin.SoCamera_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCamera_initClass()

    initClass = staticmethod(initClass)
    CROP_VIEWPORT_FILL_FRAME = _coin.SoCamera_CROP_VIEWPORT_FILL_FRAME
    CROP_VIEWPORT_LINE_FRAME = _coin.SoCamera_CROP_VIEWPORT_LINE_FRAME
    CROP_VIEWPORT_NO_FRAME = _coin.SoCamera_CROP_VIEWPORT_NO_FRAME
    ADJUST_CAMERA = _coin.SoCamera_ADJUST_CAMERA
    LEAVE_ALONE = _coin.SoCamera_LEAVE_ALONE
    viewportMapping = _swig_property(_coin.SoCamera_viewportMapping_get, _coin.SoCamera_viewportMapping_set)
    position = _swig_property(_coin.SoCamera_position_get, _coin.SoCamera_position_set)
    orientation = _swig_property(_coin.SoCamera_orientation_get, _coin.SoCamera_orientation_set)
    aspectRatio = _swig_property(_coin.SoCamera_aspectRatio_get, _coin.SoCamera_aspectRatio_set)
    nearDistance = _swig_property(_coin.SoCamera_nearDistance_get, _coin.SoCamera_nearDistance_set)
    farDistance = _swig_property(_coin.SoCamera_farDistance_get, _coin.SoCamera_farDistance_set)
    focalDistance = _swig_property(_coin.SoCamera_focalDistance_get, _coin.SoCamera_focalDistance_set)

    def pointAt(self, *args) -> "void":
        """
        pointAt(SoCamera self, SbVec3f targetpoint)
        pointAt(SoCamera self, SbVec3f targetpoint, SbVec3f upvector)
        """
        return _coin.SoCamera_pointAt(self, *args)


    def scaleHeight(self, scalefactor: 'float') -> "void":
        """scaleHeight(SoCamera self, float scalefactor)"""
        return _coin.SoCamera_scaleHeight(self, scalefactor)


    def getViewVolume(self, *args) -> "SbViewVolume":
        """
        getViewVolume(SoCamera self, SbViewportRegion vp, SbViewportRegion resultvp, SbMatrix mm) -> SbViewVolume
        getViewVolume(SoCamera self, SbViewportRegion vp, SbViewportRegion resultvp) -> SbViewVolume
        getViewVolume(SoCamera self, float useaspectratio=0.0) -> SbViewVolume
        getViewVolume(SoCamera self) -> SbViewVolume
        """
        return _coin.SoCamera_getViewVolume(self, *args)


    def viewAll(self, *args) -> "void":
        """
        viewAll(SoCamera self, SoNode sceneroot, SbViewportRegion vpregion, float const slack=1.0)
        viewAll(SoCamera self, SoNode sceneroot, SbViewportRegion vpregion)
        viewAll(SoCamera self, SoPath path, SbViewportRegion vpregion, float const slack=1.0)
        viewAll(SoCamera self, SoPath path, SbViewportRegion vpregion)
        """
        return _coin.SoCamera_viewAll(self, *args)


    def getViewportBounds(self, region: 'SbViewportRegion') -> "SbViewportRegion":
        """getViewportBounds(SoCamera self, SbViewportRegion region) -> SbViewportRegion"""
        return _coin.SoCamera_getViewportBounds(self, region)

    MONOSCOPIC = _coin.SoCamera_MONOSCOPIC
    LEFT_VIEW = _coin.SoCamera_LEFT_VIEW
    RIGHT_VIEW = _coin.SoCamera_RIGHT_VIEW

    def setStereoMode(self, mode: 'SoCamera::StereoMode') -> "void":
        """setStereoMode(SoCamera self, SoCamera::StereoMode mode)"""
        return _coin.SoCamera_setStereoMode(self, mode)


    def getStereoMode(self) -> "SoCamera::StereoMode":
        """getStereoMode(SoCamera self) -> SoCamera::StereoMode"""
        return _coin.SoCamera_getStereoMode(self)


    def setStereoAdjustment(self, adjustment: 'float') -> "void":
        """setStereoAdjustment(SoCamera self, float adjustment)"""
        return _coin.SoCamera_setStereoAdjustment(self, adjustment)


    def getStereoAdjustment(self) -> "float":
        """getStereoAdjustment(SoCamera self) -> float"""
        return _coin.SoCamera_getStereoAdjustment(self)


    def setBalanceAdjustment(self, adjustment: 'float') -> "void":
        """setBalanceAdjustment(SoCamera self, float adjustment)"""
        return _coin.SoCamera_setBalanceAdjustment(self, adjustment)


    def getBalanceAdjustment(self) -> "float":
        """getBalanceAdjustment(SoCamera self) -> float"""
        return _coin.SoCamera_getBalanceAdjustment(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoCamera self, SoAction action)"""
        return _coin.SoCamera_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoCamera self, SoCallbackAction action)"""
        return _coin.SoCamera_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCamera self, SoGLRenderAction action)"""
        return _coin.SoCamera_GLRender(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoCamera self, SoAudioRenderAction action)"""
        return _coin.SoCamera_audioRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoCamera self, SoGetBoundingBoxAction action)"""
        return _coin.SoCamera_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoCamera self, SoGetMatrixAction action)"""
        return _coin.SoCamera_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoCamera self, SoHandleEventAction action)"""
        return _coin.SoCamera_handleEvent(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoCamera self, SoRayPickAction action)"""
        return _coin.SoCamera_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCamera self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCamera_getPrimitiveCount(self, action)


    def viewBoundingBox(self, box: 'SbBox3f', aspect: 'float', slack: 'float') -> "void":
        """viewBoundingBox(SoCamera self, SbBox3f box, float aspect, float slack)"""
        return _coin.SoCamera_viewBoundingBox(self, box, aspect, slack)

SoCamera_swigregister = _coin.SoCamera_swigregister
SoCamera_swigregister(SoCamera)

def SoCamera_getClassTypeId() -> "SoType":
    """SoCamera_getClassTypeId() -> SoType"""
    return _coin.SoCamera_getClassTypeId()

def SoCamera_initClass() -> "void":
    """SoCamera_initClass()"""
    return _coin.SoCamera_initClass()

class SoColorIndex(SoNode):
    """Proxy of C++ SoColorIndex class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoColorIndex_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoColorIndex self) -> SoType"""
        return _coin.SoColorIndex_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoColorIndex_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoColorIndex self) -> SoColorIndex"""
        this = _coin.new_SoColorIndex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    index = _swig_property(_coin.SoColorIndex_index_get, _coin.SoColorIndex_index_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoColorIndex self, SoGLRenderAction action)"""
        return _coin.SoColorIndex_GLRender(self, action)

SoColorIndex_swigregister = _coin.SoColorIndex_swigregister
SoColorIndex_swigregister(SoColorIndex)

def SoColorIndex_getClassTypeId() -> "SoType":
    """SoColorIndex_getClassTypeId() -> SoType"""
    return _coin.SoColorIndex_getClassTypeId()

def SoColorIndex_initClass() -> "void":
    """SoColorIndex_initClass()"""
    return _coin.SoColorIndex_initClass()

class SoCone(SoShape):
    """Proxy of C++ SoCone class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCone_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCone self) -> SoType"""
        return _coin.SoCone_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCone_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCone self) -> SoCone"""
        this = _coin.new_SoCone()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SIDES = _coin.SoCone_SIDES
    BOTTOM = _coin.SoCone_BOTTOM
    ALL = _coin.SoCone_ALL
    parts = _swig_property(_coin.SoCone_parts_get, _coin.SoCone_parts_set)
    bottomRadius = _swig_property(_coin.SoCone_bottomRadius_get, _coin.SoCone_bottomRadius_set)
    height = _swig_property(_coin.SoCone_height_get, _coin.SoCone_height_set)

    def addPart(self, part: 'SoCone::Part') -> "void":
        """addPart(SoCone self, SoCone::Part part)"""
        return _coin.SoCone_addPart(self, part)


    def removePart(self, part: 'SoCone::Part') -> "void":
        """removePart(SoCone self, SoCone::Part part)"""
        return _coin.SoCone_removePart(self, part)


    def hasPart(self, part: 'SoCone::Part') -> "SbBool":
        """hasPart(SoCone self, SoCone::Part part) -> SbBool"""
        return _coin.SoCone_hasPart(self, part)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCone self, SoGLRenderAction action)"""
        return _coin.SoCone_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoCone self, SoRayPickAction action)"""
        return _coin.SoCone_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCone self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCone_getPrimitiveCount(self, action)

SoCone_swigregister = _coin.SoCone_swigregister
SoCone_swigregister(SoCone)

def SoCone_getClassTypeId() -> "SoType":
    """SoCone_getClassTypeId() -> SoType"""
    return _coin.SoCone_getClassTypeId()

def SoCone_initClass() -> "void":
    """SoCone_initClass()"""
    return _coin.SoCone_initClass()

class SoCoordinate3(SoNode):
    """Proxy of C++ SoCoordinate3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCoordinate3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCoordinate3 self) -> SoType"""
        return _coin.SoCoordinate3_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCoordinate3_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCoordinate3 self) -> SoCoordinate3"""
        this = _coin.new_SoCoordinate3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoCoordinate3_point_get, _coin.SoCoordinate3_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoCoordinate3 self, SoAction action)"""
        return _coin.SoCoordinate3_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCoordinate3 self, SoGLRenderAction action)"""
        return _coin.SoCoordinate3_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoCoordinate3 self, SoCallbackAction action)"""
        return _coin.SoCoordinate3_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoCoordinate3 self, SoGetBoundingBoxAction action)"""
        return _coin.SoCoordinate3_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoCoordinate3 self, SoPickAction action)"""
        return _coin.SoCoordinate3_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCoordinate3 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCoordinate3_getPrimitiveCount(self, action)

SoCoordinate3_swigregister = _coin.SoCoordinate3_swigregister
SoCoordinate3_swigregister(SoCoordinate3)

def SoCoordinate3_getClassTypeId() -> "SoType":
    """SoCoordinate3_getClassTypeId() -> SoType"""
    return _coin.SoCoordinate3_getClassTypeId()

def SoCoordinate3_initClass() -> "void":
    """SoCoordinate3_initClass()"""
    return _coin.SoCoordinate3_initClass()

class SoCoordinate4(SoNode):
    """Proxy of C++ SoCoordinate4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCoordinate4_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCoordinate4 self) -> SoType"""
        return _coin.SoCoordinate4_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCoordinate4_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCoordinate4 self) -> SoCoordinate4"""
        this = _coin.new_SoCoordinate4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoCoordinate4_point_get, _coin.SoCoordinate4_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoCoordinate4 self, SoAction action)"""
        return _coin.SoCoordinate4_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCoordinate4 self, SoGLRenderAction action)"""
        return _coin.SoCoordinate4_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoCoordinate4 self, SoGetBoundingBoxAction action)"""
        return _coin.SoCoordinate4_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoCoordinate4 self, SoCallbackAction action)"""
        return _coin.SoCoordinate4_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoCoordinate4 self, SoPickAction action)"""
        return _coin.SoCoordinate4_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCoordinate4 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCoordinate4_getPrimitiveCount(self, action)

SoCoordinate4_swigregister = _coin.SoCoordinate4_swigregister
SoCoordinate4_swigregister(SoCoordinate4)

def SoCoordinate4_getClassTypeId() -> "SoType":
    """SoCoordinate4_getClassTypeId() -> SoType"""
    return _coin.SoCoordinate4_getClassTypeId()

def SoCoordinate4_initClass() -> "void":
    """SoCoordinate4_initClass()"""
    return _coin.SoCoordinate4_initClass()

class SoCube(SoShape):
    """Proxy of C++ SoCube class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCube_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCube self) -> SoType"""
        return _coin.SoCube_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCube_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCube self) -> SoCube"""
        this = _coin.new_SoCube()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    width = _swig_property(_coin.SoCube_width_get, _coin.SoCube_width_set)
    height = _swig_property(_coin.SoCube_height_get, _coin.SoCube_height_set)
    depth = _swig_property(_coin.SoCube_depth_get, _coin.SoCube_depth_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCube self, SoGLRenderAction action)"""
        return _coin.SoCube_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoCube self, SoRayPickAction action)"""
        return _coin.SoCube_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCube self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCube_getPrimitiveCount(self, action)

SoCube_swigregister = _coin.SoCube_swigregister
SoCube_swigregister(SoCube)

def SoCube_getClassTypeId() -> "SoType":
    """SoCube_getClassTypeId() -> SoType"""
    return _coin.SoCube_getClassTypeId()

def SoCube_initClass() -> "void":
    """SoCube_initClass()"""
    return _coin.SoCube_initClass()

class SoCylinder(SoShape):
    """Proxy of C++ SoCylinder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCylinder_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCylinder self) -> SoType"""
        return _coin.SoCylinder_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCylinder_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCylinder self) -> SoCylinder"""
        this = _coin.new_SoCylinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SIDES = _coin.SoCylinder_SIDES
    TOP = _coin.SoCylinder_TOP
    BOTTOM = _coin.SoCylinder_BOTTOM
    ALL = _coin.SoCylinder_ALL
    radius = _swig_property(_coin.SoCylinder_radius_get, _coin.SoCylinder_radius_set)
    height = _swig_property(_coin.SoCylinder_height_get, _coin.SoCylinder_height_set)
    parts = _swig_property(_coin.SoCylinder_parts_get, _coin.SoCylinder_parts_set)

    def addPart(self, part: 'SoCylinder::Part') -> "void":
        """addPart(SoCylinder self, SoCylinder::Part part)"""
        return _coin.SoCylinder_addPart(self, part)


    def removePart(self, part: 'SoCylinder::Part') -> "void":
        """removePart(SoCylinder self, SoCylinder::Part part)"""
        return _coin.SoCylinder_removePart(self, part)


    def hasPart(self, part: 'SoCylinder::Part') -> "SbBool":
        """hasPart(SoCylinder self, SoCylinder::Part part) -> SbBool"""
        return _coin.SoCylinder_hasPart(self, part)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoCylinder self, SoRayPickAction action)"""
        return _coin.SoCylinder_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoCylinder self, SoGetPrimitiveCountAction action)"""
        return _coin.SoCylinder_getPrimitiveCount(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCylinder self, SoGLRenderAction action)"""
        return _coin.SoCylinder_GLRender(self, action)

SoCylinder_swigregister = _coin.SoCylinder_swigregister
SoCylinder_swigregister(SoCylinder)

def SoCylinder_getClassTypeId() -> "SoType":
    """SoCylinder_getClassTypeId() -> SoType"""
    return _coin.SoCylinder_getClassTypeId()

def SoCylinder_initClass() -> "void":
    """SoCylinder_initClass()"""
    return _coin.SoCylinder_initClass()

class SoEnvironment(SoNode):
    """Proxy of C++ SoEnvironment class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEnvironment_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoEnvironment self) -> SoType"""
        return _coin.SoEnvironment_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEnvironment_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoEnvironment self) -> SoEnvironment"""
        this = _coin.new_SoEnvironment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NONE = _coin.SoEnvironment_NONE
    HAZE = _coin.SoEnvironment_HAZE
    FOG = _coin.SoEnvironment_FOG
    SMOKE = _coin.SoEnvironment_SMOKE

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoEnvironment self, SoGLRenderAction action)"""
        return _coin.SoEnvironment_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoEnvironment self, SoCallbackAction action)"""
        return _coin.SoEnvironment_callback(self, action)

    ambientIntensity = _swig_property(_coin.SoEnvironment_ambientIntensity_get, _coin.SoEnvironment_ambientIntensity_set)
    ambientColor = _swig_property(_coin.SoEnvironment_ambientColor_get, _coin.SoEnvironment_ambientColor_set)
    attenuation = _swig_property(_coin.SoEnvironment_attenuation_get, _coin.SoEnvironment_attenuation_set)
    fogType = _swig_property(_coin.SoEnvironment_fogType_get, _coin.SoEnvironment_fogType_set)
    fogColor = _swig_property(_coin.SoEnvironment_fogColor_get, _coin.SoEnvironment_fogColor_set)
    fogVisibility = _swig_property(_coin.SoEnvironment_fogVisibility_get, _coin.SoEnvironment_fogVisibility_set)
SoEnvironment_swigregister = _coin.SoEnvironment_swigregister
SoEnvironment_swigregister(SoEnvironment)

def SoEnvironment_getClassTypeId() -> "SoType":
    """SoEnvironment_getClassTypeId() -> SoType"""
    return _coin.SoEnvironment_getClassTypeId()

def SoEnvironment_initClass() -> "void":
    """SoEnvironment_initClass()"""
    return _coin.SoEnvironment_initClass()

class SoEventCallback(SoNode):
    """Proxy of C++ SoEventCallback class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoEventCallback_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoEventCallback self) -> SoType"""
        return _coin.SoEventCallback_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoEventCallback_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoEventCallback self) -> SoEventCallback"""
        this = _coin.new_SoEventCallback()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setPath(self, path: 'SoPath') -> "void":
        """setPath(SoEventCallback self, SoPath path)"""
        return _coin.SoEventCallback_setPath(self, path)


    def getPath(self) -> "SoPath const *":
        """getPath(SoEventCallback self) -> SoPath"""
        return _coin.SoEventCallback_getPath(self)


    def getAction(self) -> "SoHandleEventAction *":
        """getAction(SoEventCallback self) -> SoHandleEventAction"""
        return _coin.SoEventCallback_getAction(self)


    def getEvent(self) -> "SoEvent const *":
        """getEvent(SoEventCallback self) -> SoEvent"""
        return _coin.SoEventCallback_getEvent(self)


    def getPickedPoint(self) -> "SoPickedPoint const *":
        """getPickedPoint(SoEventCallback self) -> SoPickedPoint"""
        return _coin.SoEventCallback_getPickedPoint(self)


    def setHandled(self) -> "void":
        """setHandled(SoEventCallback self)"""
        return _coin.SoEventCallback_setHandled(self)


    def isHandled(self) -> "SbBool":
        """isHandled(SoEventCallback self) -> SbBool"""
        return _coin.SoEventCallback_isHandled(self)


    def grabEvents(self) -> "void":
        """grabEvents(SoEventCallback self)"""
        return _coin.SoEventCallback_grabEvents(self)


    def releaseEvents(self) -> "void":
        """releaseEvents(SoEventCallback self)"""
        return _coin.SoEventCallback_releaseEvents(self)


    def addEventCallback(self, *args) -> "PyObject *":
        """
        addEventCallback(SoEventCallback self, SoType eventtype, SoEventCallbackCB * f, void * userdata=None)
        addEventCallback(SoEventCallback self, SoType eventtype, SoEventCallbackCB * f)
        addEventCallback(SoEventCallback self, SoType eventtype, PyObject * pyfunc, PyObject * userdata=None) -> PyObject
        addEventCallback(SoEventCallback self, SoType eventtype, PyObject * pyfunc) -> PyObject *
        """
        return _coin.SoEventCallback_addEventCallback(self, *args)


    def removeEventCallback(self, *args) -> "void":
        """
        removeEventCallback(SoEventCallback self, SoType eventtype, SoEventCallbackCB * f, void * userdata=None)
        removeEventCallback(SoEventCallback self, SoType eventtype, SoEventCallbackCB * f)
        removeEventCallback(SoEventCallback self, SoType eventtype, PyObject * tuple)
        """
        return _coin.SoEventCallback_removeEventCallback(self, *args)

SoEventCallback_swigregister = _coin.SoEventCallback_swigregister
SoEventCallback_swigregister(SoEventCallback)

def SoEventCallback_getClassTypeId() -> "SoType":
    """SoEventCallback_getClassTypeId() -> SoType"""
    return _coin.SoEventCallback_getClassTypeId()

def SoEventCallback_initClass() -> "void":
    """SoEventCallback_initClass()"""
    return _coin.SoEventCallback_initClass()

class SoSelection(SoSeparator):
    """Proxy of C++ SoSelection class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSelection_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSelection self) -> SoType"""
        return _coin.SoSelection_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSelection_initClass()

    initClass = staticmethod(initClass)
    SINGLE = _coin.SoSelection_SINGLE
    TOGGLE = _coin.SoSelection_TOGGLE
    SHIFT = _coin.SoSelection_SHIFT
    DISABLE = _coin.SoSelection_DISABLE
    policy = _swig_property(_coin.SoSelection_policy_get, _coin.SoSelection_policy_set)

    def __init__(self, *args):
        """
        __init__(SoSelection self) -> SoSelection
        __init__(SoSelection self, int const nChildren) -> SoSelection
        """
        this = _coin.new_SoSelection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def select(self, *args) -> "void":
        """
        select(SoSelection self, SoPath path)
        select(SoSelection self, SoNode node)
        """
        return _coin.SoSelection_select(self, *args)


    def deselect(self, *args) -> "void":
        """
        deselect(SoSelection self, SoPath path)
        deselect(SoSelection self, int const which)
        deselect(SoSelection self, SoNode node)
        """
        return _coin.SoSelection_deselect(self, *args)


    def toggle(self, *args) -> "void":
        """
        toggle(SoSelection self, SoPath path)
        toggle(SoSelection self, SoNode node)
        """
        return _coin.SoSelection_toggle(self, *args)


    def isSelected(self, *args) -> "SbBool":
        """
        isSelected(SoSelection self, SoPath path) -> SbBool
        isSelected(SoSelection self, SoNode node) -> SbBool
        """
        return _coin.SoSelection_isSelected(self, *args)


    def deselectAll(self) -> "void":
        """deselectAll(SoSelection self)"""
        return _coin.SoSelection_deselectAll(self)


    def getNumSelected(self) -> "int":
        """getNumSelected(SoSelection self) -> int"""
        return _coin.SoSelection_getNumSelected(self)


    def getList(self) -> "SoPathList const *":
        """getList(SoSelection self) -> SoPathList"""
        return _coin.SoSelection_getList(self)


    def getPath(self, index: 'int const') -> "SoPath *":
        """getPath(SoSelection self, int const index) -> SoPath"""
        return _coin.SoSelection_getPath(self, index)


    def setPickMatching(self, pickMatching: 'SbBool const') -> "void":
        """setPickMatching(SoSelection self, SbBool const pickMatching)"""
        return _coin.SoSelection_setPickMatching(self, pickMatching)


    def isPickMatching(self) -> "SbBool":
        """isPickMatching(SoSelection self) -> SbBool"""
        return _coin.SoSelection_isPickMatching(self)


    def getPickMatching(self) -> "SbBool":
        """getPickMatching(SoSelection self) -> SbBool"""
        return _coin.SoSelection_getPickMatching(self)


    def addSelectionCallback(self, *args) -> "void":
        """
        addSelectionCallback(SoSelection self, SoSelectionPathCB * f, void * userData=None)
        addSelectionCallback(SoSelection self, SoSelectionPathCB * f)
        addSelectionCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        addSelectionCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_addSelectionCallback(self, *args)


    def removeSelectionCallback(self, *args) -> "void":
        """
        removeSelectionCallback(SoSelection self, SoSelectionPathCB * f, void * userData=None)
        removeSelectionCallback(SoSelection self, SoSelectionPathCB * f)
        removeSelectionCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        removeSelectionCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_removeSelectionCallback(self, *args)


    def addDeselectionCallback(self, *args) -> "void":
        """
        addDeselectionCallback(SoSelection self, SoSelectionPathCB * f, void * userData=None)
        addDeselectionCallback(SoSelection self, SoSelectionPathCB * f)
        addDeselectionCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        addDeselectionCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_addDeselectionCallback(self, *args)


    def removeDeselectionCallback(self, *args) -> "void":
        """
        removeDeselectionCallback(SoSelection self, SoSelectionPathCB * f, void * userData=None)
        removeDeselectionCallback(SoSelection self, SoSelectionPathCB * f)
        removeDeselectionCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        removeDeselectionCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_removeDeselectionCallback(self, *args)


    def addStartCallback(self, *args) -> "void":
        """
        addStartCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        addStartCallback(SoSelection self, SoSelectionClassCB * f)
        addStartCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        addStartCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_addStartCallback(self, *args)


    def removeStartCallback(self, *args) -> "void":
        """
        removeStartCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        removeStartCallback(SoSelection self, SoSelectionClassCB * f)
        removeStartCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        removeStartCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_removeStartCallback(self, *args)


    def addFinishCallback(self, *args) -> "void":
        """
        addFinishCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        addFinishCallback(SoSelection self, SoSelectionClassCB * f)
        addFinishCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        addFinishCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_addFinishCallback(self, *args)


    def removeFinishCallback(self, *args) -> "void":
        """
        removeFinishCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        removeFinishCallback(SoSelection self, SoSelectionClassCB * f)
        removeFinishCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        removeFinishCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_removeFinishCallback(self, *args)


    def setPickFilterCallback(self, *args) -> "void":
        """
        setPickFilterCallback(SoSelection self, SoSelectionPickCB * f, void * userData=None, SbBool const callOnlyIfSelectable=1)
        setPickFilterCallback(SoSelection self, SoSelectionPickCB * f, void * userData=None)
        setPickFilterCallback(SoSelection self, SoSelectionPickCB * f)
        setPickFilterCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None, int callOnlyIfSelectable=1)
        setPickFilterCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        setPickFilterCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_setPickFilterCallback(self, *args)


    def addChangeCallback(self, *args) -> "void":
        """
        addChangeCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        addChangeCallback(SoSelection self, SoSelectionClassCB * f)
        addChangeCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        addChangeCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_addChangeCallback(self, *args)


    def removeChangeCallback(self, *args) -> "void":
        """
        removeChangeCallback(SoSelection self, SoSelectionClassCB * f, void * userData=None)
        removeChangeCallback(SoSelection self, SoSelectionClassCB * f)
        removeChangeCallback(SoSelection self, PyObject * pyfunc, PyObject * userdata=None)
        removeChangeCallback(SoSelection self, PyObject * pyfunc)
        """
        return _coin.SoSelection_removeChangeCallback(self, *args)

SoSelection_swigregister = _coin.SoSelection_swigregister
SoSelection_swigregister(SoSelection)

def SoSelection_getClassTypeId() -> "SoType":
    """SoSelection_getClassTypeId() -> SoType"""
    return _coin.SoSelection_getClassTypeId()

def SoSelection_initClass() -> "void":
    """SoSelection_initClass()"""
    return _coin.SoSelection_initClass()

class SoExtSelection(SoSelection):
    """Proxy of C++ SoExtSelection class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoExtSelection_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoExtSelection self) -> SoType"""
        return _coin.SoExtSelection_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoExtSelection_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoExtSelection self) -> SoExtSelection"""
        this = _coin.new_SoExtSelection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NOLASSO = _coin.SoExtSelection_NOLASSO
    LASSO = _coin.SoExtSelection_LASSO
    RECTANGLE = _coin.SoExtSelection_RECTANGLE
    FULL_BBOX = _coin.SoExtSelection_FULL_BBOX
    PART_BBOX = _coin.SoExtSelection_PART_BBOX
    FULL = _coin.SoExtSelection_FULL
    PART = _coin.SoExtSelection_PART
    ALL_SHAPES = _coin.SoExtSelection_ALL_SHAPES
    VISIBLE_SHAPES = _coin.SoExtSelection_VISIBLE_SHAPES
    lassoType = _swig_property(_coin.SoExtSelection_lassoType_get, _coin.SoExtSelection_lassoType_set)
    lassoPolicy = _swig_property(_coin.SoExtSelection_lassoPolicy_get, _coin.SoExtSelection_lassoPolicy_set)
    lassoMode = _swig_property(_coin.SoExtSelection_lassoMode_get, _coin.SoExtSelection_lassoMode_set)

    def useOverlay(self, overlay: 'SbBool'=1) -> "void":
        """
        useOverlay(SoExtSelection self, SbBool overlay=1)
        useOverlay(SoExtSelection self)
        """
        return _coin.SoExtSelection_useOverlay(self, overlay)


    def isUsingOverlay(self) -> "SbBool":
        """isUsingOverlay(SoExtSelection self) -> SbBool"""
        return _coin.SoExtSelection_isUsingOverlay(self)


    def getOverlaySceneGraph(self) -> "SoSeparator *":
        """getOverlaySceneGraph(SoExtSelection self) -> SoSeparator"""
        return _coin.SoExtSelection_getOverlaySceneGraph(self)


    def setOverlayLassoColorIndex(self, index: 'int const') -> "void":
        """setOverlayLassoColorIndex(SoExtSelection self, int const index)"""
        return _coin.SoExtSelection_setOverlayLassoColorIndex(self, index)


    def getOverlayLassoColorIndex(self) -> "int":
        """getOverlayLassoColorIndex(SoExtSelection self) -> int"""
        return _coin.SoExtSelection_getOverlayLassoColorIndex(self)


    def setLassoColor(self, color: 'SbColor') -> "void":
        """setLassoColor(SoExtSelection self, SbColor color)"""
        return _coin.SoExtSelection_setLassoColor(self, color)


    def getLassoColor(self) -> "SbColor const &":
        """getLassoColor(SoExtSelection self) -> SbColor"""
        return _coin.SoExtSelection_getLassoColor(self)


    def setLassoWidth(self, width: 'float const') -> "void":
        """setLassoWidth(SoExtSelection self, float const width)"""
        return _coin.SoExtSelection_setLassoWidth(self, width)


    def getLassoWidth(self) -> "float":
        """getLassoWidth(SoExtSelection self) -> float"""
        return _coin.SoExtSelection_getLassoWidth(self)


    def setOverlayLassoPattern(self, pattern: 'unsigned short const') -> "void":
        """setOverlayLassoPattern(SoExtSelection self, unsigned short const pattern)"""
        return _coin.SoExtSelection_setOverlayLassoPattern(self, pattern)


    def getOverlayLassoPattern(self) -> "unsigned short":
        """getOverlayLassoPattern(SoExtSelection self) -> unsigned short"""
        return _coin.SoExtSelection_getOverlayLassoPattern(self)


    def animateOverlayLasso(self, animate: 'SbBool const'=1) -> "void":
        """
        animateOverlayLasso(SoExtSelection self, SbBool const animate=1)
        animateOverlayLasso(SoExtSelection self)
        """
        return _coin.SoExtSelection_animateOverlayLasso(self, animate)


    def isOverlayLassoAnimated(self) -> "SbBool":
        """isOverlayLassoAnimated(SoExtSelection self) -> SbBool"""
        return _coin.SoExtSelection_isOverlayLassoAnimated(self)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoExtSelection self, SoHandleEventAction action)"""
        return _coin.SoExtSelection_handleEvent(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoExtSelection self, SoGLRenderAction action)"""
        return _coin.SoExtSelection_GLRenderBelowPath(self, action)


    def select(self, *args) -> "void":
        """
        select(SoExtSelection self, SoNode root, int numcoords, SbVec2f lasso, SbViewportRegion vp, SbBool shiftpolicy)
        select(SoExtSelection self, SoNode root, int numcoords, SbVec3f lasso, SbViewportRegion vp, SbBool shiftkeypolicy)
        """
        return _coin.SoExtSelection_select(self, *args)


    def getLassoCoordsDC(self, numCoords: 'int &') -> "SbVec2s const *":
        """getLassoCoordsDC(SoExtSelection self, int & numCoords) -> SbVec2s"""
        return _coin.SoExtSelection_getLassoCoordsDC(self, numCoords)


    def getLassoCoordsWC(self, numCoords: 'int &') -> "SbVec3f const *":
        """getLassoCoordsWC(SoExtSelection self, int & numCoords) -> SbVec3f"""
        return _coin.SoExtSelection_getLassoCoordsWC(self, numCoords)


    def getSelectionPathList(self) -> "SoPathList const &":
        """getSelectionPathList(SoExtSelection self) -> SoPathList"""
        return _coin.SoExtSelection_getSelectionPathList(self)


    def setLassoFilterCallback(self, f: 'SoLassoSelectionFilterCB *', userdata: 'void *'=None, callonlyifselectable: 'SbBool const'=1) -> "void":
        """
        setLassoFilterCallback(SoExtSelection self, SoLassoSelectionFilterCB * f, void * userdata=None, SbBool const callonlyifselectable=1)
        setLassoFilterCallback(SoExtSelection self, SoLassoSelectionFilterCB * f, void * userdata=None)
        setLassoFilterCallback(SoExtSelection self, SoLassoSelectionFilterCB * f)
        """
        return _coin.SoExtSelection_setLassoFilterCallback(self, f, userdata, callonlyifselectable)


    def setTriangleFilterCallback(self, func: 'SoExtSelectionTriangleCB *', userdata: 'void *'=None) -> "void":
        """
        setTriangleFilterCallback(SoExtSelection self, SoExtSelectionTriangleCB * func, void * userdata=None)
        setTriangleFilterCallback(SoExtSelection self, SoExtSelectionTriangleCB * func)
        """
        return _coin.SoExtSelection_setTriangleFilterCallback(self, func, userdata)


    def setLineSegmentFilterCallback(self, func: 'SoExtSelectionLineSegmentCB *', userdata: 'void *'=None) -> "void":
        """
        setLineSegmentFilterCallback(SoExtSelection self, SoExtSelectionLineSegmentCB * func, void * userdata=None)
        setLineSegmentFilterCallback(SoExtSelection self, SoExtSelectionLineSegmentCB * func)
        """
        return _coin.SoExtSelection_setLineSegmentFilterCallback(self, func, userdata)


    def setPointFilterCallback(self, func: 'SoExtSelectionPointCB *', userdata: 'void *'=None) -> "void":
        """
        setPointFilterCallback(SoExtSelection self, SoExtSelectionPointCB * func, void * userdata=None)
        setPointFilterCallback(SoExtSelection self, SoExtSelectionPointCB * func)
        """
        return _coin.SoExtSelection_setPointFilterCallback(self, func, userdata)


    def wasShiftDown(self) -> "SbBool":
        """wasShiftDown(SoExtSelection self) -> SbBool"""
        return _coin.SoExtSelection_wasShiftDown(self)

SoExtSelection_swigregister = _coin.SoExtSelection_swigregister
SoExtSelection_swigregister(SoExtSelection)

def SoExtSelection_getClassTypeId() -> "SoType":
    """SoExtSelection_getClassTypeId() -> SoType"""
    return _coin.SoExtSelection_getClassTypeId()

def SoExtSelection_initClass() -> "void":
    """SoExtSelection_initClass()"""
    return _coin.SoExtSelection_initClass()

class SoVertexProperty(SoNode):
    """Proxy of C++ SoVertexProperty class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexProperty_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVertexProperty self) -> SoType"""
        return _coin.SoVertexProperty_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexProperty_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVertexProperty self) -> SoVertexProperty"""
        this = _coin.new_SoVertexProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OVERALL = _coin.SoVertexProperty_OVERALL
    PER_PART = _coin.SoVertexProperty_PER_PART
    PER_PART_INDEXED = _coin.SoVertexProperty_PER_PART_INDEXED
    PER_FACE = _coin.SoVertexProperty_PER_FACE
    PER_FACE_INDEXED = _coin.SoVertexProperty_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoVertexProperty_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoVertexProperty_PER_VERTEX_INDEXED
    vertex = _swig_property(_coin.SoVertexProperty_vertex_get, _coin.SoVertexProperty_vertex_set)
    texCoord = _swig_property(_coin.SoVertexProperty_texCoord_get, _coin.SoVertexProperty_texCoord_set)
    texCoord3 = _swig_property(_coin.SoVertexProperty_texCoord3_get, _coin.SoVertexProperty_texCoord3_set)
    normal = _swig_property(_coin.SoVertexProperty_normal_get, _coin.SoVertexProperty_normal_set)
    normalBinding = _swig_property(_coin.SoVertexProperty_normalBinding_get, _coin.SoVertexProperty_normalBinding_set)
    orderedRGBA = _swig_property(_coin.SoVertexProperty_orderedRGBA_get, _coin.SoVertexProperty_orderedRGBA_set)
    materialBinding = _swig_property(_coin.SoVertexProperty_materialBinding_get, _coin.SoVertexProperty_materialBinding_set)
    textureUnit = _swig_property(_coin.SoVertexProperty_textureUnit_get, _coin.SoVertexProperty_textureUnit_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVertexProperty self, SoAction action)"""
        return _coin.SoVertexProperty_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVertexProperty self, SoGLRenderAction action)"""
        return _coin.SoVertexProperty_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVertexProperty self, SoGetBoundingBoxAction action)"""
        return _coin.SoVertexProperty_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVertexProperty self, SoCallbackAction action)"""
        return _coin.SoVertexProperty_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVertexProperty self, SoPickAction action)"""
        return _coin.SoVertexProperty_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVertexProperty self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVertexProperty_getPrimitiveCount(self, action)

SoVertexProperty_swigregister = _coin.SoVertexProperty_swigregister
SoVertexProperty_swigregister(SoVertexProperty)

def SoVertexProperty_getClassTypeId() -> "SoType":
    """SoVertexProperty_getClassTypeId() -> SoType"""
    return _coin.SoVertexProperty_getClassTypeId()

def SoVertexProperty_initClass() -> "void":
    """SoVertexProperty_initClass()"""
    return _coin.SoVertexProperty_initClass()

class SoVertexShape(SoShape):
    """Proxy of C++ SoVertexShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVertexShape self) -> SoType"""
        return _coin.SoVertexShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexShape_initClass()

    initClass = staticmethod(initClass)
    vertexProperty = _swig_property(_coin.SoVertexShape_vertexProperty_get, _coin.SoVertexShape_vertexProperty_set)

    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoVertexShape self, SoNotList nl)"""
        return _coin.SoVertexShape_notify(self, nl)


    def generateDefaultNormals(self, *args) -> "SbBool":
        """
        generateDefaultNormals(SoVertexShape self, SoState state, SoNormalBundle bundle) -> SbBool
        generateDefaultNormals(SoVertexShape self, SoState state, SoNormalCache cache) -> SbBool
        """
        return _coin.SoVertexShape_generateDefaultNormals(self, *args)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVertexShape self, SoWriteAction action)"""
        return _coin.SoVertexShape_write(self, action)

SoVertexShape_swigregister = _coin.SoVertexShape_swigregister
SoVertexShape_swigregister(SoVertexShape)

def SoVertexShape_getClassTypeId() -> "SoType":
    """SoVertexShape_getClassTypeId() -> SoType"""
    return _coin.SoVertexShape_getClassTypeId()

def SoVertexShape_initClass() -> "void":
    """SoVertexShape_initClass()"""
    return _coin.SoVertexShape_initClass()

class SoNonIndexedShape(SoVertexShape):
    """Proxy of C++ SoNonIndexedShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNonIndexedShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNonIndexedShape self) -> SoType"""
        return _coin.SoNonIndexedShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNonIndexedShape_initClass()

    initClass = staticmethod(initClass)
    startIndex = _swig_property(_coin.SoNonIndexedShape_startIndex_get, _coin.SoNonIndexedShape_startIndex_set)
SoNonIndexedShape_swigregister = _coin.SoNonIndexedShape_swigregister
SoNonIndexedShape_swigregister(SoNonIndexedShape)

def SoNonIndexedShape_getClassTypeId() -> "SoType":
    """SoNonIndexedShape_getClassTypeId() -> SoType"""
    return _coin.SoNonIndexedShape_getClassTypeId()

def SoNonIndexedShape_initClass() -> "void":
    """SoNonIndexedShape_initClass()"""
    return _coin.SoNonIndexedShape_initClass()

class SoFaceSet(SoNonIndexedShape):
    """Proxy of C++ SoFaceSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFaceSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFaceSet self) -> SoType"""
        return _coin.SoFaceSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFaceSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFaceSet self) -> SoFaceSet"""
        this = _coin.new_SoFaceSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numVertices = _swig_property(_coin.SoFaceSet_numVertices_get, _coin.SoFaceSet_numVertices_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoFaceSet self, SoGLRenderAction action)"""
        return _coin.SoFaceSet_GLRender(self, action)


    def generateDefaultNormals(self, state: 'SoState', nb: 'SoNormalBundle') -> "SbBool":
        """generateDefaultNormals(SoFaceSet self, SoState state, SoNormalBundle nb) -> SbBool"""
        return _coin.SoFaceSet_generateDefaultNormals(self, state, nb)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoFaceSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoFaceSet_getPrimitiveCount(self, action)

SoFaceSet_swigregister = _coin.SoFaceSet_swigregister
SoFaceSet_swigregister(SoFaceSet)

def SoFaceSet_getClassTypeId() -> "SoType":
    """SoFaceSet_getClassTypeId() -> SoType"""
    return _coin.SoFaceSet_getClassTypeId()

def SoFaceSet_initClass() -> "void":
    """SoFaceSet_initClass()"""
    return _coin.SoFaceSet_initClass()

class SoFile(SoNode):
    """Proxy of C++ SoFile class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFile_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFile self) -> SoType"""
        return _coin.SoFile_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFile_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFile self) -> SoFile"""
        this = _coin.new_SoFile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    name = _swig_property(_coin.SoFile_name_get, _coin.SoFile_name_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoFile self, SoAction action)"""
        return _coin.SoFile_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoFile self, SoCallbackAction action)"""
        return _coin.SoFile_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoFile self, SoGLRenderAction action)"""
        return _coin.SoFile_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoFile self, SoGetBoundingBoxAction action)"""
        return _coin.SoFile_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoFile self, SoGetMatrixAction action)"""
        return _coin.SoFile_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoFile self, SoHandleEventAction action)"""
        return _coin.SoFile_handleEvent(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoFile self, SoPickAction action)"""
        return _coin.SoFile_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoFile self, SoGetPrimitiveCountAction action)"""
        return _coin.SoFile_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoFile self, SoAudioRenderAction action)"""
        return _coin.SoFile_audioRender(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoFile self, SoSearchAction action)"""
        return _coin.SoFile_search(self, action)


    def copyChildren(self) -> "SoGroup *":
        """copyChildren(SoFile self) -> SoGroup"""
        return _coin.SoFile_copyChildren(self)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoFile self) -> SoChildList"""
        return _coin.SoFile_getChildren(self)


    def copyContents(self, arg2: 'SoFieldContainer', copyconnections: 'SbBool') -> "void":
        """copyContents(SoFile self, SoFieldContainer arg2, SbBool copyconnections)"""
        return _coin.SoFile_copyContents(self, arg2, copyconnections)


    def getFullName(self) -> "SbString const &":
        """getFullName(SoFile self) -> SbString"""
        return _coin.SoFile_getFullName(self)


    def setSearchOK(dosearch: 'SbBool') -> "void":
        """setSearchOK(SbBool dosearch)"""
        return _coin.SoFile_setSearchOK(dosearch)

    setSearchOK = staticmethod(setSearchOK)

    def getSearchOK() -> "SbBool":
        """getSearchOK() -> SbBool"""
        return _coin.SoFile_getSearchOK()

    getSearchOK = staticmethod(getSearchOK)
SoFile_swigregister = _coin.SoFile_swigregister
SoFile_swigregister(SoFile)

def SoFile_getClassTypeId() -> "SoType":
    """SoFile_getClassTypeId() -> SoType"""
    return _coin.SoFile_getClassTypeId()

def SoFile_initClass() -> "void":
    """SoFile_initClass()"""
    return _coin.SoFile_initClass()

def SoFile_setSearchOK(dosearch: 'SbBool') -> "void":
    """SoFile_setSearchOK(SbBool dosearch)"""
    return _coin.SoFile_setSearchOK(dosearch)

def SoFile_getSearchOK() -> "SbBool":
    """SoFile_getSearchOK() -> SbBool"""
    return _coin.SoFile_getSearchOK()

class SoFont(SoNode):
    """Proxy of C++ SoFont class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFont_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFont self) -> SoType"""
        return _coin.SoFont_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFont_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFont self) -> SoFont"""
        this = _coin.new_SoFont()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    name = _swig_property(_coin.SoFont_name_get, _coin.SoFont_name_set)
    size = _swig_property(_coin.SoFont_size_get, _coin.SoFont_size_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoFont self, SoAction action)"""
        return _coin.SoFont_doAction(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoFont self, SoGetBoundingBoxAction action)"""
        return _coin.SoFont_getBoundingBox(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoFont self, SoGLRenderAction action)"""
        return _coin.SoFont_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoFont self, SoCallbackAction action)"""
        return _coin.SoFont_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoFont self, SoPickAction action)"""
        return _coin.SoFont_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoFont self, SoGetPrimitiveCountAction action)"""
        return _coin.SoFont_getPrimitiveCount(self, action)

SoFont_swigregister = _coin.SoFont_swigregister
SoFont_swigregister(SoFont)

def SoFont_getClassTypeId() -> "SoType":
    """SoFont_getClassTypeId() -> SoType"""
    return _coin.SoFont_getClassTypeId()

def SoFont_initClass() -> "void":
    """SoFont_initClass()"""
    return _coin.SoFont_initClass()

class SoFontStyle(SoFont):
    """Proxy of C++ SoFontStyle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFontStyle_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFontStyle self) -> SoType"""
        return _coin.SoFontStyle_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFontStyle_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFontStyle self) -> SoFontStyle"""
        this = _coin.new_SoFontStyle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SERIF = _coin.SoFontStyle_SERIF
    SANS = _coin.SoFontStyle_SANS
    TYPEWRITER = _coin.SoFontStyle_TYPEWRITER
    NONE = _coin.SoFontStyle_NONE
    BOLD = _coin.SoFontStyle_BOLD
    ITALIC = _coin.SoFontStyle_ITALIC
    family = _swig_property(_coin.SoFontStyle_family_get, _coin.SoFontStyle_family_set)
    style = _swig_property(_coin.SoFontStyle_style_get, _coin.SoFontStyle_style_set)

    def getFontName(self) -> "SbString":
        """getFontName(SoFontStyle self) -> SbString"""
        return _coin.SoFontStyle_getFontName(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoFontStyle self, SoAction action)"""
        return _coin.SoFontStyle_doAction(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoFontStyle self, SoGetBoundingBoxAction action)"""
        return _coin.SoFontStyle_getBoundingBox(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoFontStyle self, SoGLRenderAction action)"""
        return _coin.SoFontStyle_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoFontStyle self, SoCallbackAction action)"""
        return _coin.SoFontStyle_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoFontStyle self, SoPickAction action)"""
        return _coin.SoFontStyle_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoFontStyle self, SoGetPrimitiveCountAction action)"""
        return _coin.SoFontStyle_getPrimitiveCount(self, action)

SoFontStyle_swigregister = _coin.SoFontStyle_swigregister
SoFontStyle_swigregister(SoFontStyle)

def SoFontStyle_getClassTypeId() -> "SoType":
    """SoFontStyle_getClassTypeId() -> SoType"""
    return _coin.SoFontStyle_getClassTypeId()

def SoFontStyle_initClass() -> "void":
    """SoFontStyle_initClass()"""
    return _coin.SoFontStyle_initClass()

class SoIndexedShape(SoVertexShape):
    """Proxy of C++ SoIndexedShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedShape self) -> SoType"""
        return _coin.SoIndexedShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedShape_initClass()

    initClass = staticmethod(initClass)
    coordIndex = _swig_property(_coin.SoIndexedShape_coordIndex_get, _coin.SoIndexedShape_coordIndex_set)
    materialIndex = _swig_property(_coin.SoIndexedShape_materialIndex_get, _coin.SoIndexedShape_materialIndex_set)
    normalIndex = _swig_property(_coin.SoIndexedShape_normalIndex_get, _coin.SoIndexedShape_normalIndex_set)
    textureCoordIndex = _swig_property(_coin.SoIndexedShape_textureCoordIndex_get, _coin.SoIndexedShape_textureCoordIndex_set)
SoIndexedShape_swigregister = _coin.SoIndexedShape_swigregister
SoIndexedShape_swigregister(SoIndexedShape)

def SoIndexedShape_getClassTypeId() -> "SoType":
    """SoIndexedShape_getClassTypeId() -> SoType"""
    return _coin.SoIndexedShape_getClassTypeId()

def SoIndexedShape_initClass() -> "void":
    """SoIndexedShape_initClass()"""
    return _coin.SoIndexedShape_initClass()

SO_END_FACE_INDEX = _coin.SO_END_FACE_INDEX
class SoIndexedFaceSet(SoIndexedShape):
    """Proxy of C++ SoIndexedFaceSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedFaceSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedFaceSet self) -> SoType"""
        return _coin.SoIndexedFaceSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedFaceSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedFaceSet self) -> SoIndexedFaceSet"""
        this = _coin.new_SoIndexedFaceSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedFaceSet self, SoGLRenderAction action)"""
        return _coin.SoIndexedFaceSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedFaceSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedFaceSet_getPrimitiveCount(self, action)


    def generateDefaultNormals(self, *args) -> "SbBool":
        """
        generateDefaultNormals(SoIndexedFaceSet self, SoState state, SoNormalBundle bundle) -> SbBool
        generateDefaultNormals(SoIndexedFaceSet self, SoState state, SoNormalCache cache) -> SbBool
        """
        return _coin.SoIndexedFaceSet_generateDefaultNormals(self, *args)

SoIndexedFaceSet_swigregister = _coin.SoIndexedFaceSet_swigregister
SoIndexedFaceSet_swigregister(SoIndexedFaceSet)

def SoIndexedFaceSet_getClassTypeId() -> "SoType":
    """SoIndexedFaceSet_getClassTypeId() -> SoType"""
    return _coin.SoIndexedFaceSet_getClassTypeId()

def SoIndexedFaceSet_initClass() -> "void":
    """SoIndexedFaceSet_initClass()"""
    return _coin.SoIndexedFaceSet_initClass()

SO_END_LINE_INDEX = _coin.SO_END_LINE_INDEX
class SoIndexedLineSet(SoIndexedShape):
    """Proxy of C++ SoIndexedLineSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedLineSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedLineSet self) -> SoType"""
        return _coin.SoIndexedLineSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedLineSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedLineSet self) -> SoIndexedLineSet"""
        this = _coin.new_SoIndexedLineSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedLineSet self, SoGLRenderAction action)"""
        return _coin.SoIndexedLineSet_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoIndexedLineSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoIndexedLineSet_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedLineSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedLineSet_getPrimitiveCount(self, action)

SoIndexedLineSet_swigregister = _coin.SoIndexedLineSet_swigregister
SoIndexedLineSet_swigregister(SoIndexedLineSet)

def SoIndexedLineSet_getClassTypeId() -> "SoType":
    """SoIndexedLineSet_getClassTypeId() -> SoType"""
    return _coin.SoIndexedLineSet_getClassTypeId()

def SoIndexedLineSet_initClass() -> "void":
    """SoIndexedLineSet_initClass()"""
    return _coin.SoIndexedLineSet_initClass()

class SoIndexedNurbsCurve(SoShape):
    """Proxy of C++ SoIndexedNurbsCurve class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedNurbsCurve_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedNurbsCurve self) -> SoType"""
        return _coin.SoIndexedNurbsCurve_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedNurbsCurve_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedNurbsCurve self) -> SoIndexedNurbsCurve"""
        this = _coin.new_SoIndexedNurbsCurve()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numControlPoints = _swig_property(_coin.SoIndexedNurbsCurve_numControlPoints_get, _coin.SoIndexedNurbsCurve_numControlPoints_set)
    coordIndex = _swig_property(_coin.SoIndexedNurbsCurve_coordIndex_get, _coin.SoIndexedNurbsCurve_coordIndex_set)
    knotVector = _swig_property(_coin.SoIndexedNurbsCurve_knotVector_get, _coin.SoIndexedNurbsCurve_knotVector_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedNurbsCurve self, SoGLRenderAction action)"""
        return _coin.SoIndexedNurbsCurve_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoIndexedNurbsCurve self, SoRayPickAction action)"""
        return _coin.SoIndexedNurbsCurve_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedNurbsCurve self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedNurbsCurve_getPrimitiveCount(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoIndexedNurbsCurve self, SoGetBoundingBoxAction action)"""
        return _coin.SoIndexedNurbsCurve_getBoundingBox(self, action)


    def sendPrimitive(self, arg2: 'SoAction', arg3: 'SoPrimitiveVertex') -> "void":
        """sendPrimitive(SoIndexedNurbsCurve self, SoAction arg2, SoPrimitiveVertex arg3)"""
        return _coin.SoIndexedNurbsCurve_sendPrimitive(self, arg2, arg3)

SoIndexedNurbsCurve_swigregister = _coin.SoIndexedNurbsCurve_swigregister
SoIndexedNurbsCurve_swigregister(SoIndexedNurbsCurve)

def SoIndexedNurbsCurve_getClassTypeId() -> "SoType":
    """SoIndexedNurbsCurve_getClassTypeId() -> SoType"""
    return _coin.SoIndexedNurbsCurve_getClassTypeId()

def SoIndexedNurbsCurve_initClass() -> "void":
    """SoIndexedNurbsCurve_initClass()"""
    return _coin.SoIndexedNurbsCurve_initClass()

class SoIndexedNurbsSurface(SoShape):
    """Proxy of C++ SoIndexedNurbsSurface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedNurbsSurface_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedNurbsSurface self) -> SoType"""
        return _coin.SoIndexedNurbsSurface_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedNurbsSurface_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedNurbsSurface self) -> SoIndexedNurbsSurface"""
        this = _coin.new_SoIndexedNurbsSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numUControlPoints = _swig_property(_coin.SoIndexedNurbsSurface_numUControlPoints_get, _coin.SoIndexedNurbsSurface_numUControlPoints_set)
    numVControlPoints = _swig_property(_coin.SoIndexedNurbsSurface_numVControlPoints_get, _coin.SoIndexedNurbsSurface_numVControlPoints_set)
    coordIndex = _swig_property(_coin.SoIndexedNurbsSurface_coordIndex_get, _coin.SoIndexedNurbsSurface_coordIndex_set)
    uKnotVector = _swig_property(_coin.SoIndexedNurbsSurface_uKnotVector_get, _coin.SoIndexedNurbsSurface_uKnotVector_set)
    vKnotVector = _swig_property(_coin.SoIndexedNurbsSurface_vKnotVector_get, _coin.SoIndexedNurbsSurface_vKnotVector_set)
    numSControlPoints = _swig_property(_coin.SoIndexedNurbsSurface_numSControlPoints_get, _coin.SoIndexedNurbsSurface_numSControlPoints_set)
    numTControlPoints = _swig_property(_coin.SoIndexedNurbsSurface_numTControlPoints_get, _coin.SoIndexedNurbsSurface_numTControlPoints_set)
    textureCoordIndex = _swig_property(_coin.SoIndexedNurbsSurface_textureCoordIndex_get, _coin.SoIndexedNurbsSurface_textureCoordIndex_set)
    sKnotVector = _swig_property(_coin.SoIndexedNurbsSurface_sKnotVector_get, _coin.SoIndexedNurbsSurface_sKnotVector_set)
    tKnotVector = _swig_property(_coin.SoIndexedNurbsSurface_tKnotVector_get, _coin.SoIndexedNurbsSurface_tKnotVector_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedNurbsSurface self, SoGLRenderAction action)"""
        return _coin.SoIndexedNurbsSurface_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoIndexedNurbsSurface self, SoRayPickAction action)"""
        return _coin.SoIndexedNurbsSurface_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedNurbsSurface self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedNurbsSurface_getPrimitiveCount(self, action)


    def sendPrimitive(self, arg2: 'SoAction', arg3: 'SoPrimitiveVertex') -> "void":
        """sendPrimitive(SoIndexedNurbsSurface self, SoAction arg2, SoPrimitiveVertex arg3)"""
        return _coin.SoIndexedNurbsSurface_sendPrimitive(self, arg2, arg3)

SoIndexedNurbsSurface_swigregister = _coin.SoIndexedNurbsSurface_swigregister
SoIndexedNurbsSurface_swigregister(SoIndexedNurbsSurface)

def SoIndexedNurbsSurface_getClassTypeId() -> "SoType":
    """SoIndexedNurbsSurface_getClassTypeId() -> SoType"""
    return _coin.SoIndexedNurbsSurface_getClassTypeId()

def SoIndexedNurbsSurface_initClass() -> "void":
    """SoIndexedNurbsSurface_initClass()"""
    return _coin.SoIndexedNurbsSurface_initClass()

SO_END_STRIP_INDEX = _coin.SO_END_STRIP_INDEX
class SoIndexedTriangleStripSet(SoIndexedShape):
    """Proxy of C++ SoIndexedTriangleStripSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedTriangleStripSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedTriangleStripSet self) -> SoType"""
        return _coin.SoIndexedTriangleStripSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedTriangleStripSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedTriangleStripSet self) -> SoIndexedTriangleStripSet"""
        this = _coin.new_SoIndexedTriangleStripSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedTriangleStripSet self, SoGLRenderAction action)"""
        return _coin.SoIndexedTriangleStripSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedTriangleStripSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedTriangleStripSet_getPrimitiveCount(self, action)


    def generateDefaultNormals(self, state: 'SoState', nb: 'SoNormalBundle') -> "SbBool":
        """generateDefaultNormals(SoIndexedTriangleStripSet self, SoState state, SoNormalBundle nb) -> SbBool"""
        return _coin.SoIndexedTriangleStripSet_generateDefaultNormals(self, state, nb)

SoIndexedTriangleStripSet_swigregister = _coin.SoIndexedTriangleStripSet_swigregister
SoIndexedTriangleStripSet_swigregister(SoIndexedTriangleStripSet)

def SoIndexedTriangleStripSet_getClassTypeId() -> "SoType":
    """SoIndexedTriangleStripSet_getClassTypeId() -> SoType"""
    return _coin.SoIndexedTriangleStripSet_getClassTypeId()

def SoIndexedTriangleStripSet_initClass() -> "void":
    """SoIndexedTriangleStripSet_initClass()"""
    return _coin.SoIndexedTriangleStripSet_initClass()

class SoInfo(SoNode):
    """Proxy of C++ SoInfo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoInfo_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoInfo self) -> SoType"""
        return _coin.SoInfo_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoInfo_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoInfo self) -> SoInfo"""
        this = _coin.new_SoInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    string = _swig_property(_coin.SoInfo_string_get, _coin.SoInfo_string_set)
SoInfo_swigregister = _coin.SoInfo_swigregister
SoInfo_swigregister(SoInfo)

def SoInfo_getClassTypeId() -> "SoType":
    """SoInfo_getClassTypeId() -> SoType"""
    return _coin.SoInfo_getClassTypeId()

def SoInfo_initClass() -> "void":
    """SoInfo_initClass()"""
    return _coin.SoInfo_initClass()

class SoLabel(SoNode):
    """Proxy of C++ SoLabel class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLabel_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLabel self) -> SoType"""
        return _coin.SoLabel_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLabel_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLabel self) -> SoLabel"""
        this = _coin.new_SoLabel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    label = _swig_property(_coin.SoLabel_label_get, _coin.SoLabel_label_set)
SoLabel_swigregister = _coin.SoLabel_swigregister
SoLabel_swigregister(SoLabel)

def SoLabel_getClassTypeId() -> "SoType":
    """SoLabel_getClassTypeId() -> SoType"""
    return _coin.SoLabel_getClassTypeId()

def SoLabel_initClass() -> "void":
    """SoLabel_initClass()"""
    return _coin.SoLabel_initClass()

class SoLevelOfDetail(SoGroup):
    """Proxy of C++ SoLevelOfDetail class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLevelOfDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLevelOfDetail self) -> SoType"""
        return _coin.SoLevelOfDetail_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLevelOfDetail_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoLevelOfDetail self) -> SoLevelOfDetail
        __init__(SoLevelOfDetail self, int numchildren) -> SoLevelOfDetail
        """
        this = _coin.new_SoLevelOfDetail(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    screenArea = _swig_property(_coin.SoLevelOfDetail_screenArea_get, _coin.SoLevelOfDetail_screenArea_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoLevelOfDetail self, SoAction action)"""
        return _coin.SoLevelOfDetail_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoLevelOfDetail self, SoCallbackAction action)"""
        return _coin.SoLevelOfDetail_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoLevelOfDetail self, SoGLRenderAction action)"""
        return _coin.SoLevelOfDetail_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoLevelOfDetail self, SoRayPickAction action)"""
        return _coin.SoLevelOfDetail_rayPick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoLevelOfDetail self, SoGetBoundingBoxAction action)"""
        return _coin.SoLevelOfDetail_getBoundingBox(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoLevelOfDetail self, SoAudioRenderAction action)"""
        return _coin.SoLevelOfDetail_audioRender(self, action)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoLevelOfDetail self, SoNotList nl)"""
        return _coin.SoLevelOfDetail_notify(self, nl)

SoLevelOfDetail_swigregister = _coin.SoLevelOfDetail_swigregister
SoLevelOfDetail_swigregister(SoLevelOfDetail)

def SoLevelOfDetail_getClassTypeId() -> "SoType":
    """SoLevelOfDetail_getClassTypeId() -> SoType"""
    return _coin.SoLevelOfDetail_getClassTypeId()

def SoLevelOfDetail_initClass() -> "void":
    """SoLevelOfDetail_initClass()"""
    return _coin.SoLevelOfDetail_initClass()

class SoProfile(SoNode):
    """Proxy of C++ SoProfile class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProfile_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoProfile self) -> SoType"""
        return _coin.SoProfile_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProfile_initClass()

    initClass = staticmethod(initClass)
    START_FIRST = _coin.SoProfile_START_FIRST
    START_NEW = _coin.SoProfile_START_NEW
    ADD_TO_CURRENT = _coin.SoProfile_ADD_TO_CURRENT
    index = _swig_property(_coin.SoProfile_index_get, _coin.SoProfile_index_set)
    linkage = _swig_property(_coin.SoProfile_linkage_get, _coin.SoProfile_linkage_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoProfile self, SoAction action)"""
        return _coin.SoProfile_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoProfile self, SoCallbackAction action)"""
        return _coin.SoProfile_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoProfile self, SoGLRenderAction action)"""
        return _coin.SoProfile_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoProfile self, SoGetBoundingBoxAction action)"""
        return _coin.SoProfile_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoProfile self, SoPickAction action)"""
        return _coin.SoProfile_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoProfile self, SoGetPrimitiveCountAction action)"""
        return _coin.SoProfile_getPrimitiveCount(self, action)


    def getTrimCurve(self, state: 'SoState', numpoints: 'int32_t &', points: 'float *&', floatspervec: 'int &', numknots: 'int32_t &', knotvector: 'float *&') -> "void":
        """getTrimCurve(SoProfile self, SoState state, int32_t & numpoints, float *& points, int & floatspervec, int32_t & numknots, float *& knotvector)"""
        return _coin.SoProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)


    def getVertices(self, state: 'SoState', numvertices: 'int32_t &', vertices: 'SbVec2f *&') -> "void":
        """getVertices(SoProfile self, SoState state, int32_t & numvertices, SbVec2f *& vertices)"""
        return _coin.SoProfile_getVertices(self, state, numvertices, vertices)

SoProfile_swigregister = _coin.SoProfile_swigregister
SoProfile_swigregister(SoProfile)

def SoProfile_getClassTypeId() -> "SoType":
    """SoProfile_getClassTypeId() -> SoType"""
    return _coin.SoProfile_getClassTypeId()

def SoProfile_initClass() -> "void":
    """SoProfile_initClass()"""
    return _coin.SoProfile_initClass()

class SoLinearProfile(SoProfile):
    """Proxy of C++ SoLinearProfile class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLinearProfile_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLinearProfile self) -> SoType"""
        return _coin.SoLinearProfile_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLinearProfile_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLinearProfile self) -> SoLinearProfile"""
        this = _coin.new_SoLinearProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTrimCurve(self, state: 'SoState', numpoints: 'int32_t &', points: 'float *&', floatspervec: 'int &', numknots: 'int32_t &', knotvector: 'float *&') -> "void":
        """getTrimCurve(SoLinearProfile self, SoState state, int32_t & numpoints, float *& points, int & floatspervec, int32_t & numknots, float *& knotvector)"""
        return _coin.SoLinearProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)


    def getVertices(self, state: 'SoState', numvertices: 'int32_t &', vertices: 'SbVec2f *&') -> "void":
        """getVertices(SoLinearProfile self, SoState state, int32_t & numvertices, SbVec2f *& vertices)"""
        return _coin.SoLinearProfile_getVertices(self, state, numvertices, vertices)

SoLinearProfile_swigregister = _coin.SoLinearProfile_swigregister
SoLinearProfile_swigregister(SoLinearProfile)

def SoLinearProfile_getClassTypeId() -> "SoType":
    """SoLinearProfile_getClassTypeId() -> SoType"""
    return _coin.SoLinearProfile_getClassTypeId()

def SoLinearProfile_initClass() -> "void":
    """SoLinearProfile_initClass()"""
    return _coin.SoLinearProfile_initClass()

class SoLineSet(SoNonIndexedShape):
    """Proxy of C++ SoLineSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLineSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLineSet self) -> SoType"""
        return _coin.SoLineSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLineSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLineSet self) -> SoLineSet"""
        this = _coin.new_SoLineSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numVertices = _swig_property(_coin.SoLineSet_numVertices_get, _coin.SoLineSet_numVertices_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoLineSet self, SoGLRenderAction action)"""
        return _coin.SoLineSet_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoLineSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoLineSet_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoLineSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoLineSet_getPrimitiveCount(self, action)

SoLineSet_swigregister = _coin.SoLineSet_swigregister
SoLineSet_swigregister(SoLineSet)

def SoLineSet_getClassTypeId() -> "SoType":
    """SoLineSet_getClassTypeId() -> SoType"""
    return _coin.SoLineSet_getClassTypeId()

def SoLineSet_initClass() -> "void":
    """SoLineSet_initClass()"""
    return _coin.SoLineSet_initClass()

class SoListener(SoNode):
    """Proxy of C++ SoListener class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoListener_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoListener self) -> SoType"""
        return _coin.SoListener_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoListener_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoListener self) -> SoListener"""
        this = _coin.new_SoListener()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    position = _swig_property(_coin.SoListener_position_get, _coin.SoListener_position_set)
    orientation = _swig_property(_coin.SoListener_orientation_get, _coin.SoListener_orientation_set)
    gain = _swig_property(_coin.SoListener_gain_get, _coin.SoListener_gain_set)
    dopplerVelocity = _swig_property(_coin.SoListener_dopplerVelocity_get, _coin.SoListener_dopplerVelocity_set)
    dopplerFactor = _swig_property(_coin.SoListener_dopplerFactor_get, _coin.SoListener_dopplerFactor_set)
SoListener_swigregister = _coin.SoListener_swigregister
SoListener_swigregister(SoListener)

def SoListener_getClassTypeId() -> "SoType":
    """SoListener_getClassTypeId() -> SoType"""
    return _coin.SoListener_getClassTypeId()

def SoListener_initClass() -> "void":
    """SoListener_initClass()"""
    return _coin.SoListener_initClass()

class SoLocateHighlight(SoSeparator):
    """Proxy of C++ SoLocateHighlight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLocateHighlight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLocateHighlight self) -> SoType"""
        return _coin.SoLocateHighlight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLocateHighlight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoLocateHighlight self) -> SoLocateHighlight"""
        this = _coin.new_SoLocateHighlight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    AUTO = _coin.SoLocateHighlight_AUTO
    ON = _coin.SoLocateHighlight_ON
    OFF = _coin.SoLocateHighlight_OFF
    EMISSIVE = _coin.SoLocateHighlight_EMISSIVE
    EMISSIVE_DIFFUSE = _coin.SoLocateHighlight_EMISSIVE_DIFFUSE
    color = _swig_property(_coin.SoLocateHighlight_color_get, _coin.SoLocateHighlight_color_set)
    style = _swig_property(_coin.SoLocateHighlight_style_get, _coin.SoLocateHighlight_style_set)
    mode = _swig_property(_coin.SoLocateHighlight_mode_get, _coin.SoLocateHighlight_mode_set)

    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoLocateHighlight self, SoHandleEventAction action)"""
        return _coin.SoLocateHighlight_handleEvent(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoLocateHighlight self, SoGLRenderAction action)"""
        return _coin.SoLocateHighlight_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoLocateHighlight self, SoGLRenderAction action)"""
        return _coin.SoLocateHighlight_GLRenderInPath(self, action)


    def turnOffCurrentHighlight(action: 'SoGLRenderAction') -> "void":
        """turnOffCurrentHighlight(SoGLRenderAction action)"""
        return _coin.SoLocateHighlight_turnOffCurrentHighlight(action)

    turnOffCurrentHighlight = staticmethod(turnOffCurrentHighlight)
SoLocateHighlight_swigregister = _coin.SoLocateHighlight_swigregister
SoLocateHighlight_swigregister(SoLocateHighlight)

def SoLocateHighlight_getClassTypeId() -> "SoType":
    """SoLocateHighlight_getClassTypeId() -> SoType"""
    return _coin.SoLocateHighlight_getClassTypeId()

def SoLocateHighlight_initClass() -> "void":
    """SoLocateHighlight_initClass()"""
    return _coin.SoLocateHighlight_initClass()

def SoLocateHighlight_turnOffCurrentHighlight(action: 'SoGLRenderAction') -> "void":
    """SoLocateHighlight_turnOffCurrentHighlight(SoGLRenderAction action)"""
    return _coin.SoLocateHighlight_turnOffCurrentHighlight(action)

class SoLOD(SoGroup):
    """Proxy of C++ SoLOD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoLOD_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoLOD self) -> SoType"""
        return _coin.SoLOD_getTypeId(self)


    def __init__(self, *args):
        """
        __init__(SoLOD self) -> SoLOD
        __init__(SoLOD self, int numchildren) -> SoLOD
        """
        this = _coin.new_SoLOD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoLOD_initClass()

    initClass = staticmethod(initClass)
    range = _swig_property(_coin.SoLOD_range_get, _coin.SoLOD_range_set)
    center = _swig_property(_coin.SoLOD_center_get, _coin.SoLOD_center_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoLOD self, SoAction action)"""
        return _coin.SoLOD_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoLOD self, SoCallbackAction action)"""
        return _coin.SoLOD_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoLOD self, SoGLRenderAction action)"""
        return _coin.SoLOD_GLRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoLOD self, SoGLRenderAction action)"""
        return _coin.SoLOD_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoLOD self, SoGLRenderAction action)"""
        return _coin.SoLOD_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoLOD self, SoGLRenderAction action)"""
        return _coin.SoLOD_GLRenderOffPath(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoLOD self, SoRayPickAction action)"""
        return _coin.SoLOD_rayPick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoLOD self, SoGetBoundingBoxAction action)"""
        return _coin.SoLOD_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoLOD self, SoGetPrimitiveCountAction action)"""
        return _coin.SoLOD_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoLOD self, SoAudioRenderAction action)"""
        return _coin.SoLOD_audioRender(self, action)


    def notify(self, nl: 'SoNotList') -> "void":
        """notify(SoLOD self, SoNotList nl)"""
        return _coin.SoLOD_notify(self, nl)

SoLOD_swigregister = _coin.SoLOD_swigregister
SoLOD_swigregister(SoLOD)

def SoLOD_getClassTypeId() -> "SoType":
    """SoLOD_getClassTypeId() -> SoType"""
    return _coin.SoLOD_getClassTypeId()

def SoLOD_initClass() -> "void":
    """SoLOD_initClass()"""
    return _coin.SoLOD_initClass()

class SoPointSet(SoNonIndexedShape):
    """Proxy of C++ SoPointSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPointSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPointSet self) -> SoType"""
        return _coin.SoPointSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPointSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPointSet self) -> SoPointSet"""
        this = _coin.new_SoPointSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numPoints = _swig_property(_coin.SoPointSet_numPoints_get, _coin.SoPointSet_numPoints_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPointSet self, SoGLRenderAction action)"""
        return _coin.SoPointSet_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoPointSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoPointSet_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoPointSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoPointSet_getPrimitiveCount(self, action)

SoPointSet_swigregister = _coin.SoPointSet_swigregister
SoPointSet_swigregister(SoPointSet)

def SoPointSet_getClassTypeId() -> "SoType":
    """SoPointSet_getClassTypeId() -> SoType"""
    return _coin.SoPointSet_getClassTypeId()

def SoPointSet_initClass() -> "void":
    """SoPointSet_initClass()"""
    return _coin.SoPointSet_initClass()

class SoMarkerSet(SoPointSet):
    """Proxy of C++ SoMarkerSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMarkerSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMarkerSet self) -> SoType"""
        return _coin.SoMarkerSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMarkerSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMarkerSet self) -> SoMarkerSet"""
        this = _coin.new_SoMarkerSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NONE = _coin.SoMarkerSet_NONE
    CROSS_5_5 = _coin.SoMarkerSet_CROSS_5_5
    PLUS_5_5 = _coin.SoMarkerSet_PLUS_5_5
    MINUS_5_5 = _coin.SoMarkerSet_MINUS_5_5
    SLASH_5_5 = _coin.SoMarkerSet_SLASH_5_5
    BACKSLASH_5_5 = _coin.SoMarkerSet_BACKSLASH_5_5
    BAR_5_5 = _coin.SoMarkerSet_BAR_5_5
    STAR_5_5 = _coin.SoMarkerSet_STAR_5_5
    Y_5_5 = _coin.SoMarkerSet_Y_5_5
    LIGHTNING_5_5 = _coin.SoMarkerSet_LIGHTNING_5_5
    WELL_5_5 = _coin.SoMarkerSet_WELL_5_5
    CIRCLE_LINE_5_5 = _coin.SoMarkerSet_CIRCLE_LINE_5_5
    SQUARE_LINE_5_5 = _coin.SoMarkerSet_SQUARE_LINE_5_5
    DIAMOND_LINE_5_5 = _coin.SoMarkerSet_DIAMOND_LINE_5_5
    TRIANGLE_LINE_5_5 = _coin.SoMarkerSet_TRIANGLE_LINE_5_5
    RHOMBUS_LINE_5_5 = _coin.SoMarkerSet_RHOMBUS_LINE_5_5
    HOURGLASS_LINE_5_5 = _coin.SoMarkerSet_HOURGLASS_LINE_5_5
    SATELLITE_LINE_5_5 = _coin.SoMarkerSet_SATELLITE_LINE_5_5
    PINE_TREE_LINE_5_5 = _coin.SoMarkerSet_PINE_TREE_LINE_5_5
    CAUTION_LINE_5_5 = _coin.SoMarkerSet_CAUTION_LINE_5_5
    SHIP_LINE_5_5 = _coin.SoMarkerSet_SHIP_LINE_5_5
    CIRCLE_FILLED_5_5 = _coin.SoMarkerSet_CIRCLE_FILLED_5_5
    SQUARE_FILLED_5_5 = _coin.SoMarkerSet_SQUARE_FILLED_5_5
    DIAMOND_FILLED_5_5 = _coin.SoMarkerSet_DIAMOND_FILLED_5_5
    TRIANGLE_FILLED_5_5 = _coin.SoMarkerSet_TRIANGLE_FILLED_5_5
    RHOMBUS_FILLED_5_5 = _coin.SoMarkerSet_RHOMBUS_FILLED_5_5
    HOURGLASS_FILLED_5_5 = _coin.SoMarkerSet_HOURGLASS_FILLED_5_5
    SATELLITE_FILLED_5_5 = _coin.SoMarkerSet_SATELLITE_FILLED_5_5
    PINE_TREE_FILLED_5_5 = _coin.SoMarkerSet_PINE_TREE_FILLED_5_5
    CAUTION_FILLED_5_5 = _coin.SoMarkerSet_CAUTION_FILLED_5_5
    SHIP_FILLED_5_5 = _coin.SoMarkerSet_SHIP_FILLED_5_5
    CROSS_7_7 = _coin.SoMarkerSet_CROSS_7_7
    PLUS_7_7 = _coin.SoMarkerSet_PLUS_7_7
    MINUS_7_7 = _coin.SoMarkerSet_MINUS_7_7
    SLASH_7_7 = _coin.SoMarkerSet_SLASH_7_7
    BACKSLASH_7_7 = _coin.SoMarkerSet_BACKSLASH_7_7
    BAR_7_7 = _coin.SoMarkerSet_BAR_7_7
    STAR_7_7 = _coin.SoMarkerSet_STAR_7_7
    Y_7_7 = _coin.SoMarkerSet_Y_7_7
    LIGHTNING_7_7 = _coin.SoMarkerSet_LIGHTNING_7_7
    WELL_7_7 = _coin.SoMarkerSet_WELL_7_7
    CIRCLE_LINE_7_7 = _coin.SoMarkerSet_CIRCLE_LINE_7_7
    SQUARE_LINE_7_7 = _coin.SoMarkerSet_SQUARE_LINE_7_7
    DIAMOND_LINE_7_7 = _coin.SoMarkerSet_DIAMOND_LINE_7_7
    TRIANGLE_LINE_7_7 = _coin.SoMarkerSet_TRIANGLE_LINE_7_7
    RHOMBUS_LINE_7_7 = _coin.SoMarkerSet_RHOMBUS_LINE_7_7
    HOURGLASS_LINE_7_7 = _coin.SoMarkerSet_HOURGLASS_LINE_7_7
    SATELLITE_LINE_7_7 = _coin.SoMarkerSet_SATELLITE_LINE_7_7
    PINE_TREE_LINE_7_7 = _coin.SoMarkerSet_PINE_TREE_LINE_7_7
    CAUTION_LINE_7_7 = _coin.SoMarkerSet_CAUTION_LINE_7_7
    SHIP_LINE_7_7 = _coin.SoMarkerSet_SHIP_LINE_7_7
    CIRCLE_FILLED_7_7 = _coin.SoMarkerSet_CIRCLE_FILLED_7_7
    SQUARE_FILLED_7_7 = _coin.SoMarkerSet_SQUARE_FILLED_7_7
    DIAMOND_FILLED_7_7 = _coin.SoMarkerSet_DIAMOND_FILLED_7_7
    TRIANGLE_FILLED_7_7 = _coin.SoMarkerSet_TRIANGLE_FILLED_7_7
    RHOMBUS_FILLED_7_7 = _coin.SoMarkerSet_RHOMBUS_FILLED_7_7
    HOURGLASS_FILLED_7_7 = _coin.SoMarkerSet_HOURGLASS_FILLED_7_7
    SATELLITE_FILLED_7_7 = _coin.SoMarkerSet_SATELLITE_FILLED_7_7
    PINE_TREE_FILLED_7_7 = _coin.SoMarkerSet_PINE_TREE_FILLED_7_7
    CAUTION_FILLED_7_7 = _coin.SoMarkerSet_CAUTION_FILLED_7_7
    SHIP_FILLED_7_7 = _coin.SoMarkerSet_SHIP_FILLED_7_7
    CROSS_9_9 = _coin.SoMarkerSet_CROSS_9_9
    PLUS_9_9 = _coin.SoMarkerSet_PLUS_9_9
    MINUS_9_9 = _coin.SoMarkerSet_MINUS_9_9
    SLASH_9_9 = _coin.SoMarkerSet_SLASH_9_9
    BACKSLASH_9_9 = _coin.SoMarkerSet_BACKSLASH_9_9
    BAR_9_9 = _coin.SoMarkerSet_BAR_9_9
    STAR_9_9 = _coin.SoMarkerSet_STAR_9_9
    Y_9_9 = _coin.SoMarkerSet_Y_9_9
    LIGHTNING_9_9 = _coin.SoMarkerSet_LIGHTNING_9_9
    WELL_9_9 = _coin.SoMarkerSet_WELL_9_9
    CIRCLE_LINE_9_9 = _coin.SoMarkerSet_CIRCLE_LINE_9_9
    SQUARE_LINE_9_9 = _coin.SoMarkerSet_SQUARE_LINE_9_9
    DIAMOND_LINE_9_9 = _coin.SoMarkerSet_DIAMOND_LINE_9_9
    TRIANGLE_LINE_9_9 = _coin.SoMarkerSet_TRIANGLE_LINE_9_9
    RHOMBUS_LINE_9_9 = _coin.SoMarkerSet_RHOMBUS_LINE_9_9
    HOURGLASS_LINE_9_9 = _coin.SoMarkerSet_HOURGLASS_LINE_9_9
    SATELLITE_LINE_9_9 = _coin.SoMarkerSet_SATELLITE_LINE_9_9
    PINE_TREE_LINE_9_9 = _coin.SoMarkerSet_PINE_TREE_LINE_9_9
    CAUTION_LINE_9_9 = _coin.SoMarkerSet_CAUTION_LINE_9_9
    SHIP_LINE_9_9 = _coin.SoMarkerSet_SHIP_LINE_9_9
    CIRCLE_FILLED_9_9 = _coin.SoMarkerSet_CIRCLE_FILLED_9_9
    SQUARE_FILLED_9_9 = _coin.SoMarkerSet_SQUARE_FILLED_9_9
    DIAMOND_FILLED_9_9 = _coin.SoMarkerSet_DIAMOND_FILLED_9_9
    TRIANGLE_FILLED_9_9 = _coin.SoMarkerSet_TRIANGLE_FILLED_9_9
    RHOMBUS_FILLED_9_9 = _coin.SoMarkerSet_RHOMBUS_FILLED_9_9
    HOURGLASS_FILLED_9_9 = _coin.SoMarkerSet_HOURGLASS_FILLED_9_9
    SATELLITE_FILLED_9_9 = _coin.SoMarkerSet_SATELLITE_FILLED_9_9
    PINE_TREE_FILLED_9_9 = _coin.SoMarkerSet_PINE_TREE_FILLED_9_9
    CAUTION_FILLED_9_9 = _coin.SoMarkerSet_CAUTION_FILLED_9_9
    SHIP_FILLED_9_9 = _coin.SoMarkerSet_SHIP_FILLED_9_9
    NUM_MARKERS = _coin.SoMarkerSet_NUM_MARKERS
    markerIndex = _swig_property(_coin.SoMarkerSet_markerIndex_get, _coin.SoMarkerSet_markerIndex_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoMarkerSet self, SoGLRenderAction action)"""
        return _coin.SoMarkerSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoMarkerSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoMarkerSet_getPrimitiveCount(self, action)


    def getNumDefinedMarkers() -> "int":
        """getNumDefinedMarkers() -> int"""
        return _coin.SoMarkerSet_getNumDefinedMarkers()

    getNumDefinedMarkers = staticmethod(getNumDefinedMarkers)

    def getMarker(idx: 'int', size: 'SbVec2s', bytes: 'unsigned char const *&', isLSBFirst: 'SbBool &') -> "SbBool":
        """getMarker(int idx, SbVec2s size, unsigned char const *& bytes, SbBool & isLSBFirst) -> SbBool"""
        return _coin.SoMarkerSet_getMarker(idx, size, bytes, isLSBFirst)

    getMarker = staticmethod(getMarker)

    def removeMarker(idx: 'int') -> "SbBool":
        """removeMarker(int idx) -> SbBool"""
        return _coin.SoMarkerSet_removeMarker(idx)

    removeMarker = staticmethod(removeMarker)

    def isMarkerBitSet(idx: 'int', bitNumber: 'int') -> "SbBool":
        """isMarkerBitSet(int idx, int bitNumber) -> SbBool"""
        return _coin.SoMarkerSet_isMarkerBitSet(idx, bitNumber)

    isMarkerBitSet = staticmethod(isMarkerBitSet)

    def addMarker(*args) -> "void":
        """
        addMarker(int idx, SbVec2s size, unsigned char const * bytes, SbBool isLSBFirst=1, SbBool isUpToDown=1)
        addMarker(int idx, SbVec2s size, unsigned char const * bytes, SbBool isLSBFirst=1)
        addMarker(int idx, SbVec2s size, unsigned char const * bytes)
        addMarker(int idx, SbVec2s size, PyObject * string, SbBool isLSBFirst=1, SbBool isUpToDown=1)
        addMarker(int idx, SbVec2s size, PyObject * string, SbBool isLSBFirst=1)
        addMarker(int idx, SbVec2s size, PyObject * string)
        """
        return _coin.SoMarkerSet_addMarker(*args)

    addMarker = staticmethod(addMarker)
SoMarkerSet_swigregister = _coin.SoMarkerSet_swigregister
SoMarkerSet_swigregister(SoMarkerSet)

def SoMarkerSet_getClassTypeId() -> "SoType":
    """SoMarkerSet_getClassTypeId() -> SoType"""
    return _coin.SoMarkerSet_getClassTypeId()

def SoMarkerSet_initClass() -> "void":
    """SoMarkerSet_initClass()"""
    return _coin.SoMarkerSet_initClass()

def SoMarkerSet_getNumDefinedMarkers() -> "int":
    """SoMarkerSet_getNumDefinedMarkers() -> int"""
    return _coin.SoMarkerSet_getNumDefinedMarkers()

def SoMarkerSet_getMarker(idx: 'int', size: 'SbVec2s', bytes: 'unsigned char const *&', isLSBFirst: 'SbBool &') -> "SbBool":
    """SoMarkerSet_getMarker(int idx, SbVec2s size, unsigned char const *& bytes, SbBool & isLSBFirst) -> SbBool"""
    return _coin.SoMarkerSet_getMarker(idx, size, bytes, isLSBFirst)

def SoMarkerSet_removeMarker(idx: 'int') -> "SbBool":
    """SoMarkerSet_removeMarker(int idx) -> SbBool"""
    return _coin.SoMarkerSet_removeMarker(idx)

def SoMarkerSet_isMarkerBitSet(idx: 'int', bitNumber: 'int') -> "SbBool":
    """SoMarkerSet_isMarkerBitSet(int idx, int bitNumber) -> SbBool"""
    return _coin.SoMarkerSet_isMarkerBitSet(idx, bitNumber)

def SoMarkerSet_addMarker(*args) -> "void":
    """
    addMarker(int idx, SbVec2s size, unsigned char const * bytes, SbBool isLSBFirst=1, SbBool isUpToDown=1)
    addMarker(int idx, SbVec2s size, unsigned char const * bytes, SbBool isLSBFirst=1)
    addMarker(int idx, SbVec2s size, unsigned char const * bytes)
    addMarker(int idx, SbVec2s size, PyObject * string, SbBool isLSBFirst=1, SbBool isUpToDown=1)
    addMarker(int idx, SbVec2s size, PyObject * string, SbBool isLSBFirst=1)
    SoMarkerSet_addMarker(int idx, SbVec2s size, PyObject * string)
    """
    return _coin.SoMarkerSet_addMarker(*args)

class SoMaterial(SoNode):
    """Proxy of C++ SoMaterial class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMaterial_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMaterial self) -> SoType"""
        return _coin.SoMaterial_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMaterial_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMaterial self) -> SoMaterial"""
        this = _coin.new_SoMaterial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    ambientColor = _swig_property(_coin.SoMaterial_ambientColor_get, _coin.SoMaterial_ambientColor_set)
    diffuseColor = _swig_property(_coin.SoMaterial_diffuseColor_get, _coin.SoMaterial_diffuseColor_set)
    specularColor = _swig_property(_coin.SoMaterial_specularColor_get, _coin.SoMaterial_specularColor_set)
    emissiveColor = _swig_property(_coin.SoMaterial_emissiveColor_get, _coin.SoMaterial_emissiveColor_set)
    shininess = _swig_property(_coin.SoMaterial_shininess_get, _coin.SoMaterial_shininess_set)
    transparency = _swig_property(_coin.SoMaterial_transparency_get, _coin.SoMaterial_transparency_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoMaterial self, SoAction action)"""
        return _coin.SoMaterial_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoMaterial self, SoGLRenderAction action)"""
        return _coin.SoMaterial_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoMaterial self, SoCallbackAction action)"""
        return _coin.SoMaterial_callback(self, action)

SoMaterial_swigregister = _coin.SoMaterial_swigregister
SoMaterial_swigregister(SoMaterial)

def SoMaterial_getClassTypeId() -> "SoType":
    """SoMaterial_getClassTypeId() -> SoType"""
    return _coin.SoMaterial_getClassTypeId()

def SoMaterial_initClass() -> "void":
    """SoMaterial_initClass()"""
    return _coin.SoMaterial_initClass()

class SoMatrixTransform(SoTransformation):
    """Proxy of C++ SoMatrixTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMatrixTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMatrixTransform self) -> SoType"""
        return _coin.SoMatrixTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMatrixTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMatrixTransform self) -> SoMatrixTransform"""
        this = _coin.new_SoMatrixTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    matrix = _swig_property(_coin.SoMatrixTransform_matrix_get, _coin.SoMatrixTransform_matrix_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoMatrixTransform self, SoAction action)"""
        return _coin.SoMatrixTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoMatrixTransform self, SoCallbackAction action)"""
        return _coin.SoMatrixTransform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoMatrixTransform self, SoGLRenderAction action)"""
        return _coin.SoMatrixTransform_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoMatrixTransform self, SoGetBoundingBoxAction action)"""
        return _coin.SoMatrixTransform_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoMatrixTransform self, SoGetMatrixAction action)"""
        return _coin.SoMatrixTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoMatrixTransform self, SoPickAction action)"""
        return _coin.SoMatrixTransform_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoMatrixTransform self, SoGetPrimitiveCountAction action)"""
        return _coin.SoMatrixTransform_getPrimitiveCount(self, action)

SoMatrixTransform_swigregister = _coin.SoMatrixTransform_swigregister
SoMatrixTransform_swigregister(SoMatrixTransform)

def SoMatrixTransform_getClassTypeId() -> "SoType":
    """SoMatrixTransform_getClassTypeId() -> SoType"""
    return _coin.SoMatrixTransform_getClassTypeId()

def SoMatrixTransform_initClass() -> "void":
    """SoMatrixTransform_initClass()"""
    return _coin.SoMatrixTransform_initClass()

class SoMultipleCopy(SoGroup):
    """Proxy of C++ SoMultipleCopy class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoMultipleCopy_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoMultipleCopy self) -> SoType"""
        return _coin.SoMultipleCopy_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoMultipleCopy_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoMultipleCopy self) -> SoMultipleCopy"""
        this = _coin.new_SoMultipleCopy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    matrix = _swig_property(_coin.SoMultipleCopy_matrix_get, _coin.SoMultipleCopy_matrix_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoMultipleCopy self) -> SbBool"""
        return _coin.SoMultipleCopy_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoMultipleCopy self, SoAction action)"""
        return _coin.SoMultipleCopy_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoMultipleCopy self, SoCallbackAction action)"""
        return _coin.SoMultipleCopy_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoMultipleCopy self, SoGLRenderAction action)"""
        return _coin.SoMultipleCopy_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoMultipleCopy self, SoPickAction action)"""
        return _coin.SoMultipleCopy_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoMultipleCopy self, SoGetBoundingBoxAction action)"""
        return _coin.SoMultipleCopy_getBoundingBox(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoMultipleCopy self, SoHandleEventAction action)"""
        return _coin.SoMultipleCopy_handleEvent(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoMultipleCopy self, SoGetMatrixAction action)"""
        return _coin.SoMultipleCopy_getMatrix(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoMultipleCopy self, SoSearchAction action)"""
        return _coin.SoMultipleCopy_search(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoMultipleCopy self, SoGetPrimitiveCountAction action)"""
        return _coin.SoMultipleCopy_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoMultipleCopy self, SoAudioRenderAction action)"""
        return _coin.SoMultipleCopy_audioRender(self, action)

SoMultipleCopy_swigregister = _coin.SoMultipleCopy_swigregister
SoMultipleCopy_swigregister(SoMultipleCopy)

def SoMultipleCopy_getClassTypeId() -> "SoType":
    """SoMultipleCopy_getClassTypeId() -> SoType"""
    return _coin.SoMultipleCopy_getClassTypeId()

def SoMultipleCopy_initClass() -> "void":
    """SoMultipleCopy_initClass()"""
    return _coin.SoMultipleCopy_initClass()

class SoPerspectiveCamera(SoCamera):
    """Proxy of C++ SoPerspectiveCamera class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPerspectiveCamera_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPerspectiveCamera self) -> SoType"""
        return _coin.SoPerspectiveCamera_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPerspectiveCamera_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPerspectiveCamera self) -> SoPerspectiveCamera"""
        this = _coin.new_SoPerspectiveCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    heightAngle = _swig_property(_coin.SoPerspectiveCamera_heightAngle_get, _coin.SoPerspectiveCamera_heightAngle_set)

    def scaleHeight(self, scalefactor: 'float') -> "void":
        """scaleHeight(SoPerspectiveCamera self, float scalefactor)"""
        return _coin.SoPerspectiveCamera_scaleHeight(self, scalefactor)


    def getViewVolume(self, useaspectratio: 'float'=0.0) -> "SbViewVolume":
        """
        getViewVolume(SoPerspectiveCamera self, float useaspectratio=0.0) -> SbViewVolume
        getViewVolume(SoPerspectiveCamera self) -> SbViewVolume
        """
        return _coin.SoPerspectiveCamera_getViewVolume(self, useaspectratio)


    def viewBoundingBox(self, box: 'SbBox3f', aspect: 'float', slack: 'float') -> "void":
        """viewBoundingBox(SoPerspectiveCamera self, SbBox3f box, float aspect, float slack)"""
        return _coin.SoPerspectiveCamera_viewBoundingBox(self, box, aspect, slack)

SoPerspectiveCamera_swigregister = _coin.SoPerspectiveCamera_swigregister
SoPerspectiveCamera_swigregister(SoPerspectiveCamera)

def SoPerspectiveCamera_getClassTypeId() -> "SoType":
    """SoPerspectiveCamera_getClassTypeId() -> SoType"""
    return _coin.SoPerspectiveCamera_getClassTypeId()

def SoPerspectiveCamera_initClass() -> "void":
    """SoPerspectiveCamera_initClass()"""
    return _coin.SoPerspectiveCamera_initClass()

class SoReversePerspectiveCamera(SoPerspectiveCamera):
    """Proxy of C++ SoReversePerspectiveCamera class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoReversePerspectiveCamera_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoReversePerspectiveCamera self) -> SoType"""
        return _coin.SoReversePerspectiveCamera_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoReversePerspectiveCamera_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoReversePerspectiveCamera self) -> SoReversePerspectiveCamera"""
        this = _coin.new_SoReversePerspectiveCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoReversePerspectiveCamera_swigregister = _coin.SoReversePerspectiveCamera_swigregister
SoReversePerspectiveCamera_swigregister(SoReversePerspectiveCamera)

def SoReversePerspectiveCamera_getClassTypeId() -> "SoType":
    """SoReversePerspectiveCamera_getClassTypeId() -> SoType"""
    return _coin.SoReversePerspectiveCamera_getClassTypeId()

def SoReversePerspectiveCamera_initClass() -> "void":
    """SoReversePerspectiveCamera_initClass()"""
    return _coin.SoReversePerspectiveCamera_initClass()

class SoOrthographicCamera(SoCamera):
    """Proxy of C++ SoOrthographicCamera class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoOrthographicCamera_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoOrthographicCamera self) -> SoType"""
        return _coin.SoOrthographicCamera_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoOrthographicCamera_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoOrthographicCamera self) -> SoOrthographicCamera"""
        this = _coin.new_SoOrthographicCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    height = _swig_property(_coin.SoOrthographicCamera_height_get, _coin.SoOrthographicCamera_height_set)

    def scaleHeight(self, scalefactor: 'float') -> "void":
        """scaleHeight(SoOrthographicCamera self, float scalefactor)"""
        return _coin.SoOrthographicCamera_scaleHeight(self, scalefactor)


    def getViewVolume(self, useaspectratio: 'float'=0.0) -> "SbViewVolume":
        """
        getViewVolume(SoOrthographicCamera self, float useaspectratio=0.0) -> SbViewVolume
        getViewVolume(SoOrthographicCamera self) -> SbViewVolume
        """
        return _coin.SoOrthographicCamera_getViewVolume(self, useaspectratio)


    def viewBoundingBox(self, box: 'SbBox3f', aspect: 'float', slack: 'float') -> "void":
        """viewBoundingBox(SoOrthographicCamera self, SbBox3f box, float aspect, float slack)"""
        return _coin.SoOrthographicCamera_viewBoundingBox(self, box, aspect, slack)

SoOrthographicCamera_swigregister = _coin.SoOrthographicCamera_swigregister
SoOrthographicCamera_swigregister(SoOrthographicCamera)

def SoOrthographicCamera_getClassTypeId() -> "SoType":
    """SoOrthographicCamera_getClassTypeId() -> SoType"""
    return _coin.SoOrthographicCamera_getClassTypeId()

def SoOrthographicCamera_initClass() -> "void":
    """SoOrthographicCamera_initClass()"""
    return _coin.SoOrthographicCamera_initClass()

class SoFrustumCamera(SoCamera):
    """Proxy of C++ SoFrustumCamera class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFrustumCamera_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFrustumCamera self) -> SoType"""
        return _coin.SoFrustumCamera_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFrustumCamera_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFrustumCamera self) -> SoFrustumCamera"""
        this = _coin.new_SoFrustumCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    left = _swig_property(_coin.SoFrustumCamera_left_get, _coin.SoFrustumCamera_left_set)
    right = _swig_property(_coin.SoFrustumCamera_right_get, _coin.SoFrustumCamera_right_set)
    top = _swig_property(_coin.SoFrustumCamera_top_get, _coin.SoFrustumCamera_top_set)
    bottom = _swig_property(_coin.SoFrustumCamera_bottom_get, _coin.SoFrustumCamera_bottom_set)

    def scaleHeight(self, scalefactor: 'float') -> "void":
        """scaleHeight(SoFrustumCamera self, float scalefactor)"""
        return _coin.SoFrustumCamera_scaleHeight(self, scalefactor)


    def getViewVolume(self, useaspectratio: 'float'=0.0) -> "SbViewVolume":
        """
        getViewVolume(SoFrustumCamera self, float useaspectratio=0.0) -> SbViewVolume
        getViewVolume(SoFrustumCamera self) -> SbViewVolume
        """
        return _coin.SoFrustumCamera_getViewVolume(self, useaspectratio)

SoFrustumCamera_swigregister = _coin.SoFrustumCamera_swigregister
SoFrustumCamera_swigregister(SoFrustumCamera)

def SoFrustumCamera_getClassTypeId() -> "SoType":
    """SoFrustumCamera_getClassTypeId() -> SoType"""
    return _coin.SoFrustumCamera_getClassTypeId()

def SoFrustumCamera_initClass() -> "void":
    """SoFrustumCamera_initClass()"""
    return _coin.SoFrustumCamera_initClass()

class SoQuadMesh(SoNonIndexedShape):
    """Proxy of C++ SoQuadMesh class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoQuadMesh_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoQuadMesh self) -> SoType"""
        return _coin.SoQuadMesh_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoQuadMesh_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoQuadMesh self) -> SoQuadMesh"""
        this = _coin.new_SoQuadMesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    verticesPerColumn = _swig_property(_coin.SoQuadMesh_verticesPerColumn_get, _coin.SoQuadMesh_verticesPerColumn_set)
    verticesPerRow = _swig_property(_coin.SoQuadMesh_verticesPerRow_get, _coin.SoQuadMesh_verticesPerRow_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoQuadMesh self, SoGLRenderAction action)"""
        return _coin.SoQuadMesh_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoQuadMesh self, SoGetPrimitiveCountAction action)"""
        return _coin.SoQuadMesh_getPrimitiveCount(self, action)


    def generateDefaultNormals(self, state: 'SoState', nb: 'SoNormalBundle') -> "SbBool":
        """generateDefaultNormals(SoQuadMesh self, SoState state, SoNormalBundle nb) -> SbBool"""
        return _coin.SoQuadMesh_generateDefaultNormals(self, state, nb)

SoQuadMesh_swigregister = _coin.SoQuadMesh_swigregister
SoQuadMesh_swigregister(SoQuadMesh)

def SoQuadMesh_getClassTypeId() -> "SoType":
    """SoQuadMesh_getClassTypeId() -> SoType"""
    return _coin.SoQuadMesh_getClassTypeId()

def SoQuadMesh_initClass() -> "void":
    """SoQuadMesh_initClass()"""
    return _coin.SoQuadMesh_initClass()

class SoTriangleStripSet(SoNonIndexedShape):
    """Proxy of C++ SoTriangleStripSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTriangleStripSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTriangleStripSet self) -> SoType"""
        return _coin.SoTriangleStripSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTriangleStripSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTriangleStripSet self) -> SoTriangleStripSet"""
        this = _coin.new_SoTriangleStripSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numVertices = _swig_property(_coin.SoTriangleStripSet_numVertices_get, _coin.SoTriangleStripSet_numVertices_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTriangleStripSet self, SoGLRenderAction action)"""
        return _coin.SoTriangleStripSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoTriangleStripSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoTriangleStripSet_getPrimitiveCount(self, action)


    def generateDefaultNormals(self, state: 'SoState', nb: 'SoNormalBundle') -> "SbBool":
        """generateDefaultNormals(SoTriangleStripSet self, SoState state, SoNormalBundle nb) -> SbBool"""
        return _coin.SoTriangleStripSet_generateDefaultNormals(self, state, nb)

SoTriangleStripSet_swigregister = _coin.SoTriangleStripSet_swigregister
SoTriangleStripSet_swigregister(SoTriangleStripSet)

def SoTriangleStripSet_getClassTypeId() -> "SoType":
    """SoTriangleStripSet_getClassTypeId() -> SoType"""
    return _coin.SoTriangleStripSet_getClassTypeId()

def SoTriangleStripSet_initClass() -> "void":
    """SoTriangleStripSet_initClass()"""
    return _coin.SoTriangleStripSet_initClass()

class SoIndexedPointSet(SoIndexedShape):
    """Proxy of C++ SoIndexedPointSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedPointSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedPointSet self) -> SoType"""
        return _coin.SoIndexedPointSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedPointSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedPointSet self) -> SoIndexedPointSet"""
        this = _coin.new_SoIndexedPointSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedPointSet self, SoGLRenderAction action)"""
        return _coin.SoIndexedPointSet_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoIndexedPointSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoIndexedPointSet_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoIndexedPointSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoIndexedPointSet_getPrimitiveCount(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoIndexedPointSet self, SoNotList list)"""
        return _coin.SoIndexedPointSet_notify(self, list)

SoIndexedPointSet_swigregister = _coin.SoIndexedPointSet_swigregister
SoIndexedPointSet_swigregister(SoIndexedPointSet)

def SoIndexedPointSet_getClassTypeId() -> "SoType":
    """SoIndexedPointSet_getClassTypeId() -> SoType"""
    return _coin.SoIndexedPointSet_getClassTypeId()

def SoIndexedPointSet_initClass() -> "void":
    """SoIndexedPointSet_initClass()"""
    return _coin.SoIndexedPointSet_initClass()

class SoIndexedMarkerSet(SoIndexedPointSet):
    """Proxy of C++ SoIndexedMarkerSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoIndexedMarkerSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoIndexedMarkerSet self) -> SoType"""
        return _coin.SoIndexedMarkerSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoIndexedMarkerSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoIndexedMarkerSet self) -> SoIndexedMarkerSet"""
        this = _coin.new_SoIndexedMarkerSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    markerIndex = _swig_property(_coin.SoIndexedMarkerSet_markerIndex_get, _coin.SoIndexedMarkerSet_markerIndex_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoIndexedMarkerSet self, SoGLRenderAction action)"""
        return _coin.SoIndexedMarkerSet_GLRender(self, action)

SoIndexedMarkerSet_swigregister = _coin.SoIndexedMarkerSet_swigregister
SoIndexedMarkerSet_swigregister(SoIndexedMarkerSet)

def SoIndexedMarkerSet_getClassTypeId() -> "SoType":
    """SoIndexedMarkerSet_getClassTypeId() -> SoType"""
    return _coin.SoIndexedMarkerSet_getClassTypeId()

def SoIndexedMarkerSet_initClass() -> "void":
    """SoIndexedMarkerSet_initClass()"""
    return _coin.SoIndexedMarkerSet_initClass()

class SoNurbsCurve(SoShape):
    """Proxy of C++ SoNurbsCurve class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNurbsCurve_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNurbsCurve self) -> SoType"""
        return _coin.SoNurbsCurve_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNurbsCurve_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNurbsCurve self) -> SoNurbsCurve"""
        this = _coin.new_SoNurbsCurve()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numControlPoints = _swig_property(_coin.SoNurbsCurve_numControlPoints_get, _coin.SoNurbsCurve_numControlPoints_set)
    knotVector = _swig_property(_coin.SoNurbsCurve_knotVector_get, _coin.SoNurbsCurve_knotVector_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNurbsCurve self, SoGLRenderAction action)"""
        return _coin.SoNurbsCurve_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoNurbsCurve self, SoRayPickAction action)"""
        return _coin.SoNurbsCurve_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNurbsCurve self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNurbsCurve_getPrimitiveCount(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoNurbsCurve self, SoGetBoundingBoxAction action)"""
        return _coin.SoNurbsCurve_getBoundingBox(self, action)


    def sendPrimitive(self, arg2: 'SoAction', arg3: 'SoPrimitiveVertex') -> "void":
        """sendPrimitive(SoNurbsCurve self, SoAction arg2, SoPrimitiveVertex arg3)"""
        return _coin.SoNurbsCurve_sendPrimitive(self, arg2, arg3)

SoNurbsCurve_swigregister = _coin.SoNurbsCurve_swigregister
SoNurbsCurve_swigregister(SoNurbsCurve)

def SoNurbsCurve_getClassTypeId() -> "SoType":
    """SoNurbsCurve_getClassTypeId() -> SoType"""
    return _coin.SoNurbsCurve_getClassTypeId()

def SoNurbsCurve_initClass() -> "void":
    """SoNurbsCurve_initClass()"""
    return _coin.SoNurbsCurve_initClass()

class SoNurbsSurface(SoShape):
    """Proxy of C++ SoNurbsSurface class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNurbsSurface_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNurbsSurface self) -> SoType"""
        return _coin.SoNurbsSurface_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNurbsSurface_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNurbsSurface self) -> SoNurbsSurface"""
        this = _coin.new_SoNurbsSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numUControlPoints = _swig_property(_coin.SoNurbsSurface_numUControlPoints_get, _coin.SoNurbsSurface_numUControlPoints_set)
    numVControlPoints = _swig_property(_coin.SoNurbsSurface_numVControlPoints_get, _coin.SoNurbsSurface_numVControlPoints_set)
    numSControlPoints = _swig_property(_coin.SoNurbsSurface_numSControlPoints_get, _coin.SoNurbsSurface_numSControlPoints_set)
    numTControlPoints = _swig_property(_coin.SoNurbsSurface_numTControlPoints_get, _coin.SoNurbsSurface_numTControlPoints_set)
    uKnotVector = _swig_property(_coin.SoNurbsSurface_uKnotVector_get, _coin.SoNurbsSurface_uKnotVector_set)
    vKnotVector = _swig_property(_coin.SoNurbsSurface_vKnotVector_get, _coin.SoNurbsSurface_vKnotVector_set)
    sKnotVector = _swig_property(_coin.SoNurbsSurface_sKnotVector_get, _coin.SoNurbsSurface_sKnotVector_set)
    tKnotVector = _swig_property(_coin.SoNurbsSurface_tKnotVector_get, _coin.SoNurbsSurface_tKnotVector_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNurbsSurface self, SoGLRenderAction action)"""
        return _coin.SoNurbsSurface_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoNurbsSurface self, SoRayPickAction action)"""
        return _coin.SoNurbsSurface_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNurbsSurface self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNurbsSurface_getPrimitiveCount(self, action)


    def sendPrimitive(self, arg2: 'SoAction', arg3: 'SoPrimitiveVertex') -> "void":
        """sendPrimitive(SoNurbsSurface self, SoAction arg2, SoPrimitiveVertex arg3)"""
        return _coin.SoNurbsSurface_sendPrimitive(self, arg2, arg3)

SoNurbsSurface_swigregister = _coin.SoNurbsSurface_swigregister
SoNurbsSurface_swigregister(SoNurbsSurface)

def SoNurbsSurface_getClassTypeId() -> "SoType":
    """SoNurbsSurface_getClassTypeId() -> SoType"""
    return _coin.SoNurbsSurface_getClassTypeId()

def SoNurbsSurface_initClass() -> "void":
    """SoNurbsSurface_initClass()"""
    return _coin.SoNurbsSurface_initClass()

class SoSphere(SoShape):
    """Proxy of C++ SoSphere class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSphere_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSphere self) -> SoType"""
        return _coin.SoSphere_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSphere_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSphere self) -> SoSphere"""
        this = _coin.new_SoSphere()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    radius = _swig_property(_coin.SoSphere_radius_get, _coin.SoSphere_radius_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSphere self, SoGLRenderAction action)"""
        return _coin.SoSphere_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoSphere self, SoRayPickAction action)"""
        return _coin.SoSphere_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoSphere self, SoGetPrimitiveCountAction action)"""
        return _coin.SoSphere_getPrimitiveCount(self, action)

SoSphere_swigregister = _coin.SoSphere_swigregister
SoSphere_swigregister(SoSphere)

def SoSphere_getClassTypeId() -> "SoType":
    """SoSphere_getClassTypeId() -> SoType"""
    return _coin.SoSphere_getClassTypeId()

def SoSphere_initClass() -> "void":
    """SoSphere_initClass()"""
    return _coin.SoSphere_initClass()

class SoText2(SoShape):
    """Proxy of C++ SoText2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoText2_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoText2 self) -> SoType"""
        return _coin.SoText2_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoText2_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoText2 self) -> SoText2"""
        this = _coin.new_SoText2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    LEFT = _coin.SoText2_LEFT
    RIGHT = _coin.SoText2_RIGHT
    CENTER = _coin.SoText2_CENTER
    string = _swig_property(_coin.SoText2_string_get, _coin.SoText2_string_set)
    spacing = _swig_property(_coin.SoText2_spacing_get, _coin.SoText2_spacing_set)
    justification = _swig_property(_coin.SoText2_justification_get, _coin.SoText2_justification_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoText2 self, SoGLRenderAction action)"""
        return _coin.SoText2_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoText2 self, SoRayPickAction action)"""
        return _coin.SoText2_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoText2 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoText2_getPrimitiveCount(self, action)

SoText2_swigregister = _coin.SoText2_swigregister
SoText2_swigregister(SoText2)

def SoText2_getClassTypeId() -> "SoType":
    """SoText2_getClassTypeId() -> SoType"""
    return _coin.SoText2_getClassTypeId()

def SoText2_initClass() -> "void":
    """SoText2_initClass()"""
    return _coin.SoText2_initClass()

class SoText3(SoShape):
    """Proxy of C++ SoText3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoText3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoText3 self) -> SoType"""
        return _coin.SoText3_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoText3_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoText3 self) -> SoText3"""
        this = _coin.new_SoText3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    FRONT = _coin.SoText3_FRONT
    SIDES = _coin.SoText3_SIDES
    BACK = _coin.SoText3_BACK
    ALL = _coin.SoText3_ALL
    LEFT = _coin.SoText3_LEFT
    RIGHT = _coin.SoText3_RIGHT
    CENTER = _coin.SoText3_CENTER
    string = _swig_property(_coin.SoText3_string_get, _coin.SoText3_string_set)
    spacing = _swig_property(_coin.SoText3_spacing_get, _coin.SoText3_spacing_set)
    justification = _swig_property(_coin.SoText3_justification_get, _coin.SoText3_justification_set)
    parts = _swig_property(_coin.SoText3_parts_get, _coin.SoText3_parts_set)

    def getCharacterBounds(self, state: 'SoState', stringindex: 'int', charindex: 'int') -> "SbBox3f":
        """getCharacterBounds(SoText3 self, SoState state, int stringindex, int charindex) -> SbBox3f"""
        return _coin.SoText3_getCharacterBounds(self, state, stringindex, charindex)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoText3 self, SoGLRenderAction action)"""
        return _coin.SoText3_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoText3 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoText3_getPrimitiveCount(self, action)

SoText3_swigregister = _coin.SoText3_swigregister
SoText3_swigregister(SoText3)

def SoText3_getClassTypeId() -> "SoType":
    """SoText3_getClassTypeId() -> SoType"""
    return _coin.SoText3_getClassTypeId()

def SoText3_initClass() -> "void":
    """SoText3_initClass()"""
    return _coin.SoText3_initClass()

class SoWWWAnchor(SoLocateHighlight):
    """Proxy of C++ SoWWWAnchor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoWWWAnchor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoWWWAnchor self) -> SoType"""
        return _coin.SoWWWAnchor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoWWWAnchor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoWWWAnchor self) -> SoWWWAnchor"""
        this = _coin.new_SoWWWAnchor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NONE = _coin.SoWWWAnchor_NONE
    POINT = _coin.SoWWWAnchor_POINT
    name = _swig_property(_coin.SoWWWAnchor_name_get, _coin.SoWWWAnchor_name_set)
    description = _swig_property(_coin.SoWWWAnchor_description_get, _coin.SoWWWAnchor_description_set)
    map = _swig_property(_coin.SoWWWAnchor_map_get, _coin.SoWWWAnchor_map_set)

    def setFullURLName(self, url: 'SbString') -> "void":
        """setFullURLName(SoWWWAnchor self, SbString url)"""
        return _coin.SoWWWAnchor_setFullURLName(self, url)


    def getFullURLName(self) -> "SbString const &":
        """getFullURLName(SoWWWAnchor self) -> SbString"""
        return _coin.SoWWWAnchor_getFullURLName(self)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoWWWAnchor self, SoHandleEventAction action)"""
        return _coin.SoWWWAnchor_handleEvent(self, action)


    def setFetchURLCallBack(f: 'SoWWWAnchorCB *', userData: 'void *') -> "void":
        """setFetchURLCallBack(SoWWWAnchorCB * f, void * userData)"""
        return _coin.SoWWWAnchor_setFetchURLCallBack(f, userData)

    setFetchURLCallBack = staticmethod(setFetchURLCallBack)

    def setHighlightURLCallBack(f: 'SoWWWAnchorCB *', userData: 'void *') -> "void":
        """setHighlightURLCallBack(SoWWWAnchorCB * f, void * userData)"""
        return _coin.SoWWWAnchor_setHighlightURLCallBack(f, userData)

    setHighlightURLCallBack = staticmethod(setHighlightURLCallBack)
SoWWWAnchor_swigregister = _coin.SoWWWAnchor_swigregister
SoWWWAnchor_swigregister(SoWWWAnchor)

def SoWWWAnchor_getClassTypeId() -> "SoType":
    """SoWWWAnchor_getClassTypeId() -> SoType"""
    return _coin.SoWWWAnchor_getClassTypeId()

def SoWWWAnchor_initClass() -> "void":
    """SoWWWAnchor_initClass()"""
    return _coin.SoWWWAnchor_initClass()

def SoWWWAnchor_setFetchURLCallBack(f: 'SoWWWAnchorCB *', userData: 'void *') -> "void":
    """SoWWWAnchor_setFetchURLCallBack(SoWWWAnchorCB * f, void * userData)"""
    return _coin.SoWWWAnchor_setFetchURLCallBack(f, userData)

def SoWWWAnchor_setHighlightURLCallBack(f: 'SoWWWAnchorCB *', userData: 'void *') -> "void":
    """SoWWWAnchor_setHighlightURLCallBack(SoWWWAnchorCB * f, void * userData)"""
    return _coin.SoWWWAnchor_setHighlightURLCallBack(f, userData)

class SoPathSwitch(SoGroup):
    """Proxy of C++ SoPathSwitch class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPathSwitch_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPathSwitch self) -> SoType"""
        return _coin.SoPathSwitch_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPathSwitch_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoPathSwitch self) -> SoPathSwitch
        __init__(SoPathSwitch self, int numchildren) -> SoPathSwitch
        """
        this = _coin.new_SoPathSwitch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    path = _swig_property(_coin.SoPathSwitch_path_get, _coin.SoPathSwitch_path_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoPathSwitch self, SoAction action)"""
        return _coin.SoPathSwitch_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPathSwitch self, SoGLRenderAction action)"""
        return _coin.SoPathSwitch_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoPathSwitch self, SoPickAction action)"""
        return _coin.SoPathSwitch_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoPathSwitch self, SoGetBoundingBoxAction action)"""
        return _coin.SoPathSwitch_getBoundingBox(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoPathSwitch self, SoHandleEventAction action)"""
        return _coin.SoPathSwitch_handleEvent(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoPathSwitch self, SoGetMatrixAction action)"""
        return _coin.SoPathSwitch_getMatrix(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoPathSwitch self, SoSearchAction action)"""
        return _coin.SoPathSwitch_search(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoPathSwitch self, SoCallbackAction action)"""
        return _coin.SoPathSwitch_callback(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoPathSwitch self, SoGetPrimitiveCountAction action)"""
        return _coin.SoPathSwitch_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoPathSwitch self, SoAudioRenderAction action)"""
        return _coin.SoPathSwitch_audioRender(self, action)

SoPathSwitch_swigregister = _coin.SoPathSwitch_swigregister
SoPathSwitch_swigregister(SoPathSwitch)

def SoPathSwitch_getClassTypeId() -> "SoType":
    """SoPathSwitch_getClassTypeId() -> SoType"""
    return _coin.SoPathSwitch_getClassTypeId()

def SoPathSwitch_initClass() -> "void":
    """SoPathSwitch_initClass()"""
    return _coin.SoPathSwitch_initClass()

class SoTransformSeparator(SoGroup):
    """Proxy of C++ SoTransformSeparator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransformSeparator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransformSeparator self) -> SoType"""
        return _coin.SoTransformSeparator_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransformSeparator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoTransformSeparator self) -> SoTransformSeparator
        __init__(SoTransformSeparator self, int nChildren) -> SoTransformSeparator
        """
        this = _coin.new_SoTransformSeparator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTransformSeparator self, SoAction action)"""
        return _coin.SoTransformSeparator_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTransformSeparator self, SoCallbackAction action)"""
        return _coin.SoTransformSeparator_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTransformSeparator self, SoGLRenderAction action)"""
        return _coin.SoTransformSeparator_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTransformSeparator self, SoPickAction action)"""
        return _coin.SoTransformSeparator_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoTransformSeparator self, SoGetBoundingBoxAction action)"""
        return _coin.SoTransformSeparator_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTransformSeparator self, SoGetMatrixAction action)"""
        return _coin.SoTransformSeparator_getMatrix(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoTransformSeparator self, SoGetPrimitiveCountAction action)"""
        return _coin.SoTransformSeparator_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoTransformSeparator self, SoAudioRenderAction action)"""
        return _coin.SoTransformSeparator_audioRender(self, action)

SoTransformSeparator_swigregister = _coin.SoTransformSeparator_swigregister
SoTransformSeparator_swigregister(SoTransformSeparator)

def SoTransformSeparator_getClassTypeId() -> "SoType":
    """SoTransformSeparator_getClassTypeId() -> SoType"""
    return _coin.SoTransformSeparator_getClassTypeId()

def SoTransformSeparator_initClass() -> "void":
    """SoTransformSeparator_initClass()"""
    return _coin.SoTransformSeparator_initClass()

class SoRotation(SoTransformation):
    """Proxy of C++ SoRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotation self) -> SoType"""
        return _coin.SoRotation_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotation_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotation self) -> SoRotation"""
        this = _coin.new_SoRotation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation = _swig_property(_coin.SoRotation_rotation_get, _coin.SoRotation_rotation_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoRotation self, SoAction action)"""
        return _coin.SoRotation_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoRotation self, SoGLRenderAction action)"""
        return _coin.SoRotation_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoRotation self, SoCallbackAction action)"""
        return _coin.SoRotation_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoRotation self, SoGetBoundingBoxAction action)"""
        return _coin.SoRotation_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoRotation self, SoGetMatrixAction action)"""
        return _coin.SoRotation_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoRotation self, SoPickAction action)"""
        return _coin.SoRotation_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoRotation self, SoGetPrimitiveCountAction action)"""
        return _coin.SoRotation_getPrimitiveCount(self, action)

SoRotation_swigregister = _coin.SoRotation_swigregister
SoRotation_swigregister(SoRotation)

def SoRotation_getClassTypeId() -> "SoType":
    """SoRotation_getClassTypeId() -> SoType"""
    return _coin.SoRotation_getClassTypeId()

def SoRotation_initClass() -> "void":
    """SoRotation_initClass()"""
    return _coin.SoRotation_initClass()

class SoPendulum(SoRotation):
    """Proxy of C++ SoPendulum class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPendulum_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPendulum self) -> SoType"""
        return _coin.SoPendulum_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPendulum_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPendulum self) -> SoPendulum"""
        this = _coin.new_SoPendulum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    rotation0 = _swig_property(_coin.SoPendulum_rotation0_get, _coin.SoPendulum_rotation0_set)
    rotation1 = _swig_property(_coin.SoPendulum_rotation1_get, _coin.SoPendulum_rotation1_set)
    speed = _swig_property(_coin.SoPendulum_speed_get, _coin.SoPendulum_speed_set)
    on = _swig_property(_coin.SoPendulum_on_get, _coin.SoPendulum_on_set)

    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoPendulum self, SoWriteAction action)"""
        return _coin.SoPendulum_write(self, action)

SoPendulum_swigregister = _coin.SoPendulum_swigregister
SoPendulum_swigregister(SoPendulum)

def SoPendulum_getClassTypeId() -> "SoType":
    """SoPendulum_getClassTypeId() -> SoType"""
    return _coin.SoPendulum_getClassTypeId()

def SoPendulum_initClass() -> "void":
    """SoPendulum_initClass()"""
    return _coin.SoPendulum_initClass()

class SoRotor(SoRotation):
    """Proxy of C++ SoRotor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotor self) -> SoType"""
        return _coin.SoRotor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotor self) -> SoRotor"""
        this = _coin.new_SoRotor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    speed = _swig_property(_coin.SoRotor_speed_get, _coin.SoRotor_speed_set)
    on = _swig_property(_coin.SoRotor_on_get, _coin.SoRotor_on_set)
SoRotor_swigregister = _coin.SoRotor_swigregister
SoRotor_swigregister(SoRotor)

def SoRotor_getClassTypeId() -> "SoType":
    """SoRotor_getClassTypeId() -> SoType"""
    return _coin.SoRotor_getClassTypeId()

def SoRotor_initClass() -> "void":
    """SoRotor_initClass()"""
    return _coin.SoRotor_initClass()

class SoResetTransform(SoTransformation):
    """Proxy of C++ SoResetTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoResetTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoResetTransform self) -> SoType"""
        return _coin.SoResetTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoResetTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoResetTransform self) -> SoResetTransform"""
        this = _coin.new_SoResetTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    TRANSFORM = _coin.SoResetTransform_TRANSFORM
    BBOX = _coin.SoResetTransform_BBOX
    whatToReset = _swig_property(_coin.SoResetTransform_whatToReset_get, _coin.SoResetTransform_whatToReset_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoResetTransform self, SoAction action)"""
        return _coin.SoResetTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoResetTransform self, SoCallbackAction action)"""
        return _coin.SoResetTransform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoResetTransform self, SoGLRenderAction action)"""
        return _coin.SoResetTransform_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoResetTransform self, SoGetBoundingBoxAction action)"""
        return _coin.SoResetTransform_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoResetTransform self, SoGetMatrixAction action)"""
        return _coin.SoResetTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoResetTransform self, SoPickAction action)"""
        return _coin.SoResetTransform_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoResetTransform self, SoGetPrimitiveCountAction action)"""
        return _coin.SoResetTransform_getPrimitiveCount(self, action)

SoResetTransform_swigregister = _coin.SoResetTransform_swigregister
SoResetTransform_swigregister(SoResetTransform)

def SoResetTransform_getClassTypeId() -> "SoType":
    """SoResetTransform_getClassTypeId() -> SoType"""
    return _coin.SoResetTransform_getClassTypeId()

def SoResetTransform_initClass() -> "void":
    """SoResetTransform_initClass()"""
    return _coin.SoResetTransform_initClass()

class SoRotationXYZ(SoTransformation):
    """Proxy of C++ SoRotationXYZ class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoRotationXYZ_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoRotationXYZ self) -> SoType"""
        return _coin.SoRotationXYZ_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoRotationXYZ_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoRotationXYZ self) -> SoRotationXYZ"""
        this = _coin.new_SoRotationXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    X = _coin.SoRotationXYZ_X
    Y = _coin.SoRotationXYZ_Y
    Z = _coin.SoRotationXYZ_Z
    axis = _swig_property(_coin.SoRotationXYZ_axis_get, _coin.SoRotationXYZ_axis_set)
    angle = _swig_property(_coin.SoRotationXYZ_angle_get, _coin.SoRotationXYZ_angle_set)

    def getRotation(self) -> "SbRotation":
        """getRotation(SoRotationXYZ self) -> SbRotation"""
        return _coin.SoRotationXYZ_getRotation(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoRotationXYZ self, SoAction action)"""
        return _coin.SoRotationXYZ_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoRotationXYZ self, SoGLRenderAction action)"""
        return _coin.SoRotationXYZ_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoRotationXYZ self, SoCallbackAction action)"""
        return _coin.SoRotationXYZ_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoRotationXYZ self, SoGetBoundingBoxAction action)"""
        return _coin.SoRotationXYZ_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoRotationXYZ self, SoGetMatrixAction action)"""
        return _coin.SoRotationXYZ_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoRotationXYZ self, SoPickAction action)"""
        return _coin.SoRotationXYZ_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoRotationXYZ self, SoGetPrimitiveCountAction action)"""
        return _coin.SoRotationXYZ_getPrimitiveCount(self, action)

SoRotationXYZ_swigregister = _coin.SoRotationXYZ_swigregister
SoRotationXYZ_swigregister(SoRotationXYZ)

def SoRotationXYZ_getClassTypeId() -> "SoType":
    """SoRotationXYZ_getClassTypeId() -> SoType"""
    return _coin.SoRotationXYZ_getClassTypeId()

def SoRotationXYZ_initClass() -> "void":
    """SoRotationXYZ_initClass()"""
    return _coin.SoRotationXYZ_initClass()

class SoTranslation(SoTransformation):
    """Proxy of C++ SoTranslation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTranslation_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTranslation self) -> SoType"""
        return _coin.SoTranslation_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTranslation_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTranslation self) -> SoTranslation"""
        this = _coin.new_SoTranslation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTranslation_translation_get, _coin.SoTranslation_translation_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTranslation self, SoAction action)"""
        return _coin.SoTranslation_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTranslation self, SoCallbackAction action)"""
        return _coin.SoTranslation_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTranslation self, SoGLRenderAction action)"""
        return _coin.SoTranslation_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoTranslation self, SoGetBoundingBoxAction action)"""
        return _coin.SoTranslation_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTranslation self, SoGetMatrixAction action)"""
        return _coin.SoTranslation_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTranslation self, SoPickAction action)"""
        return _coin.SoTranslation_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoTranslation self, SoGetPrimitiveCountAction action)"""
        return _coin.SoTranslation_getPrimitiveCount(self, action)

SoTranslation_swigregister = _coin.SoTranslation_swigregister
SoTranslation_swigregister(SoTranslation)

def SoTranslation_getClassTypeId() -> "SoType":
    """SoTranslation_getClassTypeId() -> SoType"""
    return _coin.SoTranslation_getClassTypeId()

def SoTranslation_initClass() -> "void":
    """SoTranslation_initClass()"""
    return _coin.SoTranslation_initClass()

class SoShuttle(SoTranslation):
    """Proxy of C++ SoShuttle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShuttle_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShuttle self) -> SoType"""
        return _coin.SoShuttle_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShuttle_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoShuttle self) -> SoShuttle"""
        this = _coin.new_SoShuttle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation0 = _swig_property(_coin.SoShuttle_translation0_get, _coin.SoShuttle_translation0_set)
    translation1 = _swig_property(_coin.SoShuttle_translation1_get, _coin.SoShuttle_translation1_set)
    speed = _swig_property(_coin.SoShuttle_speed_get, _coin.SoShuttle_speed_set)
    on = _swig_property(_coin.SoShuttle_on_get, _coin.SoShuttle_on_set)

    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoShuttle self, SoWriteAction action)"""
        return _coin.SoShuttle_write(self, action)

SoShuttle_swigregister = _coin.SoShuttle_swigregister
SoShuttle_swigregister(SoShuttle)

def SoShuttle_getClassTypeId() -> "SoType":
    """SoShuttle_getClassTypeId() -> SoType"""
    return _coin.SoShuttle_getClassTypeId()

def SoShuttle_initClass() -> "void":
    """SoShuttle_initClass()"""
    return _coin.SoShuttle_initClass()

class SoSurroundScale(SoTransformation):
    """Proxy of C++ SoSurroundScale class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSurroundScale_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSurroundScale self) -> SoType"""
        return _coin.SoSurroundScale_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSurroundScale_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSurroundScale self) -> SoSurroundScale"""
        this = _coin.new_SoSurroundScale()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    numNodesUpToContainer = _swig_property(_coin.SoSurroundScale_numNodesUpToContainer_get, _coin.SoSurroundScale_numNodesUpToContainer_set)
    numNodesUpToReset = _swig_property(_coin.SoSurroundScale_numNodesUpToReset_get, _coin.SoSurroundScale_numNodesUpToReset_set)

    def invalidate(self) -> "void":
        """invalidate(SoSurroundScale self)"""
        return _coin.SoSurroundScale_invalidate(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSurroundScale self, SoAction action)"""
        return _coin.SoSurroundScale_doAction(self, action)


    def setDoingTranslations(self, val: 'SbBool const') -> "void":
        """setDoingTranslations(SoSurroundScale self, SbBool const val)"""
        return _coin.SoSurroundScale_setDoingTranslations(self, val)


    def isDoingTranslations(self) -> "SbBool":
        """isDoingTranslations(SoSurroundScale self) -> SbBool"""
        return _coin.SoSurroundScale_isDoingTranslations(self)

SoSurroundScale_swigregister = _coin.SoSurroundScale_swigregister
SoSurroundScale_swigregister(SoSurroundScale)

def SoSurroundScale_getClassTypeId() -> "SoType":
    """SoSurroundScale_getClassTypeId() -> SoType"""
    return _coin.SoSurroundScale_getClassTypeId()

def SoSurroundScale_initClass() -> "void":
    """SoSurroundScale_initClass()"""
    return _coin.SoSurroundScale_initClass()

class SoNurbsProfile(SoProfile):
    """Proxy of C++ SoNurbsProfile class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNurbsProfile_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNurbsProfile self) -> SoType"""
        return _coin.SoNurbsProfile_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNurbsProfile_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNurbsProfile self) -> SoNurbsProfile"""
        this = _coin.new_SoNurbsProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    knotVector = _swig_property(_coin.SoNurbsProfile_knotVector_get, _coin.SoNurbsProfile_knotVector_set)

    def getTrimCurve(self, state: 'SoState', numpoints: 'int32_t &', points: 'float *&', floatspervec: 'int &', numknots: 'int32_t &', knotvector: 'float *&') -> "void":
        """getTrimCurve(SoNurbsProfile self, SoState state, int32_t & numpoints, float *& points, int & floatspervec, int32_t & numknots, float *& knotvector)"""
        return _coin.SoNurbsProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)


    def getVertices(self, state: 'SoState', numvertices: 'int32_t &', vertices: 'SbVec2f *&') -> "void":
        """getVertices(SoNurbsProfile self, SoState state, int32_t & numvertices, SbVec2f *& vertices)"""
        return _coin.SoNurbsProfile_getVertices(self, state, numvertices, vertices)

SoNurbsProfile_swigregister = _coin.SoNurbsProfile_swigregister
SoNurbsProfile_swigregister(SoNurbsProfile)

def SoNurbsProfile_getClassTypeId() -> "SoType":
    """SoNurbsProfile_getClassTypeId() -> SoType"""
    return _coin.SoNurbsProfile_getClassTypeId()

def SoNurbsProfile_initClass() -> "void":
    """SoNurbsProfile_initClass()"""
    return _coin.SoNurbsProfile_initClass()

class SoVertexAttribute(SoNode):
    """Proxy of C++ SoVertexAttribute class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoVertexAttribute self) -> SoVertexAttribute"""
        this = _coin.new_SoVertexAttribute()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexAttribute_initClass()

    initClass = staticmethod(initClass)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexAttribute_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVertexAttribute self) -> SoType"""
        return _coin.SoVertexAttribute_getTypeId(self)

    name = _swig_property(_coin.SoVertexAttribute_name_get, _coin.SoVertexAttribute_name_set)
    typeName = _swig_property(_coin.SoVertexAttribute_typeName_get, _coin.SoVertexAttribute_typeName_set)

    def getValuesField(self) -> "SoMField *":
        """getValuesField(SoVertexAttribute self) -> SoMField"""
        return _coin.SoVertexAttribute_getValuesField(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVertexAttribute self, SoAction action)"""
        return _coin.SoVertexAttribute_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVertexAttribute self, SoGLRenderAction action)"""
        return _coin.SoVertexAttribute_GLRender(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVertexAttribute self, SoWriteAction action)"""
        return _coin.SoVertexAttribute_write(self, action)


    def copyContents(self, arg2: 'SoFieldContainer', copyconnections: 'SbBool') -> "void":
        """copyContents(SoVertexAttribute self, SoFieldContainer arg2, SbBool copyconnections)"""
        return _coin.SoVertexAttribute_copyContents(self, arg2, copyconnections)


    def notify(self, l: 'SoNotList') -> "void":
        """notify(SoVertexAttribute self, SoNotList l)"""
        return _coin.SoVertexAttribute_notify(self, l)

SoVertexAttribute_swigregister = _coin.SoVertexAttribute_swigregister
SoVertexAttribute_swigregister(SoVertexAttribute)

def SoVertexAttribute_initClass() -> "void":
    """SoVertexAttribute_initClass()"""
    return _coin.SoVertexAttribute_initClass()

def SoVertexAttribute_getClassTypeId() -> "SoType":
    """SoVertexAttribute_getClassTypeId() -> SoType"""
    return _coin.SoVertexAttribute_getClassTypeId()

class SoVertexAttributeBinding(SoNode):
    """Proxy of C++ SoVertexAttributeBinding class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexAttributeBinding_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVertexAttributeBinding self) -> SoType"""
        return _coin.SoVertexAttributeBinding_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexAttributeBinding_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVertexAttributeBinding self) -> SoVertexAttributeBinding"""
        this = _coin.new_SoVertexAttributeBinding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OVERALL = _coin.SoVertexAttributeBinding_OVERALL
    PER_VERTEX = _coin.SoVertexAttributeBinding_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoVertexAttributeBinding_PER_VERTEX_INDEXED
    DEFAULT = _coin.SoVertexAttributeBinding_DEFAULT
    value = _swig_property(_coin.SoVertexAttributeBinding_value_get, _coin.SoVertexAttributeBinding_value_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVertexAttributeBinding self, SoAction action)"""
        return _coin.SoVertexAttributeBinding_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVertexAttributeBinding self, SoGLRenderAction action)"""
        return _coin.SoVertexAttributeBinding_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVertexAttributeBinding self, SoCallbackAction action)"""
        return _coin.SoVertexAttributeBinding_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVertexAttributeBinding self, SoPickAction action)"""
        return _coin.SoVertexAttributeBinding_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVertexAttributeBinding self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVertexAttributeBinding_getPrimitiveCount(self, action)

SoVertexAttributeBinding_swigregister = _coin.SoVertexAttributeBinding_swigregister
SoVertexAttributeBinding_swigregister(SoVertexAttributeBinding)

def SoVertexAttributeBinding_getClassTypeId() -> "SoType":
    """SoVertexAttributeBinding_getClassTypeId() -> SoType"""
    return _coin.SoVertexAttributeBinding_getClassTypeId()

def SoVertexAttributeBinding_initClass() -> "void":
    """SoVertexAttributeBinding_initClass()"""
    return _coin.SoVertexAttributeBinding_initClass()

class SoNormal(SoNode):
    """Proxy of C++ SoNormal class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoNormal_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoNormal self) -> SoType"""
        return _coin.SoNormal_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoNormal_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoNormal self) -> SoNormal"""
        this = _coin.new_SoNormal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    vector = _swig_property(_coin.SoNormal_vector_get, _coin.SoNormal_vector_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoNormal self, SoAction action)"""
        return _coin.SoNormal_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoNormal self, SoGLRenderAction action)"""
        return _coin.SoNormal_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoNormal self, SoCallbackAction action)"""
        return _coin.SoNormal_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoNormal self, SoPickAction action)"""
        return _coin.SoNormal_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoNormal self, SoGetPrimitiveCountAction action)"""
        return _coin.SoNormal_getPrimitiveCount(self, action)

SoNormal_swigregister = _coin.SoNormal_swigregister
SoNormal_swigregister(SoNormal)

def SoNormal_getClassTypeId() -> "SoType":
    """SoNormal_getClassTypeId() -> SoType"""
    return _coin.SoNormal_getClassTypeId()

def SoNormal_initClass() -> "void":
    """SoNormal_initClass()"""
    return _coin.SoNormal_initClass()

class SoPackedColor(SoNode):
    """Proxy of C++ SoPackedColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPackedColor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPackedColor self) -> SoType"""
        return _coin.SoPackedColor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPackedColor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPackedColor self) -> SoPackedColor"""
        this = _coin.new_SoPackedColor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    orderedRGBA = _swig_property(_coin.SoPackedColor_orderedRGBA_get, _coin.SoPackedColor_orderedRGBA_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoPackedColor self, SoAction action)"""
        return _coin.SoPackedColor_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPackedColor self, SoGLRenderAction action)"""
        return _coin.SoPackedColor_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoPackedColor self, SoCallbackAction action)"""
        return _coin.SoPackedColor_callback(self, action)


    def isTransparent(self) -> "SbBool":
        """isTransparent(SoPackedColor self) -> SbBool"""
        return _coin.SoPackedColor_isTransparent(self)

SoPackedColor_swigregister = _coin.SoPackedColor_swigregister
SoPackedColor_swigregister(SoPackedColor)

def SoPackedColor_getClassTypeId() -> "SoType":
    """SoPackedColor_getClassTypeId() -> SoType"""
    return _coin.SoPackedColor_getClassTypeId()

def SoPackedColor_initClass() -> "void":
    """SoPackedColor_initClass()"""
    return _coin.SoPackedColor_initClass()

class SoPolygonOffset(SoNode):
    """Proxy of C++ SoPolygonOffset class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoPolygonOffset_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoPolygonOffset self) -> SoType"""
        return _coin.SoPolygonOffset_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoPolygonOffset_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoPolygonOffset self) -> SoPolygonOffset"""
        this = _coin.new_SoPolygonOffset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    FILLED = _coin.SoPolygonOffset_FILLED
    LINES = _coin.SoPolygonOffset_LINES
    POINTS = _coin.SoPolygonOffset_POINTS
    factor = _swig_property(_coin.SoPolygonOffset_factor_get, _coin.SoPolygonOffset_factor_set)
    units = _swig_property(_coin.SoPolygonOffset_units_get, _coin.SoPolygonOffset_units_set)
    styles = _swig_property(_coin.SoPolygonOffset_styles_get, _coin.SoPolygonOffset_styles_set)
    on = _swig_property(_coin.SoPolygonOffset_on_get, _coin.SoPolygonOffset_on_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoPolygonOffset self, SoAction action)"""
        return _coin.SoPolygonOffset_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoPolygonOffset self, SoCallbackAction action)"""
        return _coin.SoPolygonOffset_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoPolygonOffset self, SoGLRenderAction action)"""
        return _coin.SoPolygonOffset_GLRender(self, action)

SoPolygonOffset_swigregister = _coin.SoPolygonOffset_swigregister
SoPolygonOffset_swigregister(SoPolygonOffset)

def SoPolygonOffset_getClassTypeId() -> "SoType":
    """SoPolygonOffset_getClassTypeId() -> SoType"""
    return _coin.SoPolygonOffset_getClassTypeId()

def SoPolygonOffset_initClass() -> "void":
    """SoPolygonOffset_initClass()"""
    return _coin.SoPolygonOffset_initClass()

class SoProfileCoordinate2(SoNode):
    """Proxy of C++ SoProfileCoordinate2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProfileCoordinate2_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoProfileCoordinate2 self) -> SoType"""
        return _coin.SoProfileCoordinate2_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProfileCoordinate2_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoProfileCoordinate2 self) -> SoProfileCoordinate2"""
        this = _coin.new_SoProfileCoordinate2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoProfileCoordinate2_point_get, _coin.SoProfileCoordinate2_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoProfileCoordinate2 self, SoAction action)"""
        return _coin.SoProfileCoordinate2_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoProfileCoordinate2 self, SoGLRenderAction action)"""
        return _coin.SoProfileCoordinate2_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoProfileCoordinate2 self, SoCallbackAction action)"""
        return _coin.SoProfileCoordinate2_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoProfileCoordinate2 self, SoPickAction action)"""
        return _coin.SoProfileCoordinate2_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoProfileCoordinate2 self, SoGetBoundingBoxAction action)"""
        return _coin.SoProfileCoordinate2_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoProfileCoordinate2 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoProfileCoordinate2_getPrimitiveCount(self, action)

SoProfileCoordinate2_swigregister = _coin.SoProfileCoordinate2_swigregister
SoProfileCoordinate2_swigregister(SoProfileCoordinate2)

def SoProfileCoordinate2_getClassTypeId() -> "SoType":
    """SoProfileCoordinate2_getClassTypeId() -> SoType"""
    return _coin.SoProfileCoordinate2_getClassTypeId()

def SoProfileCoordinate2_initClass() -> "void":
    """SoProfileCoordinate2_initClass()"""
    return _coin.SoProfileCoordinate2_initClass()

class SoProfileCoordinate3(SoNode):
    """Proxy of C++ SoProfileCoordinate3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoProfileCoordinate3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoProfileCoordinate3 self) -> SoType"""
        return _coin.SoProfileCoordinate3_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoProfileCoordinate3_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoProfileCoordinate3 self) -> SoProfileCoordinate3"""
        this = _coin.new_SoProfileCoordinate3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoProfileCoordinate3_point_get, _coin.SoProfileCoordinate3_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoProfileCoordinate3 self, SoAction action)"""
        return _coin.SoProfileCoordinate3_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoProfileCoordinate3 self, SoGLRenderAction action)"""
        return _coin.SoProfileCoordinate3_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoProfileCoordinate3 self, SoCallbackAction action)"""
        return _coin.SoProfileCoordinate3_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoProfileCoordinate3 self, SoPickAction action)"""
        return _coin.SoProfileCoordinate3_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoProfileCoordinate3 self, SoGetBoundingBoxAction action)"""
        return _coin.SoProfileCoordinate3_getBoundingBox(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoProfileCoordinate3 self, SoGetPrimitiveCountAction action)"""
        return _coin.SoProfileCoordinate3_getPrimitiveCount(self, action)

SoProfileCoordinate3_swigregister = _coin.SoProfileCoordinate3_swigregister
SoProfileCoordinate3_swigregister(SoProfileCoordinate3)

def SoProfileCoordinate3_getClassTypeId() -> "SoType":
    """SoProfileCoordinate3_getClassTypeId() -> SoType"""
    return _coin.SoProfileCoordinate3_getClassTypeId()

def SoProfileCoordinate3_initClass() -> "void":
    """SoProfileCoordinate3_initClass()"""
    return _coin.SoProfileCoordinate3_initClass()

class SoTexture3(SoTexture):
    """Proxy of C++ SoTexture3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture3 self) -> SoType"""
        return _coin.SoTexture3_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture3_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTexture3 self) -> SoTexture3"""
        this = _coin.new_SoTexture3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    MODULATE = _coin.SoTexture3_MODULATE
    DECAL = _coin.SoTexture3_DECAL
    BLEND = _coin.SoTexture3_BLEND
    REPEAT = _coin.SoTexture3_REPEAT
    CLAMP = _coin.SoTexture3_CLAMP
    filenames = _swig_property(_coin.SoTexture3_filenames_get, _coin.SoTexture3_filenames_set)
    images = _swig_property(_coin.SoTexture3_images_get, _coin.SoTexture3_images_set)
    wrapR = _swig_property(_coin.SoTexture3_wrapR_get, _coin.SoTexture3_wrapR_set)
    wrapS = _swig_property(_coin.SoTexture3_wrapS_get, _coin.SoTexture3_wrapS_set)
    wrapT = _swig_property(_coin.SoTexture3_wrapT_get, _coin.SoTexture3_wrapT_set)
    model = _swig_property(_coin.SoTexture3_model_get, _coin.SoTexture3_model_set)
    blendColor = _swig_property(_coin.SoTexture3_blendColor_get, _coin.SoTexture3_blendColor_set)
    enableCompressedTexture = _swig_property(_coin.SoTexture3_enableCompressedTexture_get, _coin.SoTexture3_enableCompressedTexture_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTexture3 self, SoAction action)"""
        return _coin.SoTexture3_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTexture3 self, SoGLRenderAction action)"""
        return _coin.SoTexture3_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTexture3 self, SoCallbackAction action)"""
        return _coin.SoTexture3_callback(self, action)

SoTexture3_swigregister = _coin.SoTexture3_swigregister
SoTexture3_swigregister(SoTexture3)

def SoTexture3_getClassTypeId() -> "SoType":
    """SoTexture3_getClassTypeId() -> SoType"""
    return _coin.SoTexture3_getClassTypeId()

def SoTexture3_initClass() -> "void":
    """SoTexture3_initClass()"""
    return _coin.SoTexture3_initClass()

class SoTexture2Transform(SoNode):
    """Proxy of C++ SoTexture2Transform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture2Transform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture2Transform self) -> SoType"""
        return _coin.SoTexture2Transform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture2Transform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTexture2Transform self) -> SoTexture2Transform"""
        this = _coin.new_SoTexture2Transform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTexture2Transform_translation_get, _coin.SoTexture2Transform_translation_set)
    rotation = _swig_property(_coin.SoTexture2Transform_rotation_get, _coin.SoTexture2Transform_rotation_set)
    scaleFactor = _swig_property(_coin.SoTexture2Transform_scaleFactor_get, _coin.SoTexture2Transform_scaleFactor_set)
    center = _swig_property(_coin.SoTexture2Transform_center_get, _coin.SoTexture2Transform_center_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTexture2Transform self, SoAction action)"""
        return _coin.SoTexture2Transform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTexture2Transform self, SoCallbackAction action)"""
        return _coin.SoTexture2Transform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTexture2Transform self, SoGLRenderAction action)"""
        return _coin.SoTexture2Transform_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTexture2Transform self, SoGetMatrixAction action)"""
        return _coin.SoTexture2Transform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTexture2Transform self, SoPickAction action)"""
        return _coin.SoTexture2Transform_pick(self, action)

SoTexture2Transform_swigregister = _coin.SoTexture2Transform_swigregister
SoTexture2Transform_swigregister(SoTexture2Transform)

def SoTexture2Transform_getClassTypeId() -> "SoType":
    """SoTexture2Transform_getClassTypeId() -> SoType"""
    return _coin.SoTexture2Transform_getClassTypeId()

def SoTexture2Transform_initClass() -> "void":
    """SoTexture2Transform_initClass()"""
    return _coin.SoTexture2Transform_initClass()

class SoTexture3Transform(SoNode):
    """Proxy of C++ SoTexture3Transform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTexture3Transform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTexture3Transform self) -> SoType"""
        return _coin.SoTexture3Transform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTexture3Transform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTexture3Transform self) -> SoTexture3Transform"""
        this = _coin.new_SoTexture3Transform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoTexture3Transform_translation_get, _coin.SoTexture3Transform_translation_set)
    rotation = _swig_property(_coin.SoTexture3Transform_rotation_get, _coin.SoTexture3Transform_rotation_set)
    scaleFactor = _swig_property(_coin.SoTexture3Transform_scaleFactor_get, _coin.SoTexture3Transform_scaleFactor_set)
    scaleOrientation = _swig_property(_coin.SoTexture3Transform_scaleOrientation_get, _coin.SoTexture3Transform_scaleOrientation_set)
    center = _swig_property(_coin.SoTexture3Transform_center_get, _coin.SoTexture3Transform_center_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTexture3Transform self, SoAction action)"""
        return _coin.SoTexture3Transform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTexture3Transform self, SoCallbackAction action)"""
        return _coin.SoTexture3Transform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTexture3Transform self, SoGLRenderAction action)"""
        return _coin.SoTexture3Transform_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTexture3Transform self, SoGetMatrixAction action)"""
        return _coin.SoTexture3Transform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTexture3Transform self, SoPickAction action)"""
        return _coin.SoTexture3Transform_pick(self, action)

SoTexture3Transform_swigregister = _coin.SoTexture3Transform_swigregister
SoTexture3Transform_swigregister(SoTexture3Transform)

def SoTexture3Transform_getClassTypeId() -> "SoType":
    """SoTexture3Transform_getClassTypeId() -> SoType"""
    return _coin.SoTexture3Transform_getClassTypeId()

def SoTexture3Transform_initClass() -> "void":
    """SoTexture3Transform_initClass()"""
    return _coin.SoTexture3Transform_initClass()

class SoTextureCoordinate2(SoNode):
    """Proxy of C++ SoTextureCoordinate2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinate2_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinate2 self) -> SoType"""
        return _coin.SoTextureCoordinate2_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinate2_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinate2 self) -> SoTextureCoordinate2"""
        this = _coin.new_SoTextureCoordinate2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoTextureCoordinate2_point_get, _coin.SoTextureCoordinate2_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinate2 self, SoAction action)"""
        return _coin.SoTextureCoordinate2_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinate2 self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinate2_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinate2 self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinate2_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinate2 self, SoPickAction action)"""
        return _coin.SoTextureCoordinate2_pick(self, action)

SoTextureCoordinate2_swigregister = _coin.SoTextureCoordinate2_swigregister
SoTextureCoordinate2_swigregister(SoTextureCoordinate2)

def SoTextureCoordinate2_getClassTypeId() -> "SoType":
    """SoTextureCoordinate2_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinate2_getClassTypeId()

def SoTextureCoordinate2_initClass() -> "void":
    """SoTextureCoordinate2_initClass()"""
    return _coin.SoTextureCoordinate2_initClass()

class SoTextureCoordinate3(SoNode):
    """Proxy of C++ SoTextureCoordinate3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinate3_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinate3 self) -> SoType"""
        return _coin.SoTextureCoordinate3_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinate3_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinate3 self) -> SoTextureCoordinate3"""
        this = _coin.new_SoTextureCoordinate3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoTextureCoordinate3_point_get, _coin.SoTextureCoordinate3_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinate3 self, SoAction action)"""
        return _coin.SoTextureCoordinate3_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinate3 self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinate3_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinate3 self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinate3_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinate3 self, SoPickAction action)"""
        return _coin.SoTextureCoordinate3_pick(self, action)

SoTextureCoordinate3_swigregister = _coin.SoTextureCoordinate3_swigregister
SoTextureCoordinate3_swigregister(SoTextureCoordinate3)

def SoTextureCoordinate3_getClassTypeId() -> "SoType":
    """SoTextureCoordinate3_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinate3_getClassTypeId()

def SoTextureCoordinate3_initClass() -> "void":
    """SoTextureCoordinate3_initClass()"""
    return _coin.SoTextureCoordinate3_initClass()

class SoTextureCoordinateFunction(SoNode):
    """Proxy of C++ SoTextureCoordinateFunction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateFunction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateFunction self) -> SoType"""
        return _coin.SoTextureCoordinateFunction_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateFunction_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateFunction self) -> SoTextureCoordinateFunction"""
        this = _coin.new_SoTextureCoordinateFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SoTextureCoordinateFunction_swigregister = _coin.SoTextureCoordinateFunction_swigregister
SoTextureCoordinateFunction_swigregister(SoTextureCoordinateFunction)

def SoTextureCoordinateFunction_getClassTypeId() -> "SoType":
    """SoTextureCoordinateFunction_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateFunction_getClassTypeId()

def SoTextureCoordinateFunction_initClass() -> "void":
    """SoTextureCoordinateFunction_initClass()"""
    return _coin.SoTextureCoordinateFunction_initClass()

class SoTextureCoordinateDefault(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinateDefault class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateDefault_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateDefault self) -> SoType"""
        return _coin.SoTextureCoordinateDefault_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateDefault_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateDefault self) -> SoTextureCoordinateDefault"""
        this = _coin.new_SoTextureCoordinateDefault()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateDefault self, SoAction action)"""
        return _coin.SoTextureCoordinateDefault_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateDefault self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateDefault_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateDefault self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateDefault_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateDefault self, SoPickAction action)"""
        return _coin.SoTextureCoordinateDefault_pick(self, action)

SoTextureCoordinateDefault_swigregister = _coin.SoTextureCoordinateDefault_swigregister
SoTextureCoordinateDefault_swigregister(SoTextureCoordinateDefault)

def SoTextureCoordinateDefault_getClassTypeId() -> "SoType":
    """SoTextureCoordinateDefault_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateDefault_getClassTypeId()

def SoTextureCoordinateDefault_initClass() -> "void":
    """SoTextureCoordinateDefault_initClass()"""
    return _coin.SoTextureCoordinateDefault_initClass()

class SoTextureCoordinateEnvironment(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinateEnvironment class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateEnvironment_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateEnvironment self) -> SoType"""
        return _coin.SoTextureCoordinateEnvironment_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateEnvironment_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateEnvironment self) -> SoTextureCoordinateEnvironment"""
        this = _coin.new_SoTextureCoordinateEnvironment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateEnvironment self, SoAction action)"""
        return _coin.SoTextureCoordinateEnvironment_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateEnvironment self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateEnvironment_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateEnvironment self, SoPickAction action)"""
        return _coin.SoTextureCoordinateEnvironment_pick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateEnvironment self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateEnvironment_callback(self, action)

SoTextureCoordinateEnvironment_swigregister = _coin.SoTextureCoordinateEnvironment_swigregister
SoTextureCoordinateEnvironment_swigregister(SoTextureCoordinateEnvironment)

def SoTextureCoordinateEnvironment_getClassTypeId() -> "SoType":
    """SoTextureCoordinateEnvironment_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateEnvironment_getClassTypeId()

def SoTextureCoordinateEnvironment_initClass() -> "void":
    """SoTextureCoordinateEnvironment_initClass()"""
    return _coin.SoTextureCoordinateEnvironment_initClass()

class SoTextureCoordinatePlane(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinatePlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinatePlane_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinatePlane self) -> SoType"""
        return _coin.SoTextureCoordinatePlane_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinatePlane_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinatePlane self) -> SoTextureCoordinatePlane"""
        this = _coin.new_SoTextureCoordinatePlane()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    directionS = _swig_property(_coin.SoTextureCoordinatePlane_directionS_get, _coin.SoTextureCoordinatePlane_directionS_set)
    directionT = _swig_property(_coin.SoTextureCoordinatePlane_directionT_get, _coin.SoTextureCoordinatePlane_directionT_set)
    directionR = _swig_property(_coin.SoTextureCoordinatePlane_directionR_get, _coin.SoTextureCoordinatePlane_directionR_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinatePlane self, SoAction action)"""
        return _coin.SoTextureCoordinatePlane_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinatePlane self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinatePlane_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinatePlane self, SoPickAction action)"""
        return _coin.SoTextureCoordinatePlane_pick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinatePlane self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinatePlane_callback(self, action)

SoTextureCoordinatePlane_swigregister = _coin.SoTextureCoordinatePlane_swigregister
SoTextureCoordinatePlane_swigregister(SoTextureCoordinatePlane)

def SoTextureCoordinatePlane_getClassTypeId() -> "SoType":
    """SoTextureCoordinatePlane_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinatePlane_getClassTypeId()

def SoTextureCoordinatePlane_initClass() -> "void":
    """SoTextureCoordinatePlane_initClass()"""
    return _coin.SoTextureCoordinatePlane_initClass()

class SoTextureMatrixTransform(SoNode):
    """Proxy of C++ SoTextureMatrixTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureMatrixTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureMatrixTransform self) -> SoType"""
        return _coin.SoTextureMatrixTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureMatrixTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureMatrixTransform self) -> SoTextureMatrixTransform"""
        this = _coin.new_SoTextureMatrixTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    matrix = _swig_property(_coin.SoTextureMatrixTransform_matrix_get, _coin.SoTextureMatrixTransform_matrix_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureMatrixTransform self, SoAction action)"""
        return _coin.SoTextureMatrixTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureMatrixTransform self, SoCallbackAction action)"""
        return _coin.SoTextureMatrixTransform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureMatrixTransform self, SoGLRenderAction action)"""
        return _coin.SoTextureMatrixTransform_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTextureMatrixTransform self, SoGetMatrixAction action)"""
        return _coin.SoTextureMatrixTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureMatrixTransform self, SoPickAction action)"""
        return _coin.SoTextureMatrixTransform_pick(self, action)

SoTextureMatrixTransform_swigregister = _coin.SoTextureMatrixTransform_swigregister
SoTextureMatrixTransform_swigregister(SoTextureMatrixTransform)

def SoTextureMatrixTransform_getClassTypeId() -> "SoType":
    """SoTextureMatrixTransform_getClassTypeId() -> SoType"""
    return _coin.SoTextureMatrixTransform_getClassTypeId()

def SoTextureMatrixTransform_initClass() -> "void":
    """SoTextureMatrixTransform_initClass()"""
    return _coin.SoTextureMatrixTransform_initClass()

class SoWWWInline(SoNode):
    """Proxy of C++ SoWWWInline class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoWWWInline_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoWWWInline self) -> SoType"""
        return _coin.SoWWWInline_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoWWWInline_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoWWWInline self) -> SoWWWInline"""
        this = _coin.new_SoWWWInline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    name = _swig_property(_coin.SoWWWInline_name_get, _coin.SoWWWInline_name_set)
    bboxCenter = _swig_property(_coin.SoWWWInline_bboxCenter_get, _coin.SoWWWInline_bboxCenter_set)
    bboxSize = _swig_property(_coin.SoWWWInline_bboxSize_get, _coin.SoWWWInline_bboxSize_set)
    alternateRep = _swig_property(_coin.SoWWWInline_alternateRep_get, _coin.SoWWWInline_alternateRep_set)
    NEVER = _coin.SoWWWInline_NEVER
    UNTIL_LOADED = _coin.SoWWWInline_UNTIL_LOADED
    ALWAYS = _coin.SoWWWInline_ALWAYS

    def setFullURLName(self, url: 'SbString') -> "void":
        """setFullURLName(SoWWWInline self, SbString url)"""
        return _coin.SoWWWInline_setFullURLName(self, url)


    def getFullURLName(self) -> "SbString const &":
        """getFullURLName(SoWWWInline self) -> SbString"""
        return _coin.SoWWWInline_getFullURLName(self)


    def copyChildren(self) -> "SoGroup *":
        """copyChildren(SoWWWInline self) -> SoGroup"""
        return _coin.SoWWWInline_copyChildren(self)


    def requestURLData(self) -> "void":
        """requestURLData(SoWWWInline self)"""
        return _coin.SoWWWInline_requestURLData(self)


    def isURLDataRequested(self) -> "SbBool":
        """isURLDataRequested(SoWWWInline self) -> SbBool"""
        return _coin.SoWWWInline_isURLDataRequested(self)


    def isURLDataHere(self) -> "SbBool":
        """isURLDataHere(SoWWWInline self) -> SbBool"""
        return _coin.SoWWWInline_isURLDataHere(self)


    def cancelURLDataRequest(self) -> "void":
        """cancelURLDataRequest(SoWWWInline self)"""
        return _coin.SoWWWInline_cancelURLDataRequest(self)


    def setChildData(self, urldata: 'SoNode') -> "void":
        """setChildData(SoWWWInline self, SoNode urldata)"""
        return _coin.SoWWWInline_setChildData(self, urldata)


    def getChildData(self) -> "SoNode *":
        """getChildData(SoWWWInline self) -> SoNode"""
        return _coin.SoWWWInline_getChildData(self)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoWWWInline self) -> SoChildList"""
        return _coin.SoWWWInline_getChildren(self)


    def setFetchURLCallBack(f: 'SoWWWInlineFetchURLCB *', userdata: 'void *') -> "void":
        """setFetchURLCallBack(SoWWWInlineFetchURLCB * f, void * userdata)"""
        return _coin.SoWWWInline_setFetchURLCallBack(f, userdata)

    setFetchURLCallBack = staticmethod(setFetchURLCallBack)

    def setBoundingBoxVisibility(b: 'SoWWWInline::BboxVisibility') -> "void":
        """setBoundingBoxVisibility(SoWWWInline::BboxVisibility b)"""
        return _coin.SoWWWInline_setBoundingBoxVisibility(b)

    setBoundingBoxVisibility = staticmethod(setBoundingBoxVisibility)

    def getBoundingBoxVisibility() -> "SoWWWInline::BboxVisibility":
        """getBoundingBoxVisibility() -> SoWWWInline::BboxVisibility"""
        return _coin.SoWWWInline_getBoundingBoxVisibility()

    getBoundingBoxVisibility = staticmethod(getBoundingBoxVisibility)

    def setBoundingBoxColor(c: 'SbColor') -> "void":
        """setBoundingBoxColor(SbColor c)"""
        return _coin.SoWWWInline_setBoundingBoxColor(c)

    setBoundingBoxColor = staticmethod(setBoundingBoxColor)

    def getBoundingBoxColor() -> "SbColor const &":
        """getBoundingBoxColor() -> SbColor"""
        return _coin.SoWWWInline_getBoundingBoxColor()

    getBoundingBoxColor = staticmethod(getBoundingBoxColor)

    def setReadAsSoFile(onoff: 'SbBool') -> "void":
        """setReadAsSoFile(SbBool onoff)"""
        return _coin.SoWWWInline_setReadAsSoFile(onoff)

    setReadAsSoFile = staticmethod(setReadAsSoFile)

    def getReadAsSoFile() -> "SbBool":
        """getReadAsSoFile() -> SbBool"""
        return _coin.SoWWWInline_getReadAsSoFile()

    getReadAsSoFile = staticmethod(getReadAsSoFile)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoWWWInline self, SoAction action)"""
        return _coin.SoWWWInline_doAction(self, action)


    def doActionOnKidsOrBox(self, action: 'SoAction') -> "void":
        """doActionOnKidsOrBox(SoWWWInline self, SoAction action)"""
        return _coin.SoWWWInline_doActionOnKidsOrBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoWWWInline self, SoCallbackAction action)"""
        return _coin.SoWWWInline_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoWWWInline self, SoGLRenderAction action)"""
        return _coin.SoWWWInline_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoWWWInline self, SoGetBoundingBoxAction action)"""
        return _coin.SoWWWInline_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoWWWInline self, SoGetMatrixAction action)"""
        return _coin.SoWWWInline_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoWWWInline self, SoHandleEventAction action)"""
        return _coin.SoWWWInline_handleEvent(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoWWWInline self, SoSearchAction action)"""
        return _coin.SoWWWInline_search(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoWWWInline self, SoPickAction action)"""
        return _coin.SoWWWInline_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoWWWInline self, SoGetPrimitiveCountAction action)"""
        return _coin.SoWWWInline_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoWWWInline self, SoAudioRenderAction action)"""
        return _coin.SoWWWInline_audioRender(self, action)

SoWWWInline_swigregister = _coin.SoWWWInline_swigregister
SoWWWInline_swigregister(SoWWWInline)

def SoWWWInline_getClassTypeId() -> "SoType":
    """SoWWWInline_getClassTypeId() -> SoType"""
    return _coin.SoWWWInline_getClassTypeId()

def SoWWWInline_initClass() -> "void":
    """SoWWWInline_initClass()"""
    return _coin.SoWWWInline_initClass()

def SoWWWInline_setFetchURLCallBack(f: 'SoWWWInlineFetchURLCB *', userdata: 'void *') -> "void":
    """SoWWWInline_setFetchURLCallBack(SoWWWInlineFetchURLCB * f, void * userdata)"""
    return _coin.SoWWWInline_setFetchURLCallBack(f, userdata)

def SoWWWInline_setBoundingBoxVisibility(b: 'SoWWWInline::BboxVisibility') -> "void":
    """SoWWWInline_setBoundingBoxVisibility(SoWWWInline::BboxVisibility b)"""
    return _coin.SoWWWInline_setBoundingBoxVisibility(b)

def SoWWWInline_getBoundingBoxVisibility() -> "SoWWWInline::BboxVisibility":
    """SoWWWInline_getBoundingBoxVisibility() -> SoWWWInline::BboxVisibility"""
    return _coin.SoWWWInline_getBoundingBoxVisibility()

def SoWWWInline_setBoundingBoxColor(c: 'SbColor') -> "void":
    """SoWWWInline_setBoundingBoxColor(SbColor c)"""
    return _coin.SoWWWInline_setBoundingBoxColor(c)

def SoWWWInline_getBoundingBoxColor() -> "SbColor const &":
    """SoWWWInline_getBoundingBoxColor() -> SbColor"""
    return _coin.SoWWWInline_getBoundingBoxColor()

def SoWWWInline_setReadAsSoFile(onoff: 'SbBool') -> "void":
    """SoWWWInline_setReadAsSoFile(SbBool onoff)"""
    return _coin.SoWWWInline_setReadAsSoFile(onoff)

def SoWWWInline_getReadAsSoFile() -> "SbBool":
    """SoWWWInline_getReadAsSoFile() -> SbBool"""
    return _coin.SoWWWInline_getReadAsSoFile()

class SoTransparencyType(SoNode):
    """Proxy of C++ SoTransparencyType class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTransparencyType_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTransparencyType self) -> SoType"""
        return _coin.SoTransparencyType_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTransparencyType_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTransparencyType self) -> SoTransparencyType"""
        this = _coin.new_SoTransparencyType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SCREEN_DOOR = _coin.SoTransparencyType_SCREEN_DOOR
    ADD = _coin.SoTransparencyType_ADD
    DELAYED_ADD = _coin.SoTransparencyType_DELAYED_ADD
    SORTED_OBJECT_ADD = _coin.SoTransparencyType_SORTED_OBJECT_ADD
    BLEND = _coin.SoTransparencyType_BLEND
    DELAYED_BLEND = _coin.SoTransparencyType_DELAYED_BLEND
    SORTED_OBJECT_BLEND = _coin.SoTransparencyType_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = _coin.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = _coin.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = _coin.SoTransparencyType_NONE
    value = _swig_property(_coin.SoTransparencyType_value_get, _coin.SoTransparencyType_value_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTransparencyType self, SoAction action)"""
        return _coin.SoTransparencyType_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTransparencyType self, SoGLRenderAction action)"""
        return _coin.SoTransparencyType_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTransparencyType self, SoCallbackAction action)"""
        return _coin.SoTransparencyType_callback(self, action)

SoTransparencyType_swigregister = _coin.SoTransparencyType_swigregister
SoTransparencyType_swigregister(SoTransparencyType)

def SoTransparencyType_getClassTypeId() -> "SoType":
    """SoTransparencyType_getClassTypeId() -> SoType"""
    return _coin.SoTransparencyType_getClassTypeId()

def SoTransparencyType_initClass() -> "void":
    """SoTransparencyType_initClass()"""
    return _coin.SoTransparencyType_initClass()

class SoTextureCoordinateCube(SoNode):
    """Proxy of C++ SoTextureCoordinateCube class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateCube_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateCube self) -> SoType"""
        return _coin.SoTextureCoordinateCube_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateCube_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateCube self) -> SoTextureCoordinateCube"""
        this = _coin.new_SoTextureCoordinateCube()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateCube self, SoAction action)"""
        return _coin.SoTextureCoordinateCube_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateCube self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateCube_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateCube self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateCube_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateCube self, SoPickAction action)"""
        return _coin.SoTextureCoordinateCube_pick(self, action)

SoTextureCoordinateCube_swigregister = _coin.SoTextureCoordinateCube_swigregister
SoTextureCoordinateCube_swigregister(SoTextureCoordinateCube)

def SoTextureCoordinateCube_getClassTypeId() -> "SoType":
    """SoTextureCoordinateCube_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateCube_getClassTypeId()

def SoTextureCoordinateCube_initClass() -> "void":
    """SoTextureCoordinateCube_initClass()"""
    return _coin.SoTextureCoordinateCube_initClass()

class SoTextureCoordinateSphere(SoNode):
    """Proxy of C++ SoTextureCoordinateSphere class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateSphere_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateSphere self) -> SoType"""
        return _coin.SoTextureCoordinateSphere_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateSphere_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateSphere self) -> SoTextureCoordinateSphere"""
        this = _coin.new_SoTextureCoordinateSphere()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateSphere self, SoAction action)"""
        return _coin.SoTextureCoordinateSphere_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateSphere self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateSphere_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateSphere self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateSphere_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateSphere self, SoPickAction action)"""
        return _coin.SoTextureCoordinateSphere_pick(self, action)

SoTextureCoordinateSphere_swigregister = _coin.SoTextureCoordinateSphere_swigregister
SoTextureCoordinateSphere_swigregister(SoTextureCoordinateSphere)

def SoTextureCoordinateSphere_getClassTypeId() -> "SoType":
    """SoTextureCoordinateSphere_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateSphere_getClassTypeId()

def SoTextureCoordinateSphere_initClass() -> "void":
    """SoTextureCoordinateSphere_initClass()"""
    return _coin.SoTextureCoordinateSphere_initClass()

class SoTextureCoordinateCylinder(SoNode):
    """Proxy of C++ SoTextureCoordinateCylinder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateCylinder_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateCylinder self) -> SoType"""
        return _coin.SoTextureCoordinateCylinder_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateCylinder_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateCylinder self) -> SoTextureCoordinateCylinder"""
        this = _coin.new_SoTextureCoordinateCylinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateCylinder self, SoAction action)"""
        return _coin.SoTextureCoordinateCylinder_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateCylinder self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateCylinder_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateCylinder self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateCylinder_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateCylinder self, SoPickAction action)"""
        return _coin.SoTextureCoordinateCylinder_pick(self, action)

SoTextureCoordinateCylinder_swigregister = _coin.SoTextureCoordinateCylinder_swigregister
SoTextureCoordinateCylinder_swigregister(SoTextureCoordinateCylinder)

def SoTextureCoordinateCylinder_getClassTypeId() -> "SoType":
    """SoTextureCoordinateCylinder_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateCylinder_getClassTypeId()

def SoTextureCoordinateCylinder_initClass() -> "void":
    """SoTextureCoordinateCylinder_initClass()"""
    return _coin.SoTextureCoordinateCylinder_initClass()

class SoTextureCubeMap(SoTexture):
    """Proxy of C++ SoTextureCubeMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCubeMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCubeMap self) -> SoType"""
        return _coin.SoTextureCubeMap_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCubeMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCubeMap self) -> SoTextureCubeMap"""
        this = _coin.new_SoTextureCubeMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    MODULATE = _coin.SoTextureCubeMap_MODULATE
    DECAL = _coin.SoTextureCubeMap_DECAL
    BLEND = _coin.SoTextureCubeMap_BLEND
    REPLACE = _coin.SoTextureCubeMap_REPLACE
    REPEAT = _coin.SoTextureCubeMap_REPEAT
    CLAMP = _coin.SoTextureCubeMap_CLAMP
    filenames = _swig_property(_coin.SoTextureCubeMap_filenames_get, _coin.SoTextureCubeMap_filenames_set)
    imagePosX = _swig_property(_coin.SoTextureCubeMap_imagePosX_get, _coin.SoTextureCubeMap_imagePosX_set)
    imageNegX = _swig_property(_coin.SoTextureCubeMap_imageNegX_get, _coin.SoTextureCubeMap_imageNegX_set)
    imagePosY = _swig_property(_coin.SoTextureCubeMap_imagePosY_get, _coin.SoTextureCubeMap_imagePosY_set)
    imageNegY = _swig_property(_coin.SoTextureCubeMap_imageNegY_get, _coin.SoTextureCubeMap_imageNegY_set)
    imagePosZ = _swig_property(_coin.SoTextureCubeMap_imagePosZ_get, _coin.SoTextureCubeMap_imagePosZ_set)
    imageNegZ = _swig_property(_coin.SoTextureCubeMap_imageNegZ_get, _coin.SoTextureCubeMap_imageNegZ_set)
    wrapS = _swig_property(_coin.SoTextureCubeMap_wrapS_get, _coin.SoTextureCubeMap_wrapS_set)
    wrapT = _swig_property(_coin.SoTextureCubeMap_wrapT_get, _coin.SoTextureCubeMap_wrapT_set)
    model = _swig_property(_coin.SoTextureCubeMap_model_get, _coin.SoTextureCubeMap_model_set)
    blendColor = _swig_property(_coin.SoTextureCubeMap_blendColor_get, _coin.SoTextureCubeMap_blendColor_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCubeMap self, SoAction action)"""
        return _coin.SoTextureCubeMap_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCubeMap self, SoGLRenderAction action)"""
        return _coin.SoTextureCubeMap_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCubeMap self, SoCallbackAction action)"""
        return _coin.SoTextureCubeMap_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoTextureCubeMap self, SoRayPickAction action)"""
        return _coin.SoTextureCubeMap_rayPick(self, action)


    def readImage(fname: 'SbString', w: 'int &', h: 'int &', nc: 'int &', bytes: 'unsigned char *&') -> "SbBool":
        """readImage(SbString fname, int & w, int & h, int & nc, unsigned char *& bytes) -> SbBool"""
        return _coin.SoTextureCubeMap_readImage(fname, w, h, nc, bytes)

    readImage = staticmethod(readImage)
SoTextureCubeMap_swigregister = _coin.SoTextureCubeMap_swigregister
SoTextureCubeMap_swigregister(SoTextureCubeMap)

def SoTextureCubeMap_getClassTypeId() -> "SoType":
    """SoTextureCubeMap_getClassTypeId() -> SoType"""
    return _coin.SoTextureCubeMap_getClassTypeId()

def SoTextureCubeMap_initClass() -> "void":
    """SoTextureCubeMap_initClass()"""
    return _coin.SoTextureCubeMap_initClass()

def SoTextureCubeMap_readImage(fname: 'SbString', w: 'int &', h: 'int &', nc: 'int &', bytes: 'unsigned char *&') -> "SbBool":
    """SoTextureCubeMap_readImage(SbString fname, int & w, int & h, int & nc, unsigned char *& bytes) -> SbBool"""
    return _coin.SoTextureCubeMap_readImage(fname, w, h, nc, bytes)

class SoShaderObject(SoNode):
    """Proxy of C++ SoShaderObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderObject_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderObject self) -> SoType"""
        return _coin.SoShaderObject_getTypeId(self)

    ARB_PROGRAM = _coin.SoShaderObject_ARB_PROGRAM
    CG_PROGRAM = _coin.SoShaderObject_CG_PROGRAM
    GLSL_PROGRAM = _coin.SoShaderObject_GLSL_PROGRAM
    FILENAME = _coin.SoShaderObject_FILENAME
    isActive = _swig_property(_coin.SoShaderObject_isActive_get, _coin.SoShaderObject_isActive_set)
    sourceType = _swig_property(_coin.SoShaderObject_sourceType_get, _coin.SoShaderObject_sourceType_set)
    sourceProgram = _swig_property(_coin.SoShaderObject_sourceProgram_get, _coin.SoShaderObject_sourceProgram_set)
    parameter = _swig_property(_coin.SoShaderObject_parameter_get, _coin.SoShaderObject_parameter_set)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderObject_initClass()

    initClass = staticmethod(initClass)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoShaderObject self, SoGLRenderAction action)"""
        return _coin.SoShaderObject_GLRender(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoShaderObject self, SoSearchAction action)"""
        return _coin.SoShaderObject_search(self, action)


    def updateParameters(self, state: 'SoState') -> "void":
        """updateParameters(SoShaderObject self, SoState state)"""
        return _coin.SoShaderObject_updateParameters(self, state)


    def getSourceType(self) -> "SoShaderObject::SourceType":
        """getSourceType(SoShaderObject self) -> SoShaderObject::SourceType"""
        return _coin.SoShaderObject_getSourceType(self)


    def getSourceProgram(self) -> "SbString":
        """getSourceProgram(SoShaderObject self) -> SbString"""
        return _coin.SoShaderObject_getSourceProgram(self)

SoShaderObject_swigregister = _coin.SoShaderObject_swigregister
SoShaderObject_swigregister(SoShaderObject)

def SoShaderObject_getClassTypeId() -> "SoType":
    """SoShaderObject_getClassTypeId() -> SoType"""
    return _coin.SoShaderObject_getClassTypeId()

def SoShaderObject_initClass() -> "void":
    """SoShaderObject_initClass()"""
    return _coin.SoShaderObject_initClass()

class SoShaderParameter(SoNode):
    """Proxy of C++ SoShaderParameter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter self) -> SoType"""
        return _coin.SoShaderParameter_getTypeId(self)

    name = _swig_property(_coin.SoShaderParameter_name_get, _coin.SoShaderParameter_name_set)
    identifier = _swig_property(_coin.SoShaderParameter_identifier_get, _coin.SoShaderParameter_identifier_set)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter_initClass()

    initClass = staticmethod(initClass)
SoShaderParameter_swigregister = _coin.SoShaderParameter_swigregister
SoShaderParameter_swigregister(SoShaderParameter)

def SoShaderParameter_getClassTypeId() -> "SoType":
    """SoShaderParameter_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter_getClassTypeId()

def SoShaderParameter_initClass() -> "void":
    """SoShaderParameter_initClass()"""
    return _coin.SoShaderParameter_initClass()

class SoUniformShaderParameter(SoShaderParameter):
    """Proxy of C++ SoUniformShaderParameter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoUniformShaderParameter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoUniformShaderParameter self) -> SoType"""
        return _coin.SoUniformShaderParameter_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoUniformShaderParameter_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoUniformShaderParameter self, SoGLShaderObject * shaderObject)"""
        return _coin.SoUniformShaderParameter_updateParameter(self, shaderObject)

SoUniformShaderParameter_swigregister = _coin.SoUniformShaderParameter_swigregister
SoUniformShaderParameter_swigregister(SoUniformShaderParameter)

def SoUniformShaderParameter_getClassTypeId() -> "SoType":
    """SoUniformShaderParameter_getClassTypeId() -> SoType"""
    return _coin.SoUniformShaderParameter_getClassTypeId()

def SoUniformShaderParameter_initClass() -> "void":
    """SoUniformShaderParameter_initClass()"""
    return _coin.SoUniformShaderParameter_initClass()

class SoShaderParameter1f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter1f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter1f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter1f self) -> SoType"""
        return _coin.SoShaderParameter1f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter1f_value_get, _coin.SoShaderParameter1f_value_set)

    def __init__(self):
        """__init__(SoShaderParameter1f self) -> SoShaderParameter1f"""
        this = _coin.new_SoShaderParameter1f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter1f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter1f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter1f_updateParameter(self, shaderObject)

SoShaderParameter1f_swigregister = _coin.SoShaderParameter1f_swigregister
SoShaderParameter1f_swigregister(SoShaderParameter1f)

def SoShaderParameter1f_getClassTypeId() -> "SoType":
    """SoShaderParameter1f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter1f_getClassTypeId()

def SoShaderParameter1f_initClass() -> "void":
    """SoShaderParameter1f_initClass()"""
    return _coin.SoShaderParameter1f_initClass()

class SoShaderParameter1i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter1i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter1i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter1i self) -> SoType"""
        return _coin.SoShaderParameter1i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter1i_value_get, _coin.SoShaderParameter1i_value_set)

    def __init__(self):
        """__init__(SoShaderParameter1i self) -> SoShaderParameter1i"""
        this = _coin.new_SoShaderParameter1i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter1i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter1i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter1i_updateParameter(self, shaderObject)

SoShaderParameter1i_swigregister = _coin.SoShaderParameter1i_swigregister
SoShaderParameter1i_swigregister(SoShaderParameter1i)

def SoShaderParameter1i_getClassTypeId() -> "SoType":
    """SoShaderParameter1i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter1i_getClassTypeId()

def SoShaderParameter1i_initClass() -> "void":
    """SoShaderParameter1i_initClass()"""
    return _coin.SoShaderParameter1i_initClass()

class SoShaderParameter2f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter2f self) -> SoType"""
        return _coin.SoShaderParameter2f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter2f_value_get, _coin.SoShaderParameter2f_value_set)

    def __init__(self):
        """__init__(SoShaderParameter2f self) -> SoShaderParameter2f"""
        this = _coin.new_SoShaderParameter2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter2f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter2f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter2f_updateParameter(self, shaderObject)

SoShaderParameter2f_swigregister = _coin.SoShaderParameter2f_swigregister
SoShaderParameter2f_swigregister(SoShaderParameter2f)

def SoShaderParameter2f_getClassTypeId() -> "SoType":
    """SoShaderParameter2f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter2f_getClassTypeId()

def SoShaderParameter2f_initClass() -> "void":
    """SoShaderParameter2f_initClass()"""
    return _coin.SoShaderParameter2f_initClass()

class SoShaderParameter2i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter2i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter2i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter2i self) -> SoType"""
        return _coin.SoShaderParameter2i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter2i_value_get, _coin.SoShaderParameter2i_value_set)

    def __init__(self):
        """__init__(SoShaderParameter2i self) -> SoShaderParameter2i"""
        this = _coin.new_SoShaderParameter2i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter2i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter2i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter2i_updateParameter(self, shaderObject)

SoShaderParameter2i_swigregister = _coin.SoShaderParameter2i_swigregister
SoShaderParameter2i_swigregister(SoShaderParameter2i)

def SoShaderParameter2i_getClassTypeId() -> "SoType":
    """SoShaderParameter2i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter2i_getClassTypeId()

def SoShaderParameter2i_initClass() -> "void":
    """SoShaderParameter2i_initClass()"""
    return _coin.SoShaderParameter2i_initClass()

class SoShaderParameter3f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter3f self) -> SoType"""
        return _coin.SoShaderParameter3f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter3f_value_get, _coin.SoShaderParameter3f_value_set)

    def __init__(self):
        """__init__(SoShaderParameter3f self) -> SoShaderParameter3f"""
        this = _coin.new_SoShaderParameter3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter3f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter3f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter3f_updateParameter(self, shaderObject)

SoShaderParameter3f_swigregister = _coin.SoShaderParameter3f_swigregister
SoShaderParameter3f_swigregister(SoShaderParameter3f)

def SoShaderParameter3f_getClassTypeId() -> "SoType":
    """SoShaderParameter3f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter3f_getClassTypeId()

def SoShaderParameter3f_initClass() -> "void":
    """SoShaderParameter3f_initClass()"""
    return _coin.SoShaderParameter3f_initClass()

class SoShaderParameter3i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter3i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter3i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter3i self) -> SoType"""
        return _coin.SoShaderParameter3i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter3i_value_get, _coin.SoShaderParameter3i_value_set)

    def __init__(self):
        """__init__(SoShaderParameter3i self) -> SoShaderParameter3i"""
        this = _coin.new_SoShaderParameter3i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter3i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter3i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter3i_updateParameter(self, shaderObject)

SoShaderParameter3i_swigregister = _coin.SoShaderParameter3i_swigregister
SoShaderParameter3i_swigregister(SoShaderParameter3i)

def SoShaderParameter3i_getClassTypeId() -> "SoType":
    """SoShaderParameter3i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter3i_getClassTypeId()

def SoShaderParameter3i_initClass() -> "void":
    """SoShaderParameter3i_initClass()"""
    return _coin.SoShaderParameter3i_initClass()

class SoShaderParameter4f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter4f self) -> SoType"""
        return _coin.SoShaderParameter4f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter4f_value_get, _coin.SoShaderParameter4f_value_set)

    def __init__(self):
        """__init__(SoShaderParameter4f self) -> SoShaderParameter4f"""
        this = _coin.new_SoShaderParameter4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter4f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter4f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter4f_updateParameter(self, shaderObject)

SoShaderParameter4f_swigregister = _coin.SoShaderParameter4f_swigregister
SoShaderParameter4f_swigregister(SoShaderParameter4f)

def SoShaderParameter4f_getClassTypeId() -> "SoType":
    """SoShaderParameter4f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter4f_getClassTypeId()

def SoShaderParameter4f_initClass() -> "void":
    """SoShaderParameter4f_initClass()"""
    return _coin.SoShaderParameter4f_initClass()

class SoShaderParameter4i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameter4i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameter4i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameter4i self) -> SoType"""
        return _coin.SoShaderParameter4i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameter4i_value_get, _coin.SoShaderParameter4i_value_set)

    def __init__(self):
        """__init__(SoShaderParameter4i self) -> SoShaderParameter4i"""
        this = _coin.new_SoShaderParameter4i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameter4i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameter4i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameter4i_updateParameter(self, shaderObject)

SoShaderParameter4i_swigregister = _coin.SoShaderParameter4i_swigregister
SoShaderParameter4i_swigregister(SoShaderParameter4i)

def SoShaderParameter4i_getClassTypeId() -> "SoType":
    """SoShaderParameter4i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameter4i_getClassTypeId()

def SoShaderParameter4i_initClass() -> "void":
    """SoShaderParameter4i_initClass()"""
    return _coin.SoShaderParameter4i_initClass()

class SoShaderParameterArray1f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray1f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray1f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray1f self) -> SoType"""
        return _coin.SoShaderParameterArray1f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray1f_value_get, _coin.SoShaderParameterArray1f_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray1f self) -> SoShaderParameterArray1f"""
        this = _coin.new_SoShaderParameterArray1f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray1f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray1f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray1f_updateParameter(self, shaderObject)

SoShaderParameterArray1f_swigregister = _coin.SoShaderParameterArray1f_swigregister
SoShaderParameterArray1f_swigregister(SoShaderParameterArray1f)

def SoShaderParameterArray1f_getClassTypeId() -> "SoType":
    """SoShaderParameterArray1f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray1f_getClassTypeId()

def SoShaderParameterArray1f_initClass() -> "void":
    """SoShaderParameterArray1f_initClass()"""
    return _coin.SoShaderParameterArray1f_initClass()

class SoShaderParameterArray1i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray1i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray1i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray1i self) -> SoType"""
        return _coin.SoShaderParameterArray1i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray1i_value_get, _coin.SoShaderParameterArray1i_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray1i self) -> SoShaderParameterArray1i"""
        this = _coin.new_SoShaderParameterArray1i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray1i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray1i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray1i_updateParameter(self, shaderObject)

SoShaderParameterArray1i_swigregister = _coin.SoShaderParameterArray1i_swigregister
SoShaderParameterArray1i_swigregister(SoShaderParameterArray1i)

def SoShaderParameterArray1i_getClassTypeId() -> "SoType":
    """SoShaderParameterArray1i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray1i_getClassTypeId()

def SoShaderParameterArray1i_initClass() -> "void":
    """SoShaderParameterArray1i_initClass()"""
    return _coin.SoShaderParameterArray1i_initClass()

class SoShaderParameterArray2f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray2f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray2f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray2f self) -> SoType"""
        return _coin.SoShaderParameterArray2f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray2f_value_get, _coin.SoShaderParameterArray2f_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray2f self) -> SoShaderParameterArray2f"""
        this = _coin.new_SoShaderParameterArray2f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray2f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray2f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray2f_updateParameter(self, shaderObject)

SoShaderParameterArray2f_swigregister = _coin.SoShaderParameterArray2f_swigregister
SoShaderParameterArray2f_swigregister(SoShaderParameterArray2f)

def SoShaderParameterArray2f_getClassTypeId() -> "SoType":
    """SoShaderParameterArray2f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray2f_getClassTypeId()

def SoShaderParameterArray2f_initClass() -> "void":
    """SoShaderParameterArray2f_initClass()"""
    return _coin.SoShaderParameterArray2f_initClass()

class SoShaderParameterArray2i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray2i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray2i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray2i self) -> SoType"""
        return _coin.SoShaderParameterArray2i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray2i_value_get, _coin.SoShaderParameterArray2i_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray2i self) -> SoShaderParameterArray2i"""
        this = _coin.new_SoShaderParameterArray2i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray2i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray2i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray2i_updateParameter(self, shaderObject)

SoShaderParameterArray2i_swigregister = _coin.SoShaderParameterArray2i_swigregister
SoShaderParameterArray2i_swigregister(SoShaderParameterArray2i)

def SoShaderParameterArray2i_getClassTypeId() -> "SoType":
    """SoShaderParameterArray2i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray2i_getClassTypeId()

def SoShaderParameterArray2i_initClass() -> "void":
    """SoShaderParameterArray2i_initClass()"""
    return _coin.SoShaderParameterArray2i_initClass()

class SoShaderParameterArray3f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray3f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray3f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray3f self) -> SoType"""
        return _coin.SoShaderParameterArray3f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray3f_value_get, _coin.SoShaderParameterArray3f_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray3f self) -> SoShaderParameterArray3f"""
        this = _coin.new_SoShaderParameterArray3f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray3f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray3f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray3f_updateParameter(self, shaderObject)

SoShaderParameterArray3f_swigregister = _coin.SoShaderParameterArray3f_swigregister
SoShaderParameterArray3f_swigregister(SoShaderParameterArray3f)

def SoShaderParameterArray3f_getClassTypeId() -> "SoType":
    """SoShaderParameterArray3f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray3f_getClassTypeId()

def SoShaderParameterArray3f_initClass() -> "void":
    """SoShaderParameterArray3f_initClass()"""
    return _coin.SoShaderParameterArray3f_initClass()

class SoShaderParameterArray3i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray3i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray3i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray3i self) -> SoType"""
        return _coin.SoShaderParameterArray3i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray3i_value_get, _coin.SoShaderParameterArray3i_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray3i self) -> SoShaderParameterArray3i"""
        this = _coin.new_SoShaderParameterArray3i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray3i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray3i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray3i_updateParameter(self, shaderObject)

SoShaderParameterArray3i_swigregister = _coin.SoShaderParameterArray3i_swigregister
SoShaderParameterArray3i_swigregister(SoShaderParameterArray3i)

def SoShaderParameterArray3i_getClassTypeId() -> "SoType":
    """SoShaderParameterArray3i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray3i_getClassTypeId()

def SoShaderParameterArray3i_initClass() -> "void":
    """SoShaderParameterArray3i_initClass()"""
    return _coin.SoShaderParameterArray3i_initClass()

class SoShaderParameterArray4f(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray4f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray4f_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray4f self) -> SoType"""
        return _coin.SoShaderParameterArray4f_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray4f_value_get, _coin.SoShaderParameterArray4f_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray4f self) -> SoShaderParameterArray4f"""
        this = _coin.new_SoShaderParameterArray4f()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray4f_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray4f self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray4f_updateParameter(self, shaderObject)

SoShaderParameterArray4f_swigregister = _coin.SoShaderParameterArray4f_swigregister
SoShaderParameterArray4f_swigregister(SoShaderParameterArray4f)

def SoShaderParameterArray4f_getClassTypeId() -> "SoType":
    """SoShaderParameterArray4f_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray4f_getClassTypeId()

def SoShaderParameterArray4f_initClass() -> "void":
    """SoShaderParameterArray4f_initClass()"""
    return _coin.SoShaderParameterArray4f_initClass()

class SoShaderParameterArray4i(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterArray4i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterArray4i_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterArray4i self) -> SoType"""
        return _coin.SoShaderParameterArray4i_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterArray4i_value_get, _coin.SoShaderParameterArray4i_value_set)

    def __init__(self):
        """__init__(SoShaderParameterArray4i self) -> SoShaderParameterArray4i"""
        this = _coin.new_SoShaderParameterArray4i()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterArray4i_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterArray4i self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterArray4i_updateParameter(self, shaderObject)

SoShaderParameterArray4i_swigregister = _coin.SoShaderParameterArray4i_swigregister
SoShaderParameterArray4i_swigregister(SoShaderParameterArray4i)

def SoShaderParameterArray4i_getClassTypeId() -> "SoType":
    """SoShaderParameterArray4i_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterArray4i_getClassTypeId()

def SoShaderParameterArray4i_initClass() -> "void":
    """SoShaderParameterArray4i_initClass()"""
    return _coin.SoShaderParameterArray4i_initClass()

class SoShaderParameterMatrix(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterMatrix_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterMatrix self) -> SoType"""
        return _coin.SoShaderParameterMatrix_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterMatrix_value_get, _coin.SoShaderParameterMatrix_value_set)

    def __init__(self):
        """__init__(SoShaderParameterMatrix self) -> SoShaderParameterMatrix"""
        this = _coin.new_SoShaderParameterMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterMatrix_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterMatrix self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterMatrix_updateParameter(self, shaderObject)

SoShaderParameterMatrix_swigregister = _coin.SoShaderParameterMatrix_swigregister
SoShaderParameterMatrix_swigregister(SoShaderParameterMatrix)

def SoShaderParameterMatrix_getClassTypeId() -> "SoType":
    """SoShaderParameterMatrix_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterMatrix_getClassTypeId()

def SoShaderParameterMatrix_initClass() -> "void":
    """SoShaderParameterMatrix_initClass()"""
    return _coin.SoShaderParameterMatrix_initClass()

class SoShaderParameterMatrixArray(SoUniformShaderParameter):
    """Proxy of C++ SoShaderParameterMatrixArray class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderParameterMatrixArray_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderParameterMatrixArray self) -> SoType"""
        return _coin.SoShaderParameterMatrixArray_getTypeId(self)

    value = _swig_property(_coin.SoShaderParameterMatrixArray_value_get, _coin.SoShaderParameterMatrixArray_value_set)

    def __init__(self):
        """__init__(SoShaderParameterMatrixArray self) -> SoShaderParameterMatrixArray"""
        this = _coin.new_SoShaderParameterMatrixArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderParameterMatrixArray_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderParameterMatrixArray self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderParameterMatrixArray_updateParameter(self, shaderObject)

SoShaderParameterMatrixArray_swigregister = _coin.SoShaderParameterMatrixArray_swigregister
SoShaderParameterMatrixArray_swigregister(SoShaderParameterMatrixArray)

def SoShaderParameterMatrixArray_getClassTypeId() -> "SoType":
    """SoShaderParameterMatrixArray_getClassTypeId() -> SoType"""
    return _coin.SoShaderParameterMatrixArray_getClassTypeId()

def SoShaderParameterMatrixArray_initClass() -> "void":
    """SoShaderParameterMatrixArray_initClass()"""
    return _coin.SoShaderParameterMatrixArray_initClass()

class SoShaderStateMatrixParameter(SoUniformShaderParameter):
    """Proxy of C++ SoShaderStateMatrixParameter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderStateMatrixParameter_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderStateMatrixParameter self) -> SoType"""
        return _coin.SoShaderStateMatrixParameter_getTypeId(self)

    MODELVIEW = _coin.SoShaderStateMatrixParameter_MODELVIEW
    PROJECTION = _coin.SoShaderStateMatrixParameter_PROJECTION
    TEXTURE = _coin.SoShaderStateMatrixParameter_TEXTURE
    MODELVIEW_PROJECTION = _coin.SoShaderStateMatrixParameter_MODELVIEW_PROJECTION
    IDENTITY = _coin.SoShaderStateMatrixParameter_IDENTITY
    TRANSPOSE = _coin.SoShaderStateMatrixParameter_TRANSPOSE
    INVERSE = _coin.SoShaderStateMatrixParameter_INVERSE
    INVERSE_TRANSPOSE = _coin.SoShaderStateMatrixParameter_INVERSE_TRANSPOSE
    matrixType = _swig_property(_coin.SoShaderStateMatrixParameter_matrixType_get, _coin.SoShaderStateMatrixParameter_matrixType_set)
    matrixTransform = _swig_property(_coin.SoShaderStateMatrixParameter_matrixTransform_get, _coin.SoShaderStateMatrixParameter_matrixTransform_set)

    def __init__(self):
        """__init__(SoShaderStateMatrixParameter self) -> SoShaderStateMatrixParameter"""
        this = _coin.new_SoShaderStateMatrixParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoShaderStateMatrixParameter
    __del__ = lambda self: None

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderStateMatrixParameter_initClass()

    initClass = staticmethod(initClass)

    def updateParameter(self, shaderObject: 'SoGLShaderObject *') -> "void":
        """updateParameter(SoShaderStateMatrixParameter self, SoGLShaderObject * shaderObject)"""
        return _coin.SoShaderStateMatrixParameter_updateParameter(self, shaderObject)


    def updateValue(self, state: 'SoState') -> "void":
        """updateValue(SoShaderStateMatrixParameter self, SoState state)"""
        return _coin.SoShaderStateMatrixParameter_updateValue(self, state)

SoShaderStateMatrixParameter_swigregister = _coin.SoShaderStateMatrixParameter_swigregister
SoShaderStateMatrixParameter_swigregister(SoShaderStateMatrixParameter)

def SoShaderStateMatrixParameter_getClassTypeId() -> "SoType":
    """SoShaderStateMatrixParameter_getClassTypeId() -> SoType"""
    return _coin.SoShaderStateMatrixParameter_getClassTypeId()

def SoShaderStateMatrixParameter_initClass() -> "void":
    """SoShaderStateMatrixParameter_initClass()"""
    return _coin.SoShaderStateMatrixParameter_initClass()

class SoShaderProgram(SoNode):
    """Proxy of C++ SoShaderProgram class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoShaderProgram_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoShaderProgram self) -> SoType"""
        return _coin.SoShaderProgram_getTypeId(self)

    shaderObject = _swig_property(_coin.SoShaderProgram_shaderObject_get, _coin.SoShaderProgram_shaderObject_set)

    def __init__(self):
        """__init__(SoShaderProgram self) -> SoShaderProgram"""
        this = _coin.new_SoShaderProgram()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setEnableCallback(self, cb: 'SoShaderProgramEnableCB *', closure: 'void *') -> "void":
        """setEnableCallback(SoShaderProgram self, SoShaderProgramEnableCB * cb, void * closure)"""
        return _coin.SoShaderProgram_setEnableCallback(self, cb, closure)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoShaderProgram self, SoGLRenderAction action)"""
        return _coin.SoShaderProgram_GLRender(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoShaderProgram self, SoSearchAction action)"""
        return _coin.SoShaderProgram_search(self, action)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoShaderProgram_initClass()

    initClass = staticmethod(initClass)
SoShaderProgram_swigregister = _coin.SoShaderProgram_swigregister
SoShaderProgram_swigregister(SoShaderProgram)

def SoShaderProgram_getClassTypeId() -> "SoType":
    """SoShaderProgram_getClassTypeId() -> SoType"""
    return _coin.SoShaderProgram_getClassTypeId()

def SoShaderProgram_initClass() -> "void":
    """SoShaderProgram_initClass()"""
    return _coin.SoShaderProgram_initClass()

class SoFragmentShader(SoShaderObject):
    """Proxy of C++ SoFragmentShader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoFragmentShader_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoFragmentShader self) -> SoType"""
        return _coin.SoFragmentShader_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoFragmentShader_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoFragmentShader self) -> SoFragmentShader"""
        this = _coin.new_SoFragmentShader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoFragmentShader
    __del__ = lambda self: None

    def isSupported(sourceType: 'SoShaderObject::SourceType') -> "SbBool":
        """isSupported(SoShaderObject::SourceType sourceType) -> SbBool"""
        return _coin.SoFragmentShader_isSupported(sourceType)

    isSupported = staticmethod(isSupported)
SoFragmentShader_swigregister = _coin.SoFragmentShader_swigregister
SoFragmentShader_swigregister(SoFragmentShader)

def SoFragmentShader_getClassTypeId() -> "SoType":
    """SoFragmentShader_getClassTypeId() -> SoType"""
    return _coin.SoFragmentShader_getClassTypeId()

def SoFragmentShader_initClass() -> "void":
    """SoFragmentShader_initClass()"""
    return _coin.SoFragmentShader_initClass()

def SoFragmentShader_isSupported(sourceType: 'SoShaderObject::SourceType') -> "SbBool":
    """SoFragmentShader_isSupported(SoShaderObject::SourceType sourceType) -> SbBool"""
    return _coin.SoFragmentShader_isSupported(sourceType)

class SoVertexShader(SoShaderObject):
    """Proxy of C++ SoVertexShader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVertexShader_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVertexShader self) -> SoType"""
        return _coin.SoVertexShader_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVertexShader_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVertexShader self) -> SoVertexShader"""
        this = _coin.new_SoVertexShader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoVertexShader
    __del__ = lambda self: None

    def isSupported(sourceType: 'SoShaderObject::SourceType') -> "SbBool":
        """isSupported(SoShaderObject::SourceType sourceType) -> SbBool"""
        return _coin.SoVertexShader_isSupported(sourceType)

    isSupported = staticmethod(isSupported)
SoVertexShader_swigregister = _coin.SoVertexShader_swigregister
SoVertexShader_swigregister(SoVertexShader)

def SoVertexShader_getClassTypeId() -> "SoType":
    """SoVertexShader_getClassTypeId() -> SoType"""
    return _coin.SoVertexShader_getClassTypeId()

def SoVertexShader_initClass() -> "void":
    """SoVertexShader_initClass()"""
    return _coin.SoVertexShader_initClass()

def SoVertexShader_isSupported(sourceType: 'SoShaderObject::SourceType') -> "SbBool":
    """SoVertexShader_isSupported(SoShaderObject::SourceType sourceType) -> SbBool"""
    return _coin.SoVertexShader_isSupported(sourceType)

class SoTextureCoordinateNormalMap(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinateNormalMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateNormalMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateNormalMap self) -> SoType"""
        return _coin.SoTextureCoordinateNormalMap_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateNormalMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateNormalMap self) -> SoTextureCoordinateNormalMap"""
        this = _coin.new_SoTextureCoordinateNormalMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateNormalMap self, SoAction action)"""
        return _coin.SoTextureCoordinateNormalMap_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateNormalMap self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateNormalMap_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateNormalMap self, SoPickAction action)"""
        return _coin.SoTextureCoordinateNormalMap_pick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateNormalMap self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateNormalMap_callback(self, action)

SoTextureCoordinateNormalMap_swigregister = _coin.SoTextureCoordinateNormalMap_swigregister
SoTextureCoordinateNormalMap_swigregister(SoTextureCoordinateNormalMap)

def SoTextureCoordinateNormalMap_getClassTypeId() -> "SoType":
    """SoTextureCoordinateNormalMap_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateNormalMap_getClassTypeId()

def SoTextureCoordinateNormalMap_initClass() -> "void":
    """SoTextureCoordinateNormalMap_initClass()"""
    return _coin.SoTextureCoordinateNormalMap_initClass()

class SoTextureCoordinateReflectionMap(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinateReflectionMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateReflectionMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateReflectionMap self) -> SoType"""
        return _coin.SoTextureCoordinateReflectionMap_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateReflectionMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateReflectionMap self) -> SoTextureCoordinateReflectionMap"""
        this = _coin.new_SoTextureCoordinateReflectionMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateReflectionMap self, SoAction action)"""
        return _coin.SoTextureCoordinateReflectionMap_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateReflectionMap self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateReflectionMap_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateReflectionMap self, SoPickAction action)"""
        return _coin.SoTextureCoordinateReflectionMap_pick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateReflectionMap self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateReflectionMap_callback(self, action)

SoTextureCoordinateReflectionMap_swigregister = _coin.SoTextureCoordinateReflectionMap_swigregister
SoTextureCoordinateReflectionMap_swigregister(SoTextureCoordinateReflectionMap)

def SoTextureCoordinateReflectionMap_getClassTypeId() -> "SoType":
    """SoTextureCoordinateReflectionMap_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateReflectionMap_getClassTypeId()

def SoTextureCoordinateReflectionMap_initClass() -> "void":
    """SoTextureCoordinateReflectionMap_initClass()"""
    return _coin.SoTextureCoordinateReflectionMap_initClass()

class SoTextureCoordinateObject(SoTextureCoordinateFunction):
    """Proxy of C++ SoTextureCoordinateObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCoordinateObject_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCoordinateObject self) -> SoType"""
        return _coin.SoTextureCoordinateObject_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCoordinateObject_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCoordinateObject self) -> SoTextureCoordinateObject"""
        this = _coin.new_SoTextureCoordinateObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    factorS = _swig_property(_coin.SoTextureCoordinateObject_factorS_get, _coin.SoTextureCoordinateObject_factorS_set)
    factorT = _swig_property(_coin.SoTextureCoordinateObject_factorT_get, _coin.SoTextureCoordinateObject_factorT_set)
    factorR = _swig_property(_coin.SoTextureCoordinateObject_factorR_get, _coin.SoTextureCoordinateObject_factorR_set)
    factorQ = _swig_property(_coin.SoTextureCoordinateObject_factorQ_get, _coin.SoTextureCoordinateObject_factorQ_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCoordinateObject self, SoAction action)"""
        return _coin.SoTextureCoordinateObject_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCoordinateObject self, SoGLRenderAction action)"""
        return _coin.SoTextureCoordinateObject_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCoordinateObject self, SoPickAction action)"""
        return _coin.SoTextureCoordinateObject_pick(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCoordinateObject self, SoCallbackAction action)"""
        return _coin.SoTextureCoordinateObject_callback(self, action)

SoTextureCoordinateObject_swigregister = _coin.SoTextureCoordinateObject_swigregister
SoTextureCoordinateObject_swigregister(SoTextureCoordinateObject)

def SoTextureCoordinateObject_getClassTypeId() -> "SoType":
    """SoTextureCoordinateObject_getClassTypeId() -> SoType"""
    return _coin.SoTextureCoordinateObject_getClassTypeId()

def SoTextureCoordinateObject_initClass() -> "void":
    """SoTextureCoordinateObject_initClass()"""
    return _coin.SoTextureCoordinateObject_initClass()

class SoTextureScalePolicy(SoNode):
    """Proxy of C++ SoTextureScalePolicy class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureScalePolicy_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureScalePolicy self) -> SoType"""
        return _coin.SoTextureScalePolicy_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureScalePolicy_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureScalePolicy self) -> SoTextureScalePolicy"""
        this = _coin.new_SoTextureScalePolicy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    USE_TEXTURE_QUALITY = _coin.SoTextureScalePolicy_USE_TEXTURE_QUALITY
    SCALE_DOWN = _coin.SoTextureScalePolicy_SCALE_DOWN
    SCALE_UP = _coin.SoTextureScalePolicy_SCALE_UP
    FRACTURE = _coin.SoTextureScalePolicy_FRACTURE
    policy = _swig_property(_coin.SoTextureScalePolicy_policy_get, _coin.SoTextureScalePolicy_policy_set)
    quality = _swig_property(_coin.SoTextureScalePolicy_quality_get, _coin.SoTextureScalePolicy_quality_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureScalePolicy self, SoGLRenderAction action)"""
        return _coin.SoTextureScalePolicy_GLRender(self, action)

SoTextureScalePolicy_swigregister = _coin.SoTextureScalePolicy_swigregister
SoTextureScalePolicy_swigregister(SoTextureScalePolicy)

def SoTextureScalePolicy_getClassTypeId() -> "SoType":
    """SoTextureScalePolicy_getClassTypeId() -> SoType"""
    return _coin.SoTextureScalePolicy_getClassTypeId()

def SoTextureScalePolicy_initClass() -> "void":
    """SoTextureScalePolicy_initClass()"""
    return _coin.SoTextureScalePolicy_initClass()

class SoTextureUnit(SoNode):
    """Proxy of C++ SoTextureUnit class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureUnit_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureUnit self) -> SoType"""
        return _coin.SoTextureUnit_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureUnit_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureUnit self) -> SoTextureUnit"""
        this = _coin.new_SoTextureUnit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    BUMP_MAPPING = _coin.SoTextureUnit_BUMP_MAPPING
    IMAGE_MAPPING = _coin.SoTextureUnit_IMAGE_MAPPING
    unit = _swig_property(_coin.SoTextureUnit_unit_get, _coin.SoTextureUnit_unit_set)
    mappingMethod = _swig_property(_coin.SoTextureUnit_mappingMethod_get, _coin.SoTextureUnit_mappingMethod_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureUnit self, SoAction action)"""
        return _coin.SoTextureUnit_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureUnit self, SoCallbackAction action)"""
        return _coin.SoTextureUnit_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureUnit self, SoGLRenderAction action)"""
        return _coin.SoTextureUnit_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureUnit self, SoPickAction action)"""
        return _coin.SoTextureUnit_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoTextureUnit self, SoGetBoundingBoxAction action)"""
        return _coin.SoTextureUnit_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoTextureUnit self, SoGetMatrixAction action)"""
        return _coin.SoTextureUnit_getMatrix(self, action)


    def getMaxTextureUnit() -> "uint32_t":
        """getMaxTextureUnit() -> uint32_t"""
        return _coin.SoTextureUnit_getMaxTextureUnit()

    getMaxTextureUnit = staticmethod(getMaxTextureUnit)
SoTextureUnit_swigregister = _coin.SoTextureUnit_swigregister
SoTextureUnit_swigregister(SoTextureUnit)

def SoTextureUnit_getClassTypeId() -> "SoType":
    """SoTextureUnit_getClassTypeId() -> SoType"""
    return _coin.SoTextureUnit_getClassTypeId()

def SoTextureUnit_initClass() -> "void":
    """SoTextureUnit_initClass()"""
    return _coin.SoTextureUnit_initClass()

def SoTextureUnit_getMaxTextureUnit() -> "uint32_t":
    """SoTextureUnit_getMaxTextureUnit() -> uint32_t"""
    return _coin.SoTextureUnit_getMaxTextureUnit()

class SoTextureCombine(SoNode):
    """Proxy of C++ SoTextureCombine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoTextureCombine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoTextureCombine self) -> SoType"""
        return _coin.SoTextureCombine_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoTextureCombine_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoTextureCombine self) -> SoTextureCombine"""
        this = _coin.new_SoTextureCombine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    PRIMARY_COLOR = _coin.SoTextureCombine_PRIMARY_COLOR
    TEXTURE = _coin.SoTextureCombine_TEXTURE
    CONSTANT = _coin.SoTextureCombine_CONSTANT
    PREVIOUS = _coin.SoTextureCombine_PREVIOUS
    SRC_COLOR = _coin.SoTextureCombine_SRC_COLOR
    ONE_MINUS_SRC_COLOR = _coin.SoTextureCombine_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _coin.SoTextureCombine_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = _coin.SoTextureCombine_ONE_MINUS_SRC_ALPHA
    REPLACE = _coin.SoTextureCombine_REPLACE
    MODULATE = _coin.SoTextureCombine_MODULATE
    ADD = _coin.SoTextureCombine_ADD
    ADD_SIGNED = _coin.SoTextureCombine_ADD_SIGNED
    SUBTRACT = _coin.SoTextureCombine_SUBTRACT
    INTERPOLATE = _coin.SoTextureCombine_INTERPOLATE
    DOT3_RGB = _coin.SoTextureCombine_DOT3_RGB
    DOT3_RGBA = _coin.SoTextureCombine_DOT3_RGBA
    rgbSource = _swig_property(_coin.SoTextureCombine_rgbSource_get, _coin.SoTextureCombine_rgbSource_set)
    alphaSource = _swig_property(_coin.SoTextureCombine_alphaSource_get, _coin.SoTextureCombine_alphaSource_set)
    rgbOperand = _swig_property(_coin.SoTextureCombine_rgbOperand_get, _coin.SoTextureCombine_rgbOperand_set)
    alphaOperand = _swig_property(_coin.SoTextureCombine_alphaOperand_get, _coin.SoTextureCombine_alphaOperand_set)
    rgbOperation = _swig_property(_coin.SoTextureCombine_rgbOperation_get, _coin.SoTextureCombine_rgbOperation_set)
    alphaOperation = _swig_property(_coin.SoTextureCombine_alphaOperation_get, _coin.SoTextureCombine_alphaOperation_set)
    rgbScale = _swig_property(_coin.SoTextureCombine_rgbScale_get, _coin.SoTextureCombine_rgbScale_set)
    alphaScale = _swig_property(_coin.SoTextureCombine_alphaScale_get, _coin.SoTextureCombine_alphaScale_set)
    constantColor = _swig_property(_coin.SoTextureCombine_constantColor_get, _coin.SoTextureCombine_constantColor_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoTextureCombine self, SoAction action)"""
        return _coin.SoTextureCombine_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoTextureCombine self, SoCallbackAction action)"""
        return _coin.SoTextureCombine_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoTextureCombine self, SoGLRenderAction action)"""
        return _coin.SoTextureCombine_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoTextureCombine self, SoPickAction action)"""
        return _coin.SoTextureCombine_pick(self, action)

SoTextureCombine_swigregister = _coin.SoTextureCombine_swigregister
SoTextureCombine_swigregister(SoTextureCombine)

def SoTextureCombine_getClassTypeId() -> "SoType":
    """SoTextureCombine_getClassTypeId() -> SoType"""
    return _coin.SoTextureCombine_getClassTypeId()

def SoTextureCombine_initClass() -> "void":
    """SoTextureCombine_initClass()"""
    return _coin.SoTextureCombine_initClass()

class SoSceneTexture2(SoNode):
    """Proxy of C++ SoSceneTexture2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSceneTexture2_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSceneTexture2 self) -> SoType"""
        return _coin.SoSceneTexture2_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSceneTexture2_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSceneTexture2 self) -> SoSceneTexture2"""
        this = _coin.new_SoSceneTexture2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    MODULATE = _coin.SoSceneTexture2_MODULATE
    DECAL = _coin.SoSceneTexture2_DECAL
    BLEND = _coin.SoSceneTexture2_BLEND
    REPLACE = _coin.SoSceneTexture2_REPLACE
    REPEAT = _coin.SoSceneTexture2_REPEAT
    CLAMP = _coin.SoSceneTexture2_CLAMP
    CLAMP_TO_BORDER = _coin.SoSceneTexture2_CLAMP_TO_BORDER
    NONE = _coin.SoSceneTexture2_NONE
    ALPHA_BLEND = _coin.SoSceneTexture2_ALPHA_BLEND
    ALPHA_TEST = _coin.SoSceneTexture2_ALPHA_TEST
    DEPTH = _coin.SoSceneTexture2_DEPTH
    RGBA8 = _coin.SoSceneTexture2_RGBA8
    RGBA32F = _coin.SoSceneTexture2_RGBA32F
    RGB32F = _coin.SoSceneTexture2_RGB32F
    RGBA16F = _coin.SoSceneTexture2_RGBA16F
    RGB16F = _coin.SoSceneTexture2_RGB16F
    R3_G3_B2 = _coin.SoSceneTexture2_R3_G3_B2
    RGB = _coin.SoSceneTexture2_RGB
    RGB4 = _coin.SoSceneTexture2_RGB4
    RGB5 = _coin.SoSceneTexture2_RGB5
    RGB8 = _coin.SoSceneTexture2_RGB8
    RGB10 = _coin.SoSceneTexture2_RGB10
    RGB12 = _coin.SoSceneTexture2_RGB12
    RGB16 = _coin.SoSceneTexture2_RGB16
    RGBA = _coin.SoSceneTexture2_RGBA
    RGBA2 = _coin.SoSceneTexture2_RGBA2
    RGBA4 = _coin.SoSceneTexture2_RGBA4
    RGB5_A1 = _coin.SoSceneTexture2_RGB5_A1
    RGB10_A2 = _coin.SoSceneTexture2_RGB10_A2
    RGBA12 = _coin.SoSceneTexture2_RGBA12
    RGBA16 = _coin.SoSceneTexture2_RGBA16
    wrapS = _swig_property(_coin.SoSceneTexture2_wrapS_get, _coin.SoSceneTexture2_wrapS_set)
    wrapT = _swig_property(_coin.SoSceneTexture2_wrapT_get, _coin.SoSceneTexture2_wrapT_set)
    model = _swig_property(_coin.SoSceneTexture2_model_get, _coin.SoSceneTexture2_model_set)
    blendColor = _swig_property(_coin.SoSceneTexture2_blendColor_get, _coin.SoSceneTexture2_blendColor_set)
    backgroundColor = _swig_property(_coin.SoSceneTexture2_backgroundColor_get, _coin.SoSceneTexture2_backgroundColor_set)
    size = _swig_property(_coin.SoSceneTexture2_size_get, _coin.SoSceneTexture2_size_set)
    scene = _swig_property(_coin.SoSceneTexture2_scene_get, _coin.SoSceneTexture2_scene_set)
    sceneTransparencyType = _swig_property(_coin.SoSceneTexture2_sceneTransparencyType_get, _coin.SoSceneTexture2_sceneTransparencyType_set)
    transparencyFunction = _swig_property(_coin.SoSceneTexture2_transparencyFunction_get, _coin.SoSceneTexture2_transparencyFunction_set)
    type = _swig_property(_coin.SoSceneTexture2_type_get, _coin.SoSceneTexture2_type_set)

    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoSceneTexture2 self, SoNotList list)"""
        return _coin.SoSceneTexture2_notify(self, list)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoSceneTexture2 self, SoWriteAction action)"""
        return _coin.SoSceneTexture2_write(self, action)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSceneTexture2 self, SoAction action)"""
        return _coin.SoSceneTexture2_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSceneTexture2 self, SoGLRenderAction action)"""
        return _coin.SoSceneTexture2_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoSceneTexture2 self, SoCallbackAction action)"""
        return _coin.SoSceneTexture2_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoSceneTexture2 self, SoRayPickAction action)"""
        return _coin.SoSceneTexture2_rayPick(self, action)

SoSceneTexture2_swigregister = _coin.SoSceneTexture2_swigregister
SoSceneTexture2_swigregister(SoSceneTexture2)

def SoSceneTexture2_getClassTypeId() -> "SoType":
    """SoSceneTexture2_getClassTypeId() -> SoType"""
    return _coin.SoSceneTexture2_getClassTypeId()

def SoSceneTexture2_initClass() -> "void":
    """SoSceneTexture2_initClass()"""
    return _coin.SoSceneTexture2_initClass()

class SoSceneTextureCubeMap(SoNode):
    """Proxy of C++ SoSceneTextureCubeMap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoSceneTextureCubeMap_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoSceneTextureCubeMap self) -> SoType"""
        return _coin.SoSceneTextureCubeMap_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoSceneTextureCubeMap_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoSceneTextureCubeMap self) -> SoSceneTextureCubeMap"""
        this = _coin.new_SoSceneTextureCubeMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    MODULATE = _coin.SoSceneTextureCubeMap_MODULATE
    DECAL = _coin.SoSceneTextureCubeMap_DECAL
    BLEND = _coin.SoSceneTextureCubeMap_BLEND
    REPLACE = _coin.SoSceneTextureCubeMap_REPLACE
    REPEAT = _coin.SoSceneTextureCubeMap_REPEAT
    CLAMP = _coin.SoSceneTextureCubeMap_CLAMP
    NONE = _coin.SoSceneTextureCubeMap_NONE
    ALPHA_BLEND = _coin.SoSceneTextureCubeMap_ALPHA_BLEND
    ALPHA_TEST = _coin.SoSceneTextureCubeMap_ALPHA_TEST
    size = _swig_property(_coin.SoSceneTextureCubeMap_size_get, _coin.SoSceneTextureCubeMap_size_set)
    scene = _swig_property(_coin.SoSceneTextureCubeMap_scene_get, _coin.SoSceneTextureCubeMap_scene_set)
    wrapS = _swig_property(_coin.SoSceneTextureCubeMap_wrapS_get, _coin.SoSceneTextureCubeMap_wrapS_set)
    wrapT = _swig_property(_coin.SoSceneTextureCubeMap_wrapT_get, _coin.SoSceneTextureCubeMap_wrapT_set)
    wrapR = _swig_property(_coin.SoSceneTextureCubeMap_wrapR_get, _coin.SoSceneTextureCubeMap_wrapR_set)
    model = _swig_property(_coin.SoSceneTextureCubeMap_model_get, _coin.SoSceneTextureCubeMap_model_set)
    backgroundColor = _swig_property(_coin.SoSceneTextureCubeMap_backgroundColor_get, _coin.SoSceneTextureCubeMap_backgroundColor_set)
    transparencyFunction = _swig_property(_coin.SoSceneTextureCubeMap_transparencyFunction_get, _coin.SoSceneTextureCubeMap_transparencyFunction_set)
    blendColor = _swig_property(_coin.SoSceneTextureCubeMap_blendColor_get, _coin.SoSceneTextureCubeMap_blendColor_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoSceneTextureCubeMap self, SoAction action)"""
        return _coin.SoSceneTextureCubeMap_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoSceneTextureCubeMap self, SoGLRenderAction action)"""
        return _coin.SoSceneTextureCubeMap_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoSceneTextureCubeMap self, SoCallbackAction action)"""
        return _coin.SoSceneTextureCubeMap_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoSceneTextureCubeMap self, SoRayPickAction action)"""
        return _coin.SoSceneTextureCubeMap_rayPick(self, action)

SoSceneTextureCubeMap_swigregister = _coin.SoSceneTextureCubeMap_swigregister
SoSceneTextureCubeMap_swigregister(SoSceneTextureCubeMap)

def SoSceneTextureCubeMap_getClassTypeId() -> "SoType":
    """SoSceneTextureCubeMap_getClassTypeId() -> SoType"""
    return _coin.SoSceneTextureCubeMap_getClassTypeId()

def SoSceneTextureCubeMap_initClass() -> "void":
    """SoSceneTextureCubeMap_initClass()"""
    return _coin.SoSceneTextureCubeMap_initClass()

class SoCacheHintElement(SoElement):
    """Proxy of C++ SoCacheHintElement class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCacheHintElement_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getClassStackIndex() -> "int":
        """getClassStackIndex() -> int"""
        return _coin.SoCacheHintElement_getClassStackIndex()

    getClassStackIndex = staticmethod(getClassStackIndex)

    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoCacheHintElement_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCacheHintElement_initClass()

    initClass = staticmethod(initClass)

    def init(self, state: 'SoState') -> "void":
        """init(SoCacheHintElement self, SoState state)"""
        return _coin.SoCacheHintElement_init(self, state)


    def push(self, state: 'SoState') -> "void":
        """push(SoCacheHintElement self, SoState state)"""
        return _coin.SoCacheHintElement_push(self, state)


    def pop(self, state: 'SoState', prevtopelement: 'SoElement') -> "void":
        """pop(SoCacheHintElement self, SoState state, SoElement prevtopelement)"""
        return _coin.SoCacheHintElement_pop(self, state, prevtopelement)


    def matches(self, element: 'SoElement') -> "SbBool":
        """matches(SoCacheHintElement self, SoElement element) -> SbBool"""
        return _coin.SoCacheHintElement_matches(self, element)


    def copyMatchInfo(self) -> "SoElement *":
        """copyMatchInfo(SoCacheHintElement self) -> SoElement"""
        return _coin.SoCacheHintElement_copyMatchInfo(self)


    def set(state: 'SoState', node: 'SoNode', memvalue: 'float const', gfxvalue: 'float const') -> "void":
        """set(SoState state, SoNode node, float const memvalue, float const gfxvalue)"""
        return _coin.SoCacheHintElement_set(state, node, memvalue, gfxvalue)

    set = staticmethod(set)

    def get(state: 'SoState', memvalue: 'float &', gfxvalue: 'float &') -> "void":
        """get(SoState state, float & memvalue, float & gfxvalue)"""
        return _coin.SoCacheHintElement_get(state, memvalue, gfxvalue)

    get = staticmethod(get)
SoCacheHintElement_swigregister = _coin.SoCacheHintElement_swigregister
SoCacheHintElement_swigregister(SoCacheHintElement)

def SoCacheHintElement_getClassTypeId() -> "SoType":
    """SoCacheHintElement_getClassTypeId() -> SoType"""
    return _coin.SoCacheHintElement_getClassTypeId()

def SoCacheHintElement_getClassStackIndex() -> "int":
    """SoCacheHintElement_getClassStackIndex() -> int"""
    return _coin.SoCacheHintElement_getClassStackIndex()

def SoCacheHintElement_createInstance() -> "void *":
    """SoCacheHintElement_createInstance() -> void *"""
    return _coin.SoCacheHintElement_createInstance()

def SoCacheHintElement_initClass() -> "void":
    """SoCacheHintElement_initClass()"""
    return _coin.SoCacheHintElement_initClass()

def SoCacheHintElement_set(state: 'SoState', node: 'SoNode', memvalue: 'float const', gfxvalue: 'float const') -> "void":
    """SoCacheHintElement_set(SoState state, SoNode node, float const memvalue, float const gfxvalue)"""
    return _coin.SoCacheHintElement_set(state, node, memvalue, gfxvalue)

def SoCacheHintElement_get(state: 'SoState', memvalue: 'float &', gfxvalue: 'float &') -> "void":
    """SoCacheHintElement_get(SoState state, float & memvalue, float & gfxvalue)"""
    return _coin.SoCacheHintElement_get(state, memvalue, gfxvalue)

class SoCacheHint(SoNode):
    """Proxy of C++ SoCacheHint class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoCacheHint_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoCacheHint self) -> SoType"""
        return _coin.SoCacheHint_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoCacheHint_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoCacheHint self) -> SoCacheHint"""
        this = _coin.new_SoCacheHint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    memValue = _swig_property(_coin.SoCacheHint_memValue_get, _coin.SoCacheHint_memValue_set)
    gfxValue = _swig_property(_coin.SoCacheHint_gfxValue_get, _coin.SoCacheHint_gfxValue_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoCacheHint self, SoAction action)"""
        return _coin.SoCacheHint_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoCacheHint self, SoGLRenderAction action)"""
        return _coin.SoCacheHint_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoCacheHint self, SoCallbackAction action)"""
        return _coin.SoCacheHint_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoCacheHint self, SoGetBoundingBoxAction action)"""
        return _coin.SoCacheHint_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoCacheHint self, SoPickAction action)"""
        return _coin.SoCacheHint_pick(self, action)

SoCacheHint_swigregister = _coin.SoCacheHint_swigregister
SoCacheHint_swigregister(SoCacheHint)

def SoCacheHint_getClassTypeId() -> "SoType":
    """SoCacheHint_getClassTypeId() -> SoType"""
    return _coin.SoCacheHint_getClassTypeId()

def SoCacheHint_initClass() -> "void":
    """SoCacheHint_initClass()"""
    return _coin.SoCacheHint_initClass()

class SoDepthBuffer(SoNode):
    """Proxy of C++ SoDepthBuffer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoDepthBuffer_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoDepthBuffer self) -> SoType"""
        return _coin.SoDepthBuffer_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoDepthBuffer_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoDepthBuffer self) -> SoDepthBuffer"""
        this = _coin.new_SoDepthBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NEVER = _coin.SoDepthBuffer_NEVER
    ALWAYS = _coin.SoDepthBuffer_ALWAYS
    LESS = _coin.SoDepthBuffer_LESS
    LEQUAL = _coin.SoDepthBuffer_LEQUAL
    EQUAL = _coin.SoDepthBuffer_EQUAL
    GEQUAL = _coin.SoDepthBuffer_GEQUAL
    GREATER = _coin.SoDepthBuffer_GREATER
    NOTEQUAL = _coin.SoDepthBuffer_NOTEQUAL
    test = _swig_property(_coin.SoDepthBuffer_test_get, _coin.SoDepthBuffer_test_set)
    write = _swig_property(_coin.SoDepthBuffer_write_get, _coin.SoDepthBuffer_write_set)
    function = _swig_property(_coin.SoDepthBuffer_function_get, _coin.SoDepthBuffer_function_set)
    range = _swig_property(_coin.SoDepthBuffer_range_get, _coin.SoDepthBuffer_range_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoDepthBuffer self, SoGLRenderAction action)"""
        return _coin.SoDepthBuffer_GLRender(self, action)

SoDepthBuffer_swigregister = _coin.SoDepthBuffer_swigregister
SoDepthBuffer_swigregister(SoDepthBuffer)

def SoDepthBuffer_getClassTypeId() -> "SoType":
    """SoDepthBuffer_getClassTypeId() -> SoType"""
    return _coin.SoDepthBuffer_getClassTypeId()

def SoDepthBuffer_initClass() -> "void":
    """SoDepthBuffer_initClass()"""
    return _coin.SoDepthBuffer_initClass()

class SoAlphaTest(SoNode):
    """Proxy of C++ SoAlphaTest class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoAlphaTest_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoAlphaTest self) -> SoType"""
        return _coin.SoAlphaTest_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoAlphaTest_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoAlphaTest self) -> SoAlphaTest"""
        this = _coin.new_SoAlphaTest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NONE = _coin.SoAlphaTest_NONE
    NEVER = _coin.SoAlphaTest_NEVER
    ALWAYS = _coin.SoAlphaTest_ALWAYS
    LESS = _coin.SoAlphaTest_LESS
    LEQUAL = _coin.SoAlphaTest_LEQUAL
    EQUAL = _coin.SoAlphaTest_EQUAL
    GEQUAL = _coin.SoAlphaTest_GEQUAL
    GREATER = _coin.SoAlphaTest_GREATER
    NOTEQUAL = _coin.SoAlphaTest_NOTEQUAL
    function = _swig_property(_coin.SoAlphaTest_function_get, _coin.SoAlphaTest_function_set)
    value = _swig_property(_coin.SoAlphaTest_value_get, _coin.SoAlphaTest_value_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoAlphaTest self, SoGLRenderAction action)"""
        return _coin.SoAlphaTest_GLRender(self, action)

SoAlphaTest_swigregister = _coin.SoAlphaTest_swigregister
SoAlphaTest_swigregister(SoAlphaTest)

def SoAlphaTest_getClassTypeId() -> "SoType":
    """SoAlphaTest_getClassTypeId() -> SoType"""
    return _coin.SoAlphaTest_getClassTypeId()

def SoAlphaTest_initClass() -> "void":
    """SoAlphaTest_initClass()"""
    return _coin.SoAlphaTest_initClass()

class SbLine(object):
    """Proxy of C++ SbLine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbLine self) -> SbLine
        __init__(SbLine self, SbVec3f origin, SbVec3f point) -> SbLine
        """
        this = _coin.new_SbLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, origin: 'SbVec3f', point: 'SbVec3f') -> "void":
        """setValue(SbLine self, SbVec3f origin, SbVec3f point)"""
        return _coin.SbLine_setValue(self, origin, point)


    def setPosDir(self, position: 'SbVec3f', direction: 'SbVec3f') -> "void":
        """setPosDir(SbLine self, SbVec3f position, SbVec3f direction)"""
        return _coin.SbLine_setPosDir(self, position, direction)


    def getClosestPoints(self, line2: 'SbLine', ptOnThis: 'SbVec3f', ptOnLine2: 'SbVec3f') -> "SbBool":
        """getClosestPoints(SbLine self, SbLine line2, SbVec3f ptOnThis, SbVec3f ptOnLine2) -> SbBool"""
        return _coin.SbLine_getClosestPoints(self, line2, ptOnThis, ptOnLine2)


    def getClosestPoint(self, point: 'SbVec3f') -> "SbVec3f":
        """getClosestPoint(SbLine self, SbVec3f point) -> SbVec3f"""
        return _coin.SbLine_getClosestPoint(self, point)


    def getPosition(self) -> "SbVec3f const &":
        """getPosition(SbLine self) -> SbVec3f"""
        return _coin.SbLine_getPosition(self)


    def getDirection(self) -> "SbVec3f const &":
        """getDirection(SbLine self) -> SbVec3f"""
        return _coin.SbLine_getDirection(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbLine self, FILE * file)"""
        return _coin.SbLine_output(self, file)

    __swig_destroy__ = _coin.delete_SbLine
    __del__ = lambda self: None
SbLine_swigregister = _coin.SbLine_swigregister
SbLine_swigregister(SbLine)

class SbProjector(object):
    """Proxy of C++ SbProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbProjector_project(self, point)


    def setViewVolume(self, vol: 'SbViewVolume') -> "void":
        """setViewVolume(SbProjector self, SbViewVolume vol)"""
        return _coin.SbProjector_setViewVolume(self, vol)


    def getViewVolume(self) -> "SbViewVolume const &":
        """getViewVolume(SbProjector self) -> SbViewVolume"""
        return _coin.SbProjector_getViewVolume(self)


    def setWorkingSpace(self, space: 'SbMatrix') -> "void":
        """setWorkingSpace(SbProjector self, SbMatrix space)"""
        return _coin.SbProjector_setWorkingSpace(self, space)


    def getWorkingSpace(self) -> "SbMatrix const &":
        """getWorkingSpace(SbProjector self) -> SbMatrix"""
        return _coin.SbProjector_getWorkingSpace(self)


    def copy(self) -> "SbProjector *":
        """copy(SbProjector self) -> SbProjector"""
        return _coin.SbProjector_copy(self)


    def tryProject(self, point: 'SbVec2f', epsilon: 'float const', result: 'SbVec3f') -> "SbBool":
        """tryProject(SbProjector self, SbVec2f point, float const epsilon, SbVec3f result) -> SbBool"""
        return _coin.SbProjector_tryProject(self, point, epsilon, result)

SbProjector_swigregister = _coin.SbProjector_swigregister
SbProjector_swigregister(SbProjector)

class SbCylinder(object):
    """Proxy of C++ SbCylinder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbCylinder self) -> SbCylinder
        __init__(SbCylinder self, SbLine a, float const r) -> SbCylinder
        """
        this = _coin.new_SbCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, a: 'SbLine', r: 'float const') -> "void":
        """setValue(SbCylinder self, SbLine a, float const r)"""
        return _coin.SbCylinder_setValue(self, a, r)


    def setAxis(self, a: 'SbLine') -> "void":
        """setAxis(SbCylinder self, SbLine a)"""
        return _coin.SbCylinder_setAxis(self, a)


    def setRadius(self, r: 'float const') -> "void":
        """setRadius(SbCylinder self, float const r)"""
        return _coin.SbCylinder_setRadius(self, r)


    def getAxis(self) -> "SbLine const &":
        """getAxis(SbCylinder self) -> SbLine"""
        return _coin.SbCylinder_getAxis(self)


    def getRadius(self) -> "float":
        """getRadius(SbCylinder self) -> float"""
        return _coin.SbCylinder_getRadius(self)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbCylinder self, SbLine l, SbVec3f intersection) -> SbBool
        intersect(SbCylinder self, SbLine l, SbVec3f enter, SbVec3f exit) -> SbBool
        """
        return _coin.SbCylinder_intersect(self, *args)


    def output(self, file: 'FILE *') -> "void":
        """output(SbCylinder self, FILE * file)"""
        return _coin.SbCylinder_output(self, file)

    __swig_destroy__ = _coin.delete_SbCylinder
    __del__ = lambda self: None
SbCylinder_swigregister = _coin.SbCylinder_swigregister
SbCylinder_swigregister(SbCylinder)

class SbCylinderProjector(SbProjector):
    """Proxy of C++ SbCylinderProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbCylinderProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbCylinderProjector_project(self, point)


    def projectAndGetRotation(self, point: 'SbVec2f', rot: 'SbRotation') -> "SbVec3f":
        """projectAndGetRotation(SbCylinderProjector self, SbVec2f point, SbRotation rot) -> SbVec3f"""
        return _coin.SbCylinderProjector_projectAndGetRotation(self, point, rot)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbCylinderProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbCylinderProjector_getRotation(self, point1, point2)


    def setCylinder(self, cyl: 'SbCylinder') -> "void":
        """setCylinder(SbCylinderProjector self, SbCylinder cyl)"""
        return _coin.SbCylinderProjector_setCylinder(self, cyl)


    def getCylinder(self) -> "SbCylinder const &":
        """getCylinder(SbCylinderProjector self) -> SbCylinder"""
        return _coin.SbCylinderProjector_getCylinder(self)


    def setOrientToEye(self, orienttoeye: 'SbBool const') -> "void":
        """setOrientToEye(SbCylinderProjector self, SbBool const orienttoeye)"""
        return _coin.SbCylinderProjector_setOrientToEye(self, orienttoeye)


    def isOrientToEye(self) -> "SbBool":
        """isOrientToEye(SbCylinderProjector self) -> SbBool"""
        return _coin.SbCylinderProjector_isOrientToEye(self)


    def setFront(self, infront: 'SbBool const') -> "void":
        """setFront(SbCylinderProjector self, SbBool const infront)"""
        return _coin.SbCylinderProjector_setFront(self, infront)


    def isFront(self) -> "SbBool":
        """isFront(SbCylinderProjector self) -> SbBool"""
        return _coin.SbCylinderProjector_isFront(self)


    def isPointInFront(self, point: 'SbVec3f') -> "SbBool":
        """isPointInFront(SbCylinderProjector self, SbVec3f point) -> SbBool"""
        return _coin.SbCylinderProjector_isPointInFront(self, point)


    def setWorkingSpace(self, space: 'SbMatrix') -> "void":
        """setWorkingSpace(SbCylinderProjector self, SbMatrix space)"""
        return _coin.SbCylinderProjector_setWorkingSpace(self, space)

    __swig_destroy__ = _coin.delete_SbCylinderProjector
    __del__ = lambda self: None
SbCylinderProjector_swigregister = _coin.SbCylinderProjector_swigregister
SbCylinderProjector_swigregister(SbCylinderProjector)

class SbCylinderSectionProjector(SbCylinderProjector):
    """Proxy of C++ SbCylinderSectionProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbCylinderSectionProjector self, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbCylinderSectionProjector
        __init__(SbCylinderSectionProjector self, float const edgetol=0.9) -> SbCylinderSectionProjector
        __init__(SbCylinderSectionProjector self) -> SbCylinderSectionProjector
        __init__(SbCylinderSectionProjector self, SbCylinder cyl, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbCylinderSectionProjector
        __init__(SbCylinderSectionProjector self, SbCylinder cyl, float const edgetol=0.9) -> SbCylinderSectionProjector
        __init__(SbCylinderSectionProjector self, SbCylinder cyl) -> SbCylinderSectionProjector
        """
        this = _coin.new_SbCylinderSectionProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbCylinderSectionProjector self) -> SbProjector"""
        return _coin.SbCylinderSectionProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbCylinderSectionProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbCylinderSectionProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbCylinderSectionProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbCylinderSectionProjector_getRotation(self, point1, point2)


    def setTolerance(self, edgetol: 'float const') -> "void":
        """setTolerance(SbCylinderSectionProjector self, float const edgetol)"""
        return _coin.SbCylinderSectionProjector_setTolerance(self, edgetol)


    def getTolerance(self) -> "float":
        """getTolerance(SbCylinderSectionProjector self) -> float"""
        return _coin.SbCylinderSectionProjector_getTolerance(self)


    def isWithinTolerance(self, point: 'SbVec3f') -> "SbBool":
        """isWithinTolerance(SbCylinderSectionProjector self, SbVec3f point) -> SbBool"""
        return _coin.SbCylinderSectionProjector_isWithinTolerance(self, point)

    __swig_destroy__ = _coin.delete_SbCylinderSectionProjector
    __del__ = lambda self: None
SbCylinderSectionProjector_swigregister = _coin.SbCylinderSectionProjector_swigregister
SbCylinderSectionProjector_swigregister(SbCylinderSectionProjector)

class SbCylinderPlaneProjector(SbCylinderSectionProjector):
    """Proxy of C++ SbCylinderPlaneProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbCylinderPlaneProjector self, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbCylinderPlaneProjector
        __init__(SbCylinderPlaneProjector self, float const edgetol=0.9) -> SbCylinderPlaneProjector
        __init__(SbCylinderPlaneProjector self) -> SbCylinderPlaneProjector
        __init__(SbCylinderPlaneProjector self, SbCylinder cyl, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbCylinderPlaneProjector
        __init__(SbCylinderPlaneProjector self, SbCylinder cyl, float const edgetol=0.9) -> SbCylinderPlaneProjector
        __init__(SbCylinderPlaneProjector self, SbCylinder cyl) -> SbCylinderPlaneProjector
        """
        this = _coin.new_SbCylinderPlaneProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbCylinderPlaneProjector self) -> SbProjector"""
        return _coin.SbCylinderPlaneProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbCylinderPlaneProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbCylinderPlaneProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbCylinderPlaneProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbCylinderPlaneProjector_getRotation(self, point1, point2)

    __swig_destroy__ = _coin.delete_SbCylinderPlaneProjector
    __del__ = lambda self: None
SbCylinderPlaneProjector_swigregister = _coin.SbCylinderPlaneProjector_swigregister
SbCylinderPlaneProjector_swigregister(SbCylinderPlaneProjector)

class SbCylinderSheetProjector(SbCylinderProjector):
    """Proxy of C++ SbCylinderSheetProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbCylinderSheetProjector self, SbBool const orienttoeye=1) -> SbCylinderSheetProjector
        __init__(SbCylinderSheetProjector self) -> SbCylinderSheetProjector
        __init__(SbCylinderSheetProjector self, SbCylinder cyl, SbBool const orienttoeye=1) -> SbCylinderSheetProjector
        __init__(SbCylinderSheetProjector self, SbCylinder cyl) -> SbCylinderSheetProjector
        """
        this = _coin.new_SbCylinderSheetProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbCylinderSheetProjector self) -> SbProjector"""
        return _coin.SbCylinderSheetProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbCylinderSheetProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbCylinderSheetProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbCylinderSheetProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbCylinderSheetProjector_getRotation(self, point1, point2)

    __swig_destroy__ = _coin.delete_SbCylinderSheetProjector
    __del__ = lambda self: None
SbCylinderSheetProjector_swigregister = _coin.SbCylinderSheetProjector_swigregister
SbCylinderSheetProjector_swigregister(SbCylinderSheetProjector)

class SbLineProjector(SbProjector):
    """Proxy of C++ SbLineProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbLineProjector self) -> SbLineProjector"""
        this = _coin.new_SbLineProjector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbLineProjector self) -> SbProjector"""
        return _coin.SbLineProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbLineProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbLineProjector_project(self, point)


    def tryProject(self, point: 'SbVec2f', epsilon: 'float const', result: 'SbVec3f') -> "SbBool":
        """tryProject(SbLineProjector self, SbVec2f point, float const epsilon, SbVec3f result) -> SbBool"""
        return _coin.SbLineProjector_tryProject(self, point, epsilon, result)


    def setLine(self, line: 'SbLine') -> "void":
        """setLine(SbLineProjector self, SbLine line)"""
        return _coin.SbLineProjector_setLine(self, line)


    def getLine(self) -> "SbLine const &":
        """getLine(SbLineProjector self) -> SbLine"""
        return _coin.SbLineProjector_getLine(self)


    def getVector(self, *args) -> "SbVec3f":
        """
        getVector(SbLineProjector self, SbVec2f viewpos1, SbVec2f viewpos2) -> SbVec3f
        getVector(SbLineProjector self, SbVec2f viewpos) -> SbVec3f
        """
        return _coin.SbLineProjector_getVector(self, *args)


    def setStartPosition(self, *args) -> "void":
        """
        setStartPosition(SbLineProjector self, SbVec2f viewpos)
        setStartPosition(SbLineProjector self, SbVec3f point)
        """
        return _coin.SbLineProjector_setStartPosition(self, *args)

    __swig_destroy__ = _coin.delete_SbLineProjector
    __del__ = lambda self: None
SbLineProjector_swigregister = _coin.SbLineProjector_swigregister
SbLineProjector_swigregister(SbLineProjector)

class SbPlaneProjector(SbProjector):
    """Proxy of C++ SbPlaneProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbPlaneProjector self, SbBool const orient=0) -> SbPlaneProjector
        __init__(SbPlaneProjector self) -> SbPlaneProjector
        __init__(SbPlaneProjector self, SbPlane plane, SbBool const orient=0) -> SbPlaneProjector
        __init__(SbPlaneProjector self, SbPlane plane) -> SbPlaneProjector
        """
        this = _coin.new_SbPlaneProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbPlaneProjector self) -> SbProjector"""
        return _coin.SbPlaneProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbPlaneProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbPlaneProjector_project(self, point)


    def tryProject(self, point: 'SbVec2f', epsilon: 'float const', result: 'SbVec3f') -> "SbBool":
        """tryProject(SbPlaneProjector self, SbVec2f point, float const epsilon, SbVec3f result) -> SbBool"""
        return _coin.SbPlaneProjector_tryProject(self, point, epsilon, result)


    def setPlane(self, plane: 'SbPlane') -> "void":
        """setPlane(SbPlaneProjector self, SbPlane plane)"""
        return _coin.SbPlaneProjector_setPlane(self, plane)


    def getPlane(self) -> "SbPlane const &":
        """getPlane(SbPlaneProjector self) -> SbPlane"""
        return _coin.SbPlaneProjector_getPlane(self)


    def setOrientToEye(self, orienttoeye: 'SbBool const') -> "void":
        """setOrientToEye(SbPlaneProjector self, SbBool const orienttoeye)"""
        return _coin.SbPlaneProjector_setOrientToEye(self, orienttoeye)


    def isOrientToEye(self) -> "SbBool":
        """isOrientToEye(SbPlaneProjector self) -> SbBool"""
        return _coin.SbPlaneProjector_isOrientToEye(self)


    def getVector(self, *args) -> "SbVec3f":
        """
        getVector(SbPlaneProjector self, SbVec2f viewpos1, SbVec2f viewpos2) -> SbVec3f
        getVector(SbPlaneProjector self, SbVec2f viewpos) -> SbVec3f
        """
        return _coin.SbPlaneProjector_getVector(self, *args)


    def setStartPosition(self, *args) -> "void":
        """
        setStartPosition(SbPlaneProjector self, SbVec2f viewpos)
        setStartPosition(SbPlaneProjector self, SbVec3f point)
        """
        return _coin.SbPlaneProjector_setStartPosition(self, *args)

    __swig_destroy__ = _coin.delete_SbPlaneProjector
    __del__ = lambda self: None
SbPlaneProjector_swigregister = _coin.SbPlaneProjector_swigregister
SbPlaneProjector_swigregister(SbPlaneProjector)

class SbSphere(object):
    """Proxy of C++ SbSphere class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbSphere self) -> SbSphere
        __init__(SbSphere self, SbVec3f center, float const radius) -> SbSphere
        """
        this = _coin.new_SbSphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, center: 'SbVec3f', radius: 'float const') -> "void":
        """setValue(SbSphere self, SbVec3f center, float const radius)"""
        return _coin.SbSphere_setValue(self, center, radius)


    def setCenter(self, center: 'SbVec3f') -> "void":
        """setCenter(SbSphere self, SbVec3f center)"""
        return _coin.SbSphere_setCenter(self, center)


    def setRadius(self, radius: 'float const') -> "void":
        """setRadius(SbSphere self, float const radius)"""
        return _coin.SbSphere_setRadius(self, radius)


    def getCenter(self) -> "SbVec3f const &":
        """getCenter(SbSphere self) -> SbVec3f"""
        return _coin.SbSphere_getCenter(self)


    def getRadius(self) -> "float":
        """getRadius(SbSphere self) -> float"""
        return _coin.SbSphere_getRadius(self)


    def circumscribe(self, box: 'SbBox3f') -> "void":
        """circumscribe(SbSphere self, SbBox3f box)"""
        return _coin.SbSphere_circumscribe(self, box)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbSphere self, SbLine l, SbVec3f intersection) -> SbBool
        intersect(SbSphere self, SbLine l, SbVec3f enter, SbVec3f exit) -> SbBool
        """
        return _coin.SbSphere_intersect(self, *args)


    def pointInside(self, p: 'SbVec3f') -> "SbBool":
        """pointInside(SbSphere self, SbVec3f p) -> SbBool"""
        return _coin.SbSphere_pointInside(self, p)


    def output(self, file: 'FILE *') -> "void":
        """output(SbSphere self, FILE * file)"""
        return _coin.SbSphere_output(self, file)

    __swig_destroy__ = _coin.delete_SbSphere
    __del__ = lambda self: None
SbSphere_swigregister = _coin.SbSphere_swigregister
SbSphere_swigregister(SbSphere)

class SbSphereProjector(SbProjector):
    """Proxy of C++ SbSphereProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def projectAndGetRotation(self, point: 'SbVec2f', rot: 'SbRotation') -> "SbVec3f":
        """projectAndGetRotation(SbSphereProjector self, SbVec2f point, SbRotation rot) -> SbVec3f"""
        return _coin.SbSphereProjector_projectAndGetRotation(self, point, rot)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbSphereProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbSphereProjector_getRotation(self, point1, point2)


    def setSphere(self, sph: 'SbSphere') -> "void":
        """setSphere(SbSphereProjector self, SbSphere sph)"""
        return _coin.SbSphereProjector_setSphere(self, sph)


    def getSphere(self) -> "SbSphere const &":
        """getSphere(SbSphereProjector self) -> SbSphere"""
        return _coin.SbSphereProjector_getSphere(self)


    def setOrientToEye(self, orienttoeye: 'SbBool const') -> "void":
        """setOrientToEye(SbSphereProjector self, SbBool const orienttoeye)"""
        return _coin.SbSphereProjector_setOrientToEye(self, orienttoeye)


    def isOrientToEye(self) -> "SbBool":
        """isOrientToEye(SbSphereProjector self) -> SbBool"""
        return _coin.SbSphereProjector_isOrientToEye(self)


    def setFront(self, infront: 'SbBool const') -> "void":
        """setFront(SbSphereProjector self, SbBool const infront)"""
        return _coin.SbSphereProjector_setFront(self, infront)


    def isFront(self) -> "SbBool":
        """isFront(SbSphereProjector self) -> SbBool"""
        return _coin.SbSphereProjector_isFront(self)


    def isPointInFront(self, point: 'SbVec3f') -> "SbBool":
        """isPointInFront(SbSphereProjector self, SbVec3f point) -> SbBool"""
        return _coin.SbSphereProjector_isPointInFront(self, point)


    def setWorkingSpace(self, space: 'SbMatrix') -> "void":
        """setWorkingSpace(SbSphereProjector self, SbMatrix space)"""
        return _coin.SbSphereProjector_setWorkingSpace(self, space)

    __swig_destroy__ = _coin.delete_SbSphereProjector
    __del__ = lambda self: None
SbSphereProjector_swigregister = _coin.SbSphereProjector_swigregister
SbSphereProjector_swigregister(SbSphereProjector)

class SbSphereSheetProjector(SbSphereProjector):
    """Proxy of C++ SbSphereSheetProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbSphereSheetProjector self, SbBool const orienttoeye=1) -> SbSphereSheetProjector
        __init__(SbSphereSheetProjector self) -> SbSphereSheetProjector
        __init__(SbSphereSheetProjector self, SbSphere sph, SbBool const orienttoeye=1) -> SbSphereSheetProjector
        __init__(SbSphereSheetProjector self, SbSphere sph) -> SbSphereSheetProjector
        """
        this = _coin.new_SbSphereSheetProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbSphereSheetProjector self) -> SbProjector"""
        return _coin.SbSphereSheetProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbSphereSheetProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbSphereSheetProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbSphereSheetProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbSphereSheetProjector_getRotation(self, point1, point2)

    __swig_destroy__ = _coin.delete_SbSphereSheetProjector
    __del__ = lambda self: None
SbSphereSheetProjector_swigregister = _coin.SbSphereSheetProjector_swigregister
SbSphereSheetProjector_swigregister(SbSphereSheetProjector)

class SbSphereSectionProjector(SbSphereProjector):
    """Proxy of C++ SbSphereSectionProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbSphereSectionProjector self, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbSphereSectionProjector
        __init__(SbSphereSectionProjector self, float const edgetol=0.9) -> SbSphereSectionProjector
        __init__(SbSphereSectionProjector self) -> SbSphereSectionProjector
        __init__(SbSphereSectionProjector self, SbSphere sph, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbSphereSectionProjector
        __init__(SbSphereSectionProjector self, SbSphere sph, float const edgetol=0.9) -> SbSphereSectionProjector
        __init__(SbSphereSectionProjector self, SbSphere sph) -> SbSphereSectionProjector
        """
        this = _coin.new_SbSphereSectionProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbSphereSectionProjector self) -> SbProjector"""
        return _coin.SbSphereSectionProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbSphereSectionProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbSphereSectionProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbSphereSectionProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbSphereSectionProjector_getRotation(self, point1, point2)


    def setTolerance(self, edgetol: 'float const') -> "void":
        """setTolerance(SbSphereSectionProjector self, float const edgetol)"""
        return _coin.SbSphereSectionProjector_setTolerance(self, edgetol)


    def getTolerance(self) -> "float":
        """getTolerance(SbSphereSectionProjector self) -> float"""
        return _coin.SbSphereSectionProjector_getTolerance(self)


    def setRadialFactor(self, rad: 'float const'=0.0) -> "void":
        """
        setRadialFactor(SbSphereSectionProjector self, float const rad=0.0)
        setRadialFactor(SbSphereSectionProjector self)
        """
        return _coin.SbSphereSectionProjector_setRadialFactor(self, rad)


    def getRadialFactor(self) -> "float":
        """getRadialFactor(SbSphereSectionProjector self) -> float"""
        return _coin.SbSphereSectionProjector_getRadialFactor(self)


    def isWithinTolerance(self, point: 'SbVec3f') -> "SbBool":
        """isWithinTolerance(SbSphereSectionProjector self, SbVec3f point) -> SbBool"""
        return _coin.SbSphereSectionProjector_isWithinTolerance(self, point)

    __swig_destroy__ = _coin.delete_SbSphereSectionProjector
    __del__ = lambda self: None
SbSphereSectionProjector_swigregister = _coin.SbSphereSectionProjector_swigregister
SbSphereSectionProjector_swigregister(SbSphereSectionProjector)

class SbSpherePlaneProjector(SbSphereSectionProjector):
    """Proxy of C++ SbSpherePlaneProjector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbSpherePlaneProjector self, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbSpherePlaneProjector
        __init__(SbSpherePlaneProjector self, float const edgetol=0.9) -> SbSpherePlaneProjector
        __init__(SbSpherePlaneProjector self) -> SbSpherePlaneProjector
        __init__(SbSpherePlaneProjector self, SbSphere sph, float const edgetol=0.9, SbBool const orienttoeye=1) -> SbSpherePlaneProjector
        __init__(SbSpherePlaneProjector self, SbSphere sph, float const edgetol=0.9) -> SbSpherePlaneProjector
        __init__(SbSpherePlaneProjector self, SbSphere sph) -> SbSpherePlaneProjector
        """
        this = _coin.new_SbSpherePlaneProjector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self) -> "SbProjector *":
        """copy(SbSpherePlaneProjector self) -> SbProjector"""
        return _coin.SbSpherePlaneProjector_copy(self)


    def project(self, point: 'SbVec2f') -> "SbVec3f":
        """project(SbSpherePlaneProjector self, SbVec2f point) -> SbVec3f"""
        return _coin.SbSpherePlaneProjector_project(self, point)


    def getRotation(self, point1: 'SbVec3f', point2: 'SbVec3f') -> "SbRotation":
        """getRotation(SbSpherePlaneProjector self, SbVec3f point1, SbVec3f point2) -> SbRotation"""
        return _coin.SbSpherePlaneProjector_getRotation(self, point1, point2)

    __swig_destroy__ = _coin.delete_SbSpherePlaneProjector
    __del__ = lambda self: None
SbSpherePlaneProjector_swigregister = _coin.SbSpherePlaneProjector_swigregister
SbSpherePlaneProjector_swigregister(SbSpherePlaneProjector)

class SbClip(object):
    """Proxy of C++ SbClip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, callback: 'SbClipCallback *'=None, userdata: 'void *'=None):
        """
        __init__(SbClip self, SbClipCallback * callback=None, void * userdata=None) -> SbClip
        __init__(SbClip self, SbClipCallback * callback=None) -> SbClip
        __init__(SbClip self) -> SbClip
        """
        this = _coin.new_SbClip(callback, userdata)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addVertex(self, v: 'SbVec3f', vdata: 'void *'=None) -> "void":
        """
        addVertex(SbClip self, SbVec3f v, void * vdata=None)
        addVertex(SbClip self, SbVec3f v)
        """
        return _coin.SbClip_addVertex(self, v, vdata)


    def reset(self) -> "void":
        """reset(SbClip self)"""
        return _coin.SbClip_reset(self)


    def clip(self, plane: 'SbPlane') -> "void":
        """clip(SbClip self, SbPlane plane)"""
        return _coin.SbClip_clip(self, plane)


    def getNumVertices(self) -> "int":
        """getNumVertices(SbClip self) -> int"""
        return _coin.SbClip_getNumVertices(self)


    def getVertex(self, idx: 'int const', v: 'SbVec3f', vdata: 'void **'=None) -> "void":
        """
        getVertex(SbClip self, int const idx, SbVec3f v, void ** vdata=None)
        getVertex(SbClip self, int const idx, SbVec3f v)
        """
        return _coin.SbClip_getVertex(self, idx, v, vdata)


    def getVertexData(self, idx: 'int const') -> "void *":
        """getVertexData(SbClip self, int const idx) -> void *"""
        return _coin.SbClip_getVertexData(self, idx)

    __swig_destroy__ = _coin.delete_SbClip
    __del__ = lambda self: None
SbClip_swigregister = _coin.SbClip_swigregister
SbClip_swigregister(SbClip)

class SbDPRotation(object):
    """Proxy of C++ SbDPRotation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbDPRotation self) -> SbDPRotation
        __init__(SbDPRotation self, SbVec3d axis, double const radians) -> SbDPRotation
        __init__(SbDPRotation self, double const [4] q) -> SbDPRotation
        __init__(SbDPRotation self, double const q0, double const q1, double const q2, double const q3) -> SbDPRotation
        __init__(SbDPRotation self, SbDPMatrix m) -> SbDPRotation
        __init__(SbDPRotation self, SbVec3d rotateFrom, SbVec3d rotateTo) -> SbDPRotation
        """
        this = _coin.new_SbDPRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getValue(self) -> "double const *":
        """getValue(SbDPRotation self) -> double const *"""
        return _coin.SbDPRotation_getValue(self)


    def getAxisAngle(self) -> "void":
        """getAxisAngle(SbDPRotation self)"""
        return _coin.SbDPRotation_getAxisAngle(self)


    def getMatrix(self) -> "void":
        """getMatrix(SbDPRotation self)"""
        return _coin.SbDPRotation_getMatrix(self)


    def invert(self) -> "SbDPRotation &":
        """invert(SbDPRotation self) -> SbDPRotation"""
        return _coin.SbDPRotation_invert(self)


    def inverse(self) -> "SbDPRotation":
        """inverse(SbDPRotation self) -> SbDPRotation"""
        return _coin.SbDPRotation_inverse(self)


    def setValue(self, *args) -> "SbDPRotation &":
        """
        setValue(SbDPRotation self, double const q0, double const q1, double const q2, double const q3) -> SbDPRotation
        setValue(SbDPRotation self, double const [4] q) -> SbDPRotation
        setValue(SbDPRotation self, SbDPMatrix m) -> SbDPRotation
        setValue(SbDPRotation self, SbVec3d axis, double const radians) -> SbDPRotation
        setValue(SbDPRotation self, SbVec3d rotateFrom, SbVec3d rotateTo) -> SbDPRotation
        """
        return _coin.SbDPRotation_setValue(self, *args)


    def equals(self, r: 'SbDPRotation', tolerance: 'double') -> "SbBool":
        """equals(SbDPRotation self, SbDPRotation r, double tolerance) -> SbBool"""
        return _coin.SbDPRotation_equals(self, r, tolerance)


    def multVec(self, src: 'SbVec3d', dst: 'SbVec3d') -> "void":
        """multVec(SbDPRotation self, SbVec3d src, SbVec3d dst)"""
        return _coin.SbDPRotation_multVec(self, src, dst)


    def scaleAngle(self, scaleFactor: 'double const') -> "void":
        """scaleAngle(SbDPRotation self, double const scaleFactor)"""
        return _coin.SbDPRotation_scaleAngle(self, scaleFactor)


    def slerp(rot0: 'SbDPRotation', rot1: 'SbDPRotation', t: 'double') -> "SbDPRotation":
        """slerp(SbDPRotation rot0, SbDPRotation rot1, double t) -> SbDPRotation"""
        return _coin.SbDPRotation_slerp(rot0, rot1, t)

    slerp = staticmethod(slerp)

    def identity() -> "SbDPRotation":
        """identity() -> SbDPRotation"""
        return _coin.SbDPRotation_identity()

    identity = staticmethod(identity)

    def output(self, fp: 'FILE *') -> "void":
        """output(SbDPRotation self, FILE * fp)"""
        return _coin.SbDPRotation_output(self, fp)


    def __imul__(self, *args) -> "SbDPRotation &":
        """
        __imul__(SbDPRotation self, SbDPRotation q) -> SbDPRotation
        __imul__(SbDPRotation self, double const s) -> SbDPRotation
        """
        return _coin.SbDPRotation___imul__(self, *args)


    def __mul__(self, *args) -> "SbVec3d":
        """
        __mul__(SbDPRotation self, SbDPRotation u) -> SbDPRotation
        __mul__(SbDPRotation self, double const d) -> SbDPRotation
        __mul__(SbDPRotation self, SbVec3d v) -> SbVec3d
        """
        return _coin.SbDPRotation___mul__(self, *args)


    def __eq__(self, u: 'SbDPRotation') -> "int":
        """__eq__(SbDPRotation self, SbDPRotation u) -> int"""
        return _coin.SbDPRotation___eq__(self, u)


    def __nq__(self, u: 'SbDPRotation') -> "int":
        """__nq__(SbDPRotation self, SbDPRotation u) -> int"""
        return _coin.SbDPRotation___nq__(self, u)

    __swig_destroy__ = _coin.delete_SbDPRotation
    __del__ = lambda self: None
SbDPRotation_swigregister = _coin.SbDPRotation_swigregister
SbDPRotation_swigregister(SbDPRotation)

def SbDPRotation_slerp(rot0: 'SbDPRotation', rot1: 'SbDPRotation', t: 'double') -> "SbDPRotation":
    """SbDPRotation_slerp(SbDPRotation rot0, SbDPRotation rot1, double t) -> SbDPRotation"""
    return _coin.SbDPRotation_slerp(rot0, rot1, t)

def SbDPRotation_identity() -> "SbDPRotation":
    """SbDPRotation_identity() -> SbDPRotation"""
    return _coin.SbDPRotation_identity()

class SbDPMatrix(object):
    """Proxy of C++ SbDPMatrix class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbDPMatrix self) -> SbDPMatrix
        __init__(SbDPMatrix self, double const a11, double const a12, double const a13, double const a14, double const a21, double const a22, double const a23, double const a24, double const a31, double const a32, double const a33, double const a34, double const a41, double const a42, double const a43, double const a44) -> SbDPMatrix
        __init__(SbDPMatrix self, SbDPMat const & matrix) -> SbDPMatrix
        __init__(SbDPMatrix self, SbDPMat const * matrix) -> SbDPMatrix
        __init__(SbDPMatrix self) -> SbDPMatrix
        """
        this = _coin.new_SbDPMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbDPMatrix
    __del__ = lambda self: None

    def setValue(self, *args) -> "void":
        """
        setValue(SbDPMatrix self, SbDPMat const & m)
        setValue(SbDPMatrix self, SbMatrix m)
        setValue(SbDPMatrix self, double const * pMat)
        """
        return _coin.SbDPMatrix_setValue(self, *args)


    def makeIdentity(self) -> "void":
        """makeIdentity(SbDPMatrix self)"""
        return _coin.SbDPMatrix_makeIdentity(self)


    def setRotate(self, q: 'SbDPRotation') -> "void":
        """setRotate(SbDPMatrix self, SbDPRotation q)"""
        return _coin.SbDPMatrix_setRotate(self, q)


    def inverse(self) -> "SbDPMatrix":
        """inverse(SbDPMatrix self) -> SbDPMatrix"""
        return _coin.SbDPMatrix_inverse(self)


    def det3(self, *args) -> "double":
        """
        det3(SbDPMatrix self, int r1, int r2, int r3, int c1, int c2, int c3) -> double
        det3(SbDPMatrix self) -> double
        """
        return _coin.SbDPMatrix_det3(self, *args)


    def det4(self) -> "double":
        """det4(SbDPMatrix self) -> double"""
        return _coin.SbDPMatrix_det4(self)


    def equals(self, m: 'SbDPMatrix', tolerance: 'double') -> "SbBool":
        """equals(SbDPMatrix self, SbDPMatrix m, double tolerance) -> SbBool"""
        return _coin.SbDPMatrix_equals(self, m, tolerance)


    def getValue(self, *args) -> "void":
        """
        getValue(SbDPMatrix self) -> SbDPMat const
        getValue(SbDPMatrix self, SbDPMat & m)
        """
        return _coin.SbDPMatrix_getValue(self, *args)


    def identity() -> "SbDPMatrix":
        """identity() -> SbDPMatrix"""
        return _coin.SbDPMatrix_identity()

    identity = staticmethod(identity)

    def setScale(self, *args) -> "void":
        """
        setScale(SbDPMatrix self, double const s)
        setScale(SbDPMatrix self, SbVec3d s)
        """
        return _coin.SbDPMatrix_setScale(self, *args)


    def setTranslate(self, t: 'SbVec3d') -> "void":
        """setTranslate(SbDPMatrix self, SbVec3d t)"""
        return _coin.SbDPMatrix_setTranslate(self, t)


    def setTransform(self, *args) -> "void":
        """
        setTransform(SbDPMatrix self, SbVec3d t, SbDPRotation r, SbVec3d s)
        setTransform(SbDPMatrix self, SbVec3d t, SbDPRotation r, SbVec3d s, SbDPRotation so)
        setTransform(SbDPMatrix self, SbVec3d translation, SbDPRotation rotation, SbVec3d scaleFactor, SbDPRotation scaleOrientation, SbVec3d center)
        """
        return _coin.SbDPMatrix_setTransform(self, *args)


    def getTransform(self, *args) -> "void":
        """
        getTransform(SbDPMatrix self, SbVec3d t, SbDPRotation r, SbVec3d s, SbDPRotation so)
        getTransform(SbDPMatrix self, SbVec3d translation, SbDPRotation rotation, SbVec3d scaleFactor, SbDPRotation scaleOrientation, SbVec3d center)
        """
        return _coin.SbDPMatrix_getTransform(self, *args)


    def factor(self, r: 'SbDPMatrix', s: 'SbVec3d', u: 'SbDPMatrix', t: 'SbVec3d', proj: 'SbDPMatrix') -> "SbBool":
        """factor(SbDPMatrix self, SbDPMatrix r, SbVec3d s, SbDPMatrix u, SbVec3d t, SbDPMatrix proj) -> SbBool"""
        return _coin.SbDPMatrix_factor(self, r, s, u, t, proj)


    def LUDecomposition(self, index: 'int [4]', d: 'double &') -> "SbBool":
        """LUDecomposition(SbDPMatrix self, int [4] index, double & d) -> SbBool"""
        return _coin.SbDPMatrix_LUDecomposition(self, index, d)


    def LUBackSubstitution(self, index: 'int [4]', b: 'double [4]') -> "void":
        """LUBackSubstitution(SbDPMatrix self, int [4] index, double [4] b)"""
        return _coin.SbDPMatrix_LUBackSubstitution(self, index, b)


    def transpose(self) -> "SbDPMatrix":
        """transpose(SbDPMatrix self) -> SbDPMatrix"""
        return _coin.SbDPMatrix_transpose(self)


    def multRight(self, m: 'SbDPMatrix') -> "SbDPMatrix &":
        """multRight(SbDPMatrix self, SbDPMatrix m) -> SbDPMatrix"""
        return _coin.SbDPMatrix_multRight(self, m)


    def multLeft(self, m: 'SbDPMatrix') -> "SbDPMatrix &":
        """multLeft(SbDPMatrix self, SbDPMatrix m) -> SbDPMatrix"""
        return _coin.SbDPMatrix_multLeft(self, m)


    def multMatrixVec(self, src: 'SbVec3d', dst: 'SbVec3d') -> "void":
        """multMatrixVec(SbDPMatrix self, SbVec3d src, SbVec3d dst)"""
        return _coin.SbDPMatrix_multMatrixVec(self, src, dst)


    def multDirMatrix(self, src: 'SbVec3d', dst: 'SbVec3d') -> "void":
        """multDirMatrix(SbDPMatrix self, SbVec3d src, SbVec3d dst)"""
        return _coin.SbDPMatrix_multDirMatrix(self, src, dst)


    def multLineMatrix(self, src: 'SbDPLine', dst: 'SbDPLine') -> "void":
        """multLineMatrix(SbDPMatrix self, SbDPLine src, SbDPLine dst)"""
        return _coin.SbDPMatrix_multLineMatrix(self, src, dst)


    def multVecMatrix(self, *args) -> "void":
        """
        multVecMatrix(SbDPMatrix self, SbVec3d src, SbVec3d dst)
        multVecMatrix(SbDPMatrix self, SbVec4d src, SbVec4d dst)
        """
        return _coin.SbDPMatrix_multVecMatrix(self, *args)


    def output(self, fp: 'FILE *') -> "void":
        """output(SbDPMatrix self, FILE * fp)"""
        return _coin.SbDPMatrix_output(self, fp)


    def __imul__(self, m: 'SbDPMatrix') -> "SbDPMatrix &":
        """__imul__(SbDPMatrix self, SbDPMatrix m) -> SbDPMatrix"""
        return _coin.SbDPMatrix___imul__(self, m)


    def __mul__(self, *args) -> "SbVec3d":
        """
        __mul__(SbDPMatrix self, SbDPMatrix u) -> SbDPMatrix
        __mul__(SbDPMatrix self, SbVec3d u) -> SbVec3d
        """
        return _coin.SbDPMatrix___mul__(self, *args)


    def __rmul__(self, u: 'SbVec3d') -> "SbVec3d":
        """__rmul__(SbDPMatrix self, SbVec3d u) -> SbVec3d"""
        return _coin.SbDPMatrix___rmul__(self, u)


    def __eq__(self, u: 'SbDPMatrix') -> "int":
        """__eq__(SbDPMatrix self, SbDPMatrix u) -> int"""
        return _coin.SbDPMatrix___eq__(self, u)


    def __ne__(self, u: 'SbDPMatrix') -> "int":
        """__ne__(SbDPMatrix self, SbDPMatrix u) -> int"""
        return _coin.SbDPMatrix___ne__(self, u)

SbDPMatrix_swigregister = _coin.SbDPMatrix_swigregister
SbDPMatrix_swigregister(SbDPMatrix)

def SbDPMatrix_identity() -> "SbDPMatrix":
    """SbDPMatrix_identity() -> SbDPMatrix"""
    return _coin.SbDPMatrix_identity()

class SbDPLine(object):
    """Proxy of C++ SbDPLine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbDPLine self) -> SbDPLine
        __init__(SbDPLine self, SbVec3d p0, SbVec3d p1) -> SbDPLine
        """
        this = _coin.new_SbDPLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, p0: 'SbVec3d', p1: 'SbVec3d') -> "void":
        """setValue(SbDPLine self, SbVec3d p0, SbVec3d p1)"""
        return _coin.SbDPLine_setValue(self, p0, p1)


    def setPosDir(self, position: 'SbVec3d', direction: 'SbVec3d') -> "void":
        """setPosDir(SbDPLine self, SbVec3d position, SbVec3d direction)"""
        return _coin.SbDPLine_setPosDir(self, position, direction)


    def getClosestPoints(self, line2: 'SbDPLine', ptOnThis: 'SbVec3d', ptOnLine2: 'SbVec3d') -> "SbBool":
        """getClosestPoints(SbDPLine self, SbDPLine line2, SbVec3d ptOnThis, SbVec3d ptOnLine2) -> SbBool"""
        return _coin.SbDPLine_getClosestPoints(self, line2, ptOnThis, ptOnLine2)


    def getClosestPoint(self, point: 'SbVec3d') -> "SbVec3d":
        """getClosestPoint(SbDPLine self, SbVec3d point) -> SbVec3d"""
        return _coin.SbDPLine_getClosestPoint(self, point)


    def getPosition(self) -> "SbVec3d const &":
        """getPosition(SbDPLine self) -> SbVec3d"""
        return _coin.SbDPLine_getPosition(self)


    def getDirection(self) -> "SbVec3d const &":
        """getDirection(SbDPLine self) -> SbVec3d"""
        return _coin.SbDPLine_getDirection(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbDPLine self, FILE * file)"""
        return _coin.SbDPLine_output(self, file)

    __swig_destroy__ = _coin.delete_SbDPLine
    __del__ = lambda self: None
SbDPLine_swigregister = _coin.SbDPLine_swigregister
SbDPLine_swigregister(SbDPLine)

class SbDPPlane(object):
    """Proxy of C++ SbDPPlane class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbDPPlane self) -> SbDPPlane
        __init__(SbDPPlane self, SbVec3d normal, double const D) -> SbDPPlane
        __init__(SbDPPlane self, SbVec3d p0, SbVec3d p1, SbVec3d p2) -> SbDPPlane
        __init__(SbDPPlane self, SbVec3d normal, SbVec3d point) -> SbDPPlane
        """
        this = _coin.new_SbDPPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def offset(self, d: 'double const') -> "void":
        """offset(SbDPPlane self, double const d)"""
        return _coin.SbDPPlane_offset(self, d)


    def transform(self) -> "void":
        """transform(SbDPPlane self)"""
        return _coin.SbDPPlane_transform(self)


    def isInHalfSpace(self, point: 'SbVec3d') -> "SbBool":
        """isInHalfSpace(SbDPPlane self, SbVec3d point) -> SbBool"""
        return _coin.SbDPPlane_isInHalfSpace(self, point)


    def getDistance(self, point: 'SbVec3d') -> "double":
        """getDistance(SbDPPlane self, SbVec3d point) -> double"""
        return _coin.SbDPPlane_getDistance(self, point)


    def getNormal(self) -> "SbVec3d const &":
        """getNormal(SbDPPlane self) -> SbVec3d"""
        return _coin.SbDPPlane_getNormal(self)


    def getDistanceFromOrigin(self) -> "double":
        """getDistanceFromOrigin(SbDPPlane self) -> double"""
        return _coin.SbDPPlane_getDistanceFromOrigin(self)


    def output(self, file: 'FILE *') -> "void":
        """output(SbDPPlane self, FILE * file)"""
        return _coin.SbDPPlane_output(self, file)


    def intersect(self, *args) -> "SbBool":
        """
        intersect(SbDPPlane self, SbDPLine l, SbVec3d intersection) -> SbBool
        intersect(SbDPPlane self, SbDPPlane pl, SbDPLine line) -> SbBool
        """
        return _coin.SbDPPlane_intersect(self, *args)


    def __eq__(self, u: 'SbDPPlane') -> "int":
        """__eq__(SbDPPlane self, SbDPPlane u) -> int"""
        return _coin.SbDPPlane___eq__(self, u)


    def __ne__(self, u: 'SbDPPlane') -> "int":
        """__ne__(SbDPPlane self, SbDPPlane u) -> int"""
        return _coin.SbDPPlane___ne__(self, u)

    __swig_destroy__ = _coin.delete_SbDPPlane
    __del__ = lambda self: None
SbDPPlane_swigregister = _coin.SbDPPlane_swigregister
SbDPPlane_swigregister(SbDPPlane)

class SbHeapFuncs(object):
    """Proxy of C++ SbHeapFuncs class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eval_func = _swig_property(_coin.SbHeapFuncs_eval_func_get, _coin.SbHeapFuncs_eval_func_set)
    get_index_func = _swig_property(_coin.SbHeapFuncs_get_index_func_get, _coin.SbHeapFuncs_get_index_func_set)
    set_index_func = _swig_property(_coin.SbHeapFuncs_set_index_func_get, _coin.SbHeapFuncs_set_index_func_set)

    def __init__(self):
        """__init__(SbHeapFuncs self) -> SbHeapFuncs"""
        this = _coin.new_SbHeapFuncs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbHeapFuncs
    __del__ = lambda self: None
SbHeapFuncs_swigregister = _coin.SbHeapFuncs_swigregister
SbHeapFuncs_swigregister(SbHeapFuncs)

class SbHeap(object):
    """Proxy of C++ SbHeap class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, SbHeapFuncs: 'SbHeapFuncs', initsize: 'int const'=1024):
        """
        __init__(SbHeap self, SbHeapFuncs SbHeapFuncs, int const initsize=1024) -> SbHeap
        __init__(SbHeap self, SbHeapFuncs SbHeapFuncs) -> SbHeap
        """
        this = _coin.new_SbHeap(SbHeapFuncs, initsize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbHeap
    __del__ = lambda self: None

    def emptyHeap(self) -> "void":
        """emptyHeap(SbHeap self)"""
        return _coin.SbHeap_emptyHeap(self)


    def size(self) -> "int":
        """size(SbHeap self) -> int"""
        return _coin.SbHeap_size(self)


    def add(self, obj: 'void *') -> "int":
        """add(SbHeap self, void * obj) -> int"""
        return _coin.SbHeap_add(self, obj)


    def remove(self, *args) -> "void":
        """
        remove(SbHeap self, int const pos)
        remove(SbHeap self, void * obj)
        """
        return _coin.SbHeap_remove(self, *args)


    def extractMin(self) -> "void *":
        """extractMin(SbHeap self) -> void *"""
        return _coin.SbHeap_extractMin(self)


    def getMin(self) -> "void *":
        """getMin(SbHeap self) -> void *"""
        return _coin.SbHeap_getMin(self)


    def newWeight(self, obj: 'void *', hpos: 'int'=-1) -> "void":
        """
        newWeight(SbHeap self, void * obj, int hpos=-1)
        newWeight(SbHeap self, void * obj)
        """
        return _coin.SbHeap_newWeight(self, obj, hpos)


    def buildHeap(self, progresscb: 'SbBool (*)(float,void *)'=None, data: 'void *'=None) -> "SbBool":
        """
        buildHeap(SbHeap self, SbBool (*)(float,void *) progresscb=None, void * data=None) -> SbBool
        buildHeap(SbHeap self, SbBool (*)(float,void *) progresscb=None) -> SbBool
        buildHeap(SbHeap self) -> SbBool
        """
        return _coin.SbHeap_buildHeap(self, progresscb, data)


    def traverseHeap(self, func: 'SbBool (*)(void *,void *)', userdata: 'void *') -> "SbBool":
        """traverseHeap(SbHeap self, SbBool (*)(void *,void *) func, void * userdata) -> SbBool"""
        return _coin.SbHeap_traverseHeap(self, func, userdata)

SbHeap_swigregister = _coin.SbHeap_swigregister
SbHeap_swigregister(SbHeap)

class SbImage(object):
    """Proxy of C++ SbImage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbImage self) -> SbImage
        __init__(SbImage self, unsigned char const * bytes) -> SbImage
        __init__(SbImage self, unsigned char const * bytes) -> SbImage
        __init__(SbImage self, SbImage image) -> SbImage
        """
        this = _coin.new_SbImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbImage
    __del__ = lambda self: None

    def setValue(self, *args) -> "void":
        """
        setValue(SbImage self, SbVec2s size)
        setValue(SbImage self, SbVec3s size)
        """
        return _coin.SbImage_setValue(self, *args)


    def setValuePtr(self, *args) -> "void":
        """
        setValuePtr(SbImage self, SbVec2s size)
        setValuePtr(SbImage self, SbVec3s size)
        """
        return _coin.SbImage_setValuePtr(self, *args)


    def getSize(self) -> "SbVec3s":
        """getSize(SbImage self) -> SbVec3s"""
        return _coin.SbImage_getSize(self)


    def readFile(self, filename: 'SbString', searchdirectories: 'SbString const *const *'=None, numdirectories: 'int const'=0) -> "SbBool":
        """
        readFile(SbImage self, SbString filename, SbString const *const * searchdirectories=None, int const numdirectories=0) -> SbBool
        readFile(SbImage self, SbString filename, SbString const *const * searchdirectories=None) -> SbBool
        readFile(SbImage self, SbString filename) -> SbBool
        """
        return _coin.SbImage_readFile(self, filename, searchdirectories, numdirectories)


    def __eq__(self, image: 'SbImage') -> "int":
        """__eq__(SbImage self, SbImage image) -> int"""
        return _coin.SbImage___eq__(self, image)


    def __ne__(self, image: 'SbImage') -> "int":
        """__ne__(SbImage self, SbImage image) -> int"""
        return _coin.SbImage___ne__(self, image)


    def addReadImageCB(cb: 'SbImageReadImageCB *', closure: 'void *') -> "void":
        """addReadImageCB(SbImageReadImageCB * cb, void * closure)"""
        return _coin.SbImage_addReadImageCB(cb, closure)

    addReadImageCB = staticmethod(addReadImageCB)

    def removeReadImageCB(cb: 'SbImageReadImageCB *', closure: 'void *') -> "void":
        """removeReadImageCB(SbImageReadImageCB * cb, void * closure)"""
        return _coin.SbImage_removeReadImageCB(cb, closure)

    removeReadImageCB = staticmethod(removeReadImageCB)

    def searchForFile(basename: 'SbString', dirlist: 'SbString const *const *', numdirs: 'int const') -> "SbString":
        """searchForFile(SbString basename, SbString const *const * dirlist, int const numdirs) -> SbString"""
        return _coin.SbImage_searchForFile(basename, dirlist, numdirs)

    searchForFile = staticmethod(searchForFile)

    def hasData(self) -> "SbBool":
        """hasData(SbImage self) -> SbBool"""
        return _coin.SbImage_hasData(self)


    def readLock(self) -> "void":
        """readLock(SbImage self)"""
        return _coin.SbImage_readLock(self)


    def readUnlock(self) -> "void":
        """readUnlock(SbImage self)"""
        return _coin.SbImage_readUnlock(self)


    def scheduleReadFile(self, cb: 'SbImageScheduleReadCB *', closure: 'void *', filename: 'SbString', searchdirectories: 'SbString const *const *'=None, numdirectories: 'int const'=0) -> "SbBool":
        """
        scheduleReadFile(SbImage self, SbImageScheduleReadCB * cb, void * closure, SbString filename, SbString const *const * searchdirectories=None, int const numdirectories=0) -> SbBool
        scheduleReadFile(SbImage self, SbImageScheduleReadCB * cb, void * closure, SbString filename, SbString const *const * searchdirectories=None) -> SbBool
        scheduleReadFile(SbImage self, SbImageScheduleReadCB * cb, void * closure, SbString filename) -> SbBool
        """
        return _coin.SbImage_scheduleReadFile(self, cb, closure, filename, searchdirectories, numdirectories)


    def getValue(self, *args) -> "PyObject *":
        """
        getValue(SbImage self, SbVec2s size, int & bytesperpixel) -> unsigned char
        getValue(SbImage self, SbVec3s size, int & bytesperpixel) -> unsigned char
        getValue(SbImage self) -> PyObject *
        """
        return _coin.SbImage_getValue(self, *args)

SbImage_swigregister = _coin.SbImage_swigregister
SbImage_swigregister(SbImage)

def SbImage_addReadImageCB(cb: 'SbImageReadImageCB *', closure: 'void *') -> "void":
    """SbImage_addReadImageCB(SbImageReadImageCB * cb, void * closure)"""
    return _coin.SbImage_addReadImageCB(cb, closure)

def SbImage_removeReadImageCB(cb: 'SbImageReadImageCB *', closure: 'void *') -> "void":
    """SbImage_removeReadImageCB(SbImageReadImageCB * cb, void * closure)"""
    return _coin.SbImage_removeReadImageCB(cb, closure)

def SbImage_searchForFile(basename: 'SbString', dirlist: 'SbString const *const *', numdirs: 'int const') -> "SbString":
    """SbImage_searchForFile(SbString basename, SbString const *const * dirlist, int const numdirs) -> SbString"""
    return _coin.SbImage_searchForFile(basename, dirlist, numdirs)

class SbOctTreeFuncs(object):
    """Proxy of C++ SbOctTreeFuncs class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ptinsidefunc = _swig_property(_coin.SbOctTreeFuncs_ptinsidefunc_get, _coin.SbOctTreeFuncs_ptinsidefunc_set)
    insideboxfunc = _swig_property(_coin.SbOctTreeFuncs_insideboxfunc_get, _coin.SbOctTreeFuncs_insideboxfunc_set)
    insidespherefunc = _swig_property(_coin.SbOctTreeFuncs_insidespherefunc_get, _coin.SbOctTreeFuncs_insidespherefunc_set)
    insideplanesfunc = _swig_property(_coin.SbOctTreeFuncs_insideplanesfunc_get, _coin.SbOctTreeFuncs_insideplanesfunc_set)

    def __init__(self):
        """__init__(SbOctTreeFuncs self) -> SbOctTreeFuncs"""
        this = _coin.new_SbOctTreeFuncs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbOctTreeFuncs
    __del__ = lambda self: None
SbOctTreeFuncs_swigregister = _coin.SbOctTreeFuncs_swigregister
SbOctTreeFuncs_swigregister(SbOctTreeFuncs)

class SbOctTree(object):
    """Proxy of C++ SbOctTree class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, bbox: 'SbBox3f', itemfuncs: 'SbOctTreeFuncs', maxitemspernode: 'int const'=64):
        """
        __init__(SbOctTree self, SbBox3f bbox, SbOctTreeFuncs itemfuncs, int const maxitemspernode=64) -> SbOctTree
        __init__(SbOctTree self, SbBox3f bbox, SbOctTreeFuncs itemfuncs) -> SbOctTree
        """
        this = _coin.new_SbOctTree(bbox, itemfuncs, maxitemspernode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbOctTree
    __del__ = lambda self: None

    def addItem(self, item: 'void *const') -> "void":
        """addItem(SbOctTree self, void *const item)"""
        return _coin.SbOctTree_addItem(self, item)


    def removeItem(self, item: 'void *const') -> "void":
        """removeItem(SbOctTree self, void *const item)"""
        return _coin.SbOctTree_removeItem(self, item)


    def findItems(self, *args) -> "void":
        """
        findItems(SbOctTree self, SbVec3f pos, SbList< void * > & destarray, SbBool const removeduplicates=1)
        findItems(SbOctTree self, SbVec3f pos, SbList< void * > & destarray)
        findItems(SbOctTree self, SbBox3f box, SbList< void * > & destarray, SbBool const removeduplicates=1)
        findItems(SbOctTree self, SbBox3f box, SbList< void * > & destarray)
        findItems(SbOctTree self, SbSphere sphere, SbList< void * > & destarray, SbBool const removeduplicates=1)
        findItems(SbOctTree self, SbSphere sphere, SbList< void * > & destarray)
        findItems(SbOctTree self, SbPlane planes, int const numplanes, SbList< void * > & destarray, SbBool const removeduplicates=1)
        findItems(SbOctTree self, SbPlane planes, int const numplanes, SbList< void * > & destarray)
        """
        return _coin.SbOctTree_findItems(self, *args)


    def getBoundingBox(self) -> "SbBox3f const &":
        """getBoundingBox(SbOctTree self) -> SbBox3f"""
        return _coin.SbOctTree_getBoundingBox(self)


    def clear(self) -> "void":
        """clear(SbOctTree self)"""
        return _coin.SbOctTree_clear(self)


    def debugTree(self, fp: 'FILE *') -> "void":
        """debugTree(SbOctTree self, FILE * fp)"""
        return _coin.SbOctTree_debugTree(self, fp)

SbOctTree_swigregister = _coin.SbOctTree_swigregister
SbOctTree_swigregister(SbOctTree)

class SbTesselator(object):
    """Proxy of C++ SbTesselator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, func: 'SbTesselatorCB *'=None, data: 'void *'=None):
        """
        __init__(SbTesselator self, SbTesselatorCB * func=None, void * data=None) -> SbTesselator
        __init__(SbTesselator self, SbTesselatorCB * func=None) -> SbTesselator
        __init__(SbTesselator self) -> SbTesselator
        """
        this = _coin.new_SbTesselator(func, data)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbTesselator
    __del__ = lambda self: None

    def beginPolygon(self, *args) -> "void":
        """
        beginPolygon(SbTesselator self, SbBool keepVertices=0, SbVec3f normal)
        beginPolygon(SbTesselator self, SbBool keepVertices=0)
        beginPolygon(SbTesselator self)
        """
        return _coin.SbTesselator_beginPolygon(self, *args)


    def addVertex(self, v: 'SbVec3f', data: 'void *') -> "void":
        """addVertex(SbTesselator self, SbVec3f v, void * data)"""
        return _coin.SbTesselator_addVertex(self, v, data)


    def endPolygon(self) -> "void":
        """endPolygon(SbTesselator self)"""
        return _coin.SbTesselator_endPolygon(self)


    def setCallback(self, func: 'SbTesselatorCB *', data: 'void *') -> "void":
        """setCallback(SbTesselator self, SbTesselatorCB * func, void * data)"""
        return _coin.SbTesselator_setCallback(self, func, data)

SbTesselator_swigregister = _coin.SbTesselator_swigregister
SbTesselator_swigregister(SbTesselator)

class SoTimerQueueSensor(SoSensor):
    """Proxy of C++ SoTimerQueueSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoTimerQueueSensor *"))
          newobj = _coin.new_SoTimerQueueSensor_scb_v(*args)
       else:
          self.this = _coin.new_SoTimerQueueSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoTimerQueueSensor
    __del__ = lambda self: None

    def getTriggerTime(self) -> "SbTime const &":
        """getTriggerTime(SoTimerQueueSensor self) -> SbTime"""
        return _coin.SoTimerQueueSensor_getTriggerTime(self)


    def schedule(self) -> "void":
        """schedule(SoTimerQueueSensor self)"""
        return _coin.SoTimerQueueSensor_schedule(self)


    def unschedule(self) -> "void":
        """unschedule(SoTimerQueueSensor self)"""
        return _coin.SoTimerQueueSensor_unschedule(self)


    def isScheduled(self) -> "SbBool":
        """isScheduled(SoTimerQueueSensor self) -> SbBool"""
        return _coin.SoTimerQueueSensor_isScheduled(self)


    def trigger(self) -> "void":
        """trigger(SoTimerQueueSensor self)"""
        return _coin.SoTimerQueueSensor_trigger(self)

SoTimerQueueSensor_swigregister = _coin.SoTimerQueueSensor_swigregister
SoTimerQueueSensor_swigregister(SoTimerQueueSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoTimerQueueSensor *"))
      newobj = _coin.new_SoTimerQueueSensor_scb_v(*args)
   else:
      self.this = _coin.new_SoTimerQueueSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoAlarmSensor(SoTimerQueueSensor):
    """Proxy of C++ SoAlarmSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoAlarmSensor *"))
          newobj = _coin.new_SoAlarmSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoAlarmSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoAlarmSensor
    __del__ = lambda self: None

    def setTime(self, abstime: 'SbTime') -> "void":
        """setTime(SoAlarmSensor self, SbTime abstime)"""
        return _coin.SoAlarmSensor_setTime(self, abstime)


    def setTimeFromNow(self, reltime: 'SbTime') -> "void":
        """setTimeFromNow(SoAlarmSensor self, SbTime reltime)"""
        return _coin.SoAlarmSensor_setTimeFromNow(self, reltime)


    def getTime(self) -> "SbTime const &":
        """getTime(SoAlarmSensor self) -> SbTime"""
        return _coin.SoAlarmSensor_getTime(self)


    def schedule(self) -> "void":
        """schedule(SoAlarmSensor self)"""
        return _coin.SoAlarmSensor_schedule(self)

SoAlarmSensor_swigregister = _coin.SoAlarmSensor_swigregister
SoAlarmSensor_swigregister(SoAlarmSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoAlarmSensor *"))
      newobj = _coin.new_SoAlarmSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoAlarmSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoIdleSensor(SoDelayQueueSensor):
    """Proxy of C++ SoIdleSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoIdleSensor *"))
          newobj = _coin.new_SoIdleSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoIdleSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoIdleSensor
    __del__ = lambda self: None
SoIdleSensor_swigregister = _coin.SoIdleSensor_swigregister
SoIdleSensor_swigregister(SoIdleSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoIdleSensor *"))
      newobj = _coin.new_SoIdleSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoIdleSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoNodeSensor(SoDataSensor):
    """Proxy of C++ SoNodeSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoNodeSensor *"))
          newobj = _coin.new_SoNodeSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoNodeSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoNodeSensor
    __del__ = lambda self: None

    def attach(self, node: 'SoNode') -> "void":
        """attach(SoNodeSensor self, SoNode node)"""
        return _coin.SoNodeSensor_attach(self, node)


    def detach(self) -> "void":
        """detach(SoNodeSensor self)"""
        return _coin.SoNodeSensor_detach(self)


    def getAttachedNode(self) -> "SoNode *":
        """getAttachedNode(SoNodeSensor self) -> SoNode"""
        return _coin.SoNodeSensor_getAttachedNode(self)

SoNodeSensor_swigregister = _coin.SoNodeSensor_swigregister
SoNodeSensor_swigregister(SoNodeSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoNodeSensor *"))
      newobj = _coin.new_SoNodeSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoNodeSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoOneShotSensor(SoDelayQueueSensor):
    """Proxy of C++ SoOneShotSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoOneShotSensor *"))
          newobj = _coin.new_SoOneShotSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoOneShotSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoOneShotSensor
    __del__ = lambda self: None
SoOneShotSensor_swigregister = _coin.SoOneShotSensor_swigregister
SoOneShotSensor_swigregister(SoOneShotSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoOneShotSensor *"))
      newobj = _coin.new_SoOneShotSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoOneShotSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoPathSensor(SoDataSensor):
    """Proxy of C++ SoPathSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoPathSensor *"))
          newobj = _coin.new_SoPathSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoPathSensor(*args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoPathSensor
    __del__ = lambda self: None
    PATH = _coin.SoPathSensor_PATH
    NODES = _coin.SoPathSensor_NODES
    PATH_AND_NODES = _coin.SoPathSensor_PATH_AND_NODES

    def setTriggerFilter(self, type: 'SoPathSensor::TriggerFilter const') -> "void":
        """setTriggerFilter(SoPathSensor self, SoPathSensor::TriggerFilter const type)"""
        return _coin.SoPathSensor_setTriggerFilter(self, type)


    def getTriggerFilter(self) -> "SoPathSensor::TriggerFilter":
        """getTriggerFilter(SoPathSensor self) -> SoPathSensor::TriggerFilter"""
        return _coin.SoPathSensor_getTriggerFilter(self)


    def attach(self, path: 'SoPath') -> "void":
        """attach(SoPathSensor self, SoPath path)"""
        return _coin.SoPathSensor_attach(self, path)


    def detach(self) -> "void":
        """detach(SoPathSensor self)"""
        return _coin.SoPathSensor_detach(self)


    def getAttachedPath(self) -> "SoPath *":
        """getAttachedPath(SoPathSensor self) -> SoPath"""
        return _coin.SoPathSensor_getAttachedPath(self)

SoPathSensor_swigregister = _coin.SoPathSensor_swigregister
SoPathSensor_swigregister(SoPathSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoPathSensor *"))
      newobj = _coin.new_SoPathSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoPathSensor(*args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoTimerSensor(SoTimerQueueSensor):
    """Proxy of C++ SoTimerSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1], "SoTimerSensor *"))
          newobj = _coin.new_SoTimerSensor_scb_v(*args)
       else:
          newobj = _coin.new_SoTimerSensor(*args)


       if newobj:
          self.this = newobj.this
          self.thisown = 1


    __swig_destroy__ = _coin.delete_SoTimerSensor
    __del__ = lambda self: None

    def setBaseTime(self, base: 'SbTime') -> "void":
        """setBaseTime(SoTimerSensor self, SbTime base)"""
        return _coin.SoTimerSensor_setBaseTime(self, base)


    def getBaseTime(self) -> "SbTime const &":
        """getBaseTime(SoTimerSensor self) -> SbTime"""
        return _coin.SoTimerSensor_getBaseTime(self)


    def setInterval(self, interval: 'SbTime') -> "void":
        """setInterval(SoTimerSensor self, SbTime interval)"""
        return _coin.SoTimerSensor_setInterval(self, interval)


    def getInterval(self) -> "SbTime const &":
        """getInterval(SoTimerSensor self) -> SbTime"""
        return _coin.SoTimerSensor_getInterval(self)


    def schedule(self) -> "void":
        """schedule(SoTimerSensor self)"""
        return _coin.SoTimerSensor_schedule(self)


    def unschedule(self) -> "void":
        """unschedule(SoTimerSensor self)"""
        return _coin.SoTimerSensor_unschedule(self)


    def reschedule(self, schedtime: 'SbTime') -> "void":
        """reschedule(SoTimerSensor self, SbTime schedtime)"""
        return _coin.SoTimerSensor_reschedule(self, schedtime)

SoTimerSensor_swigregister = _coin.SoTimerSensor_swigregister
SoTimerSensor_swigregister(SoTimerSensor)

def __init__(self, *args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1], "SoTimerSensor *"))
      newobj = _coin.new_SoTimerSensor_scb_v(*args)
   else:
      newobj = _coin.new_SoTimerSensor(*args)


   if newobj:
      self.this = newobj.this
      self.thisown = 1



class SoInteraction(object):
    """Proxy of C++ SoInteraction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def init() -> "void":
        """init()"""
        return _coin.SoInteraction_init()

    init = staticmethod(init)

    def __init__(self):
        """__init__(SoInteraction self) -> SoInteraction"""
        this = _coin.new_SoInteraction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoInteraction
    __del__ = lambda self: None
SoInteraction_swigregister = _coin.SoInteraction_swigregister
SoInteraction_swigregister(SoInteraction)

def SoInteraction_init() -> "void":
    """SoInteraction_init()"""
    return _coin.SoInteraction_init()

class SoOffscreenRenderer(object):
    """Proxy of C++ SoOffscreenRenderer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LUMINANCE = _coin.SoOffscreenRenderer_LUMINANCE
    LUMINANCE_TRANSPARENCY = _coin.SoOffscreenRenderer_LUMINANCE_TRANSPARENCY
    RGB = _coin.SoOffscreenRenderer_RGB
    RGB_TRANSPARENCY = _coin.SoOffscreenRenderer_RGB_TRANSPARENCY

    def __init__(self, *args):
        """
        __init__(SoOffscreenRenderer self, SbViewportRegion viewportregion) -> SoOffscreenRenderer
        __init__(SoOffscreenRenderer self, SoGLRenderAction action) -> SoOffscreenRenderer
        """
        this = _coin.new_SoOffscreenRenderer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoOffscreenRenderer
    __del__ = lambda self: None

    def getScreenPixelsPerInch() -> "float":
        """getScreenPixelsPerInch() -> float"""
        return _coin.SoOffscreenRenderer_getScreenPixelsPerInch()

    getScreenPixelsPerInch = staticmethod(getScreenPixelsPerInch)

    def getMaximumResolution() -> "SbVec2s":
        """getMaximumResolution() -> SbVec2s"""
        return _coin.SoOffscreenRenderer_getMaximumResolution()

    getMaximumResolution = staticmethod(getMaximumResolution)

    def setComponents(self, components: 'SoOffscreenRenderer::Components const') -> "void":
        """setComponents(SoOffscreenRenderer self, SoOffscreenRenderer::Components const components)"""
        return _coin.SoOffscreenRenderer_setComponents(self, components)


    def getComponents(self) -> "SoOffscreenRenderer::Components":
        """getComponents(SoOffscreenRenderer self) -> SoOffscreenRenderer::Components"""
        return _coin.SoOffscreenRenderer_getComponents(self)


    def setViewportRegion(self, region: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoOffscreenRenderer self, SbViewportRegion region)"""
        return _coin.SoOffscreenRenderer_setViewportRegion(self, region)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoOffscreenRenderer self) -> SbViewportRegion"""
        return _coin.SoOffscreenRenderer_getViewportRegion(self)


    def setBackgroundColor(self, color: 'SbColor') -> "void":
        """setBackgroundColor(SoOffscreenRenderer self, SbColor color)"""
        return _coin.SoOffscreenRenderer_setBackgroundColor(self, color)


    def getBackgroundColor(self) -> "SbColor const &":
        """getBackgroundColor(SoOffscreenRenderer self) -> SbColor"""
        return _coin.SoOffscreenRenderer_getBackgroundColor(self)


    def setGLRenderAction(self, action: 'SoGLRenderAction') -> "void":
        """setGLRenderAction(SoOffscreenRenderer self, SoGLRenderAction action)"""
        return _coin.SoOffscreenRenderer_setGLRenderAction(self, action)


    def getGLRenderAction(self) -> "SoGLRenderAction *":
        """getGLRenderAction(SoOffscreenRenderer self) -> SoGLRenderAction"""
        return _coin.SoOffscreenRenderer_getGLRenderAction(self)


    def render(self, *args) -> "SbBool":
        """
        render(SoOffscreenRenderer self, SoNode scene) -> SbBool
        render(SoOffscreenRenderer self, SoPath scene) -> SbBool
        """
        return _coin.SoOffscreenRenderer_render(self, *args)


    def getDC(self) -> "void const *const &":
        """getDC(SoOffscreenRenderer self) -> void const *const &"""
        return _coin.SoOffscreenRenderer_getDC(self)


    def writeToRGB(self, *args) -> "SbBool":
        """
        writeToRGB(SoOffscreenRenderer self, FILE * fp) -> SbBool
        writeToRGB(SoOffscreenRenderer self, char const * filename) -> SbBool
        """
        return _coin.SoOffscreenRenderer_writeToRGB(self, *args)


    def writeToPostScript(self, *args) -> "SbBool":
        """
        writeToPostScript(SoOffscreenRenderer self, FILE * fp) -> SbBool
        writeToPostScript(SoOffscreenRenderer self, FILE * fp, SbVec2f printsize) -> SbBool
        writeToPostScript(SoOffscreenRenderer self, char const * filename) -> SbBool
        writeToPostScript(SoOffscreenRenderer self, char const * filename, SbVec2f printsize) -> SbBool
        """
        return _coin.SoOffscreenRenderer_writeToPostScript(self, *args)


    def isWriteSupported(self, filetypeextension: 'SbName') -> "SbBool":
        """isWriteSupported(SoOffscreenRenderer self, SbName filetypeextension) -> SbBool"""
        return _coin.SoOffscreenRenderer_isWriteSupported(self, filetypeextension)


    def getNumWriteFiletypes(self) -> "int":
        """getNumWriteFiletypes(SoOffscreenRenderer self) -> int"""
        return _coin.SoOffscreenRenderer_getNumWriteFiletypes(self)


    def getWriteFiletypeInfo(self, idx: 'int const', extlist: 'SbPList', fullname: 'SbString', description: 'SbString') -> "void":
        """getWriteFiletypeInfo(SoOffscreenRenderer self, int const idx, SbPList extlist, SbString fullname, SbString description)"""
        return _coin.SoOffscreenRenderer_getWriteFiletypeInfo(self, idx, extlist, fullname, description)


    def writeToFile(self, filename: 'SbString', filetypeextension: 'SbName') -> "SbBool":
        """writeToFile(SoOffscreenRenderer self, SbString filename, SbName filetypeextension) -> SbBool"""
        return _coin.SoOffscreenRenderer_writeToFile(self, filename, filetypeextension)


    def setPbufferEnable(self, enable: 'SbBool') -> "void":
        """setPbufferEnable(SoOffscreenRenderer self, SbBool enable)"""
        return _coin.SoOffscreenRenderer_setPbufferEnable(self, enable)


    def getPbufferEnable(self) -> "SbBool":
        """getPbufferEnable(SoOffscreenRenderer self) -> SbBool"""
        return _coin.SoOffscreenRenderer_getPbufferEnable(self)


    def getBuffer(self, *args) -> "PyObject *":
        """
        getBuffer(SoOffscreenRenderer self) -> unsigned char
        getBuffer(SoOffscreenRenderer self) -> PyObject *
        """
        return _coin.SoOffscreenRenderer_getBuffer(self, *args)

SoOffscreenRenderer_swigregister = _coin.SoOffscreenRenderer_swigregister
SoOffscreenRenderer_swigregister(SoOffscreenRenderer)

def SoOffscreenRenderer_getScreenPixelsPerInch() -> "float":
    """SoOffscreenRenderer_getScreenPixelsPerInch() -> float"""
    return _coin.SoOffscreenRenderer_getScreenPixelsPerInch()

def SoOffscreenRenderer_getMaximumResolution() -> "SbVec2s":
    """SoOffscreenRenderer_getMaximumResolution() -> SbVec2s"""
    return _coin.SoOffscreenRenderer_getMaximumResolution()

class SoPickedPoint(object):
    """Proxy of C++ SoPickedPoint class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoPickedPoint self, SoPickedPoint pp) -> SoPickedPoint
        __init__(SoPickedPoint self, SoPath path, SoState state, SbVec3f objSpacePoint) -> SoPickedPoint
        """
        this = _coin.new_SoPickedPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPickedPoint
    __del__ = lambda self: None

    def copy(self) -> "SoPickedPoint *":
        """copy(SoPickedPoint self) -> SoPickedPoint"""
        return _coin.SoPickedPoint_copy(self)


    def getPoint(self) -> "SbVec3f const &":
        """getPoint(SoPickedPoint self) -> SbVec3f"""
        return _coin.SoPickedPoint_getPoint(self)


    def getNormal(self) -> "SbVec3f const &":
        """getNormal(SoPickedPoint self) -> SbVec3f"""
        return _coin.SoPickedPoint_getNormal(self)


    def getTextureCoords(self) -> "SbVec4f const &":
        """getTextureCoords(SoPickedPoint self) -> SbVec4f"""
        return _coin.SoPickedPoint_getTextureCoords(self)


    def getMaterialIndex(self) -> "int":
        """getMaterialIndex(SoPickedPoint self) -> int"""
        return _coin.SoPickedPoint_getMaterialIndex(self)


    def getPath(self) -> "SoPath *":
        """getPath(SoPickedPoint self) -> SoPath"""
        return _coin.SoPickedPoint_getPath(self)


    def isOnGeometry(self) -> "SbBool":
        """isOnGeometry(SoPickedPoint self) -> SbBool"""
        return _coin.SoPickedPoint_isOnGeometry(self)


    def getDetail(self, node: 'SoNode'=None) -> "SoDetail const *":
        """
        getDetail(SoPickedPoint self, SoNode node=None) -> SoDetail
        getDetail(SoPickedPoint self) -> SoDetail
        """
        return _coin.SoPickedPoint_getDetail(self, node)


    def getObjectToWorld(self, node: 'SoNode'=None) -> "SbMatrix const &":
        """
        getObjectToWorld(SoPickedPoint self, SoNode node=None) -> SbMatrix
        getObjectToWorld(SoPickedPoint self) -> SbMatrix
        """
        return _coin.SoPickedPoint_getObjectToWorld(self, node)


    def getWorldToObject(self, node: 'SoNode'=None) -> "SbMatrix const &":
        """
        getWorldToObject(SoPickedPoint self, SoNode node=None) -> SbMatrix
        getWorldToObject(SoPickedPoint self) -> SbMatrix
        """
        return _coin.SoPickedPoint_getWorldToObject(self, node)


    def getObjectToImage(self, node: 'SoNode'=None) -> "SbMatrix const &":
        """
        getObjectToImage(SoPickedPoint self, SoNode node=None) -> SbMatrix
        getObjectToImage(SoPickedPoint self) -> SbMatrix
        """
        return _coin.SoPickedPoint_getObjectToImage(self, node)


    def getImageToObject(self, node: 'SoNode'=None) -> "SbMatrix const &":
        """
        getImageToObject(SoPickedPoint self, SoNode node=None) -> SbMatrix
        getImageToObject(SoPickedPoint self) -> SbMatrix
        """
        return _coin.SoPickedPoint_getImageToObject(self, node)


    def getObjectPoint(self, node: 'SoNode'=None) -> "SbVec3f":
        """
        getObjectPoint(SoPickedPoint self, SoNode node=None) -> SbVec3f
        getObjectPoint(SoPickedPoint self) -> SbVec3f
        """
        return _coin.SoPickedPoint_getObjectPoint(self, node)


    def getObjectNormal(self, node: 'SoNode'=None) -> "SbVec3f":
        """
        getObjectNormal(SoPickedPoint self, SoNode node=None) -> SbVec3f
        getObjectNormal(SoPickedPoint self) -> SbVec3f
        """
        return _coin.SoPickedPoint_getObjectNormal(self, node)


    def getObjectTextureCoords(self, node: 'SoNode'=None) -> "SbVec4f":
        """
        getObjectTextureCoords(SoPickedPoint self, SoNode node=None) -> SbVec4f
        getObjectTextureCoords(SoPickedPoint self) -> SbVec4f
        """
        return _coin.SoPickedPoint_getObjectTextureCoords(self, node)


    def setObjectNormal(self, normal: 'SbVec3f') -> "void":
        """setObjectNormal(SoPickedPoint self, SbVec3f normal)"""
        return _coin.SoPickedPoint_setObjectNormal(self, normal)


    def setObjectTextureCoords(self, texCoords: 'SbVec4f') -> "void":
        """setObjectTextureCoords(SoPickedPoint self, SbVec4f texCoords)"""
        return _coin.SoPickedPoint_setObjectTextureCoords(self, texCoords)


    def setMaterialIndex(self, index: 'int const') -> "void":
        """setMaterialIndex(SoPickedPoint self, int const index)"""
        return _coin.SoPickedPoint_setMaterialIndex(self, index)


    def setDetail(self, detail: 'SoDetail', node: 'SoNode') -> "void":
        """setDetail(SoPickedPoint self, SoDetail detail, SoNode node)"""
        return _coin.SoPickedPoint_setDetail(self, detail, node)

SoPickedPoint_swigregister = _coin.SoPickedPoint_swigregister
SoPickedPoint_swigregister(SoPickedPoint)

class SoPrimitiveVertex(object):
    """Proxy of C++ SoPrimitiveVertex class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SoPrimitiveVertex self) -> SoPrimitiveVertex
        __init__(SoPrimitiveVertex self, SoPrimitiveVertex pv) -> SoPrimitiveVertex
        """
        this = _coin.new_SoPrimitiveVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoPrimitiveVertex
    __del__ = lambda self: None

    def getPoint(self) -> "SbVec3f const &":
        """getPoint(SoPrimitiveVertex self) -> SbVec3f"""
        return _coin.SoPrimitiveVertex_getPoint(self)


    def getNormal(self) -> "SbVec3f const &":
        """getNormal(SoPrimitiveVertex self) -> SbVec3f"""
        return _coin.SoPrimitiveVertex_getNormal(self)


    def getTextureCoords(self) -> "SbVec4f const &":
        """getTextureCoords(SoPrimitiveVertex self) -> SbVec4f"""
        return _coin.SoPrimitiveVertex_getTextureCoords(self)


    def getMaterialIndex(self) -> "int":
        """getMaterialIndex(SoPrimitiveVertex self) -> int"""
        return _coin.SoPrimitiveVertex_getMaterialIndex(self)


    def getPackedColor(self) -> "uint32_t":
        """getPackedColor(SoPrimitiveVertex self) -> uint32_t"""
        return _coin.SoPrimitiveVertex_getPackedColor(self)


    def getDetail(self) -> "SoDetail const *":
        """getDetail(SoPrimitiveVertex self) -> SoDetail"""
        return _coin.SoPrimitiveVertex_getDetail(self)


    def setPoint(self, *args) -> "void":
        """
        setPoint(SoPrimitiveVertex self, SbVec3f pt)
        setPoint(SoPrimitiveVertex self, float x, float y, float z)
        """
        return _coin.SoPrimitiveVertex_setPoint(self, *args)


    def setNormal(self, *args) -> "void":
        """
        setNormal(SoPrimitiveVertex self, SbVec3f n)
        setNormal(SoPrimitiveVertex self, float nx, float ny, float nz)
        """
        return _coin.SoPrimitiveVertex_setNormal(self, *args)


    def setTextureCoords(self, *args) -> "void":
        """
        setTextureCoords(SoPrimitiveVertex self, SbVec2f tex)
        setTextureCoords(SoPrimitiveVertex self, float tx, float ty)
        setTextureCoords(SoPrimitiveVertex self, SbVec3f tex)
        setTextureCoords(SoPrimitiveVertex self, float tx, float ty, float tz)
        setTextureCoords(SoPrimitiveVertex self, SbVec4f tex)
        setTextureCoords(SoPrimitiveVertex self, float tx, float ty, float tz, float tw)
        """
        return _coin.SoPrimitiveVertex_setTextureCoords(self, *args)


    def setMaterialIndex(self, index: 'int') -> "void":
        """setMaterialIndex(SoPrimitiveVertex self, int index)"""
        return _coin.SoPrimitiveVertex_setMaterialIndex(self, index)


    def setPackedColor(self, rgba: 'uint32_t') -> "void":
        """setPackedColor(SoPrimitiveVertex self, uint32_t rgba)"""
        return _coin.SoPrimitiveVertex_setPackedColor(self, rgba)


    def setDetail(self, d: 'SoDetail') -> "void":
        """setDetail(SoPrimitiveVertex self, SoDetail d)"""
        return _coin.SoPrimitiveVertex_setDetail(self, d)

SoPrimitiveVertex_swigregister = _coin.SoPrimitiveVertex_swigregister
SoPrimitiveVertex_swigregister(SoPrimitiveVertex)

class SoSceneManager(object):
    """Proxy of C++ SoSceneManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoSceneManager self) -> SoSceneManager"""
        this = _coin.new_SoSceneManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoSceneManager
    __del__ = lambda self: None

    def render(self, *args) -> "void":
        """
        render(SoSceneManager self, SbBool const clearwindow=1, SbBool const clearzbuffer=1)
        render(SoSceneManager self, SbBool const clearwindow=1)
        render(SoSceneManager self)
        render(SoSceneManager self, SoGLRenderAction action, SbBool const initmatrices=1, SbBool const clearwindow=1, SbBool const clearzbuffer=1)
        render(SoSceneManager self, SoGLRenderAction action, SbBool const initmatrices=1, SbBool const clearwindow=1)
        render(SoSceneManager self, SoGLRenderAction action, SbBool const initmatrices=1)
        render(SoSceneManager self, SoGLRenderAction action)
        """
        return _coin.SoSceneManager_render(self, *args)


    def setCamera(self, camera: 'SoCamera') -> "void":
        """setCamera(SoSceneManager self, SoCamera camera)"""
        return _coin.SoSceneManager_setCamera(self, camera)


    def getCamera(self) -> "SoCamera *":
        """getCamera(SoSceneManager self) -> SoCamera"""
        return _coin.SoSceneManager_getCamera(self)


    def processEvent(self, event: 'SoEvent') -> "SbBool":
        """processEvent(SoSceneManager self, SoEvent event) -> SbBool"""
        return _coin.SoSceneManager_processEvent(self, event)


    def reinitialize(self) -> "void":
        """reinitialize(SoSceneManager self)"""
        return _coin.SoSceneManager_reinitialize(self)


    def scheduleRedraw(self) -> "void":
        """scheduleRedraw(SoSceneManager self)"""
        return _coin.SoSceneManager_scheduleRedraw(self)


    def setSceneGraph(self, sceneroot: 'SoNode') -> "void":
        """setSceneGraph(SoSceneManager self, SoNode sceneroot)"""
        return _coin.SoSceneManager_setSceneGraph(self, sceneroot)


    def getSceneGraph(self) -> "SoNode *":
        """getSceneGraph(SoSceneManager self) -> SoNode"""
        return _coin.SoSceneManager_getSceneGraph(self)


    def setWindowSize(self, newsize: 'SbVec2s') -> "void":
        """setWindowSize(SoSceneManager self, SbVec2s newsize)"""
        return _coin.SoSceneManager_setWindowSize(self, newsize)


    def getWindowSize(self) -> "SbVec2s const &":
        """getWindowSize(SoSceneManager self) -> SbVec2s"""
        return _coin.SoSceneManager_getWindowSize(self)


    def setSize(self, newsize: 'SbVec2s') -> "void":
        """setSize(SoSceneManager self, SbVec2s newsize)"""
        return _coin.SoSceneManager_setSize(self, newsize)


    def getSize(self) -> "SbVec2s const &":
        """getSize(SoSceneManager self) -> SbVec2s"""
        return _coin.SoSceneManager_getSize(self)


    def setOrigin(self, newOrigin: 'SbVec2s') -> "void":
        """setOrigin(SoSceneManager self, SbVec2s newOrigin)"""
        return _coin.SoSceneManager_setOrigin(self, newOrigin)


    def getOrigin(self) -> "SbVec2s const &":
        """getOrigin(SoSceneManager self) -> SbVec2s"""
        return _coin.SoSceneManager_getOrigin(self)


    def setViewportRegion(self, newRegion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoSceneManager self, SbViewportRegion newRegion)"""
        return _coin.SoSceneManager_setViewportRegion(self, newRegion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoSceneManager self) -> SbViewportRegion"""
        return _coin.SoSceneManager_getViewportRegion(self)


    def setBackgroundColor(self, color: 'SbColor') -> "void":
        """setBackgroundColor(SoSceneManager self, SbColor color)"""
        return _coin.SoSceneManager_setBackgroundColor(self, color)


    def getBackgroundColor(self) -> "SbColor const &":
        """getBackgroundColor(SoSceneManager self) -> SbColor"""
        return _coin.SoSceneManager_getBackgroundColor(self)


    def setBackgroundIndex(self, index: 'int const') -> "void":
        """setBackgroundIndex(SoSceneManager self, int const index)"""
        return _coin.SoSceneManager_setBackgroundIndex(self, index)


    def getBackgroundIndex(self) -> "int":
        """getBackgroundIndex(SoSceneManager self) -> int"""
        return _coin.SoSceneManager_getBackgroundIndex(self)


    def setRGBMode(self, onOrOff: 'SbBool const') -> "void":
        """setRGBMode(SoSceneManager self, SbBool const onOrOff)"""
        return _coin.SoSceneManager_setRGBMode(self, onOrOff)


    def isRGBMode(self) -> "SbBool":
        """isRGBMode(SoSceneManager self) -> SbBool"""
        return _coin.SoSceneManager_isRGBMode(self)


    def activate(self) -> "void":
        """activate(SoSceneManager self)"""
        return _coin.SoSceneManager_activate(self)


    def deactivate(self) -> "void":
        """deactivate(SoSceneManager self)"""
        return _coin.SoSceneManager_deactivate(self)


    def isAutoRedraw(self) -> "SbBool":
        """isAutoRedraw(SoSceneManager self) -> SbBool"""
        return _coin.SoSceneManager_isAutoRedraw(self)


    def setRedrawPriority(self, priority: 'uint32_t const') -> "void":
        """setRedrawPriority(SoSceneManager self, uint32_t const priority)"""
        return _coin.SoSceneManager_setRedrawPriority(self, priority)


    def getRedrawPriority(self) -> "uint32_t":
        """getRedrawPriority(SoSceneManager self) -> uint32_t"""
        return _coin.SoSceneManager_getRedrawPriority(self)


    def setAntialiasing(self, smoothing: 'SbBool const', numPasses: 'int const') -> "void":
        """setAntialiasing(SoSceneManager self, SbBool const smoothing, int const numPasses)"""
        return _coin.SoSceneManager_setAntialiasing(self, smoothing, numPasses)


    def getAntialiasing(self, smoothing: 'SbBool &', numPasses: 'int &') -> "void":
        """getAntialiasing(SoSceneManager self, SbBool & smoothing, int & numPasses)"""
        return _coin.SoSceneManager_getAntialiasing(self, smoothing, numPasses)


    def setGLRenderAction(self, action: 'SoGLRenderAction') -> "void":
        """setGLRenderAction(SoSceneManager self, SoGLRenderAction action)"""
        return _coin.SoSceneManager_setGLRenderAction(self, action)


    def getGLRenderAction(self) -> "SoGLRenderAction *":
        """getGLRenderAction(SoSceneManager self) -> SoGLRenderAction"""
        return _coin.SoSceneManager_getGLRenderAction(self)


    def setAudioRenderAction(self, action: 'SoAudioRenderAction') -> "void":
        """setAudioRenderAction(SoSceneManager self, SoAudioRenderAction action)"""
        return _coin.SoSceneManager_setAudioRenderAction(self, action)


    def getAudioRenderAction(self) -> "SoAudioRenderAction *":
        """getAudioRenderAction(SoSceneManager self) -> SoAudioRenderAction"""
        return _coin.SoSceneManager_getAudioRenderAction(self)


    def setHandleEventAction(self, hea: 'SoHandleEventAction') -> "void":
        """setHandleEventAction(SoSceneManager self, SoHandleEventAction hea)"""
        return _coin.SoSceneManager_setHandleEventAction(self, hea)


    def getHandleEventAction(self) -> "SoHandleEventAction *":
        """getHandleEventAction(SoSceneManager self) -> SoHandleEventAction"""
        return _coin.SoSceneManager_getHandleEventAction(self)


    def getDefaultRedrawPriority() -> "uint32_t":
        """getDefaultRedrawPriority() -> uint32_t"""
        return _coin.SoSceneManager_getDefaultRedrawPriority()

    getDefaultRedrawPriority = staticmethod(getDefaultRedrawPriority)

    def enableRealTimeUpdate(flag: 'SbBool const') -> "void":
        """enableRealTimeUpdate(SbBool const flag)"""
        return _coin.SoSceneManager_enableRealTimeUpdate(flag)

    enableRealTimeUpdate = staticmethod(enableRealTimeUpdate)

    def isRealTimeUpdateEnabled() -> "SbBool":
        """isRealTimeUpdateEnabled() -> SbBool"""
        return _coin.SoSceneManager_isRealTimeUpdateEnabled()

    isRealTimeUpdateEnabled = staticmethod(isRealTimeUpdateEnabled)

    def setRenderCallback(self, *args) -> "void":
        """
        setRenderCallback(SoSceneManager self, SoSceneManagerRenderCB * f, void *const userData=None)
        setRenderCallback(SoSceneManager self, SoSceneManagerRenderCB * f)
        setRenderCallback(SoSceneManager self, PyObject * pyfunc, PyObject * userData=None)
        setRenderCallback(SoSceneManager self, PyObject * pyfunc)
        """
        return _coin.SoSceneManager_setRenderCallback(self, *args)

SoSceneManager_swigregister = _coin.SoSceneManager_swigregister
SoSceneManager_swigregister(SoSceneManager)

def SoSceneManager_getDefaultRedrawPriority() -> "uint32_t":
    """SoSceneManager_getDefaultRedrawPriority() -> uint32_t"""
    return _coin.SoSceneManager_getDefaultRedrawPriority()

def SoSceneManager_enableRealTimeUpdate(flag: 'SbBool const') -> "void":
    """SoSceneManager_enableRealTimeUpdate(SbBool const flag)"""
    return _coin.SoSceneManager_enableRealTimeUpdate(flag)

def SoSceneManager_isRealTimeUpdateEnabled() -> "SbBool":
    """SoSceneManager_isRealTimeUpdateEnabled() -> SbBool"""
    return _coin.SoSceneManager_isRealTimeUpdateEnabled()

GL_GLEXT_PROTOTYPES = _coin.GL_GLEXT_PROTOTYPES
GL_CLAMP_TO_EDGE = _coin.GL_CLAMP_TO_EDGE
GL_CLAMP_TO_BORDER = _coin.GL_CLAMP_TO_BORDER
GL_REPLACE = _coin.GL_REPLACE
GL_MAX_3D_TEXTURE_SIZE = _coin.GL_MAX_3D_TEXTURE_SIZE
GL_PACK_IMAGE_HEIGHT = _coin.GL_PACK_IMAGE_HEIGHT
GL_PACK_SKIP_IMAGES = _coin.GL_PACK_SKIP_IMAGES
GL_PROXY_TEXTURE_2D = _coin.GL_PROXY_TEXTURE_2D
GL_PROXY_TEXTURE_3D = _coin.GL_PROXY_TEXTURE_3D
GL_TEXTURE_3D = _coin.GL_TEXTURE_3D
GL_TEXTURE_DEPTH = _coin.GL_TEXTURE_DEPTH
GL_TEXTURE_WRAP_R = _coin.GL_TEXTURE_WRAP_R
GL_UNPACK_IMAGE_HEIGHT = _coin.GL_UNPACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = _coin.GL_UNPACK_SKIP_IMAGES
GL_COLOR_TABLE_WIDTH = _coin.GL_COLOR_TABLE_WIDTH
GL_TEXTURE0 = _coin.GL_TEXTURE0
GL_TEXTURE1 = _coin.GL_TEXTURE1
GL_TEXTURE2 = _coin.GL_TEXTURE2
GL_TEXTURE3 = _coin.GL_TEXTURE3
GL_TEXTURE4 = _coin.GL_TEXTURE4
GL_TEXTURE5 = _coin.GL_TEXTURE5
GL_TEXTURE6 = _coin.GL_TEXTURE6
GL_TEXTURE7 = _coin.GL_TEXTURE7
GL_TEXTURE8 = _coin.GL_TEXTURE8
GL_TEXTURE9 = _coin.GL_TEXTURE9
GL_TEXTURE10 = _coin.GL_TEXTURE10
GL_TEXTURE11 = _coin.GL_TEXTURE11
GL_TEXTURE12 = _coin.GL_TEXTURE12
GL_TEXTURE13 = _coin.GL_TEXTURE13
GL_TEXTURE14 = _coin.GL_TEXTURE14
GL_TEXTURE15 = _coin.GL_TEXTURE15
GL_MAX_TEXTURE_UNITS = _coin.GL_MAX_TEXTURE_UNITS
GL_ACTIVE_TEXTURE = _coin.GL_ACTIVE_TEXTURE
GL_CLIENT_ACTIVE_TEXTURE = _coin.GL_CLIENT_ACTIVE_TEXTURE
GL_POLYGON_OFFSET_EXT = _coin.GL_POLYGON_OFFSET_EXT
GL_COLOR_TABLE = _coin.GL_COLOR_TABLE
GL_COLOR_INDEX1_EXT = _coin.GL_COLOR_INDEX1_EXT
GL_COLOR_INDEX2_EXT = _coin.GL_COLOR_INDEX2_EXT
GL_COLOR_INDEX4_EXT = _coin.GL_COLOR_INDEX4_EXT
GL_COLOR_INDEX8_EXT = _coin.GL_COLOR_INDEX8_EXT
GL_COLOR_INDEX12_EXT = _coin.GL_COLOR_INDEX12_EXT
GL_COLOR_INDEX16_EXT = _coin.GL_COLOR_INDEX16_EXT
GL_COLOR_TABLE_FORMAT_EXT = _coin.GL_COLOR_TABLE_FORMAT_EXT
GL_COLOR_TABLE_RED_SIZE_EXT = _coin.GL_COLOR_TABLE_RED_SIZE_EXT
GL_COLOR_TABLE_GREEN_SIZE_EXT = _coin.GL_COLOR_TABLE_GREEN_SIZE_EXT
GL_COLOR_TABLE_BLUE_SIZE_EXT = _coin.GL_COLOR_TABLE_BLUE_SIZE_EXT
GL_COLOR_TABLE_ALPHA_SIZE_EXT = _coin.GL_COLOR_TABLE_ALPHA_SIZE_EXT
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = _coin.GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
GL_COLOR_TABLE_INTENSITY_SIZE_EXT = _coin.GL_COLOR_TABLE_INTENSITY_SIZE_EXT
GL_TEXTURE_INDEX_SIZE_EXT = _coin.GL_TEXTURE_INDEX_SIZE_EXT
GL_COMPRESSED_ALPHA_ARB = _coin.GL_COMPRESSED_ALPHA_ARB
GL_COMPRESSED_LUMINANCE_ARB = _coin.GL_COMPRESSED_LUMINANCE_ARB
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = _coin.GL_COMPRESSED_LUMINANCE_ALPHA_ARB
GL_COMPRESSED_INTENSITY_ARB = _coin.GL_COMPRESSED_INTENSITY_ARB
GL_COMPRESSED_RGB_ARB = _coin.GL_COMPRESSED_RGB_ARB
GL_COMPRESSED_RGBA_ARB = _coin.GL_COMPRESSED_RGBA_ARB
GL_TEXTURE_COMPRESSION_HINT_ARB = _coin.GL_TEXTURE_COMPRESSION_HINT_ARB
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = _coin.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
GL_TEXTURE_COMPRESSED_ARB = _coin.GL_TEXTURE_COMPRESSED_ARB
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = _coin.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
GL_COMPRESSED_TEXTURE_FORMATS_ARB = _coin.GL_COMPRESSED_TEXTURE_FORMATS_ARB
GL_DEPTH_COMPONENT16 = _coin.GL_DEPTH_COMPONENT16
GL_DEPTH_COMPONENT24 = _coin.GL_DEPTH_COMPONENT24
GL_DEPTH_COMPONENT32 = _coin.GL_DEPTH_COMPONENT32
GL_TEXTURE_DEPTH_SIZE = _coin.GL_TEXTURE_DEPTH_SIZE
GL_DEPTH_TEXTURE_MODE = _coin.GL_DEPTH_TEXTURE_MODE
GL_R3_G3_B2 = _coin.GL_R3_G3_B2
GL_RGB4 = _coin.GL_RGB4
GL_RGB5 = _coin.GL_RGB5
GL_RGB8 = _coin.GL_RGB8
GL_RGB10 = _coin.GL_RGB10
GL_RGB12 = _coin.GL_RGB12
GL_RGB16 = _coin.GL_RGB16
GL_RGBA2 = _coin.GL_RGBA2
GL_RGBA4 = _coin.GL_RGBA4
GL_RGB5_A1 = _coin.GL_RGB5_A1
GL_RGBA8 = _coin.GL_RGBA8
GL_RGB10_A2 = _coin.GL_RGB10_A2
GL_RGBA12 = _coin.GL_RGBA12
GL_RGBA16 = _coin.GL_RGBA16
GL_BGR = _coin.GL_BGR
GL_RGBA32F_ARB = _coin.GL_RGBA32F_ARB
GL_RGB32F_ARB = _coin.GL_RGB32F_ARB
GL_ALPHA32F_ARB = _coin.GL_ALPHA32F_ARB
GL_INTENSITY32F_ARB = _coin.GL_INTENSITY32F_ARB
GL_LUMINANCE32F_ARB = _coin.GL_LUMINANCE32F_ARB
GL_LUMINANCE_ALPHA32F_ARB = _coin.GL_LUMINANCE_ALPHA32F_ARB
GL_RGBA16F_ARB = _coin.GL_RGBA16F_ARB
GL_RGB16F_ARB = _coin.GL_RGB16F_ARB
GL_ALPHA16F_ARB = _coin.GL_ALPHA16F_ARB
GL_INTENSITY16F_ARB = _coin.GL_INTENSITY16F_ARB
GL_LUMINANCE16F_ARB = _coin.GL_LUMINANCE16F_ARB
GL_LUMINANCE_ALPHA16F_ARB = _coin.GL_LUMINANCE_ALPHA16F_ARB
GL_RGBA16_EXT = _coin.GL_RGBA16_EXT
GL_TEXTURE_COMPARE_MODE = _coin.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = _coin.GL_TEXTURE_COMPARE_FUNC
GL_COMPARE_R_TO_TEXTURE = _coin.GL_COMPARE_R_TO_TEXTURE
GL_MIN = _coin.GL_MIN
GL_MAX = _coin.GL_MAX
GL_FUNC_ADD = _coin.GL_FUNC_ADD
GL_FUNC_SUBTRACT = _coin.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = _coin.GL_FUNC_REVERSE_SUBTRACT
GL_VERTEX_ARRAY = _coin.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _coin.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _coin.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _coin.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _coin.GL_TEXTURE_COORD_ARRAY
GL_V3F = _coin.GL_V3F
GL_C4UB_V3F = _coin.GL_C4UB_V3F
GL_C3F_V3F = _coin.GL_C3F_V3F
GL_N3F_V3F = _coin.GL_N3F_V3F
GL_C4F_N3F_V3F = _coin.GL_C4F_N3F_V3F
GL_T2F_V3F = _coin.GL_T2F_V3F
GL_T2F_C4UB_V3F = _coin.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _coin.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _coin.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _coin.GL_T2F_C4F_N3F_V3F
GL_VERTEX_ARRAY_RANGE_NV = _coin.GL_VERTEX_ARRAY_RANGE_NV
GL_VERTEX_ARRAY_RANGE_LENGTH_NV = _coin.GL_VERTEX_ARRAY_RANGE_LENGTH_NV
GL_VERTEX_ARRAY_RANGE_VALID_NV = _coin.GL_VERTEX_ARRAY_RANGE_VALID_NV
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = _coin.GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
GL_VERTEX_ARRAY_RANGE_POINTER_NV = _coin.GL_VERTEX_ARRAY_RANGE_POINTER_NV
GL_ARRAY_BUFFER = _coin.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = _coin.GL_ELEMENT_ARRAY_BUFFER
GL_READ_ONLY = _coin.GL_READ_ONLY
GL_WRITE_ONLY = _coin.GL_WRITE_ONLY
GL_READ_WRITE = _coin.GL_READ_WRITE
GL_BUFFER_ACCESS = _coin.GL_BUFFER_ACCESS
GL_BUFFER_MAPPED = _coin.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = _coin.GL_BUFFER_MAP_POINTER
GL_STREAM_DRAW = _coin.GL_STREAM_DRAW
GL_STREAM_READ = _coin.GL_STREAM_READ
GL_STREAM_COPY = _coin.GL_STREAM_COPY
GL_STATIC_DRAW = _coin.GL_STATIC_DRAW
GL_STATIC_READ = _coin.GL_STATIC_READ
GL_STATIC_COPY = _coin.GL_STATIC_COPY
GL_DYNAMIC_DRAW = _coin.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = _coin.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _coin.GL_DYNAMIC_COPY
GL_REGISTER_COMBINERS_NV = _coin.GL_REGISTER_COMBINERS_NV
GL_COMBINER0_NV = _coin.GL_COMBINER0_NV
GL_COMBINER1_NV = _coin.GL_COMBINER1_NV
GL_COMBINER2_NV = _coin.GL_COMBINER2_NV
GL_COMBINER3_NV = _coin.GL_COMBINER3_NV
GL_COMBINER4_NV = _coin.GL_COMBINER4_NV
GL_COMBINER5_NV = _coin.GL_COMBINER5_NV
GL_COMBINER6_NV = _coin.GL_COMBINER6_NV
GL_COMBINER7_NV = _coin.GL_COMBINER7_NV
GL_VARIABLE_A_NV = _coin.GL_VARIABLE_A_NV
GL_VARIABLE_B_NV = _coin.GL_VARIABLE_B_NV
GL_VARIABLE_C_NV = _coin.GL_VARIABLE_C_NV
GL_VARIABLE_D_NV = _coin.GL_VARIABLE_D_NV
GL_VARIABLE_E_NV = _coin.GL_VARIABLE_E_NV
GL_VARIABLE_F_NV = _coin.GL_VARIABLE_F_NV
GL_VARIABLE_G_NV = _coin.GL_VARIABLE_G_NV
GL_CONSTANT_COLOR0_NV = _coin.GL_CONSTANT_COLOR0_NV
GL_CONSTANT_COLOR1_NV = _coin.GL_CONSTANT_COLOR1_NV
GL_PRIMARY_COLOR_NV = _coin.GL_PRIMARY_COLOR_NV
GL_SECONDARY_COLOR_NV = _coin.GL_SECONDARY_COLOR_NV
GL_SPARE0_NV = _coin.GL_SPARE0_NV
GL_SPARE1_NV = _coin.GL_SPARE1_NV
GL_UNSIGNED_IDENTITY_NV = _coin.GL_UNSIGNED_IDENTITY_NV
GL_UNSIGNED_INVERT_NV = _coin.GL_UNSIGNED_INVERT_NV
GL_EXPAND_NORMAL_NV = _coin.GL_EXPAND_NORMAL_NV
GL_EXPAND_NEGATE_NV = _coin.GL_EXPAND_NEGATE_NV
GL_HALF_BIAS_NORMAL_NV = _coin.GL_HALF_BIAS_NORMAL_NV
GL_HALF_BIAS_NEGATE_NV = _coin.GL_HALF_BIAS_NEGATE_NV
GL_SIGNED_IDENTITY_NV = _coin.GL_SIGNED_IDENTITY_NV
GL_SIGNED_NEGATE_NV = _coin.GL_SIGNED_NEGATE_NV
GL_E_TIMES_F_NV = _coin.GL_E_TIMES_F_NV
GL_SPARE0_PLUS_SECONDARY_COLOR_NV = _coin.GL_SPARE0_PLUS_SECONDARY_COLOR_NV
GL_SCALE_BY_TWO_NV = _coin.GL_SCALE_BY_TWO_NV
GL_SCALE_BY_FOUR_NV = _coin.GL_SCALE_BY_FOUR_NV
GL_SCALE_BY_ONE_HALF_NV = _coin.GL_SCALE_BY_ONE_HALF_NV
GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = _coin.GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
GL_DISCARD_NV = _coin.GL_DISCARD_NV
GL_COMBINER_INPUT_NV = _coin.GL_COMBINER_INPUT_NV
GL_COMBINER_MAPPING_NV = _coin.GL_COMBINER_MAPPING_NV
GL_COMBINER_COMPONENT_USAGE_NV = _coin.GL_COMBINER_COMPONENT_USAGE_NV
GL_COMBINER_AB_DOT_PRODUCT_NV = _coin.GL_COMBINER_AB_DOT_PRODUCT_NV
GL_COMBINER_CD_DOT_PRODUCT_NV = _coin.GL_COMBINER_CD_DOT_PRODUCT_NV
GL_COMBINER_MUX_SUM_NV = _coin.GL_COMBINER_MUX_SUM_NV
GL_COMBINER_SCALE_NV = _coin.GL_COMBINER_SCALE_NV
GL_COMBINER_BIAS_NV = _coin.GL_COMBINER_BIAS_NV
GL_COMBINER_AB_OUTPUT_NV = _coin.GL_COMBINER_AB_OUTPUT_NV
GL_COMBINER_CD_OUTPUT_NV = _coin.GL_COMBINER_CD_OUTPUT_NV
GL_COMBINER_SUM_OUTPUT_NV = _coin.GL_COMBINER_SUM_OUTPUT_NV
GL_MAX_GENERAL_COMBINERS_NV = _coin.GL_MAX_GENERAL_COMBINERS_NV
GL_NUM_GENERAL_COMBINERS_NV = _coin.GL_NUM_GENERAL_COMBINERS_NV
GL_COLOR_SUM_CLAMP_NV = _coin.GL_COLOR_SUM_CLAMP_NV
GL_TEXTURE_RECTANGLE_NV = _coin.GL_TEXTURE_RECTANGLE_NV
GL_TEXTURE_BINDING_RECTANGLE_NV = _coin.GL_TEXTURE_BINDING_RECTANGLE_NV
GL_PROXY_TEXTURE_RECTANGLE_NV = _coin.GL_PROXY_TEXTURE_RECTANGLE_NV
GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = _coin.GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
GL_TEXTURE_RECTANGLE_EXT = _coin.GL_TEXTURE_RECTANGLE_EXT
GL_TEXTURE_BINDING_RECTANGLE_EXT = _coin.GL_TEXTURE_BINDING_RECTANGLE_EXT
GL_PROXY_TEXTURE_RECTANGLE_EXT = _coin.GL_PROXY_TEXTURE_RECTANGLE_EXT
GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = _coin.GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
GL_OFFSET_TEXTURE_RECTANGLE_NV = _coin.GL_OFFSET_TEXTURE_RECTANGLE_NV
GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = _coin.GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = _coin.GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = _coin.GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
GL_UNSIGNED_INT_S8_S8_8_8_NV = _coin.GL_UNSIGNED_INT_S8_S8_8_8_NV
GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = _coin.GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
GL_DSDT_MAG_INTENSITY_NV = _coin.GL_DSDT_MAG_INTENSITY_NV
GL_SHADER_CONSISTENT_NV = _coin.GL_SHADER_CONSISTENT_NV
GL_TEXTURE_SHADER_NV = _coin.GL_TEXTURE_SHADER_NV
GL_SHADER_OPERATION_NV = _coin.GL_SHADER_OPERATION_NV
GL_CULL_MODES_NV = _coin.GL_CULL_MODES_NV
GL_OFFSET_TEXTURE_MATRIX_NV = _coin.GL_OFFSET_TEXTURE_MATRIX_NV
GL_OFFSET_TEXTURE_SCALE_NV = _coin.GL_OFFSET_TEXTURE_SCALE_NV
GL_OFFSET_TEXTURE_BIAS_NV = _coin.GL_OFFSET_TEXTURE_BIAS_NV
GL_OFFSET_TEXTURE_2D_MATRIX_NV = _coin.GL_OFFSET_TEXTURE_2D_MATRIX_NV
GL_OFFSET_TEXTURE_2D_SCALE_NV = _coin.GL_OFFSET_TEXTURE_2D_SCALE_NV
GL_OFFSET_TEXTURE_2D_BIAS_NV = _coin.GL_OFFSET_TEXTURE_2D_BIAS_NV
GL_PREVIOUS_TEXTURE_INPUT_NV = _coin.GL_PREVIOUS_TEXTURE_INPUT_NV
GL_CONST_EYE_NV = _coin.GL_CONST_EYE_NV
GL_PASS_THROUGH_NV = _coin.GL_PASS_THROUGH_NV
GL_CULL_FRAGMENT_NV = _coin.GL_CULL_FRAGMENT_NV
GL_OFFSET_TEXTURE_2D_NV = _coin.GL_OFFSET_TEXTURE_2D_NV
GL_DEPENDENT_AR_TEXTURE_2D_NV = _coin.GL_DEPENDENT_AR_TEXTURE_2D_NV
GL_DEPENDENT_GB_TEXTURE_2D_NV = _coin.GL_DEPENDENT_GB_TEXTURE_2D_NV
GL_DOT_PRODUCT_NV = _coin.GL_DOT_PRODUCT_NV
GL_DOT_PRODUCT_DEPTH_REPLACE_NV = _coin.GL_DOT_PRODUCT_DEPTH_REPLACE_NV
GL_DOT_PRODUCT_TEXTURE_2D_NV = _coin.GL_DOT_PRODUCT_TEXTURE_2D_NV
GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = _coin.GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = _coin.GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = _coin.GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = _coin.GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
GL_HILO_NV = _coin.GL_HILO_NV
GL_DSDT_NV = _coin.GL_DSDT_NV
GL_DSDT_MAG_NV = _coin.GL_DSDT_MAG_NV
GL_DSDT_MAG_VIB_NV = _coin.GL_DSDT_MAG_VIB_NV
GL_HILO16_NV = _coin.GL_HILO16_NV
GL_SIGNED_HILO_NV = _coin.GL_SIGNED_HILO_NV
GL_SIGNED_HILO16_NV = _coin.GL_SIGNED_HILO16_NV
GL_SIGNED_RGBA_NV = _coin.GL_SIGNED_RGBA_NV
GL_SIGNED_RGBA8_NV = _coin.GL_SIGNED_RGBA8_NV
GL_SIGNED_RGB_NV = _coin.GL_SIGNED_RGB_NV
GL_SIGNED_RGB8_NV = _coin.GL_SIGNED_RGB8_NV
GL_SIGNED_LUMINANCE_NV = _coin.GL_SIGNED_LUMINANCE_NV
GL_SIGNED_LUMINANCE8_NV = _coin.GL_SIGNED_LUMINANCE8_NV
GL_SIGNED_LUMINANCE_ALPHA_NV = _coin.GL_SIGNED_LUMINANCE_ALPHA_NV
GL_SIGNED_LUMINANCE8_ALPHA8_NV = _coin.GL_SIGNED_LUMINANCE8_ALPHA8_NV
GL_SIGNED_ALPHA_NV = _coin.GL_SIGNED_ALPHA_NV
GL_SIGNED_ALPHA8_NV = _coin.GL_SIGNED_ALPHA8_NV
GL_SIGNED_INTENSITY_NV = _coin.GL_SIGNED_INTENSITY_NV
GL_SIGNED_INTENSITY8_NV = _coin.GL_SIGNED_INTENSITY8_NV
GL_DSDT8_NV = _coin.GL_DSDT8_NV
GL_DSDT8_MAG8_NV = _coin.GL_DSDT8_MAG8_NV
GL_DSDT8_MAG8_INTENSITY8_NV = _coin.GL_DSDT8_MAG8_INTENSITY8_NV
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = _coin.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = _coin.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
GL_HI_SCALE_NV = _coin.GL_HI_SCALE_NV
GL_LO_SCALE_NV = _coin.GL_LO_SCALE_NV
GL_DS_SCALE_NV = _coin.GL_DS_SCALE_NV
GL_DT_SCALE_NV = _coin.GL_DT_SCALE_NV
GL_MAGNITUDE_SCALE_NV = _coin.GL_MAGNITUDE_SCALE_NV
GL_VIBRANCE_SCALE_NV = _coin.GL_VIBRANCE_SCALE_NV
GL_HI_BIAS_NV = _coin.GL_HI_BIAS_NV
GL_LO_BIAS_NV = _coin.GL_LO_BIAS_NV
GL_DS_BIAS_NV = _coin.GL_DS_BIAS_NV
GL_DT_BIAS_NV = _coin.GL_DT_BIAS_NV
GL_MAGNITUDE_BIAS_NV = _coin.GL_MAGNITUDE_BIAS_NV
GL_VIBRANCE_BIAS_NV = _coin.GL_VIBRANCE_BIAS_NV
GL_TEXTURE_BORDER_VALUES_NV = _coin.GL_TEXTURE_BORDER_VALUES_NV
GL_TEXTURE_HI_SIZE_NV = _coin.GL_TEXTURE_HI_SIZE_NV
GL_TEXTURE_LO_SIZE_NV = _coin.GL_TEXTURE_LO_SIZE_NV
GL_TEXTURE_DS_SIZE_NV = _coin.GL_TEXTURE_DS_SIZE_NV
GL_TEXTURE_DT_SIZE_NV = _coin.GL_TEXTURE_DT_SIZE_NV
GL_TEXTURE_MAG_SIZE_NV = _coin.GL_TEXTURE_MAG_SIZE_NV
GL_NORMAL_MAP = _coin.GL_NORMAL_MAP
GL_REFLECTION_MAP = _coin.GL_REFLECTION_MAP
GL_TEXTURE_CUBE_MAP = _coin.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _coin.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _coin.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _coin.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _coin.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _coin.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _coin.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _coin.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _coin.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_COMBINE = _coin.GL_COMBINE
GL_COMBINE_RGB = _coin.GL_COMBINE_RGB
GL_COMBINE_ALPHA = _coin.GL_COMBINE_ALPHA
GL_RGB_SCALE = _coin.GL_RGB_SCALE
GL_ADD_SIGNED = _coin.GL_ADD_SIGNED
GL_INTERPOLATE = _coin.GL_INTERPOLATE
GL_CONSTANT = _coin.GL_CONSTANT
GL_PRIMARY_COLOR = _coin.GL_PRIMARY_COLOR
GL_PREVIOUS = _coin.GL_PREVIOUS
GL_SOURCE0_RGB = _coin.GL_SOURCE0_RGB
GL_SOURCE1_RGB = _coin.GL_SOURCE1_RGB
GL_SOURCE2_RGB = _coin.GL_SOURCE2_RGB
GL_SOURCE0_ALPHA = _coin.GL_SOURCE0_ALPHA
GL_SOURCE1_ALPHA = _coin.GL_SOURCE1_ALPHA
GL_SOURCE2_ALPHA = _coin.GL_SOURCE2_ALPHA
GL_OPERAND0_RGB = _coin.GL_OPERAND0_RGB
GL_OPERAND1_RGB = _coin.GL_OPERAND1_RGB
GL_OPERAND2_RGB = _coin.GL_OPERAND2_RGB
GL_OPERAND0_ALPHA = _coin.GL_OPERAND0_ALPHA
GL_OPERAND1_ALPHA = _coin.GL_OPERAND1_ALPHA
GL_OPERAND2_ALPHA = _coin.GL_OPERAND2_ALPHA
GL_SUBTRACT = _coin.GL_SUBTRACT
GL_DOT3_RGB = _coin.GL_DOT3_RGB
GL_DOT3_RGBA = _coin.GL_DOT3_RGBA
GL_GENERATE_MIPMAP_SGIS = _coin.GL_GENERATE_MIPMAP_SGIS
GL_GENERATE_MIPMAP_HINT_SGIS = _coin.GL_GENERATE_MIPMAP_HINT_SGIS
GL_FRAGMENT_PROGRAM_ARB = _coin.GL_FRAGMENT_PROGRAM_ARB
GL_PROGRAM_FORMAT_ASCII_ARB = _coin.GL_PROGRAM_FORMAT_ASCII_ARB
GL_PROGRAM_LENGTH_ARB = _coin.GL_PROGRAM_LENGTH_ARB
GL_PROGRAM_FORMAT_ARB = _coin.GL_PROGRAM_FORMAT_ARB
GL_PROGRAM_BINDING_ARB = _coin.GL_PROGRAM_BINDING_ARB
GL_PROGRAM_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_PROGRAM_TEMPORARIES_ARB = _coin.GL_PROGRAM_TEMPORARIES_ARB
GL_MAX_PROGRAM_TEMPORARIES_ARB = _coin.GL_MAX_PROGRAM_TEMPORARIES_ARB
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = _coin.GL_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = _coin.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_PROGRAM_PARAMETERS_ARB = _coin.GL_PROGRAM_PARAMETERS_ARB
GL_MAX_PROGRAM_PARAMETERS_ARB = _coin.GL_MAX_PROGRAM_PARAMETERS_ARB
GL_PROGRAM_NATIVE_PARAMETERS_ARB = _coin.GL_PROGRAM_NATIVE_PARAMETERS_ARB
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
GL_PROGRAM_ATTRIBS_ARB = _coin.GL_PROGRAM_ATTRIBS_ARB
GL_MAX_PROGRAM_ATTRIBS_ARB = _coin.GL_MAX_PROGRAM_ATTRIBS_ARB
GL_PROGRAM_NATIVE_ATTRIBS_ARB = _coin.GL_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = _coin.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = _coin.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = _coin.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
GL_PROGRAM_ALU_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INDIRECTIONS_ARB = _coin.GL_PROGRAM_TEX_INDIRECTIONS_ARB
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = _coin.GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = _coin.GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = _coin.GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_PROGRAM_STRING_ARB = _coin.GL_PROGRAM_STRING_ARB
GL_PROGRAM_ERROR_POSITION_ARB = _coin.GL_PROGRAM_ERROR_POSITION_ARB
GL_CURRENT_MATRIX_ARB = _coin.GL_CURRENT_MATRIX_ARB
GL_TRANSPOSE_CURRENT_MATRIX_ARB = _coin.GL_TRANSPOSE_CURRENT_MATRIX_ARB
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = _coin.GL_CURRENT_MATRIX_STACK_DEPTH_ARB
GL_MAX_PROGRAM_MATRICES_ARB = _coin.GL_MAX_PROGRAM_MATRICES_ARB
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = _coin.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
GL_MAX_TEXTURE_COORDS_ARB = _coin.GL_MAX_TEXTURE_COORDS_ARB
GL_MAX_TEXTURE_IMAGE_UNITS_ARB = _coin.GL_MAX_TEXTURE_IMAGE_UNITS_ARB
GL_PROGRAM_ERROR_STRING_ARB = _coin.GL_PROGRAM_ERROR_STRING_ARB
GL_MATRIX0_ARB = _coin.GL_MATRIX0_ARB
GL_MATRIX1_ARB = _coin.GL_MATRIX1_ARB
GL_MATRIX2_ARB = _coin.GL_MATRIX2_ARB
GL_MATRIX3_ARB = _coin.GL_MATRIX3_ARB
GL_MATRIX4_ARB = _coin.GL_MATRIX4_ARB
GL_MATRIX5_ARB = _coin.GL_MATRIX5_ARB
GL_MATRIX6_ARB = _coin.GL_MATRIX6_ARB
GL_MATRIX7_ARB = _coin.GL_MATRIX7_ARB
GL_MATRIX8_ARB = _coin.GL_MATRIX8_ARB
GL_MATRIX9_ARB = _coin.GL_MATRIX9_ARB
GL_MATRIX10_ARB = _coin.GL_MATRIX10_ARB
GL_MATRIX11_ARB = _coin.GL_MATRIX11_ARB
GL_MATRIX12_ARB = _coin.GL_MATRIX12_ARB
GL_MATRIX13_ARB = _coin.GL_MATRIX13_ARB
GL_MATRIX14_ARB = _coin.GL_MATRIX14_ARB
GL_MATRIX15_ARB = _coin.GL_MATRIX15_ARB
GL_MATRIX16_ARB = _coin.GL_MATRIX16_ARB
GL_MATRIX17_ARB = _coin.GL_MATRIX17_ARB
GL_MATRIX18_ARB = _coin.GL_MATRIX18_ARB
GL_MATRIX19_ARB = _coin.GL_MATRIX19_ARB
GL_MATRIX20_ARB = _coin.GL_MATRIX20_ARB
GL_MATRIX21_ARB = _coin.GL_MATRIX21_ARB
GL_MATRIX22_ARB = _coin.GL_MATRIX22_ARB
GL_MATRIX23_ARB = _coin.GL_MATRIX23_ARB
GL_MATRIX24_ARB = _coin.GL_MATRIX24_ARB
GL_MATRIX25_ARB = _coin.GL_MATRIX25_ARB
GL_MATRIX26_ARB = _coin.GL_MATRIX26_ARB
GL_MATRIX27_ARB = _coin.GL_MATRIX27_ARB
GL_MATRIX28_ARB = _coin.GL_MATRIX28_ARB
GL_MATRIX29_ARB = _coin.GL_MATRIX29_ARB
GL_MATRIX30_ARB = _coin.GL_MATRIX30_ARB
GL_MATRIX31_ARB = _coin.GL_MATRIX31_ARB
GL_VERTEX_PROGRAM_ARB = _coin.GL_VERTEX_PROGRAM_ARB
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = _coin.GL_VERTEX_PROGRAM_POINT_SIZE_ARB
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = _coin.GL_VERTEX_PROGRAM_TWO_SIDE_ARB
GL_COLOR_SUM_ARB = _coin.GL_COLOR_SUM_ARB
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
GL_CURRENT_VERTEX_ATTRIB_ARB = _coin.GL_CURRENT_VERTEX_ATTRIB_ARB
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = _coin.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
GL_PROGRAM_ADDRESS_REGISTERS_ARB = _coin.GL_PROGRAM_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = _coin.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _coin.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _coin.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_VERTEX_ATTRIBS_ARB = _coin.GL_MAX_VERTEX_ATTRIBS_ARB
GL_VERTEX_SHADER_ARB = _coin.GL_VERTEX_SHADER_ARB
GL_FRAGMENT_SHADER_ARB = _coin.GL_FRAGMENT_SHADER_ARB
GL_OBJECT_ACTIVE_UNIFORMS_ARB = _coin.GL_OBJECT_ACTIVE_UNIFORMS_ARB
GL_GEOMETRY_SHADER_EXT = _coin.GL_GEOMETRY_SHADER_EXT
GL_GEOMETRY_VERTICES_OUT_EXT = _coin.GL_GEOMETRY_VERTICES_OUT_EXT
GL_GEOMETRY_INPUT_TYPE_EXT = _coin.GL_GEOMETRY_INPUT_TYPE_EXT
GL_GEOMETRY_OUTPUT_TYPE_EXT = _coin.GL_GEOMETRY_OUTPUT_TYPE_EXT
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = _coin.GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = _coin.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = _coin.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = _coin.GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = _coin.GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
GL_MAX_VARYING_COMPONENTS_EXT = _coin.GL_MAX_VARYING_COMPONENTS_EXT
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = _coin.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
GL_INT_VEC2_ARB = _coin.GL_INT_VEC2_ARB
GL_INT_VEC3_ARB = _coin.GL_INT_VEC3_ARB
GL_INT_VEC4_ARB = _coin.GL_INT_VEC4_ARB
GL_FLOAT_VEC2_ARB = _coin.GL_FLOAT_VEC2_ARB
GL_FLOAT_VEC3_ARB = _coin.GL_FLOAT_VEC3_ARB
GL_FLOAT_VEC4_ARB = _coin.GL_FLOAT_VEC4_ARB
GL_FLOAT_MAT2_ARB = _coin.GL_FLOAT_MAT2_ARB
GL_FLOAT_MAT3_ARB = _coin.GL_FLOAT_MAT3_ARB
GL_FLOAT_MAT4_ARB = _coin.GL_FLOAT_MAT4_ARB
GL_SAMPLER_1D_ARB = _coin.GL_SAMPLER_1D_ARB
GL_SAMPLER_2D_ARB = _coin.GL_SAMPLER_2D_ARB
GL_SAMPLER_3D_ARB = _coin.GL_SAMPLER_3D_ARB
GL_SAMPLER_CUBE_ARB = _coin.GL_SAMPLER_CUBE_ARB
GL_SAMPLER_1D_SHADOW_ARB = _coin.GL_SAMPLER_1D_SHADOW_ARB
GL_SAMPLER_2D_SHADOW_ARB = _coin.GL_SAMPLER_2D_SHADOW_ARB
GL_SAMPLER_2D_RECT_ARB = _coin.GL_SAMPLER_2D_RECT_ARB
GL_SAMPLER_2D_RECT_SHADOW_ARB = _coin.GL_SAMPLER_2D_RECT_SHADOW_ARB
GL_OBJECT_COMPILE_STATUS_ARB = _coin.GL_OBJECT_COMPILE_STATUS_ARB
GL_OBJECT_INFO_LOG_LENGTH_ARB = _coin.GL_OBJECT_INFO_LOG_LENGTH_ARB
GL_OBJECT_LINK_STATUS_ARB = _coin.GL_OBJECT_LINK_STATUS_ARB
GL_TEXTURE_MAX_ANISOTROPY_EXT = _coin.GL_TEXTURE_MAX_ANISOTROPY_EXT
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = _coin.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
GL_SAMPLES_PASSED = _coin.GL_SAMPLES_PASSED
GL_QUERY_COUNTER_BITS = _coin.GL_QUERY_COUNTER_BITS
GL_CURRENT_QUERY = _coin.GL_CURRENT_QUERY
GL_QUERY_RESULT = _coin.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _coin.GL_QUERY_RESULT_AVAILABLE
GL_CLIENT_PIXEL_STORE_BIT = _coin.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _coin.GL_CLIENT_VERTEX_ARRAY_BIT
GL_CLIENT_ALL_ATTRIB_BITS = _coin.GL_CLIENT_ALL_ATTRIB_BITS
GL_ALL_CLIENT_ATTRIB_BITS = _coin.GL_ALL_CLIENT_ATTRIB_BITS
GL_INVALID_FRAMEBUFFER_OPERATION_EXT = _coin.GL_INVALID_FRAMEBUFFER_OPERATION_EXT
GL_MAX_RENDERBUFFER_SIZE_EXT = _coin.GL_MAX_RENDERBUFFER_SIZE_EXT
GL_FRAMEBUFFER_BINDING_EXT = _coin.GL_FRAMEBUFFER_BINDING_EXT
GL_RENDERBUFFER_BINDING_EXT = _coin.GL_RENDERBUFFER_BINDING_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = _coin.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = _coin.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
GL_FRAMEBUFFER_COMPLETE_EXT = _coin.GL_FRAMEBUFFER_COMPLETE_EXT
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = _coin.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
GL_FRAMEBUFFER_UNSUPPORTED_EXT = _coin.GL_FRAMEBUFFER_UNSUPPORTED_EXT
GL_MAX_COLOR_ATTACHMENTS_EXT = _coin.GL_MAX_COLOR_ATTACHMENTS_EXT
GL_COLOR_ATTACHMENT0_EXT = _coin.GL_COLOR_ATTACHMENT0_EXT
GL_COLOR_ATTACHMENT1_EXT = _coin.GL_COLOR_ATTACHMENT1_EXT
GL_COLOR_ATTACHMENT2_EXT = _coin.GL_COLOR_ATTACHMENT2_EXT
GL_COLOR_ATTACHMENT3_EXT = _coin.GL_COLOR_ATTACHMENT3_EXT
GL_COLOR_ATTACHMENT4_EXT = _coin.GL_COLOR_ATTACHMENT4_EXT
GL_COLOR_ATTACHMENT5_EXT = _coin.GL_COLOR_ATTACHMENT5_EXT
GL_COLOR_ATTACHMENT6_EXT = _coin.GL_COLOR_ATTACHMENT6_EXT
GL_COLOR_ATTACHMENT7_EXT = _coin.GL_COLOR_ATTACHMENT7_EXT
GL_COLOR_ATTACHMENT8_EXT = _coin.GL_COLOR_ATTACHMENT8_EXT
GL_COLOR_ATTACHMENT9_EXT = _coin.GL_COLOR_ATTACHMENT9_EXT
GL_COLOR_ATTACHMENT10_EXT = _coin.GL_COLOR_ATTACHMENT10_EXT
GL_COLOR_ATTACHMENT11_EXT = _coin.GL_COLOR_ATTACHMENT11_EXT
GL_COLOR_ATTACHMENT12_EXT = _coin.GL_COLOR_ATTACHMENT12_EXT
GL_COLOR_ATTACHMENT13_EXT = _coin.GL_COLOR_ATTACHMENT13_EXT
GL_COLOR_ATTACHMENT14_EXT = _coin.GL_COLOR_ATTACHMENT14_EXT
GL_COLOR_ATTACHMENT15_EXT = _coin.GL_COLOR_ATTACHMENT15_EXT
GL_DEPTH_ATTACHMENT_EXT = _coin.GL_DEPTH_ATTACHMENT_EXT
GL_STENCIL_ATTACHMENT_EXT = _coin.GL_STENCIL_ATTACHMENT_EXT
GL_FRAMEBUFFER_EXT = _coin.GL_FRAMEBUFFER_EXT
GL_RENDERBUFFER_EXT = _coin.GL_RENDERBUFFER_EXT
GL_RENDERBUFFER_WIDTH_EXT = _coin.GL_RENDERBUFFER_WIDTH_EXT
GL_RENDERBUFFER_HEIGHT_EXT = _coin.GL_RENDERBUFFER_HEIGHT_EXT
GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = _coin.GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
GL_STENCIL_INDEX1_EXT = _coin.GL_STENCIL_INDEX1_EXT
GL_STENCIL_INDEX4_EXT = _coin.GL_STENCIL_INDEX4_EXT
GL_STENCIL_INDEX8_EXT = _coin.GL_STENCIL_INDEX8_EXT
GL_STENCIL_INDEX16_EXT = _coin.GL_STENCIL_INDEX16_EXT
GL_RENDERBUFFER_RED_SIZE_EXT = _coin.GL_RENDERBUFFER_RED_SIZE_EXT
GL_RENDERBUFFER_GREEN_SIZE_EXT = _coin.GL_RENDERBUFFER_GREEN_SIZE_EXT
GL_RENDERBUFFER_BLUE_SIZE_EXT = _coin.GL_RENDERBUFFER_BLUE_SIZE_EXT
GL_RENDERBUFFER_ALPHA_SIZE_EXT = _coin.GL_RENDERBUFFER_ALPHA_SIZE_EXT
GL_RENDERBUFFER_DEPTH_SIZE_EXT = _coin.GL_RENDERBUFFER_DEPTH_SIZE_EXT
GL_RENDERBUFFER_STENCIL_SIZE_EXT = _coin.GL_RENDERBUFFER_STENCIL_SIZE_EXT
GL_INVALID_FRAMEBUFFER_OPERATION = _coin.GL_INVALID_FRAMEBUFFER_OPERATION
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = _coin.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = _coin.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = _coin.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
GL_DEPTH_STENCIL = _coin.GL_DEPTH_STENCIL
GL_UNSIGNED_INT_24_ = _coin.GL_UNSIGNED_INT_24_
GL_DEPTH24_STENCIL8 = _coin.GL_DEPTH24_STENCIL8
GL_TEXTURE_STENCIL_SIZE = _coin.GL_TEXTURE_STENCIL_SIZE
GL_SRGB = _coin.GL_SRGB
GL_UNSIGNED_NORMALIZED = _coin.GL_UNSIGNED_NORMALIZED
GL_FRAMEBUFFER_DEFAULT = _coin.GL_FRAMEBUFFER_DEFAULT
GL_FRAMEBUFFER_UNDEFINED = _coin.GL_FRAMEBUFFER_UNDEFINED
GL_DEPTH_STENCIL_ATTACHMENT = _coin.GL_DEPTH_STENCIL_ATTACHMENT
GL_INDEX = _coin.GL_INDEX
GL_MAX_RENDERBUFFER_SIZE = _coin.GL_MAX_RENDERBUFFER_SIZE
GL_FRAMEBUFFER_BINDING = _coin.GL_FRAMEBUFFER_BINDING
GL_DRAW_FRAMEBUFFER_BINDING = _coin.GL_DRAW_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_BINDING = _coin.GL_RENDERBUFFER_BINDING
GL_READ_FRAMEBUFFER = _coin.GL_READ_FRAMEBUFFER
GL_DRAW_FRAMEBUFFER = _coin.GL_DRAW_FRAMEBUFFER
GL_READ_FRAMEBUFFER_BINDING = _coin.GL_READ_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_SAMPLES = _coin.GL_RENDERBUFFER_SAMPLES
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = _coin.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = _coin.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET = _coin.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET
GL_FRAMEBUFFER_COMPLETE = _coin.GL_FRAMEBUFFER_COMPLETE
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = _coin.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = _coin.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT = _coin.GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = _coin.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = _coin.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
GL_FRAMEBUFFER_UNSUPPORTED = _coin.GL_FRAMEBUFFER_UNSUPPORTED
GL_MAX_COLOR_ATTACHMENTS = _coin.GL_MAX_COLOR_ATTACHMENTS
GL_COLOR_ATTACHMENT0 = _coin.GL_COLOR_ATTACHMENT0
GL_COLOR_ATTACHMENT1 = _coin.GL_COLOR_ATTACHMENT1
GL_COLOR_ATTACHMENT2 = _coin.GL_COLOR_ATTACHMENT2
GL_COLOR_ATTACHMENT3 = _coin.GL_COLOR_ATTACHMENT3
GL_COLOR_ATTACHMENT4 = _coin.GL_COLOR_ATTACHMENT4
GL_COLOR_ATTACHMENT5 = _coin.GL_COLOR_ATTACHMENT5
GL_COLOR_ATTACHMENT6 = _coin.GL_COLOR_ATTACHMENT6
GL_COLOR_ATTACHMENT7 = _coin.GL_COLOR_ATTACHMENT7
GL_COLOR_ATTACHMENT8 = _coin.GL_COLOR_ATTACHMENT8
GL_COLOR_ATTACHMENT9 = _coin.GL_COLOR_ATTACHMENT9
GL_COLOR_ATTACHMENT10 = _coin.GL_COLOR_ATTACHMENT10
GL_COLOR_ATTACHMENT11 = _coin.GL_COLOR_ATTACHMENT11
GL_COLOR_ATTACHMENT12 = _coin.GL_COLOR_ATTACHMENT12
GL_COLOR_ATTACHMENT13 = _coin.GL_COLOR_ATTACHMENT13
GL_COLOR_ATTACHMENT14 = _coin.GL_COLOR_ATTACHMENT14
GL_COLOR_ATTACHMENT15 = _coin.GL_COLOR_ATTACHMENT15
GL_DEPTH_ATTACHMENT = _coin.GL_DEPTH_ATTACHMENT
GL_STENCIL_ATTACHMENT = _coin.GL_STENCIL_ATTACHMENT
GL_FRAMEBUFFER = _coin.GL_FRAMEBUFFER
GL_RENDERBUFFER = _coin.GL_RENDERBUFFER
GL_RENDERBUFFER_WIDTH = _coin.GL_RENDERBUFFER_WIDTH
GL_RENDERBUFFER_HEIGHT = _coin.GL_RENDERBUFFER_HEIGHT
GL_RENDERBUFFER_INTERNAL_FORMAT = _coin.GL_RENDERBUFFER_INTERNAL_FORMAT
GL_STENCIL_INDEX1 = _coin.GL_STENCIL_INDEX1
GL_STENCIL_INDEX4 = _coin.GL_STENCIL_INDEX4
GL_STENCIL_INDEX8 = _coin.GL_STENCIL_INDEX8
GL_STENCIL_INDEX16 = _coin.GL_STENCIL_INDEX16
GL_RENDERBUFFER_RED_SIZE = _coin.GL_RENDERBUFFER_RED_SIZE
GL_RENDERBUFFER_GREEN_SIZE = _coin.GL_RENDERBUFFER_GREEN_SIZE
GL_RENDERBUFFER_BLUE_SIZE = _coin.GL_RENDERBUFFER_BLUE_SIZE
GL_RENDERBUFFER_ALPHA_SIZE = _coin.GL_RENDERBUFFER_ALPHA_SIZE
GL_RENDERBUFFER_DEPTH_SIZE = _coin.GL_RENDERBUFFER_DEPTH_SIZE
GL_RENDERBUFFER_STENCIL_SIZE = _coin.GL_RENDERBUFFER_STENCIL_SIZE
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = _coin.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
GL_MAX_SAMPLES = _coin.GL_MAX_SAMPLES
GL_NUM_EXTENSIONS = _coin.GL_NUM_EXTENSIONS
GLX_PBUFFER_WIDTH = _coin.GLX_PBUFFER_WIDTH
GLX_PBUFFER_HEIGHT = _coin.GLX_PBUFFER_HEIGHT
GLX_DRAWABLE_TYPE = _coin.GLX_DRAWABLE_TYPE
GLX_RENDER_TYPE = _coin.GLX_RENDER_TYPE
GLX_RGBA_TYPE = _coin.GLX_RGBA_TYPE
GLX_RGBA_BIT = _coin.GLX_RGBA_BIT
GLX_PBUFFER_BIT = _coin.GLX_PBUFFER_BIT
GLX_MAX_PBUFFER_WIDTH = _coin.GLX_MAX_PBUFFER_WIDTH
GLX_MAX_PBUFFER_HEIGHT = _coin.GLX_MAX_PBUFFER_HEIGHT
GLX_MAX_PBUFFER_PIXELS = _coin.GLX_MAX_PBUFFER_PIXELS
GLU_VERSION = _coin.GLU_VERSION
GLU_EXTENSIONS = _coin.GLU_EXTENSIONS
GLU_OUTLINE_POLYGON = _coin.GLU_OUTLINE_POLYGON
GLU_OUTLINE_PATCH = _coin.GLU_OUTLINE_PATCH
GLU_NURBS_ERROR = _coin.GLU_NURBS_ERROR
GLU_ERROR = _coin.GLU_ERROR
GLU_NURBS_BEGIN = _coin.GLU_NURBS_BEGIN
GLU_NURBS_VERTEX = _coin.GLU_NURBS_VERTEX
GLU_NURBS_NORMAL = _coin.GLU_NURBS_NORMAL
GLU_NURBS_COLOR = _coin.GLU_NURBS_COLOR
GLU_NURBS_TEXTURE_COORD = _coin.GLU_NURBS_TEXTURE_COORD
GLU_NURBS_END = _coin.GLU_NURBS_END
GLU_NURBS_BEGIN_DATA = _coin.GLU_NURBS_BEGIN_DATA
GLU_NURBS_VERTEX_DATA = _coin.GLU_NURBS_VERTEX_DATA
GLU_NURBS_NORMAL_DATA = _coin.GLU_NURBS_NORMAL_DATA
GLU_NURBS_COLOR_DATA = _coin.GLU_NURBS_COLOR_DATA
GLU_NURBS_TEXTURE_COORD_DATA = _coin.GLU_NURBS_TEXTURE_COORD_DATA
GLU_NURBS_END_DATA = _coin.GLU_NURBS_END_DATA
GLU_AUTO_LOAD_MATRIX = _coin.GLU_AUTO_LOAD_MATRIX
GLU_CULLING = _coin.GLU_CULLING
GLU_SAMPLING_TOLERANCE = _coin.GLU_SAMPLING_TOLERANCE
GLU_DISPLAY_MODE = _coin.GLU_DISPLAY_MODE
GLU_PARAMETRIC_TOLERANCE = _coin.GLU_PARAMETRIC_TOLERANCE
GLU_SAMPLING_METHOD = _coin.GLU_SAMPLING_METHOD
GLU_U_STEP = _coin.GLU_U_STEP
GLU_V_STEP = _coin.GLU_V_STEP
GLU_NURBS_MODE = _coin.GLU_NURBS_MODE
GLU_NURBS_TESSELLATOR = _coin.GLU_NURBS_TESSELLATOR
GLU_NURBS_RENDERER = _coin.GLU_NURBS_RENDERER
GLU_OBJECT_PARAMETRIC_ERROR = _coin.GLU_OBJECT_PARAMETRIC_ERROR
GLU_OBJECT_PATH_LENGTH = _coin.GLU_OBJECT_PATH_LENGTH
GLU_PATH_LENGTH = _coin.GLU_PATH_LENGTH
GLU_PARAMETRIC_ERROR = _coin.GLU_PARAMETRIC_ERROR
GLU_DOMAIN_DISTANCE = _coin.GLU_DOMAIN_DISTANCE
GLU_MAP1_TRIM_2 = _coin.GLU_MAP1_TRIM_2
GLU_MAP1_TRIM_3 = _coin.GLU_MAP1_TRIM_3
GLU_POINT = _coin.GLU_POINT
GLU_LINE = _coin.GLU_LINE
GLU_FILL = _coin.GLU_FILL
GLU_SILHOUETTE = _coin.GLU_SILHOUETTE
GLU_TESS_BEGIN = _coin.GLU_TESS_BEGIN
GLU_TESS_VERTEX = _coin.GLU_TESS_VERTEX
GLU_TESS_END = _coin.GLU_TESS_END
GLU_TESS_ERROR = _coin.GLU_TESS_ERROR
GLU_TESS_COMBINE = _coin.GLU_TESS_COMBINE
GLU_TESS_BEGIN_DATA = _coin.GLU_TESS_BEGIN_DATA
GLU_TESS_VERTEX_DATA = _coin.GLU_TESS_VERTEX_DATA
GLU_TESS_END_DATA = _coin.GLU_TESS_END_DATA
GLU_TESS_ERROR_DATA = _coin.GLU_TESS_ERROR_DATA
GLU_TESS_MISSING_BEGIN_POLYGON = _coin.GLU_TESS_MISSING_BEGIN_POLYGON
GLU_TESS_MISSING_BEGIN_CONTOUR = _coin.GLU_TESS_MISSING_BEGIN_CONTOUR
GLU_TESS_MISSING_END_POLYGON = _coin.GLU_TESS_MISSING_END_POLYGON
GLU_TESS_MISSING_END_CONTOUR = _coin.GLU_TESS_MISSING_END_CONTOUR
GLU_TESS_NEED_COMBINE_CALLBACK = _coin.GLU_TESS_NEED_COMBINE_CALLBACK
WGL_COLOR_BITS_ARB = _coin.WGL_COLOR_BITS_ARB
WGL_ALPHA_BITS_ARB = _coin.WGL_ALPHA_BITS_ARB
WGL_DEPTH_BITS_ARB = _coin.WGL_DEPTH_BITS_ARB
WGL_STENCIL_BITS_ARB = _coin.WGL_STENCIL_BITS_ARB
WGL_DRAW_TO_PBUFFER_ARB = _coin.WGL_DRAW_TO_PBUFFER_ARB
WGL_PBUFFER_WIDTH_ARB = _coin.WGL_PBUFFER_WIDTH_ARB
WGL_PBUFFER_HEIGHT_ARB = _coin.WGL_PBUFFER_HEIGHT_ARB
WGL_BIND_TO_TEXTURE_RGB_ARB = _coin.WGL_BIND_TO_TEXTURE_RGB_ARB
WGL_BIND_TO_TEXTURE_RGBA_ARB = _coin.WGL_BIND_TO_TEXTURE_RGBA_ARB
WGL_TEXTURE_FORMAT_ARB = _coin.WGL_TEXTURE_FORMAT_ARB
WGL_TEXTURE_TARGET_ARB = _coin.WGL_TEXTURE_TARGET_ARB
WGL_MIPMAP_TEXTURE_ARB = _coin.WGL_MIPMAP_TEXTURE_ARB
WGL_TEXTURE_RGB_ARB = _coin.WGL_TEXTURE_RGB_ARB
WGL_TEXTURE_RGBA_ARB = _coin.WGL_TEXTURE_RGBA_ARB
WGL_NO_TEXTURE_ARB = _coin.WGL_NO_TEXTURE_ARB
WGL_TEXTURE_CUBE_MAP_ARB = _coin.WGL_TEXTURE_CUBE_MAP_ARB
WGL_TEXTURE_1D_ARB = _coin.WGL_TEXTURE_1D_ARB
WGL_TEXTURE_2D_ARB = _coin.WGL_TEXTURE_2D_ARB
WGL_MIPMAP_LEVEL_ARB = _coin.WGL_MIPMAP_LEVEL_ARB
WGL_FRONT_LEFT_ARB = _coin.WGL_FRONT_LEFT_ARB
WGL_FRONT_RIGHT_ARB = _coin.WGL_FRONT_RIGHT_ARB
WGL_BACK_LEFT_ARB = _coin.WGL_BACK_LEFT_ARB
WGL_BACK_RIGHT_ARB = _coin.WGL_BACK_RIGHT_ARB
WGL_MAX_PBUFFER_PIXELS_ARB = _coin.WGL_MAX_PBUFFER_PIXELS_ARB
WGL_MAX_PBUFFER_WIDTH_ARB = _coin.WGL_MAX_PBUFFER_WIDTH_ARB
WGL_MAX_PBUFFER_HEIGHT_ARB = _coin.WGL_MAX_PBUFFER_HEIGHT_ARB
class SbBarrier(object):
    """Proxy of C++ SbBarrier class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, count: 'unsigned int'):
        """__init__(SbBarrier self, unsigned int count) -> SbBarrier"""
        this = _coin.new_SbBarrier(count)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbBarrier
    __del__ = lambda self: None

    def enter(self) -> "int":
        """enter(SbBarrier self) -> int"""
        return _coin.SbBarrier_enter(self)

SbBarrier_swigregister = _coin.SbBarrier_swigregister
SbBarrier_swigregister(SbBarrier)

class SbMutex(object):
    """Proxy of C++ SbMutex class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbMutex self) -> SbMutex"""
        this = _coin.new_SbMutex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbMutex
    __del__ = lambda self: None

    def lock(self) -> "int":
        """lock(SbMutex self) -> int"""
        return _coin.SbMutex_lock(self)


    def tryLock(self) -> "SbBool":
        """tryLock(SbMutex self) -> SbBool"""
        return _coin.SbMutex_tryLock(self)


    def unlock(self) -> "int":
        """unlock(SbMutex self) -> int"""
        return _coin.SbMutex_unlock(self)

SbMutex_swigregister = _coin.SbMutex_swigregister
SbMutex_swigregister(SbMutex)

class SbThreadMutex(object):
    """Proxy of C++ SbThreadMutex class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbThreadMutex self) -> SbThreadMutex"""
        this = _coin.new_SbThreadMutex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbThreadMutex
    __del__ = lambda self: None

    def lock(self) -> "int":
        """lock(SbThreadMutex self) -> int"""
        return _coin.SbThreadMutex_lock(self)


    def tryLock(self) -> "SbBool":
        """tryLock(SbThreadMutex self) -> SbBool"""
        return _coin.SbThreadMutex_tryLock(self)


    def unlock(self) -> "int":
        """unlock(SbThreadMutex self) -> int"""
        return _coin.SbThreadMutex_unlock(self)

SbThreadMutex_swigregister = _coin.SbThreadMutex_swigregister
SbThreadMutex_swigregister(SbThreadMutex)

class SbThreadAutoLock(object):
    """Proxy of C++ SbThreadAutoLock class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbThreadAutoLock self, SbMutex mutexptr) -> SbThreadAutoLock
        __init__(SbThreadAutoLock self, SbThreadMutex mutexptr) -> SbThreadAutoLock
        """
        this = _coin.new_SbThreadAutoLock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbThreadAutoLock
    __del__ = lambda self: None
SbThreadAutoLock_swigregister = _coin.SbThreadAutoLock_swigregister
SbThreadAutoLock_swigregister(SbThreadAutoLock)

class SbCondVar(object):
    """Proxy of C++ SbCondVar class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbCondVar self) -> SbCondVar"""
        this = _coin.new_SbCondVar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbCondVar
    __del__ = lambda self: None

    def wait(self, mutex: 'SbMutex') -> "SbBool":
        """wait(SbCondVar self, SbMutex mutex) -> SbBool"""
        return _coin.SbCondVar_wait(self, mutex)


    def timedWait(self, mutex: 'SbMutex', period: 'SbTime') -> "SbBool":
        """timedWait(SbCondVar self, SbMutex mutex, SbTime period) -> SbBool"""
        return _coin.SbCondVar_timedWait(self, mutex, period)


    def wakeOne(self) -> "void":
        """wakeOne(SbCondVar self)"""
        return _coin.SbCondVar_wakeOne(self)


    def wakeAll(self) -> "void":
        """wakeAll(SbCondVar self)"""
        return _coin.SbCondVar_wakeAll(self)

SbCondVar_swigregister = _coin.SbCondVar_swigregister
SbCondVar_swigregister(SbCondVar)

class SbFifo(object):
    """Proxy of C++ SbFifo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SbFifo self) -> SbFifo"""
        this = _coin.new_SbFifo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbFifo
    __del__ = lambda self: None

    def assign(self, ptr: 'void *', type: 'uint32_t') -> "void":
        """assign(SbFifo self, void * ptr, uint32_t type)"""
        return _coin.SbFifo_assign(self, ptr, type)


    def retrieve(self, ptr: 'void *&', type: 'uint32_t &') -> "void":
        """retrieve(SbFifo self, void *& ptr, uint32_t & type)"""
        return _coin.SbFifo_retrieve(self, ptr, type)


    def tryRetrieve(self, ptr: 'void *&', type: 'uint32_t &') -> "SbBool":
        """tryRetrieve(SbFifo self, void *& ptr, uint32_t & type) -> SbBool"""
        return _coin.SbFifo_tryRetrieve(self, ptr, type)


    def size(self) -> "unsigned int":
        """size(SbFifo self) -> unsigned int"""
        return _coin.SbFifo_size(self)


    def lock(self) -> "void":
        """lock(SbFifo self)"""
        return _coin.SbFifo_lock(self)


    def unlock(self) -> "void":
        """unlock(SbFifo self)"""
        return _coin.SbFifo_unlock(self)


    def peek(self, item: 'void *&', type: 'uint32_t &') -> "SbBool":
        """peek(SbFifo self, void *& item, uint32_t & type) -> SbBool"""
        return _coin.SbFifo_peek(self, item, type)


    def contains(self, item: 'void *') -> "SbBool":
        """contains(SbFifo self, void * item) -> SbBool"""
        return _coin.SbFifo_contains(self, item)


    def reclaim(self, item: 'void *') -> "SbBool":
        """reclaim(SbFifo self, void * item) -> SbBool"""
        return _coin.SbFifo_reclaim(self, item)

SbFifo_swigregister = _coin.SbFifo_swigregister
SbFifo_swigregister(SbFifo)

class SbRWMutex(object):
    """Proxy of C++ SbRWMutex class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    READ_PRECEDENCE = _coin.SbRWMutex_READ_PRECEDENCE
    WRITE_PRECEDENCE = _coin.SbRWMutex_WRITE_PRECEDENCE

    def __init__(self, policy: 'SbRWMutex::Precedence'):
        """__init__(SbRWMutex self, SbRWMutex::Precedence policy) -> SbRWMutex"""
        this = _coin.new_SbRWMutex(policy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbRWMutex
    __del__ = lambda self: None

    def writeLock(self) -> "int":
        """writeLock(SbRWMutex self) -> int"""
        return _coin.SbRWMutex_writeLock(self)


    def tryWriteLock(self) -> "SbBool":
        """tryWriteLock(SbRWMutex self) -> SbBool"""
        return _coin.SbRWMutex_tryWriteLock(self)


    def writeUnlock(self) -> "int":
        """writeUnlock(SbRWMutex self) -> int"""
        return _coin.SbRWMutex_writeUnlock(self)


    def readLock(self) -> "int":
        """readLock(SbRWMutex self) -> int"""
        return _coin.SbRWMutex_readLock(self)


    def tryReadLock(self) -> "int":
        """tryReadLock(SbRWMutex self) -> int"""
        return _coin.SbRWMutex_tryReadLock(self)


    def readUnlock(self) -> "int":
        """readUnlock(SbRWMutex self) -> int"""
        return _coin.SbRWMutex_readUnlock(self)

SbRWMutex_swigregister = _coin.SbRWMutex_swigregister
SbRWMutex_swigregister(SbRWMutex)

class SbStorage(object):
    """Proxy of C++ SbStorage class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SbStorage self, unsigned int size) -> SbStorage
        __init__(SbStorage self, unsigned int size, cc_storage_f * constr, cc_storage_f * destr) -> SbStorage
        """
        this = _coin.new_SbStorage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SbStorage
    __del__ = lambda self: None

    def get(self) -> "void *":
        """get(SbStorage self) -> void *"""
        return _coin.SbStorage_get(self)


    def applyToAll(self, func: 'SbStorageApplyFunc *', closure: 'void *') -> "void":
        """applyToAll(SbStorage self, SbStorageApplyFunc * func, void * closure)"""
        return _coin.SbStorage_applyToAll(self, func, closure)

SbStorage_swigregister = _coin.SbStorage_swigregister
SbStorage_swigregister(SbStorage)

class SbThread(object):
    """Proxy of C++ SbThread class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(func: 'void *(*)(void *)', closure: 'void *') -> "SbThread *":
        """create(void *(*)(void *) func, void * closure) -> SbThread"""
        return _coin.SbThread_create(func, closure)

    create = staticmethod(create)

    def destroy(thread: 'SbThread') -> "void":
        """destroy(SbThread thread)"""
        return _coin.SbThread_destroy(thread)

    destroy = staticmethod(destroy)

    def join(*args) -> "SbBool":
        """
        join(void ** retval=0) -> SbBool
        join() -> SbBool
        join(SbThread thread, void ** retval=0) -> SbBool
        join(SbThread thread) -> SbBool
        """
        return _coin.SbThread_join(*args)

    join = staticmethod(join)
SbThread_swigregister = _coin.SbThread_swigregister
SbThread_swigregister(SbThread)

def SbThread_create(func: 'void *(*)(void *)', closure: 'void *') -> "SbThread *":
    """SbThread_create(void *(*)(void *) func, void * closure) -> SbThread"""
    return _coin.SbThread_create(func, closure)

def SbThread_destroy(thread: 'SbThread') -> "void":
    """SbThread_destroy(SbThread thread)"""
    return _coin.SbThread_destroy(thread)

def SbThread_join(*args) -> "SbBool":
    """
    join(void ** retval=0) -> SbBool
    join() -> SbBool
    join(SbThread thread, void ** retval=0) -> SbBool
    SbThread_join(SbThread thread) -> SbBool
    """
    return _coin.SbThread_join(*args)

class SoVRMLParent(SoGroup):
    """Proxy of C++ SoVRMLParent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLParent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLParent self) -> SoType"""
        return _coin.SoVRMLParent_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLParent_initClass()

    initClass = staticmethod(initClass)
    children = _swig_property(_coin.SoVRMLParent_children_get, _coin.SoVRMLParent_children_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLParent self) -> SbBool"""
        return _coin.SoVRMLParent_affectsState(self)


    def addChild(self, child: 'SoNode') -> "void":
        """addChild(SoVRMLParent self, SoNode child)"""
        return _coin.SoVRMLParent_addChild(self, child)


    def insertChild(self, child: 'SoNode', idx: 'int') -> "void":
        """insertChild(SoVRMLParent self, SoNode child, int idx)"""
        return _coin.SoVRMLParent_insertChild(self, child, idx)


    def getChild(self, idx: 'int') -> "SoNode *":
        """getChild(SoVRMLParent self, int idx) -> SoNode"""
        return _coin.SoVRMLParent_getChild(self, idx)


    def findChild(self, child: 'SoNode') -> "int":
        """findChild(SoVRMLParent self, SoNode child) -> int"""
        return _coin.SoVRMLParent_findChild(self, child)


    def getNumChildren(self) -> "int":
        """getNumChildren(SoVRMLParent self) -> int"""
        return _coin.SoVRMLParent_getNumChildren(self)


    def removeChild(self, *args) -> "void":
        """
        removeChild(SoVRMLParent self, int idx)
        removeChild(SoVRMLParent self, SoNode child)
        """
        return _coin.SoVRMLParent_removeChild(self, *args)


    def removeAllChildren(self) -> "void":
        """removeAllChildren(SoVRMLParent self)"""
        return _coin.SoVRMLParent_removeAllChildren(self)


    def replaceChild(self, *args) -> "void":
        """
        replaceChild(SoVRMLParent self, int idx, SoNode child)
        replaceChild(SoVRMLParent self, SoNode old, SoNode child)
        """
        return _coin.SoVRMLParent_replaceChild(self, *args)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLParent self) -> SoChildList"""
        return _coin.SoVRMLParent_getChildren(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLParent self, SoAction action)"""
        return _coin.SoVRMLParent_doAction(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLParent self, SoSearchAction action)"""
        return _coin.SoVRMLParent_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLParent self, SoWriteAction action)"""
        return _coin.SoVRMLParent_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLParent self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLParent_getPrimitiveCount(self, action)


    def updateChildList(*args) -> "void":
        """
        updateChildList(SoNode const *const * nodes, int const numnodes, SoChildList cl)
        updateChildList(SoNode nodewithsfnode, SoChildList cl)
        """
        return _coin.SoVRMLParent_updateChildList(*args)

    updateChildList = staticmethod(updateChildList)
SoVRMLParent_swigregister = _coin.SoVRMLParent_swigregister
SoVRMLParent_swigregister(SoVRMLParent)

def SoVRMLParent_getClassTypeId() -> "SoType":
    """SoVRMLParent_getClassTypeId() -> SoType"""
    return _coin.SoVRMLParent_getClassTypeId()

def SoVRMLParent_initClass() -> "void":
    """SoVRMLParent_initClass()"""
    return _coin.SoVRMLParent_initClass()

def SoVRMLParent_updateChildList(*args) -> "void":
    """
    updateChildList(SoNode const *const * nodes, int const numnodes, SoChildList cl)
    SoVRMLParent_updateChildList(SoNode nodewithsfnode, SoChildList cl)
    """
    return _coin.SoVRMLParent_updateChildList(*args)

class SoVRMLAnchor(SoVRMLParent):
    """Proxy of C++ SoVRMLAnchor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLAnchor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLAnchor self) -> SoType"""
        return _coin.SoVRMLAnchor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLAnchor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLAnchor self) -> SoVRMLAnchor"""
        this = _coin.new_SoVRMLAnchor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    url = _swig_property(_coin.SoVRMLAnchor_url_get, _coin.SoVRMLAnchor_url_set)
    description = _swig_property(_coin.SoVRMLAnchor_description_get, _coin.SoVRMLAnchor_description_set)
    parameter = _swig_property(_coin.SoVRMLAnchor_parameter_get, _coin.SoVRMLAnchor_parameter_set)
    bboxCenter = _swig_property(_coin.SoVRMLAnchor_bboxCenter_get, _coin.SoVRMLAnchor_bboxCenter_set)
    bboxSize = _swig_property(_coin.SoVRMLAnchor_bboxSize_get, _coin.SoVRMLAnchor_bboxSize_set)

    def setFetchURLCallBack(arg1: 'SoVRMLAnchorCB *', closure: 'void *') -> "void":
        """setFetchURLCallBack(SoVRMLAnchorCB * arg1, void * closure)"""
        return _coin.SoVRMLAnchor_setFetchURLCallBack(arg1, closure)

    setFetchURLCallBack = staticmethod(setFetchURLCallBack)

    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLAnchor self, SoHandleEventAction action)"""
        return _coin.SoVRMLAnchor_handleEvent(self, action)

SoVRMLAnchor_swigregister = _coin.SoVRMLAnchor_swigregister
SoVRMLAnchor_swigregister(SoVRMLAnchor)

def SoVRMLAnchor_getClassTypeId() -> "SoType":
    """SoVRMLAnchor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLAnchor_getClassTypeId()

def SoVRMLAnchor_initClass() -> "void":
    """SoVRMLAnchor_initClass()"""
    return _coin.SoVRMLAnchor_initClass()

def SoVRMLAnchor_setFetchURLCallBack(arg2: 'SoVRMLAnchorCB *', closure: 'void *') -> "void":
    """SoVRMLAnchor_setFetchURLCallBack(SoVRMLAnchorCB * arg2, void * closure)"""
    return _coin.SoVRMLAnchor_setFetchURLCallBack(arg2, closure)

class SoVRMLAppearance(SoNode):
    """Proxy of C++ SoVRMLAppearance class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLAppearance_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLAppearance self) -> SoType"""
        return _coin.SoVRMLAppearance_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLAppearance_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLAppearance self) -> SoVRMLAppearance"""
        this = _coin.new_SoVRMLAppearance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    material = _swig_property(_coin.SoVRMLAppearance_material_get, _coin.SoVRMLAppearance_material_set)
    texture = _swig_property(_coin.SoVRMLAppearance_texture_get, _coin.SoVRMLAppearance_texture_set)
    textureTransform = _swig_property(_coin.SoVRMLAppearance_textureTransform_get, _coin.SoVRMLAppearance_textureTransform_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLAppearance self, SoAction action)"""
        return _coin.SoVRMLAppearance_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLAppearance self, SoCallbackAction action)"""
        return _coin.SoVRMLAppearance_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLAppearance self, SoGLRenderAction action)"""
        return _coin.SoVRMLAppearance_GLRender(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLAppearance self, SoSearchAction action)"""
        return _coin.SoVRMLAppearance_search(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLAppearance self) -> SoChildList"""
        return _coin.SoVRMLAppearance_getChildren(self)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLAppearance self, SoNotList list)"""
        return _coin.SoVRMLAppearance_notify(self, list)


    def copyContents(self, arg2: 'SoFieldContainer', copyConn: 'SbBool') -> "void":
        """copyContents(SoVRMLAppearance self, SoFieldContainer arg2, SbBool copyConn)"""
        return _coin.SoVRMLAppearance_copyContents(self, arg2, copyConn)

SoVRMLAppearance_swigregister = _coin.SoVRMLAppearance_swigregister
SoVRMLAppearance_swigregister(SoVRMLAppearance)

def SoVRMLAppearance_getClassTypeId() -> "SoType":
    """SoVRMLAppearance_getClassTypeId() -> SoType"""
    return _coin.SoVRMLAppearance_getClassTypeId()

def SoVRMLAppearance_initClass() -> "void":
    """SoVRMLAppearance_initClass()"""
    return _coin.SoVRMLAppearance_initClass()

class SoVRMLAudioClip(SoNode):
    """Proxy of C++ SoVRMLAudioClip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLAudioClip_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLAudioClip self) -> SoType"""
        return _coin.SoVRMLAudioClip_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLAudioClip_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLAudioClip self) -> SoVRMLAudioClip"""
        this = _coin.new_SoVRMLAudioClip()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    description = _swig_property(_coin.SoVRMLAudioClip_description_get, _coin.SoVRMLAudioClip_description_set)
    loop = _swig_property(_coin.SoVRMLAudioClip_loop_get, _coin.SoVRMLAudioClip_loop_set)
    pitch = _swig_property(_coin.SoVRMLAudioClip_pitch_get, _coin.SoVRMLAudioClip_pitch_set)
    startTime = _swig_property(_coin.SoVRMLAudioClip_startTime_get, _coin.SoVRMLAudioClip_startTime_set)
    stopTime = _swig_property(_coin.SoVRMLAudioClip_stopTime_get, _coin.SoVRMLAudioClip_stopTime_set)
    url = _swig_property(_coin.SoVRMLAudioClip_url_get, _coin.SoVRMLAudioClip_url_set)

    def setSubdirectories(subdirectories: 'SbList< SbString > const &') -> "void":
        """setSubdirectories(SbList< SbString > const & subdirectories)"""
        return _coin.SoVRMLAudioClip_setSubdirectories(subdirectories)

    setSubdirectories = staticmethod(setSubdirectories)

    def getSubdirectories() -> "SbStringList const &":
        """getSubdirectories() -> SbStringList"""
        return _coin.SoVRMLAudioClip_getSubdirectories()

    getSubdirectories = staticmethod(getSubdirectories)

    def setDefaultPauseBetweenTracks(pause: 'SbTime') -> "void":
        """setDefaultPauseBetweenTracks(SbTime pause)"""
        return _coin.SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause)

    setDefaultPauseBetweenTracks = staticmethod(setDefaultPauseBetweenTracks)

    def getDefaultPauseBetweenTracks() -> "SbTime":
        """getDefaultPauseBetweenTracks() -> SbTime"""
        return _coin.SoVRMLAudioClip_getDefaultPauseBetweenTracks()

    getDefaultPauseBetweenTracks = staticmethod(getDefaultPauseBetweenTracks)

    def setDefaultIntroPause(pause: 'SbTime') -> "void":
        """setDefaultIntroPause(SbTime pause)"""
        return _coin.SoVRMLAudioClip_setDefaultIntroPause(pause)

    setDefaultIntroPause = staticmethod(setDefaultIntroPause)

    def getDefaultIntroPause() -> "SbTime":
        """getDefaultIntroPause() -> SbTime"""
        return _coin.SoVRMLAudioClip_getDefaultIntroPause()

    getDefaultIntroPause = staticmethod(getDefaultIntroPause)

    def setDefaultSampleRate(samplerate: 'int') -> "void":
        """setDefaultSampleRate(int samplerate)"""
        return _coin.SoVRMLAudioClip_setDefaultSampleRate(samplerate)

    setDefaultSampleRate = staticmethod(setDefaultSampleRate)

    def getDefaultSampleRate() -> "int":
        """getDefaultSampleRate() -> int"""
        return _coin.SoVRMLAudioClip_getDefaultSampleRate()

    getDefaultSampleRate = staticmethod(getDefaultSampleRate)

    def setDefaultTimerInterval(interval: 'SbTime') -> "void":
        """setDefaultTimerInterval(SbTime interval)"""
        return _coin.SoVRMLAudioClip_setDefaultTimerInterval(interval)

    setDefaultTimerInterval = staticmethod(setDefaultTimerInterval)

    def getDefaultTimerInterval() -> "SbTime":
        """getDefaultTimerInterval() -> SbTime"""
        return _coin.SoVRMLAudioClip_getDefaultTimerInterval()

    getDefaultTimerInterval = staticmethod(getDefaultTimerInterval)

    def getSampleRate(self) -> "int":
        """getSampleRate(SoVRMLAudioClip self) -> int"""
        return _coin.SoVRMLAudioClip_getSampleRate(self)


    def open(self, url: 'SbStringList') -> "void *":
        """open(SoVRMLAudioClip self, SbStringList url) -> void *"""
        return _coin.SoVRMLAudioClip_open(self, url)


    def read(self, datasource: 'void *', buffer: 'void *', numframes: 'int', channels: 'int &') -> "size_t":
        """read(SoVRMLAudioClip self, void * datasource, void * buffer, int numframes, int & channels) -> size_t"""
        return _coin.SoVRMLAudioClip_read(self, datasource, buffer, numframes, channels)


    def seek(self, datasource: 'void *', offset: 'long', whence: 'int') -> "int":
        """seek(SoVRMLAudioClip self, void * datasource, long offset, int whence) -> int"""
        return _coin.SoVRMLAudioClip_seek(self, datasource, offset, whence)


    def tell(self, datasource: 'void *') -> "long":
        """tell(SoVRMLAudioClip self, void * datasource) -> long"""
        return _coin.SoVRMLAudioClip_tell(self, datasource)


    def close(self, datasource: 'void *') -> "int":
        """close(SoVRMLAudioClip self, void * datasource) -> int"""
        return _coin.SoVRMLAudioClip_close(self, datasource)


    def setCallbacks(self, opencb: 'SoVRMLAudioClip::open_func *', readcb: 'SoVRMLAudioClip::read_func *', seekcb: 'SoVRMLAudioClip::seek_func *', tellcb: 'SoVRMLAudioClip::tell_func *', closecb: 'SoVRMLAudioClip::close_func *', userdataptr: 'void *') -> "void":
        """setCallbacks(SoVRMLAudioClip self, SoVRMLAudioClip::open_func * opencb, SoVRMLAudioClip::read_func * readcb, SoVRMLAudioClip::seek_func * seekcb, SoVRMLAudioClip::tell_func * tellcb, SoVRMLAudioClip::close_func * closecb, void * userdataptr)"""
        return _coin.SoVRMLAudioClip_setCallbacks(self, opencb, readcb, seekcb, tellcb, closecb, userdataptr)

SoVRMLAudioClip_swigregister = _coin.SoVRMLAudioClip_swigregister
SoVRMLAudioClip_swigregister(SoVRMLAudioClip)

def SoVRMLAudioClip_getClassTypeId() -> "SoType":
    """SoVRMLAudioClip_getClassTypeId() -> SoType"""
    return _coin.SoVRMLAudioClip_getClassTypeId()

def SoVRMLAudioClip_initClass() -> "void":
    """SoVRMLAudioClip_initClass()"""
    return _coin.SoVRMLAudioClip_initClass()

def SoVRMLAudioClip_setSubdirectories(subdirectories: 'SbList< SbString > const &') -> "void":
    """SoVRMLAudioClip_setSubdirectories(SbList< SbString > const & subdirectories)"""
    return _coin.SoVRMLAudioClip_setSubdirectories(subdirectories)

def SoVRMLAudioClip_getSubdirectories() -> "SbStringList const &":
    """SoVRMLAudioClip_getSubdirectories() -> SbStringList"""
    return _coin.SoVRMLAudioClip_getSubdirectories()

def SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause: 'SbTime') -> "void":
    """SoVRMLAudioClip_setDefaultPauseBetweenTracks(SbTime pause)"""
    return _coin.SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause)

def SoVRMLAudioClip_getDefaultPauseBetweenTracks() -> "SbTime":
    """SoVRMLAudioClip_getDefaultPauseBetweenTracks() -> SbTime"""
    return _coin.SoVRMLAudioClip_getDefaultPauseBetweenTracks()

def SoVRMLAudioClip_setDefaultIntroPause(pause: 'SbTime') -> "void":
    """SoVRMLAudioClip_setDefaultIntroPause(SbTime pause)"""
    return _coin.SoVRMLAudioClip_setDefaultIntroPause(pause)

def SoVRMLAudioClip_getDefaultIntroPause() -> "SbTime":
    """SoVRMLAudioClip_getDefaultIntroPause() -> SbTime"""
    return _coin.SoVRMLAudioClip_getDefaultIntroPause()

def SoVRMLAudioClip_setDefaultSampleRate(samplerate: 'int') -> "void":
    """SoVRMLAudioClip_setDefaultSampleRate(int samplerate)"""
    return _coin.SoVRMLAudioClip_setDefaultSampleRate(samplerate)

def SoVRMLAudioClip_getDefaultSampleRate() -> "int":
    """SoVRMLAudioClip_getDefaultSampleRate() -> int"""
    return _coin.SoVRMLAudioClip_getDefaultSampleRate()

def SoVRMLAudioClip_setDefaultTimerInterval(interval: 'SbTime') -> "void":
    """SoVRMLAudioClip_setDefaultTimerInterval(SbTime interval)"""
    return _coin.SoVRMLAudioClip_setDefaultTimerInterval(interval)

def SoVRMLAudioClip_getDefaultTimerInterval() -> "SbTime":
    """SoVRMLAudioClip_getDefaultTimerInterval() -> SbTime"""
    return _coin.SoVRMLAudioClip_getDefaultTimerInterval()

class SoVRMLBackground(SoNode):
    """Proxy of C++ SoVRMLBackground class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLBackground_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLBackground self) -> SoType"""
        return _coin.SoVRMLBackground_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLBackground_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLBackground self) -> SoVRMLBackground"""
        this = _coin.new_SoVRMLBackground()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    groundColor = _swig_property(_coin.SoVRMLBackground_groundColor_get, _coin.SoVRMLBackground_groundColor_set)
    groundAngle = _swig_property(_coin.SoVRMLBackground_groundAngle_get, _coin.SoVRMLBackground_groundAngle_set)
    skyColor = _swig_property(_coin.SoVRMLBackground_skyColor_get, _coin.SoVRMLBackground_skyColor_set)
    skyAngle = _swig_property(_coin.SoVRMLBackground_skyAngle_get, _coin.SoVRMLBackground_skyAngle_set)
    backUrl = _swig_property(_coin.SoVRMLBackground_backUrl_get, _coin.SoVRMLBackground_backUrl_set)
    bottomUrl = _swig_property(_coin.SoVRMLBackground_bottomUrl_get, _coin.SoVRMLBackground_bottomUrl_set)
    frontUrl = _swig_property(_coin.SoVRMLBackground_frontUrl_get, _coin.SoVRMLBackground_frontUrl_set)
    leftUrl = _swig_property(_coin.SoVRMLBackground_leftUrl_get, _coin.SoVRMLBackground_leftUrl_set)
    rightUrl = _swig_property(_coin.SoVRMLBackground_rightUrl_get, _coin.SoVRMLBackground_rightUrl_set)
    topUrl = _swig_property(_coin.SoVRMLBackground_topUrl_get, _coin.SoVRMLBackground_topUrl_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLBackground self, SoGLRenderAction action)"""
        return _coin.SoVRMLBackground_GLRender(self, action)

SoVRMLBackground_swigregister = _coin.SoVRMLBackground_swigregister
SoVRMLBackground_swigregister(SoVRMLBackground)

def SoVRMLBackground_getClassTypeId() -> "SoType":
    """SoVRMLBackground_getClassTypeId() -> SoType"""
    return _coin.SoVRMLBackground_getClassTypeId()

def SoVRMLBackground_initClass() -> "void":
    """SoVRMLBackground_initClass()"""
    return _coin.SoVRMLBackground_initClass()

class SoVRMLBillboard(SoVRMLParent):
    """Proxy of C++ SoVRMLBillboard class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLBillboard_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLBillboard self) -> SoType"""
        return _coin.SoVRMLBillboard_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLBillboard_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLBillboard self) -> SoVRMLBillboard
        __init__(SoVRMLBillboard self, int numchildren) -> SoVRMLBillboard
        """
        this = _coin.new_SoVRMLBillboard(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    axisOfRotation = _swig_property(_coin.SoVRMLBillboard_axisOfRotation_get, _coin.SoVRMLBillboard_axisOfRotation_set)
    bboxCenter = _swig_property(_coin.SoVRMLBillboard_bboxCenter_get, _coin.SoVRMLBillboard_bboxCenter_set)
    bboxSize = _swig_property(_coin.SoVRMLBillboard_bboxSize_get, _coin.SoVRMLBillboard_bboxSize_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLBillboard self, SoAction action)"""
        return _coin.SoVRMLBillboard_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLBillboard self, SoCallbackAction action)"""
        return _coin.SoVRMLBillboard_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLBillboard self, SoGLRenderAction action)"""
        return _coin.SoVRMLBillboard_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLBillboard self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLBillboard_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLBillboard self, SoGetMatrixAction action)"""
        return _coin.SoVRMLBillboard_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLBillboard self, SoPickAction action)"""
        return _coin.SoVRMLBillboard_pick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLBillboard self, SoSearchAction action)"""
        return _coin.SoVRMLBillboard_search(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoVRMLBillboard self, SoGLRenderAction action)"""
        return _coin.SoVRMLBillboard_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoVRMLBillboard self, SoGLRenderAction action)"""
        return _coin.SoVRMLBillboard_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoVRMLBillboard self, SoGLRenderAction action)"""
        return _coin.SoVRMLBillboard_GLRenderOffPath(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLBillboard self, SoNotList list)"""
        return _coin.SoVRMLBillboard_notify(self, list)

SoVRMLBillboard_swigregister = _coin.SoVRMLBillboard_swigregister
SoVRMLBillboard_swigregister(SoVRMLBillboard)

def SoVRMLBillboard_getClassTypeId() -> "SoType":
    """SoVRMLBillboard_getClassTypeId() -> SoType"""
    return _coin.SoVRMLBillboard_getClassTypeId()

def SoVRMLBillboard_initClass() -> "void":
    """SoVRMLBillboard_initClass()"""
    return _coin.SoVRMLBillboard_initClass()

class SoVRMLGeometry(SoShape):
    """Proxy of C++ SoVRMLGeometry class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLGeometry_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLGeometry self) -> SoType"""
        return _coin.SoVRMLGeometry_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLGeometry_initClass()

    initClass = staticmethod(initClass)

    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLGeometry self, SoSearchAction action)"""
        return _coin.SoVRMLGeometry_search(self, action)


    def copyContents(self, arg2: 'SoFieldContainer', copyConn: 'SbBool') -> "void":
        """copyContents(SoVRMLGeometry self, SoFieldContainer arg2, SbBool copyConn)"""
        return _coin.SoVRMLGeometry_copyContents(self, arg2, copyConn)

SoVRMLGeometry_swigregister = _coin.SoVRMLGeometry_swigregister
SoVRMLGeometry_swigregister(SoVRMLGeometry)

def SoVRMLGeometry_getClassTypeId() -> "SoType":
    """SoVRMLGeometry_getClassTypeId() -> SoType"""
    return _coin.SoVRMLGeometry_getClassTypeId()

def SoVRMLGeometry_initClass() -> "void":
    """SoVRMLGeometry_initClass()"""
    return _coin.SoVRMLGeometry_initClass()

class SoVRMLBox(SoVRMLGeometry):
    """Proxy of C++ SoVRMLBox class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLBox_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLBox self) -> SoType"""
        return _coin.SoVRMLBox_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLBox_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLBox self) -> SoVRMLBox"""
        this = _coin.new_SoVRMLBox()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    size = _swig_property(_coin.SoVRMLBox_size_get, _coin.SoVRMLBox_size_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLBox self, SoGLRenderAction action)"""
        return _coin.SoVRMLBox_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLBox self, SoRayPickAction action)"""
        return _coin.SoVRMLBox_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLBox self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLBox_getPrimitiveCount(self, action)

SoVRMLBox_swigregister = _coin.SoVRMLBox_swigregister
SoVRMLBox_swigregister(SoVRMLBox)

def SoVRMLBox_getClassTypeId() -> "SoType":
    """SoVRMLBox_getClassTypeId() -> SoType"""
    return _coin.SoVRMLBox_getClassTypeId()

def SoVRMLBox_initClass() -> "void":
    """SoVRMLBox_initClass()"""
    return _coin.SoVRMLBox_initClass()

class SoVRMLGroup(SoVRMLParent):
    """Proxy of C++ SoVRMLGroup class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLGroup_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLGroup self) -> SoType"""
        return _coin.SoVRMLGroup_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLGroup_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLGroup self) -> SoVRMLGroup
        __init__(SoVRMLGroup self, int numChildren) -> SoVRMLGroup
        """
        this = _coin.new_SoVRMLGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OFF = _coin.SoVRMLGroup_OFF
    ON = _coin.SoVRMLGroup_ON
    AUTO = _coin.SoVRMLGroup_AUTO
    renderCaching = _swig_property(_coin.SoVRMLGroup_renderCaching_get, _coin.SoVRMLGroup_renderCaching_set)
    boundingBoxCaching = _swig_property(_coin.SoVRMLGroup_boundingBoxCaching_get, _coin.SoVRMLGroup_boundingBoxCaching_set)
    renderCulling = _swig_property(_coin.SoVRMLGroup_renderCulling_get, _coin.SoVRMLGroup_renderCulling_set)
    pickCulling = _swig_property(_coin.SoVRMLGroup_pickCulling_get, _coin.SoVRMLGroup_pickCulling_set)
    bboxCenter = _swig_property(_coin.SoVRMLGroup_bboxCenter_get, _coin.SoVRMLGroup_bboxCenter_set)
    bboxSize = _swig_property(_coin.SoVRMLGroup_bboxSize_get, _coin.SoVRMLGroup_bboxSize_set)

    def setNumRenderCaches(num: 'int') -> "void":
        """setNumRenderCaches(int num)"""
        return _coin.SoVRMLGroup_setNumRenderCaches(num)

    setNumRenderCaches = staticmethod(setNumRenderCaches)

    def getNumRenderCaches() -> "int":
        """getNumRenderCaches() -> int"""
        return _coin.SoVRMLGroup_getNumRenderCaches()

    getNumRenderCaches = staticmethod(getNumRenderCaches)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLGroup self, SoAction action)"""
        return _coin.SoVRMLGroup_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLGroup self, SoCallbackAction action)"""
        return _coin.SoVRMLGroup_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLGroup self, SoGLRenderAction action)"""
        return _coin.SoVRMLGroup_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLGroup self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLGroup_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLGroup self, SoGetMatrixAction action)"""
        return _coin.SoVRMLGroup_getMatrix(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLGroup self, SoRayPickAction action)"""
        return _coin.SoVRMLGroup_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLGroup self, SoSearchAction action)"""
        return _coin.SoVRMLGroup_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLGroup self, SoWriteAction action)"""
        return _coin.SoVRMLGroup_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLGroup self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLGroup_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoVRMLGroup self, SoAudioRenderAction action)"""
        return _coin.SoVRMLGroup_audioRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoVRMLGroup self, SoGLRenderAction action)"""
        return _coin.SoVRMLGroup_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoVRMLGroup self, SoGLRenderAction action)"""
        return _coin.SoVRMLGroup_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoVRMLGroup self, SoGLRenderAction action)"""
        return _coin.SoVRMLGroup_GLRenderOffPath(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLGroup self, SoNotList list)"""
        return _coin.SoVRMLGroup_notify(self, list)

SoVRMLGroup_swigregister = _coin.SoVRMLGroup_swigregister
SoVRMLGroup_swigregister(SoVRMLGroup)

def SoVRMLGroup_getClassTypeId() -> "SoType":
    """SoVRMLGroup_getClassTypeId() -> SoType"""
    return _coin.SoVRMLGroup_getClassTypeId()

def SoVRMLGroup_initClass() -> "void":
    """SoVRMLGroup_initClass()"""
    return _coin.SoVRMLGroup_initClass()

def SoVRMLGroup_setNumRenderCaches(num: 'int') -> "void":
    """SoVRMLGroup_setNumRenderCaches(int num)"""
    return _coin.SoVRMLGroup_setNumRenderCaches(num)

def SoVRMLGroup_getNumRenderCaches() -> "int":
    """SoVRMLGroup_getNumRenderCaches() -> int"""
    return _coin.SoVRMLGroup_getNumRenderCaches()

class SoVRMLCollision(SoVRMLGroup):
    """Proxy of C++ SoVRMLCollision class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCollision_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCollision self) -> SoType"""
        return _coin.SoVRMLCollision_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCollision_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLCollision self) -> SoVRMLCollision
        __init__(SoVRMLCollision self, int numchildren) -> SoVRMLCollision
        """
        this = _coin.new_SoVRMLCollision(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    collide = _swig_property(_coin.SoVRMLCollision_collide_get, _coin.SoVRMLCollision_collide_set)
    proxy = _swig_property(_coin.SoVRMLCollision_proxy_get, _coin.SoVRMLCollision_proxy_set)
    collideTime = _swig_property(_coin.SoVRMLCollision_collideTime_get, _coin.SoVRMLCollision_collideTime_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLCollision self, SoGLRenderAction action)"""
        return _coin.SoVRMLCollision_GLRender(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLCollision self, SoNotList list)"""
        return _coin.SoVRMLCollision_notify(self, list)

SoVRMLCollision_swigregister = _coin.SoVRMLCollision_swigregister
SoVRMLCollision_swigregister(SoVRMLCollision)

def SoVRMLCollision_getClassTypeId() -> "SoType":
    """SoVRMLCollision_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCollision_getClassTypeId()

def SoVRMLCollision_initClass() -> "void":
    """SoVRMLCollision_initClass()"""
    return _coin.SoVRMLCollision_initClass()

class SoVRMLColor(SoNode):
    """Proxy of C++ SoVRMLColor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLColor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLColor self) -> SoType"""
        return _coin.SoVRMLColor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLColor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLColor self) -> SoVRMLColor"""
        this = _coin.new_SoVRMLColor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    color = _swig_property(_coin.SoVRMLColor_color_get, _coin.SoVRMLColor_color_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLColor self, SoAction action)"""
        return _coin.SoVRMLColor_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLColor self, SoGLRenderAction action)"""
        return _coin.SoVRMLColor_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLColor self, SoCallbackAction action)"""
        return _coin.SoVRMLColor_callback(self, action)

SoVRMLColor_swigregister = _coin.SoVRMLColor_swigregister
SoVRMLColor_swigregister(SoVRMLColor)

def SoVRMLColor_getClassTypeId() -> "SoType":
    """SoVRMLColor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLColor_getClassTypeId()

def SoVRMLColor_initClass() -> "void":
    """SoVRMLColor_initClass()"""
    return _coin.SoVRMLColor_initClass()

class SoVRMLInterpolator(SoNodeEngine):
    """Proxy of C++ SoVRMLInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLInterpolator self) -> SoType"""
        return _coin.SoVRMLInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLInterpolator_getOutputData(self)

    key = _swig_property(_coin.SoVRMLInterpolator_key_get, _coin.SoVRMLInterpolator_key_set)
    set_fraction = _swig_property(_coin.SoVRMLInterpolator_set_fraction_get, _coin.SoVRMLInterpolator_set_fraction_set)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLInterpolator_initClass()

    initClass = staticmethod(initClass)
SoVRMLInterpolator_swigregister = _coin.SoVRMLInterpolator_swigregister
SoVRMLInterpolator_swigregister(SoVRMLInterpolator)

def SoVRMLInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLInterpolator_getClassTypeId()

def SoVRMLInterpolator_initClass() -> "void":
    """SoVRMLInterpolator_initClass()"""
    return _coin.SoVRMLInterpolator_initClass()

class SoVRMLColorInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLColorInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLColorInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLColorInterpolator self) -> SoType"""
        return _coin.SoVRMLColorInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLColorInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLColorInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLColorInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLColorInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLColorInterpolator self) -> SoVRMLColorInterpolator"""
        this = _coin.new_SoVRMLColorInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLColorInterpolator_keyValue_get, _coin.SoVRMLColorInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLColorInterpolator_value_changed_get, _coin.SoVRMLColorInterpolator_value_changed_set)
SoVRMLColorInterpolator_swigregister = _coin.SoVRMLColorInterpolator_swigregister
SoVRMLColorInterpolator_swigregister(SoVRMLColorInterpolator)

def SoVRMLColorInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLColorInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLColorInterpolator_getClassTypeId()

def SoVRMLColorInterpolator_createInstance() -> "void *":
    """SoVRMLColorInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLColorInterpolator_createInstance()

def SoVRMLColorInterpolator_initClass() -> "void":
    """SoVRMLColorInterpolator_initClass()"""
    return _coin.SoVRMLColorInterpolator_initClass()

class SoVRMLCone(SoVRMLGeometry):
    """Proxy of C++ SoVRMLCone class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCone_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCone self) -> SoType"""
        return _coin.SoVRMLCone_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCone_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLCone self) -> SoVRMLCone"""
        this = _coin.new_SoVRMLCone()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    bottomRadius = _swig_property(_coin.SoVRMLCone_bottomRadius_get, _coin.SoVRMLCone_bottomRadius_set)
    height = _swig_property(_coin.SoVRMLCone_height_get, _coin.SoVRMLCone_height_set)
    side = _swig_property(_coin.SoVRMLCone_side_get, _coin.SoVRMLCone_side_set)
    bottom = _swig_property(_coin.SoVRMLCone_bottom_get, _coin.SoVRMLCone_bottom_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLCone self, SoGLRenderAction action)"""
        return _coin.SoVRMLCone_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLCone self, SoRayPickAction action)"""
        return _coin.SoVRMLCone_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLCone self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLCone_getPrimitiveCount(self, action)

SoVRMLCone_swigregister = _coin.SoVRMLCone_swigregister
SoVRMLCone_swigregister(SoVRMLCone)

def SoVRMLCone_getClassTypeId() -> "SoType":
    """SoVRMLCone_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCone_getClassTypeId()

def SoVRMLCone_initClass() -> "void":
    """SoVRMLCone_initClass()"""
    return _coin.SoVRMLCone_initClass()

class SoVRMLCoordinate(SoNode):
    """Proxy of C++ SoVRMLCoordinate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCoordinate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCoordinate self) -> SoType"""
        return _coin.SoVRMLCoordinate_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCoordinate_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLCoordinate self) -> SoVRMLCoordinate"""
        this = _coin.new_SoVRMLCoordinate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoVRMLCoordinate_point_get, _coin.SoVRMLCoordinate_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLCoordinate self, SoAction action)"""
        return _coin.SoVRMLCoordinate_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLCoordinate self, SoGLRenderAction action)"""
        return _coin.SoVRMLCoordinate_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLCoordinate self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLCoordinate_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLCoordinate self, SoCallbackAction action)"""
        return _coin.SoVRMLCoordinate_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLCoordinate self, SoPickAction action)"""
        return _coin.SoVRMLCoordinate_pick(self, action)

SoVRMLCoordinate_swigregister = _coin.SoVRMLCoordinate_swigregister
SoVRMLCoordinate_swigregister(SoVRMLCoordinate)

def SoVRMLCoordinate_getClassTypeId() -> "SoType":
    """SoVRMLCoordinate_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCoordinate_getClassTypeId()

def SoVRMLCoordinate_initClass() -> "void":
    """SoVRMLCoordinate_initClass()"""
    return _coin.SoVRMLCoordinate_initClass()

class SoVRMLCoordinateInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLCoordinateInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCoordinateInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCoordinateInterpolator self) -> SoType"""
        return _coin.SoVRMLCoordinateInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLCoordinateInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLCoordinateInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLCoordinateInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCoordinateInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLCoordinateInterpolator self) -> SoVRMLCoordinateInterpolator"""
        this = _coin.new_SoVRMLCoordinateInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLCoordinateInterpolator_keyValue_get, _coin.SoVRMLCoordinateInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLCoordinateInterpolator_value_changed_get, _coin.SoVRMLCoordinateInterpolator_value_changed_set)
SoVRMLCoordinateInterpolator_swigregister = _coin.SoVRMLCoordinateInterpolator_swigregister
SoVRMLCoordinateInterpolator_swigregister(SoVRMLCoordinateInterpolator)

def SoVRMLCoordinateInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLCoordinateInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCoordinateInterpolator_getClassTypeId()

def SoVRMLCoordinateInterpolator_createInstance() -> "void *":
    """SoVRMLCoordinateInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLCoordinateInterpolator_createInstance()

def SoVRMLCoordinateInterpolator_initClass() -> "void":
    """SoVRMLCoordinateInterpolator_initClass()"""
    return _coin.SoVRMLCoordinateInterpolator_initClass()

class SoVRMLCylinder(SoVRMLGeometry):
    """Proxy of C++ SoVRMLCylinder class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCylinder_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCylinder self) -> SoType"""
        return _coin.SoVRMLCylinder_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCylinder_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLCylinder self) -> SoVRMLCylinder"""
        this = _coin.new_SoVRMLCylinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    radius = _swig_property(_coin.SoVRMLCylinder_radius_get, _coin.SoVRMLCylinder_radius_set)
    height = _swig_property(_coin.SoVRMLCylinder_height_get, _coin.SoVRMLCylinder_height_set)
    side = _swig_property(_coin.SoVRMLCylinder_side_get, _coin.SoVRMLCylinder_side_set)
    top = _swig_property(_coin.SoVRMLCylinder_top_get, _coin.SoVRMLCylinder_top_set)
    bottom = _swig_property(_coin.SoVRMLCylinder_bottom_get, _coin.SoVRMLCylinder_bottom_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLCylinder self, SoGLRenderAction action)"""
        return _coin.SoVRMLCylinder_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLCylinder self, SoRayPickAction action)"""
        return _coin.SoVRMLCylinder_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLCylinder self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLCylinder_getPrimitiveCount(self, action)

SoVRMLCylinder_swigregister = _coin.SoVRMLCylinder_swigregister
SoVRMLCylinder_swigregister(SoVRMLCylinder)

def SoVRMLCylinder_getClassTypeId() -> "SoType":
    """SoVRMLCylinder_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCylinder_getClassTypeId()

def SoVRMLCylinder_initClass() -> "void":
    """SoVRMLCylinder_initClass()"""
    return _coin.SoVRMLCylinder_initClass()

class SoVRMLSensor(SoNode):
    """Proxy of C++ SoVRMLSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSensor self) -> SoType"""
        return _coin.SoVRMLSensor_getTypeId(self)

    isActive = _swig_property(_coin.SoVRMLSensor_isActive_get, _coin.SoVRMLSensor_isActive_set)
    enabled = _swig_property(_coin.SoVRMLSensor_enabled_get, _coin.SoVRMLSensor_enabled_set)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSensor_initClass()

    initClass = staticmethod(initClass)
SoVRMLSensor_swigregister = _coin.SoVRMLSensor_swigregister
SoVRMLSensor_swigregister(SoVRMLSensor)

def SoVRMLSensor_getClassTypeId() -> "SoType":
    """SoVRMLSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSensor_getClassTypeId()

def SoVRMLSensor_initClass() -> "void":
    """SoVRMLSensor_initClass()"""
    return _coin.SoVRMLSensor_initClass()

class SoVRMLDragSensor(SoVRMLSensor):
    """Proxy of C++ SoVRMLDragSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLDragSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLDragSensor self) -> SoType"""
        return _coin.SoVRMLDragSensor_getTypeId(self)

    trackPoint_changed = _swig_property(_coin.SoVRMLDragSensor_trackPoint_changed_get, _coin.SoVRMLDragSensor_trackPoint_changed_set)
    autoOffset = _swig_property(_coin.SoVRMLDragSensor_autoOffset_get, _coin.SoVRMLDragSensor_autoOffset_set)

    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLDragSensor self, SoHandleEventAction action)"""
        return _coin.SoVRMLDragSensor_handleEvent(self, action)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLDragSensor_initClass()

    initClass = staticmethod(initClass)
SoVRMLDragSensor_swigregister = _coin.SoVRMLDragSensor_swigregister
SoVRMLDragSensor_swigregister(SoVRMLDragSensor)

def SoVRMLDragSensor_getClassTypeId() -> "SoType":
    """SoVRMLDragSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLDragSensor_getClassTypeId()

def SoVRMLDragSensor_initClass() -> "void":
    """SoVRMLDragSensor_initClass()"""
    return _coin.SoVRMLDragSensor_initClass()

class SoVRMLCylinderSensor(SoVRMLDragSensor):
    """Proxy of C++ SoVRMLCylinderSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLCylinderSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLCylinderSensor self) -> SoType"""
        return _coin.SoVRMLCylinderSensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLCylinderSensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLCylinderSensor self) -> SoVRMLCylinderSensor"""
        this = _coin.new_SoVRMLCylinderSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    diskAngle = _swig_property(_coin.SoVRMLCylinderSensor_diskAngle_get, _coin.SoVRMLCylinderSensor_diskAngle_set)
    maxAngle = _swig_property(_coin.SoVRMLCylinderSensor_maxAngle_get, _coin.SoVRMLCylinderSensor_maxAngle_set)
    minAngle = _swig_property(_coin.SoVRMLCylinderSensor_minAngle_get, _coin.SoVRMLCylinderSensor_minAngle_set)
    offset = _swig_property(_coin.SoVRMLCylinderSensor_offset_get, _coin.SoVRMLCylinderSensor_offset_set)
    rotation_changed = _swig_property(_coin.SoVRMLCylinderSensor_rotation_changed_get, _coin.SoVRMLCylinderSensor_rotation_changed_set)
SoVRMLCylinderSensor_swigregister = _coin.SoVRMLCylinderSensor_swigregister
SoVRMLCylinderSensor_swigregister(SoVRMLCylinderSensor)

def SoVRMLCylinderSensor_getClassTypeId() -> "SoType":
    """SoVRMLCylinderSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLCylinderSensor_getClassTypeId()

def SoVRMLCylinderSensor_initClass() -> "void":
    """SoVRMLCylinderSensor_initClass()"""
    return _coin.SoVRMLCylinderSensor_initClass()

class SoVRMLLight(SoNode):
    """Proxy of C++ SoVRMLLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLLight self) -> SoType"""
        return _coin.SoVRMLLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLLight_initClass()

    initClass = staticmethod(initClass)
    on = _swig_property(_coin.SoVRMLLight_on_get, _coin.SoVRMLLight_on_set)
    intensity = _swig_property(_coin.SoVRMLLight_intensity_get, _coin.SoVRMLLight_intensity_set)
    color = _swig_property(_coin.SoVRMLLight_color_get, _coin.SoVRMLLight_color_set)
    ambientIntensity = _swig_property(_coin.SoVRMLLight_ambientIntensity_get, _coin.SoVRMLLight_ambientIntensity_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLLight self, SoGLRenderAction action)"""
        return _coin.SoVRMLLight_GLRender(self, action)

SoVRMLLight_swigregister = _coin.SoVRMLLight_swigregister
SoVRMLLight_swigregister(SoVRMLLight)

def SoVRMLLight_getClassTypeId() -> "SoType":
    """SoVRMLLight_getClassTypeId() -> SoType"""
    return _coin.SoVRMLLight_getClassTypeId()

def SoVRMLLight_initClass() -> "void":
    """SoVRMLLight_initClass()"""
    return _coin.SoVRMLLight_initClass()

class SoVRMLDirectionalLight(SoVRMLLight):
    """Proxy of C++ SoVRMLDirectionalLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLDirectionalLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLDirectionalLight self) -> SoType"""
        return _coin.SoVRMLDirectionalLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLDirectionalLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLDirectionalLight self) -> SoVRMLDirectionalLight"""
        this = _coin.new_SoVRMLDirectionalLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    direction = _swig_property(_coin.SoVRMLDirectionalLight_direction_get, _coin.SoVRMLDirectionalLight_direction_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLDirectionalLight self, SoGLRenderAction action)"""
        return _coin.SoVRMLDirectionalLight_GLRender(self, action)

SoVRMLDirectionalLight_swigregister = _coin.SoVRMLDirectionalLight_swigregister
SoVRMLDirectionalLight_swigregister(SoVRMLDirectionalLight)

def SoVRMLDirectionalLight_getClassTypeId() -> "SoType":
    """SoVRMLDirectionalLight_getClassTypeId() -> SoType"""
    return _coin.SoVRMLDirectionalLight_getClassTypeId()

def SoVRMLDirectionalLight_initClass() -> "void":
    """SoVRMLDirectionalLight_initClass()"""
    return _coin.SoVRMLDirectionalLight_initClass()

class SoVRMLElevationGrid(SoVRMLGeometry):
    """Proxy of C++ SoVRMLElevationGrid class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLElevationGrid_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLElevationGrid self) -> SoType"""
        return _coin.SoVRMLElevationGrid_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLElevationGrid_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLElevationGrid self) -> SoVRMLElevationGrid"""
        this = _coin.new_SoVRMLElevationGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    ccw = _swig_property(_coin.SoVRMLElevationGrid_ccw_get, _coin.SoVRMLElevationGrid_ccw_set)
    solid = _swig_property(_coin.SoVRMLElevationGrid_solid_get, _coin.SoVRMLElevationGrid_solid_set)
    creaseAngle = _swig_property(_coin.SoVRMLElevationGrid_creaseAngle_get, _coin.SoVRMLElevationGrid_creaseAngle_set)
    zDimension = _swig_property(_coin.SoVRMLElevationGrid_zDimension_get, _coin.SoVRMLElevationGrid_zDimension_set)
    xDimension = _swig_property(_coin.SoVRMLElevationGrid_xDimension_get, _coin.SoVRMLElevationGrid_xDimension_set)
    zSpacing = _swig_property(_coin.SoVRMLElevationGrid_zSpacing_get, _coin.SoVRMLElevationGrid_zSpacing_set)
    xSpacing = _swig_property(_coin.SoVRMLElevationGrid_xSpacing_get, _coin.SoVRMLElevationGrid_xSpacing_set)
    height = _swig_property(_coin.SoVRMLElevationGrid_height_get, _coin.SoVRMLElevationGrid_height_set)
    texCoord = _swig_property(_coin.SoVRMLElevationGrid_texCoord_get, _coin.SoVRMLElevationGrid_texCoord_set)
    normal = _swig_property(_coin.SoVRMLElevationGrid_normal_get, _coin.SoVRMLElevationGrid_normal_set)
    color = _swig_property(_coin.SoVRMLElevationGrid_color_get, _coin.SoVRMLElevationGrid_color_set)
    colorPerVertex = _swig_property(_coin.SoVRMLElevationGrid_colorPerVertex_get, _coin.SoVRMLElevationGrid_colorPerVertex_set)
    normalPerVertex = _swig_property(_coin.SoVRMLElevationGrid_normalPerVertex_get, _coin.SoVRMLElevationGrid_normalPerVertex_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLElevationGrid self, SoGLRenderAction action)"""
        return _coin.SoVRMLElevationGrid_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLElevationGrid self, SoRayPickAction action)"""
        return _coin.SoVRMLElevationGrid_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLElevationGrid self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLElevationGrid_getPrimitiveCount(self, action)

SoVRMLElevationGrid_swigregister = _coin.SoVRMLElevationGrid_swigregister
SoVRMLElevationGrid_swigregister(SoVRMLElevationGrid)

def SoVRMLElevationGrid_getClassTypeId() -> "SoType":
    """SoVRMLElevationGrid_getClassTypeId() -> SoType"""
    return _coin.SoVRMLElevationGrid_getClassTypeId()

def SoVRMLElevationGrid_initClass() -> "void":
    """SoVRMLElevationGrid_initClass()"""
    return _coin.SoVRMLElevationGrid_initClass()

class SoVRMLExtrusion(SoVRMLGeometry):
    """Proxy of C++ SoVRMLExtrusion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLExtrusion_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLExtrusion self) -> SoType"""
        return _coin.SoVRMLExtrusion_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLExtrusion_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLExtrusion self) -> SoVRMLExtrusion"""
        this = _coin.new_SoVRMLExtrusion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    beginCap = _swig_property(_coin.SoVRMLExtrusion_beginCap_get, _coin.SoVRMLExtrusion_beginCap_set)
    ccw = _swig_property(_coin.SoVRMLExtrusion_ccw_get, _coin.SoVRMLExtrusion_ccw_set)
    convex = _swig_property(_coin.SoVRMLExtrusion_convex_get, _coin.SoVRMLExtrusion_convex_set)
    creaseAngle = _swig_property(_coin.SoVRMLExtrusion_creaseAngle_get, _coin.SoVRMLExtrusion_creaseAngle_set)
    crossSection = _swig_property(_coin.SoVRMLExtrusion_crossSection_get, _coin.SoVRMLExtrusion_crossSection_set)
    endCap = _swig_property(_coin.SoVRMLExtrusion_endCap_get, _coin.SoVRMLExtrusion_endCap_set)
    orientation = _swig_property(_coin.SoVRMLExtrusion_orientation_get, _coin.SoVRMLExtrusion_orientation_set)
    scale = _swig_property(_coin.SoVRMLExtrusion_scale_get, _coin.SoVRMLExtrusion_scale_set)
    solid = _swig_property(_coin.SoVRMLExtrusion_solid_get, _coin.SoVRMLExtrusion_solid_set)
    spine = _swig_property(_coin.SoVRMLExtrusion_spine_get, _coin.SoVRMLExtrusion_spine_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLExtrusion self, SoGLRenderAction action)"""
        return _coin.SoVRMLExtrusion_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLExtrusion self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLExtrusion_getPrimitiveCount(self, action)


    def computeBBox(self, action: 'SoAction', bbox: 'SbBox3f', center: 'SbVec3f') -> "void":
        """computeBBox(SoVRMLExtrusion self, SoAction action, SbBox3f bbox, SbVec3f center)"""
        return _coin.SoVRMLExtrusion_computeBBox(self, action, bbox, center)

SoVRMLExtrusion_swigregister = _coin.SoVRMLExtrusion_swigregister
SoVRMLExtrusion_swigregister(SoVRMLExtrusion)

def SoVRMLExtrusion_getClassTypeId() -> "SoType":
    """SoVRMLExtrusion_getClassTypeId() -> SoType"""
    return _coin.SoVRMLExtrusion_getClassTypeId()

def SoVRMLExtrusion_initClass() -> "void":
    """SoVRMLExtrusion_initClass()"""
    return _coin.SoVRMLExtrusion_initClass()

class SoVRMLFog(SoNode):
    """Proxy of C++ SoVRMLFog class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLFog_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLFog self) -> SoType"""
        return _coin.SoVRMLFog_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLFog_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLFog self) -> SoVRMLFog"""
        this = _coin.new_SoVRMLFog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fogType = _swig_property(_coin.SoVRMLFog_fogType_get, _coin.SoVRMLFog_fogType_set)
    visibilityRange = _swig_property(_coin.SoVRMLFog_visibilityRange_get, _coin.SoVRMLFog_visibilityRange_set)
    color = _swig_property(_coin.SoVRMLFog_color_get, _coin.SoVRMLFog_color_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLFog self, SoGLRenderAction action)"""
        return _coin.SoVRMLFog_GLRender(self, action)

SoVRMLFog_swigregister = _coin.SoVRMLFog_swigregister
SoVRMLFog_swigregister(SoVRMLFog)

def SoVRMLFog_getClassTypeId() -> "SoType":
    """SoVRMLFog_getClassTypeId() -> SoType"""
    return _coin.SoVRMLFog_getClassTypeId()

def SoVRMLFog_initClass() -> "void":
    """SoVRMLFog_initClass()"""
    return _coin.SoVRMLFog_initClass()

class SoVRMLFontStyle(SoNode):
    """Proxy of C++ SoVRMLFontStyle class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLFontStyle_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLFontStyle self) -> SoType"""
        return _coin.SoVRMLFontStyle_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLFontStyle_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLFontStyle self) -> SoVRMLFontStyle"""
        this = _coin.new_SoVRMLFontStyle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SERIF = _coin.SoVRMLFontStyle_SERIF
    SANS = _coin.SoVRMLFontStyle_SANS
    TYPEWRITER = _coin.SoVRMLFontStyle_TYPEWRITER
    PLAIN = _coin.SoVRMLFontStyle_PLAIN
    BOLD = _coin.SoVRMLFontStyle_BOLD
    ITALIC = _coin.SoVRMLFontStyle_ITALIC
    BOLDITALIC = _coin.SoVRMLFontStyle_BOLDITALIC
    size = _swig_property(_coin.SoVRMLFontStyle_size_get, _coin.SoVRMLFontStyle_size_set)
    family = _swig_property(_coin.SoVRMLFontStyle_family_get, _coin.SoVRMLFontStyle_family_set)
    style = _swig_property(_coin.SoVRMLFontStyle_style_get, _coin.SoVRMLFontStyle_style_set)
    horizontal = _swig_property(_coin.SoVRMLFontStyle_horizontal_get, _coin.SoVRMLFontStyle_horizontal_set)
    leftToRight = _swig_property(_coin.SoVRMLFontStyle_leftToRight_get, _coin.SoVRMLFontStyle_leftToRight_set)
    topToBottom = _swig_property(_coin.SoVRMLFontStyle_topToBottom_get, _coin.SoVRMLFontStyle_topToBottom_set)
    language = _swig_property(_coin.SoVRMLFontStyle_language_get, _coin.SoVRMLFontStyle_language_set)
    justify = _swig_property(_coin.SoVRMLFontStyle_justify_get, _coin.SoVRMLFontStyle_justify_set)
    spacing = _swig_property(_coin.SoVRMLFontStyle_spacing_get, _coin.SoVRMLFontStyle_spacing_set)

    def getFontName(self) -> "SbString":
        """getFontName(SoVRMLFontStyle self) -> SbString"""
        return _coin.SoVRMLFontStyle_getFontName(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLFontStyle self, SoAction action)"""
        return _coin.SoVRMLFontStyle_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLFontStyle self, SoCallbackAction action)"""
        return _coin.SoVRMLFontStyle_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLFontStyle self, SoGLRenderAction action)"""
        return _coin.SoVRMLFontStyle_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLFontStyle self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLFontStyle_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLFontStyle self, SoPickAction action)"""
        return _coin.SoVRMLFontStyle_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLFontStyle self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLFontStyle_getPrimitiveCount(self, action)

SoVRMLFontStyle_swigregister = _coin.SoVRMLFontStyle_swigregister
SoVRMLFontStyle_swigregister(SoVRMLFontStyle)

def SoVRMLFontStyle_getClassTypeId() -> "SoType":
    """SoVRMLFontStyle_getClassTypeId() -> SoType"""
    return _coin.SoVRMLFontStyle_getClassTypeId()

def SoVRMLFontStyle_initClass() -> "void":
    """SoVRMLFontStyle_initClass()"""
    return _coin.SoVRMLFontStyle_initClass()


def so_vrml_init() -> "void":
    """so_vrml_init()"""
    return _coin.so_vrml_init()
class SoVRMLTexture(SoNode):
    """Proxy of C++ SoVRMLTexture class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTexture_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTexture self) -> SoType"""
        return _coin.SoVRMLTexture_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTexture_initClass()

    initClass = staticmethod(initClass)
    repeatS = _swig_property(_coin.SoVRMLTexture_repeatS_get, _coin.SoVRMLTexture_repeatS_set)
    repeatT = _swig_property(_coin.SoVRMLTexture_repeatT_get, _coin.SoVRMLTexture_repeatT_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLTexture self, SoGLRenderAction action)"""
        return _coin.SoVRMLTexture_GLRender(self, action)

SoVRMLTexture_swigregister = _coin.SoVRMLTexture_swigregister
SoVRMLTexture_swigregister(SoVRMLTexture)

def SoVRMLTexture_getClassTypeId() -> "SoType":
    """SoVRMLTexture_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTexture_getClassTypeId()

def SoVRMLTexture_initClass() -> "void":
    """SoVRMLTexture_initClass()"""
    return _coin.SoVRMLTexture_initClass()

class SoVRMLImageTexture(SoVRMLTexture):
    """Proxy of C++ SoVRMLImageTexture class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLImageTexture_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLImageTexture self) -> SoType"""
        return _coin.SoVRMLImageTexture_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLImageTexture_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLImageTexture self) -> SoVRMLImageTexture"""
        this = _coin.new_SoVRMLImageTexture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    url = _swig_property(_coin.SoVRMLImageTexture_url_get, _coin.SoVRMLImageTexture_url_set)

    def setDelayFetchURL(onoff: 'SbBool const') -> "void":
        """setDelayFetchURL(SbBool const onoff)"""
        return _coin.SoVRMLImageTexture_setDelayFetchURL(onoff)

    setDelayFetchURL = staticmethod(setDelayFetchURL)

    def setPrequalifyFileCallBack(cb: 'VRMLPrequalifyFileCallback *', closure: 'void *') -> "void":
        """setPrequalifyFileCallBack(VRMLPrequalifyFileCallback * cb, void * closure)"""
        return _coin.SoVRMLImageTexture_setPrequalifyFileCallBack(cb, closure)

    setPrequalifyFileCallBack = staticmethod(setPrequalifyFileCallBack)

    def allowPrequalifyFile(self, enable: 'SbBool') -> "void":
        """allowPrequalifyFile(SoVRMLImageTexture self, SbBool enable)"""
        return _coin.SoVRMLImageTexture_allowPrequalifyFile(self, enable)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLImageTexture self, SoAction action)"""
        return _coin.SoVRMLImageTexture_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLImageTexture self, SoGLRenderAction action)"""
        return _coin.SoVRMLImageTexture_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLImageTexture self, SoCallbackAction action)"""
        return _coin.SoVRMLImageTexture_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLImageTexture self, SoRayPickAction action)"""
        return _coin.SoVRMLImageTexture_rayPick(self, action)


    def setImage(self, image: 'SbImage') -> "void":
        """setImage(SoVRMLImageTexture self, SbImage image)"""
        return _coin.SoVRMLImageTexture_setImage(self, image)


    def getImage(self) -> "SbImage const *":
        """getImage(SoVRMLImageTexture self) -> SbImage"""
        return _coin.SoVRMLImageTexture_getImage(self)


    def setImageDataMaxAge(maxage: 'uint32_t const') -> "void":
        """setImageDataMaxAge(uint32_t const maxage)"""
        return _coin.SoVRMLImageTexture_setImageDataMaxAge(maxage)

    setImageDataMaxAge = staticmethod(setImageDataMaxAge)
SoVRMLImageTexture_swigregister = _coin.SoVRMLImageTexture_swigregister
SoVRMLImageTexture_swigregister(SoVRMLImageTexture)

def SoVRMLImageTexture_getClassTypeId() -> "SoType":
    """SoVRMLImageTexture_getClassTypeId() -> SoType"""
    return _coin.SoVRMLImageTexture_getClassTypeId()

def SoVRMLImageTexture_initClass() -> "void":
    """SoVRMLImageTexture_initClass()"""
    return _coin.SoVRMLImageTexture_initClass()

def SoVRMLImageTexture_setDelayFetchURL(onoff: 'SbBool const') -> "void":
    """SoVRMLImageTexture_setDelayFetchURL(SbBool const onoff)"""
    return _coin.SoVRMLImageTexture_setDelayFetchURL(onoff)

def SoVRMLImageTexture_setPrequalifyFileCallBack(cb: 'VRMLPrequalifyFileCallback *', closure: 'void *') -> "void":
    """SoVRMLImageTexture_setPrequalifyFileCallBack(VRMLPrequalifyFileCallback * cb, void * closure)"""
    return _coin.SoVRMLImageTexture_setPrequalifyFileCallBack(cb, closure)

def SoVRMLImageTexture_setImageDataMaxAge(maxage: 'uint32_t const') -> "void":
    """SoVRMLImageTexture_setImageDataMaxAge(uint32_t const maxage)"""
    return _coin.SoVRMLImageTexture_setImageDataMaxAge(maxage)

class SoVRMLVertexShape(SoVRMLGeometry):
    """Proxy of C++ SoVRMLVertexShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLVertexShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLVertexShape self) -> SoType"""
        return _coin.SoVRMLVertexShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLVertexShape_initClass()

    initClass = staticmethod(initClass)
    coord = _swig_property(_coin.SoVRMLVertexShape_coord_get, _coin.SoVRMLVertexShape_coord_set)
    texCoord = _swig_property(_coin.SoVRMLVertexShape_texCoord_get, _coin.SoVRMLVertexShape_texCoord_set)
    normal = _swig_property(_coin.SoVRMLVertexShape_normal_get, _coin.SoVRMLVertexShape_normal_set)
    color = _swig_property(_coin.SoVRMLVertexShape_color_get, _coin.SoVRMLVertexShape_color_set)
    colorPerVertex = _swig_property(_coin.SoVRMLVertexShape_colorPerVertex_get, _coin.SoVRMLVertexShape_colorPerVertex_set)
    normalPerVertex = _swig_property(_coin.SoVRMLVertexShape_normalPerVertex_get, _coin.SoVRMLVertexShape_normalPerVertex_set)
    OVERALL = _coin.SoVRMLVertexShape_OVERALL
    PER_PART = _coin.SoVRMLVertexShape_PER_PART
    PER_PART_INDEXED = _coin.SoVRMLVertexShape_PER_PART_INDEXED
    PER_FACE = _coin.SoVRMLVertexShape_PER_FACE
    PER_FACE_INDEXED = _coin.SoVRMLVertexShape_PER_FACE_INDEXED
    PER_VERTEX = _coin.SoVRMLVertexShape_PER_VERTEX
    PER_VERTEX_INDEXED = _coin.SoVRMLVertexShape_PER_VERTEX_INDEXED

    def generateDefaultNormals(self, *args) -> "SbBool":
        """
        generateDefaultNormals(SoVRMLVertexShape self, SoState s, SoNormalBundle nb) -> SbBool
        generateDefaultNormals(SoVRMLVertexShape self, SoState s, SoNormalCache nc) -> SbBool
        """
        return _coin.SoVRMLVertexShape_generateDefaultNormals(self, *args)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLVertexShape self, SoAction action)"""
        return _coin.SoVRMLVertexShape_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLVertexShape self, SoGLRenderAction action)"""
        return _coin.SoVRMLVertexShape_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLVertexShape self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLVertexShape_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLVertexShape self, SoCallbackAction action)"""
        return _coin.SoVRMLVertexShape_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLVertexShape self, SoPickAction action)"""
        return _coin.SoVRMLVertexShape_pick(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLVertexShape self, SoNotList list)"""
        return _coin.SoVRMLVertexShape_notify(self, list)

SoVRMLVertexShape_swigregister = _coin.SoVRMLVertexShape_swigregister
SoVRMLVertexShape_swigregister(SoVRMLVertexShape)

def SoVRMLVertexShape_getClassTypeId() -> "SoType":
    """SoVRMLVertexShape_getClassTypeId() -> SoType"""
    return _coin.SoVRMLVertexShape_getClassTypeId()

def SoVRMLVertexShape_initClass() -> "void":
    """SoVRMLVertexShape_initClass()"""
    return _coin.SoVRMLVertexShape_initClass()

class SoVRMLIndexedShape(SoVRMLVertexShape):
    """Proxy of C++ SoVRMLIndexedShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLIndexedShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLIndexedShape self) -> SoType"""
        return _coin.SoVRMLIndexedShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLIndexedShape_initClass()

    initClass = staticmethod(initClass)
    coordIndex = _swig_property(_coin.SoVRMLIndexedShape_coordIndex_get, _coin.SoVRMLIndexedShape_coordIndex_set)
    colorIndex = _swig_property(_coin.SoVRMLIndexedShape_colorIndex_get, _coin.SoVRMLIndexedShape_colorIndex_set)
    normalIndex = _swig_property(_coin.SoVRMLIndexedShape_normalIndex_get, _coin.SoVRMLIndexedShape_normalIndex_set)
    texCoordIndex = _swig_property(_coin.SoVRMLIndexedShape_texCoordIndex_get, _coin.SoVRMLIndexedShape_texCoordIndex_set)
SoVRMLIndexedShape_swigregister = _coin.SoVRMLIndexedShape_swigregister
SoVRMLIndexedShape_swigregister(SoVRMLIndexedShape)

def SoVRMLIndexedShape_getClassTypeId() -> "SoType":
    """SoVRMLIndexedShape_getClassTypeId() -> SoType"""
    return _coin.SoVRMLIndexedShape_getClassTypeId()

def SoVRMLIndexedShape_initClass() -> "void":
    """SoVRMLIndexedShape_initClass()"""
    return _coin.SoVRMLIndexedShape_initClass()

class SoVRMLIndexedFaceSet(SoVRMLIndexedShape):
    """Proxy of C++ SoVRMLIndexedFaceSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLIndexedFaceSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLIndexedFaceSet self) -> SoType"""
        return _coin.SoVRMLIndexedFaceSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLIndexedFaceSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLIndexedFaceSet self) -> SoVRMLIndexedFaceSet"""
        this = _coin.new_SoVRMLIndexedFaceSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    ccw = _swig_property(_coin.SoVRMLIndexedFaceSet_ccw_get, _coin.SoVRMLIndexedFaceSet_ccw_set)
    solid = _swig_property(_coin.SoVRMLIndexedFaceSet_solid_get, _coin.SoVRMLIndexedFaceSet_solid_set)
    convex = _swig_property(_coin.SoVRMLIndexedFaceSet_convex_get, _coin.SoVRMLIndexedFaceSet_convex_set)
    creaseAngle = _swig_property(_coin.SoVRMLIndexedFaceSet_creaseAngle_get, _coin.SoVRMLIndexedFaceSet_creaseAngle_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLIndexedFaceSet self, SoGLRenderAction action)"""
        return _coin.SoVRMLIndexedFaceSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLIndexedFaceSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLIndexedFaceSet_getPrimitiveCount(self, action)


    def generateDefaultNormals(self, *args) -> "SbBool":
        """
        generateDefaultNormals(SoVRMLIndexedFaceSet self, SoState s, SoNormalBundle nb) -> SbBool
        generateDefaultNormals(SoVRMLIndexedFaceSet self, SoState state, SoNormalCache nc) -> SbBool
        """
        return _coin.SoVRMLIndexedFaceSet_generateDefaultNormals(self, *args)

SoVRMLIndexedFaceSet_swigregister = _coin.SoVRMLIndexedFaceSet_swigregister
SoVRMLIndexedFaceSet_swigregister(SoVRMLIndexedFaceSet)

def SoVRMLIndexedFaceSet_getClassTypeId() -> "SoType":
    """SoVRMLIndexedFaceSet_getClassTypeId() -> SoType"""
    return _coin.SoVRMLIndexedFaceSet_getClassTypeId()

def SoVRMLIndexedFaceSet_initClass() -> "void":
    """SoVRMLIndexedFaceSet_initClass()"""
    return _coin.SoVRMLIndexedFaceSet_initClass()

class SoVRMLVertexLine(SoVRMLGeometry):
    """Proxy of C++ SoVRMLVertexLine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLVertexLine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLVertexLine self) -> SoType"""
        return _coin.SoVRMLVertexLine_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLVertexLine_initClass()

    initClass = staticmethod(initClass)
    coord = _swig_property(_coin.SoVRMLVertexLine_coord_get, _coin.SoVRMLVertexLine_coord_set)
    color = _swig_property(_coin.SoVRMLVertexLine_color_get, _coin.SoVRMLVertexLine_color_set)
    colorPerVertex = _swig_property(_coin.SoVRMLVertexLine_colorPerVertex_get, _coin.SoVRMLVertexLine_colorPerVertex_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLVertexLine self, SoAction action)"""
        return _coin.SoVRMLVertexLine_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLVertexLine self, SoGLRenderAction action)"""
        return _coin.SoVRMLVertexLine_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLVertexLine self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLVertexLine_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLVertexLine self, SoCallbackAction action)"""
        return _coin.SoVRMLVertexLine_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLVertexLine self, SoPickAction action)"""
        return _coin.SoVRMLVertexLine_pick(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLVertexLine self, SoNotList list)"""
        return _coin.SoVRMLVertexLine_notify(self, list)

SoVRMLVertexLine_swigregister = _coin.SoVRMLVertexLine_swigregister
SoVRMLVertexLine_swigregister(SoVRMLVertexLine)

def SoVRMLVertexLine_getClassTypeId() -> "SoType":
    """SoVRMLVertexLine_getClassTypeId() -> SoType"""
    return _coin.SoVRMLVertexLine_getClassTypeId()

def SoVRMLVertexLine_initClass() -> "void":
    """SoVRMLVertexLine_initClass()"""
    return _coin.SoVRMLVertexLine_initClass()

class SoVRMLIndexedLine(SoVRMLVertexLine):
    """Proxy of C++ SoVRMLIndexedLine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLIndexedLine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLIndexedLine self) -> SoType"""
        return _coin.SoVRMLIndexedLine_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLIndexedLine_initClass()

    initClass = staticmethod(initClass)
    coordIndex = _swig_property(_coin.SoVRMLIndexedLine_coordIndex_get, _coin.SoVRMLIndexedLine_coordIndex_set)
    colorIndex = _swig_property(_coin.SoVRMLIndexedLine_colorIndex_get, _coin.SoVRMLIndexedLine_colorIndex_set)
SoVRMLIndexedLine_swigregister = _coin.SoVRMLIndexedLine_swigregister
SoVRMLIndexedLine_swigregister(SoVRMLIndexedLine)

def SoVRMLIndexedLine_getClassTypeId() -> "SoType":
    """SoVRMLIndexedLine_getClassTypeId() -> SoType"""
    return _coin.SoVRMLIndexedLine_getClassTypeId()

def SoVRMLIndexedLine_initClass() -> "void":
    """SoVRMLIndexedLine_initClass()"""
    return _coin.SoVRMLIndexedLine_initClass()

class SoVRMLIndexedLineSet(SoVRMLIndexedLine):
    """Proxy of C++ SoVRMLIndexedLineSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLIndexedLineSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLIndexedLineSet self) -> SoType"""
        return _coin.SoVRMLIndexedLineSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLIndexedLineSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLIndexedLineSet self) -> SoVRMLIndexedLineSet"""
        this = _coin.new_SoVRMLIndexedLineSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLIndexedLineSet self, SoGLRenderAction action)"""
        return _coin.SoVRMLIndexedLineSet_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLIndexedLineSet self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLIndexedLineSet_getPrimitiveCount(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLIndexedLineSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLIndexedLineSet_getBoundingBox(self, action)

SoVRMLIndexedLineSet_swigregister = _coin.SoVRMLIndexedLineSet_swigregister
SoVRMLIndexedLineSet_swigregister(SoVRMLIndexedLineSet)

def SoVRMLIndexedLineSet_getClassTypeId() -> "SoType":
    """SoVRMLIndexedLineSet_getClassTypeId() -> SoType"""
    return _coin.SoVRMLIndexedLineSet_getClassTypeId()

def SoVRMLIndexedLineSet_initClass() -> "void":
    """SoVRMLIndexedLineSet_initClass()"""
    return _coin.SoVRMLIndexedLineSet_initClass()

class SoVRMLInline(SoNode):
    """Proxy of C++ SoVRMLInline class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLInline_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLInline self) -> SoType"""
        return _coin.SoVRMLInline_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLInline_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLInline self) -> SoVRMLInline"""
        this = _coin.new_SoVRMLInline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    NEVER = _coin.SoVRMLInline_NEVER
    UNTIL_LOADED = _coin.SoVRMLInline_UNTIL_LOADED
    ALWAYS = _coin.SoVRMLInline_ALWAYS
    bboxCenter = _swig_property(_coin.SoVRMLInline_bboxCenter_get, _coin.SoVRMLInline_bboxCenter_set)
    bboxSize = _swig_property(_coin.SoVRMLInline_bboxSize_get, _coin.SoVRMLInline_bboxSize_set)
    url = _swig_property(_coin.SoVRMLInline_url_get, _coin.SoVRMLInline_url_set)

    def setFullURLName(self, url: 'SbString') -> "void":
        """setFullURLName(SoVRMLInline self, SbString url)"""
        return _coin.SoVRMLInline_setFullURLName(self, url)


    def getFullURLName(self) -> "SbString const &":
        """getFullURLName(SoVRMLInline self) -> SbString"""
        return _coin.SoVRMLInline_getFullURLName(self)


    def copyChildren(self) -> "SoGroup *":
        """copyChildren(SoVRMLInline self) -> SoGroup"""
        return _coin.SoVRMLInline_copyChildren(self)


    def requestURLData(self) -> "void":
        """requestURLData(SoVRMLInline self)"""
        return _coin.SoVRMLInline_requestURLData(self)


    def isURLDataRequested(self) -> "SbBool":
        """isURLDataRequested(SoVRMLInline self) -> SbBool"""
        return _coin.SoVRMLInline_isURLDataRequested(self)


    def isURLDataHere(self) -> "SbBool":
        """isURLDataHere(SoVRMLInline self) -> SbBool"""
        return _coin.SoVRMLInline_isURLDataHere(self)


    def cancelURLDataRequest(self) -> "void":
        """cancelURLDataRequest(SoVRMLInline self)"""
        return _coin.SoVRMLInline_cancelURLDataRequest(self)


    def setChildData(self, urlData: 'SoNode') -> "void":
        """setChildData(SoVRMLInline self, SoNode urlData)"""
        return _coin.SoVRMLInline_setChildData(self, urlData)


    def getChildData(self) -> "SoNode *":
        """getChildData(SoVRMLInline self) -> SoNode"""
        return _coin.SoVRMLInline_getChildData(self)


    def setFetchURLCallBack(f: 'SoVRMLInlineFetchURLCB *', closure: 'void *') -> "void":
        """setFetchURLCallBack(SoVRMLInlineFetchURLCB * f, void * closure)"""
        return _coin.SoVRMLInline_setFetchURLCallBack(f, closure)

    setFetchURLCallBack = staticmethod(setFetchURLCallBack)

    def setBoundingBoxVisibility(b: 'SoVRMLInline::BboxVisibility') -> "void":
        """setBoundingBoxVisibility(SoVRMLInline::BboxVisibility b)"""
        return _coin.SoVRMLInline_setBoundingBoxVisibility(b)

    setBoundingBoxVisibility = staticmethod(setBoundingBoxVisibility)

    def getBoundingBoxVisibility() -> "SoVRMLInline::BboxVisibility":
        """getBoundingBoxVisibility() -> SoVRMLInline::BboxVisibility"""
        return _coin.SoVRMLInline_getBoundingBoxVisibility()

    getBoundingBoxVisibility = staticmethod(getBoundingBoxVisibility)

    def setBoundingBoxColor(color: 'SbColor') -> "void":
        """setBoundingBoxColor(SbColor color)"""
        return _coin.SoVRMLInline_setBoundingBoxColor(color)

    setBoundingBoxColor = staticmethod(setBoundingBoxColor)

    def getBoundingBoxColor() -> "SbColor &":
        """getBoundingBoxColor() -> SbColor"""
        return _coin.SoVRMLInline_getBoundingBoxColor()

    getBoundingBoxColor = staticmethod(getBoundingBoxColor)

    def setReadAsSoFile(enable: 'SbBool') -> "void":
        """setReadAsSoFile(SbBool enable)"""
        return _coin.SoVRMLInline_setReadAsSoFile(enable)

    setReadAsSoFile = staticmethod(setReadAsSoFile)

    def getReadAsSoFile() -> "SbBool":
        """getReadAsSoFile() -> SbBool"""
        return _coin.SoVRMLInline_getReadAsSoFile()

    getReadAsSoFile = staticmethod(getReadAsSoFile)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLInline self, SoAction action)"""
        return _coin.SoVRMLInline_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLInline self, SoCallbackAction action)"""
        return _coin.SoVRMLInline_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLInline self, SoGLRenderAction action)"""
        return _coin.SoVRMLInline_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLInline self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLInline_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLInline self, SoGetMatrixAction action)"""
        return _coin.SoVRMLInline_getMatrix(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLInline self, SoHandleEventAction action)"""
        return _coin.SoVRMLInline_handleEvent(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLInline self, SoSearchAction action)"""
        return _coin.SoVRMLInline_search(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLInline self, SoPickAction action)"""
        return _coin.SoVRMLInline_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLInline self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLInline_getPrimitiveCount(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLInline self) -> SoChildList"""
        return _coin.SoVRMLInline_getChildren(self)

SoVRMLInline_swigregister = _coin.SoVRMLInline_swigregister
SoVRMLInline_swigregister(SoVRMLInline)

def SoVRMLInline_getClassTypeId() -> "SoType":
    """SoVRMLInline_getClassTypeId() -> SoType"""
    return _coin.SoVRMLInline_getClassTypeId()

def SoVRMLInline_initClass() -> "void":
    """SoVRMLInline_initClass()"""
    return _coin.SoVRMLInline_initClass()

def SoVRMLInline_setFetchURLCallBack(f: 'SoVRMLInlineFetchURLCB *', closure: 'void *') -> "void":
    """SoVRMLInline_setFetchURLCallBack(SoVRMLInlineFetchURLCB * f, void * closure)"""
    return _coin.SoVRMLInline_setFetchURLCallBack(f, closure)

def SoVRMLInline_setBoundingBoxVisibility(b: 'SoVRMLInline::BboxVisibility') -> "void":
    """SoVRMLInline_setBoundingBoxVisibility(SoVRMLInline::BboxVisibility b)"""
    return _coin.SoVRMLInline_setBoundingBoxVisibility(b)

def SoVRMLInline_getBoundingBoxVisibility() -> "SoVRMLInline::BboxVisibility":
    """SoVRMLInline_getBoundingBoxVisibility() -> SoVRMLInline::BboxVisibility"""
    return _coin.SoVRMLInline_getBoundingBoxVisibility()

def SoVRMLInline_setBoundingBoxColor(color: 'SbColor') -> "void":
    """SoVRMLInline_setBoundingBoxColor(SbColor color)"""
    return _coin.SoVRMLInline_setBoundingBoxColor(color)

def SoVRMLInline_getBoundingBoxColor() -> "SbColor &":
    """SoVRMLInline_getBoundingBoxColor() -> SbColor"""
    return _coin.SoVRMLInline_getBoundingBoxColor()

def SoVRMLInline_setReadAsSoFile(enable: 'SbBool') -> "void":
    """SoVRMLInline_setReadAsSoFile(SbBool enable)"""
    return _coin.SoVRMLInline_setReadAsSoFile(enable)

def SoVRMLInline_getReadAsSoFile() -> "SbBool":
    """SoVRMLInline_getReadAsSoFile() -> SbBool"""
    return _coin.SoVRMLInline_getReadAsSoFile()

class SoVRMLLOD(SoGroup):
    """Proxy of C++ SoVRMLLOD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLLOD_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLLOD self) -> SoType"""
        return _coin.SoVRMLLOD_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLLOD_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLLOD self) -> SoVRMLLOD
        __init__(SoVRMLLOD self, int levels) -> SoVRMLLOD
        """
        this = _coin.new_SoVRMLLOD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    range = _swig_property(_coin.SoVRMLLOD_range_get, _coin.SoVRMLLOD_range_set)
    center = _swig_property(_coin.SoVRMLLOD_center_get, _coin.SoVRMLLOD_center_set)
    level = _swig_property(_coin.SoVRMLLOD_level_get, _coin.SoVRMLLOD_level_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLLOD self) -> SbBool"""
        return _coin.SoVRMLLOD_affectsState(self)


    def addLevel(self, level: 'SoNode') -> "void":
        """addLevel(SoVRMLLOD self, SoNode level)"""
        return _coin.SoVRMLLOD_addLevel(self, level)


    def insertLevel(self, level: 'SoNode', idx: 'int') -> "void":
        """insertLevel(SoVRMLLOD self, SoNode level, int idx)"""
        return _coin.SoVRMLLOD_insertLevel(self, level, idx)


    def getLevel(self, idx: 'int') -> "SoNode *":
        """getLevel(SoVRMLLOD self, int idx) -> SoNode"""
        return _coin.SoVRMLLOD_getLevel(self, idx)


    def findLevel(self, level: 'SoNode') -> "int":
        """findLevel(SoVRMLLOD self, SoNode level) -> int"""
        return _coin.SoVRMLLOD_findLevel(self, level)


    def getNumLevels(self) -> "int":
        """getNumLevels(SoVRMLLOD self) -> int"""
        return _coin.SoVRMLLOD_getNumLevels(self)


    def removeLevel(self, *args) -> "void":
        """
        removeLevel(SoVRMLLOD self, int idx)
        removeLevel(SoVRMLLOD self, SoNode level)
        """
        return _coin.SoVRMLLOD_removeLevel(self, *args)


    def removeAllLevels(self) -> "void":
        """removeAllLevels(SoVRMLLOD self)"""
        return _coin.SoVRMLLOD_removeAllLevels(self)


    def replaceLevel(self, *args) -> "void":
        """
        replaceLevel(SoVRMLLOD self, int idx, SoNode level)
        replaceLevel(SoVRMLLOD self, SoNode old, SoNode level)
        """
        return _coin.SoVRMLLOD_replaceLevel(self, *args)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLLOD self, SoAction action)"""
        return _coin.SoVRMLLOD_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLLOD self, SoCallbackAction action)"""
        return _coin.SoVRMLLOD_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLLOD self, SoGLRenderAction action)"""
        return _coin.SoVRMLLOD_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLLOD self, SoRayPickAction action)"""
        return _coin.SoVRMLLOD_rayPick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLLOD self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLLOD_getBoundingBox(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLLOD self, SoSearchAction action)"""
        return _coin.SoVRMLLOD_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLLOD self, SoWriteAction action)"""
        return _coin.SoVRMLLOD_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLLOD self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLLOD_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoVRMLLOD self, SoAudioRenderAction action)"""
        return _coin.SoVRMLLOD_audioRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoVRMLLOD self, SoGLRenderAction action)"""
        return _coin.SoVRMLLOD_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoVRMLLOD self, SoGLRenderAction action)"""
        return _coin.SoVRMLLOD_GLRenderInPath(self, action)


    def GLRenderOffPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderOffPath(SoVRMLLOD self, SoGLRenderAction action)"""
        return _coin.SoVRMLLOD_GLRenderOffPath(self, action)


    def addChild(self, child: 'SoNode') -> "void":
        """addChild(SoVRMLLOD self, SoNode child)"""
        return _coin.SoVRMLLOD_addChild(self, child)


    def insertChild(self, child: 'SoNode', idx: 'int') -> "void":
        """insertChild(SoVRMLLOD self, SoNode child, int idx)"""
        return _coin.SoVRMLLOD_insertChild(self, child, idx)


    def getChild(self, idx: 'int') -> "SoNode *":
        """getChild(SoVRMLLOD self, int idx) -> SoNode"""
        return _coin.SoVRMLLOD_getChild(self, idx)


    def findChild(self, child: 'SoNode') -> "int":
        """findChild(SoVRMLLOD self, SoNode child) -> int"""
        return _coin.SoVRMLLOD_findChild(self, child)


    def getNumChildren(self) -> "int":
        """getNumChildren(SoVRMLLOD self) -> int"""
        return _coin.SoVRMLLOD_getNumChildren(self)


    def removeChild(self, *args) -> "void":
        """
        removeChild(SoVRMLLOD self, int idx)
        removeChild(SoVRMLLOD self, SoNode child)
        """
        return _coin.SoVRMLLOD_removeChild(self, *args)


    def removeAllChildren(self) -> "void":
        """removeAllChildren(SoVRMLLOD self)"""
        return _coin.SoVRMLLOD_removeAllChildren(self)


    def replaceChild(self, *args) -> "void":
        """
        replaceChild(SoVRMLLOD self, int idx, SoNode child)
        replaceChild(SoVRMLLOD self, SoNode old, SoNode child)
        """
        return _coin.SoVRMLLOD_replaceChild(self, *args)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLLOD self) -> SoChildList"""
        return _coin.SoVRMLLOD_getChildren(self)

SoVRMLLOD_swigregister = _coin.SoVRMLLOD_swigregister
SoVRMLLOD_swigregister(SoVRMLLOD)

def SoVRMLLOD_getClassTypeId() -> "SoType":
    """SoVRMLLOD_getClassTypeId() -> SoType"""
    return _coin.SoVRMLLOD_getClassTypeId()

def SoVRMLLOD_initClass() -> "void":
    """SoVRMLLOD_initClass()"""
    return _coin.SoVRMLLOD_initClass()

class SoVRMLMaterial(SoNode):
    """Proxy of C++ SoVRMLMaterial class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLMaterial_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLMaterial self) -> SoType"""
        return _coin.SoVRMLMaterial_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLMaterial_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLMaterial self) -> SoVRMLMaterial"""
        this = _coin.new_SoVRMLMaterial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    diffuseColor = _swig_property(_coin.SoVRMLMaterial_diffuseColor_get, _coin.SoVRMLMaterial_diffuseColor_set)
    ambientIntensity = _swig_property(_coin.SoVRMLMaterial_ambientIntensity_get, _coin.SoVRMLMaterial_ambientIntensity_set)
    specularColor = _swig_property(_coin.SoVRMLMaterial_specularColor_get, _coin.SoVRMLMaterial_specularColor_set)
    emissiveColor = _swig_property(_coin.SoVRMLMaterial_emissiveColor_get, _coin.SoVRMLMaterial_emissiveColor_set)
    shininess = _swig_property(_coin.SoVRMLMaterial_shininess_get, _coin.SoVRMLMaterial_shininess_set)
    transparency = _swig_property(_coin.SoVRMLMaterial_transparency_get, _coin.SoVRMLMaterial_transparency_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLMaterial self, SoAction action)"""
        return _coin.SoVRMLMaterial_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLMaterial self, SoGLRenderAction action)"""
        return _coin.SoVRMLMaterial_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLMaterial self, SoCallbackAction action)"""
        return _coin.SoVRMLMaterial_callback(self, action)

SoVRMLMaterial_swigregister = _coin.SoVRMLMaterial_swigregister
SoVRMLMaterial_swigregister(SoVRMLMaterial)

def SoVRMLMaterial_getClassTypeId() -> "SoType":
    """SoVRMLMaterial_getClassTypeId() -> SoType"""
    return _coin.SoVRMLMaterial_getClassTypeId()

def SoVRMLMaterial_initClass() -> "void":
    """SoVRMLMaterial_initClass()"""
    return _coin.SoVRMLMaterial_initClass()

class SoVRMLMovieTexture(SoVRMLTexture):
    """Proxy of C++ SoVRMLMovieTexture class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLMovieTexture_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLMovieTexture self) -> SoType"""
        return _coin.SoVRMLMovieTexture_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLMovieTexture_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLMovieTexture self) -> SoVRMLMovieTexture"""
        this = _coin.new_SoVRMLMovieTexture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    loop = _swig_property(_coin.SoVRMLMovieTexture_loop_get, _coin.SoVRMLMovieTexture_loop_set)
    speed = _swig_property(_coin.SoVRMLMovieTexture_speed_get, _coin.SoVRMLMovieTexture_speed_set)
    startTime = _swig_property(_coin.SoVRMLMovieTexture_startTime_get, _coin.SoVRMLMovieTexture_startTime_set)
    stopTime = _swig_property(_coin.SoVRMLMovieTexture_stopTime_get, _coin.SoVRMLMovieTexture_stopTime_set)
    pauseTime = _swig_property(_coin.SoVRMLMovieTexture_pauseTime_get, _coin.SoVRMLMovieTexture_pauseTime_set)
    resumeTime = _swig_property(_coin.SoVRMLMovieTexture_resumeTime_get, _coin.SoVRMLMovieTexture_resumeTime_set)
    url = _swig_property(_coin.SoVRMLMovieTexture_url_get, _coin.SoVRMLMovieTexture_url_set)
    duration_changed = _swig_property(_coin.SoVRMLMovieTexture_duration_changed_get, _coin.SoVRMLMovieTexture_duration_changed_set)
    isActive = _swig_property(_coin.SoVRMLMovieTexture_isActive_get, _coin.SoVRMLMovieTexture_isActive_set)
    alpha = _swig_property(_coin.SoVRMLMovieTexture_alpha_get, _coin.SoVRMLMovieTexture_alpha_set)
    model = _swig_property(_coin.SoVRMLMovieTexture_model_get, _coin.SoVRMLMovieTexture_model_set)
    blendColor = _swig_property(_coin.SoVRMLMovieTexture_blendColor_get, _coin.SoVRMLMovieTexture_blendColor_set)
    scaleTexCoord = _swig_property(_coin.SoVRMLMovieTexture_scaleTexCoord_get, _coin.SoVRMLMovieTexture_scaleTexCoord_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLMovieTexture self, SoGLRenderAction action)"""
        return _coin.SoVRMLMovieTexture_GLRender(self, action)

SoVRMLMovieTexture_swigregister = _coin.SoVRMLMovieTexture_swigregister
SoVRMLMovieTexture_swigregister(SoVRMLMovieTexture)

def SoVRMLMovieTexture_getClassTypeId() -> "SoType":
    """SoVRMLMovieTexture_getClassTypeId() -> SoType"""
    return _coin.SoVRMLMovieTexture_getClassTypeId()

def SoVRMLMovieTexture_initClass() -> "void":
    """SoVRMLMovieTexture_initClass()"""
    return _coin.SoVRMLMovieTexture_initClass()

class SoVRMLNavigationInfo(SoNode):
    """Proxy of C++ SoVRMLNavigationInfo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLNavigationInfo_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLNavigationInfo self) -> SoType"""
        return _coin.SoVRMLNavigationInfo_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLNavigationInfo_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLNavigationInfo self) -> SoVRMLNavigationInfo"""
        this = _coin.new_SoVRMLNavigationInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    type = _swig_property(_coin.SoVRMLNavigationInfo_type_get, _coin.SoVRMLNavigationInfo_type_set)
    speed = _swig_property(_coin.SoVRMLNavigationInfo_speed_get, _coin.SoVRMLNavigationInfo_speed_set)
    avatarSize = _swig_property(_coin.SoVRMLNavigationInfo_avatarSize_get, _coin.SoVRMLNavigationInfo_avatarSize_set)
    visibilityLimit = _swig_property(_coin.SoVRMLNavigationInfo_visibilityLimit_get, _coin.SoVRMLNavigationInfo_visibilityLimit_set)
    headlight = _swig_property(_coin.SoVRMLNavigationInfo_headlight_get, _coin.SoVRMLNavigationInfo_headlight_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLNavigationInfo self, SoGLRenderAction action)"""
        return _coin.SoVRMLNavigationInfo_GLRender(self, action)

SoVRMLNavigationInfo_swigregister = _coin.SoVRMLNavigationInfo_swigregister
SoVRMLNavigationInfo_swigregister(SoVRMLNavigationInfo)

def SoVRMLNavigationInfo_getClassTypeId() -> "SoType":
    """SoVRMLNavigationInfo_getClassTypeId() -> SoType"""
    return _coin.SoVRMLNavigationInfo_getClassTypeId()

def SoVRMLNavigationInfo_initClass() -> "void":
    """SoVRMLNavigationInfo_initClass()"""
    return _coin.SoVRMLNavigationInfo_initClass()

class SoVRMLNormal(SoNode):
    """Proxy of C++ SoVRMLNormal class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLNormal_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLNormal self) -> SoType"""
        return _coin.SoVRMLNormal_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLNormal_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLNormal self) -> SoVRMLNormal"""
        this = _coin.new_SoVRMLNormal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    vector = _swig_property(_coin.SoVRMLNormal_vector_get, _coin.SoVRMLNormal_vector_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLNormal self, SoAction action)"""
        return _coin.SoVRMLNormal_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLNormal self, SoGLRenderAction action)"""
        return _coin.SoVRMLNormal_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLNormal self, SoCallbackAction action)"""
        return _coin.SoVRMLNormal_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLNormal self, SoPickAction action)"""
        return _coin.SoVRMLNormal_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLNormal self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLNormal_getPrimitiveCount(self, action)

SoVRMLNormal_swigregister = _coin.SoVRMLNormal_swigregister
SoVRMLNormal_swigregister(SoVRMLNormal)

def SoVRMLNormal_getClassTypeId() -> "SoType":
    """SoVRMLNormal_getClassTypeId() -> SoType"""
    return _coin.SoVRMLNormal_getClassTypeId()

def SoVRMLNormal_initClass() -> "void":
    """SoVRMLNormal_initClass()"""
    return _coin.SoVRMLNormal_initClass()

class SoVRMLNormalInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLNormalInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLNormalInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLNormalInterpolator self) -> SoType"""
        return _coin.SoVRMLNormalInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLNormalInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLNormalInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLNormalInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLNormalInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLNormalInterpolator self) -> SoVRMLNormalInterpolator"""
        this = _coin.new_SoVRMLNormalInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLNormalInterpolator_keyValue_get, _coin.SoVRMLNormalInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLNormalInterpolator_value_changed_get, _coin.SoVRMLNormalInterpolator_value_changed_set)
SoVRMLNormalInterpolator_swigregister = _coin.SoVRMLNormalInterpolator_swigregister
SoVRMLNormalInterpolator_swigregister(SoVRMLNormalInterpolator)

def SoVRMLNormalInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLNormalInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLNormalInterpolator_getClassTypeId()

def SoVRMLNormalInterpolator_createInstance() -> "void *":
    """SoVRMLNormalInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLNormalInterpolator_createInstance()

def SoVRMLNormalInterpolator_initClass() -> "void":
    """SoVRMLNormalInterpolator_initClass()"""
    return _coin.SoVRMLNormalInterpolator_initClass()

class SoVRMLOrientationInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLOrientationInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLOrientationInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLOrientationInterpolator self) -> SoType"""
        return _coin.SoVRMLOrientationInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLOrientationInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLOrientationInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLOrientationInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLOrientationInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLOrientationInterpolator self) -> SoVRMLOrientationInterpolator"""
        this = _coin.new_SoVRMLOrientationInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLOrientationInterpolator_keyValue_get, _coin.SoVRMLOrientationInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLOrientationInterpolator_value_changed_get, _coin.SoVRMLOrientationInterpolator_value_changed_set)
SoVRMLOrientationInterpolator_swigregister = _coin.SoVRMLOrientationInterpolator_swigregister
SoVRMLOrientationInterpolator_swigregister(SoVRMLOrientationInterpolator)

def SoVRMLOrientationInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLOrientationInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLOrientationInterpolator_getClassTypeId()

def SoVRMLOrientationInterpolator_createInstance() -> "void *":
    """SoVRMLOrientationInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLOrientationInterpolator_createInstance()

def SoVRMLOrientationInterpolator_initClass() -> "void":
    """SoVRMLOrientationInterpolator_initClass()"""
    return _coin.SoVRMLOrientationInterpolator_initClass()

class SoVRMLPixelTexture(SoVRMLTexture):
    """Proxy of C++ SoVRMLPixelTexture class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLPixelTexture_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLPixelTexture self) -> SoType"""
        return _coin.SoVRMLPixelTexture_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLPixelTexture_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLPixelTexture self) -> SoVRMLPixelTexture"""
        this = _coin.new_SoVRMLPixelTexture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    image = _swig_property(_coin.SoVRMLPixelTexture_image_get, _coin.SoVRMLPixelTexture_image_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLPixelTexture self, SoAction action)"""
        return _coin.SoVRMLPixelTexture_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLPixelTexture self, SoGLRenderAction action)"""
        return _coin.SoVRMLPixelTexture_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLPixelTexture self, SoCallbackAction action)"""
        return _coin.SoVRMLPixelTexture_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLPixelTexture self, SoRayPickAction action)"""
        return _coin.SoVRMLPixelTexture_rayPick(self, action)

SoVRMLPixelTexture_swigregister = _coin.SoVRMLPixelTexture_swigregister
SoVRMLPixelTexture_swigregister(SoVRMLPixelTexture)

def SoVRMLPixelTexture_getClassTypeId() -> "SoType":
    """SoVRMLPixelTexture_getClassTypeId() -> SoType"""
    return _coin.SoVRMLPixelTexture_getClassTypeId()

def SoVRMLPixelTexture_initClass() -> "void":
    """SoVRMLPixelTexture_initClass()"""
    return _coin.SoVRMLPixelTexture_initClass()

class SoVRMLPlaneSensor(SoVRMLDragSensor):
    """Proxy of C++ SoVRMLPlaneSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLPlaneSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLPlaneSensor self) -> SoType"""
        return _coin.SoVRMLPlaneSensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLPlaneSensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLPlaneSensor self) -> SoVRMLPlaneSensor"""
        this = _coin.new_SoVRMLPlaneSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    minPosition = _swig_property(_coin.SoVRMLPlaneSensor_minPosition_get, _coin.SoVRMLPlaneSensor_minPosition_set)
    maxPosition = _swig_property(_coin.SoVRMLPlaneSensor_maxPosition_get, _coin.SoVRMLPlaneSensor_maxPosition_set)
    offset = _swig_property(_coin.SoVRMLPlaneSensor_offset_get, _coin.SoVRMLPlaneSensor_offset_set)
    translation_changed = _swig_property(_coin.SoVRMLPlaneSensor_translation_changed_get, _coin.SoVRMLPlaneSensor_translation_changed_set)
SoVRMLPlaneSensor_swigregister = _coin.SoVRMLPlaneSensor_swigregister
SoVRMLPlaneSensor_swigregister(SoVRMLPlaneSensor)

def SoVRMLPlaneSensor_getClassTypeId() -> "SoType":
    """SoVRMLPlaneSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLPlaneSensor_getClassTypeId()

def SoVRMLPlaneSensor_initClass() -> "void":
    """SoVRMLPlaneSensor_initClass()"""
    return _coin.SoVRMLPlaneSensor_initClass()

class SoVRMLPointLight(SoVRMLLight):
    """Proxy of C++ SoVRMLPointLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLPointLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLPointLight self) -> SoType"""
        return _coin.SoVRMLPointLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLPointLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLPointLight self) -> SoVRMLPointLight"""
        this = _coin.new_SoVRMLPointLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    location = _swig_property(_coin.SoVRMLPointLight_location_get, _coin.SoVRMLPointLight_location_set)
    radius = _swig_property(_coin.SoVRMLPointLight_radius_get, _coin.SoVRMLPointLight_radius_set)
    attenuation = _swig_property(_coin.SoVRMLPointLight_attenuation_get, _coin.SoVRMLPointLight_attenuation_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLPointLight self, SoGLRenderAction action)"""
        return _coin.SoVRMLPointLight_GLRender(self, action)

SoVRMLPointLight_swigregister = _coin.SoVRMLPointLight_swigregister
SoVRMLPointLight_swigregister(SoVRMLPointLight)

def SoVRMLPointLight_getClassTypeId() -> "SoType":
    """SoVRMLPointLight_getClassTypeId() -> SoType"""
    return _coin.SoVRMLPointLight_getClassTypeId()

def SoVRMLPointLight_initClass() -> "void":
    """SoVRMLPointLight_initClass()"""
    return _coin.SoVRMLPointLight_initClass()

class SoVRMLVertexPoint(SoVRMLGeometry):
    """Proxy of C++ SoVRMLVertexPoint class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLVertexPoint_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLVertexPoint self) -> SoType"""
        return _coin.SoVRMLVertexPoint_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLVertexPoint_initClass()

    initClass = staticmethod(initClass)
    coord = _swig_property(_coin.SoVRMLVertexPoint_coord_get, _coin.SoVRMLVertexPoint_coord_set)
    color = _swig_property(_coin.SoVRMLVertexPoint_color_get, _coin.SoVRMLVertexPoint_color_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLVertexPoint self, SoAction action)"""
        return _coin.SoVRMLVertexPoint_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLVertexPoint self, SoGLRenderAction action)"""
        return _coin.SoVRMLVertexPoint_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLVertexPoint self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLVertexPoint_getBoundingBox(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLVertexPoint self, SoCallbackAction action)"""
        return _coin.SoVRMLVertexPoint_callback(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLVertexPoint self, SoPickAction action)"""
        return _coin.SoVRMLVertexPoint_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLVertexPoint self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLVertexPoint_getPrimitiveCount(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLVertexPoint self, SoNotList list)"""
        return _coin.SoVRMLVertexPoint_notify(self, list)

SoVRMLVertexPoint_swigregister = _coin.SoVRMLVertexPoint_swigregister
SoVRMLVertexPoint_swigregister(SoVRMLVertexPoint)

def SoVRMLVertexPoint_getClassTypeId() -> "SoType":
    """SoVRMLVertexPoint_getClassTypeId() -> SoType"""
    return _coin.SoVRMLVertexPoint_getClassTypeId()

def SoVRMLVertexPoint_initClass() -> "void":
    """SoVRMLVertexPoint_initClass()"""
    return _coin.SoVRMLVertexPoint_initClass()

class SoVRMLPointSet(SoVRMLVertexPoint):
    """Proxy of C++ SoVRMLPointSet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLPointSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLPointSet self) -> SoType"""
        return _coin.SoVRMLPointSet_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLPointSet_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLPointSet self) -> SoVRMLPointSet"""
        this = _coin.new_SoVRMLPointSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLPointSet self, SoGLRenderAction action)"""
        return _coin.SoVRMLPointSet_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLPointSet self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLPointSet_getBoundingBox(self, action)

SoVRMLPointSet_swigregister = _coin.SoVRMLPointSet_swigregister
SoVRMLPointSet_swigregister(SoVRMLPointSet)

def SoVRMLPointSet_getClassTypeId() -> "SoType":
    """SoVRMLPointSet_getClassTypeId() -> SoType"""
    return _coin.SoVRMLPointSet_getClassTypeId()

def SoVRMLPointSet_initClass() -> "void":
    """SoVRMLPointSet_initClass()"""
    return _coin.SoVRMLPointSet_initClass()

class SoVRMLPositionInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLPositionInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLPositionInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLPositionInterpolator self) -> SoType"""
        return _coin.SoVRMLPositionInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLPositionInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLPositionInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLPositionInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLPositionInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLPositionInterpolator self) -> SoVRMLPositionInterpolator"""
        this = _coin.new_SoVRMLPositionInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLPositionInterpolator_keyValue_get, _coin.SoVRMLPositionInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLPositionInterpolator_value_changed_get, _coin.SoVRMLPositionInterpolator_value_changed_set)
SoVRMLPositionInterpolator_swigregister = _coin.SoVRMLPositionInterpolator_swigregister
SoVRMLPositionInterpolator_swigregister(SoVRMLPositionInterpolator)

def SoVRMLPositionInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLPositionInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLPositionInterpolator_getClassTypeId()

def SoVRMLPositionInterpolator_createInstance() -> "void *":
    """SoVRMLPositionInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLPositionInterpolator_createInstance()

def SoVRMLPositionInterpolator_initClass() -> "void":
    """SoVRMLPositionInterpolator_initClass()"""
    return _coin.SoVRMLPositionInterpolator_initClass()

class SoVRMLProximitySensor(SoNode):
    """Proxy of C++ SoVRMLProximitySensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLProximitySensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLProximitySensor self) -> SoType"""
        return _coin.SoVRMLProximitySensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLProximitySensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLProximitySensor self) -> SoVRMLProximitySensor"""
        this = _coin.new_SoVRMLProximitySensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    center = _swig_property(_coin.SoVRMLProximitySensor_center_get, _coin.SoVRMLProximitySensor_center_set)
    size = _swig_property(_coin.SoVRMLProximitySensor_size_get, _coin.SoVRMLProximitySensor_size_set)
    enabled = _swig_property(_coin.SoVRMLProximitySensor_enabled_get, _coin.SoVRMLProximitySensor_enabled_set)
    isActive = _swig_property(_coin.SoVRMLProximitySensor_isActive_get, _coin.SoVRMLProximitySensor_isActive_set)
    position_changed = _swig_property(_coin.SoVRMLProximitySensor_position_changed_get, _coin.SoVRMLProximitySensor_position_changed_set)
    orientation_changed = _swig_property(_coin.SoVRMLProximitySensor_orientation_changed_get, _coin.SoVRMLProximitySensor_orientation_changed_set)
    enterTime = _swig_property(_coin.SoVRMLProximitySensor_enterTime_get, _coin.SoVRMLProximitySensor_enterTime_set)
    exitTime = _swig_property(_coin.SoVRMLProximitySensor_exitTime_get, _coin.SoVRMLProximitySensor_exitTime_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLProximitySensor self) -> SbBool"""
        return _coin.SoVRMLProximitySensor_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLProximitySensor self, SoAction action)"""
        return _coin.SoVRMLProximitySensor_doAction(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLProximitySensor self, SoGLRenderAction action)"""
        return _coin.SoVRMLProximitySensor_GLRender(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLProximitySensor self, SoCallbackAction action)"""
        return _coin.SoVRMLProximitySensor_callback(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLProximitySensor self, SoRayPickAction action)"""
        return _coin.SoVRMLProximitySensor_rayPick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLProximitySensor self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLProximitySensor_getBoundingBox(self, action)

SoVRMLProximitySensor_swigregister = _coin.SoVRMLProximitySensor_swigregister
SoVRMLProximitySensor_swigregister(SoVRMLProximitySensor)

def SoVRMLProximitySensor_getClassTypeId() -> "SoType":
    """SoVRMLProximitySensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLProximitySensor_getClassTypeId()

def SoVRMLProximitySensor_initClass() -> "void":
    """SoVRMLProximitySensor_initClass()"""
    return _coin.SoVRMLProximitySensor_initClass()

class SoVRMLScalarInterpolator(SoVRMLInterpolator):
    """Proxy of C++ SoVRMLScalarInterpolator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLScalarInterpolator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLScalarInterpolator self) -> SoType"""
        return _coin.SoVRMLScalarInterpolator_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLScalarInterpolator self) -> SoEngineOutputData"""
        return _coin.SoVRMLScalarInterpolator_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLScalarInterpolator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLScalarInterpolator_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLScalarInterpolator self) -> SoVRMLScalarInterpolator"""
        this = _coin.new_SoVRMLScalarInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    keyValue = _swig_property(_coin.SoVRMLScalarInterpolator_keyValue_get, _coin.SoVRMLScalarInterpolator_keyValue_set)
    value_changed = _swig_property(_coin.SoVRMLScalarInterpolator_value_changed_get, _coin.SoVRMLScalarInterpolator_value_changed_set)
SoVRMLScalarInterpolator_swigregister = _coin.SoVRMLScalarInterpolator_swigregister
SoVRMLScalarInterpolator_swigregister(SoVRMLScalarInterpolator)

def SoVRMLScalarInterpolator_getClassTypeId() -> "SoType":
    """SoVRMLScalarInterpolator_getClassTypeId() -> SoType"""
    return _coin.SoVRMLScalarInterpolator_getClassTypeId()

def SoVRMLScalarInterpolator_createInstance() -> "void *":
    """SoVRMLScalarInterpolator_createInstance() -> void *"""
    return _coin.SoVRMLScalarInterpolator_createInstance()

def SoVRMLScalarInterpolator_initClass() -> "void":
    """SoVRMLScalarInterpolator_initClass()"""
    return _coin.SoVRMLScalarInterpolator_initClass()

class SoVRMLScript(SoNode):
    """Proxy of C++ SoVRMLScript class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLScript_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLScript self) -> SoVRMLScript"""
        this = _coin.new_SoVRMLScript()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLScript_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLScript self) -> SoType"""
        return _coin.SoVRMLScript_getTypeId(self)

    url = _swig_property(_coin.SoVRMLScript_url_get, _coin.SoVRMLScript_url_set)
    directOutput = _swig_property(_coin.SoVRMLScript_directOutput_get, _coin.SoVRMLScript_directOutput_set)
    mustEvaluate = _swig_property(_coin.SoVRMLScript_mustEvaluate_get, _coin.SoVRMLScript_mustEvaluate_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLScript self, SoAction action)"""
        return _coin.SoVRMLScript_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLScript self, SoCallbackAction action)"""
        return _coin.SoVRMLScript_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLScript self, SoGLRenderAction action)"""
        return _coin.SoVRMLScript_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLScript self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLScript_getBoundingBox(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLScript self, SoPickAction action)"""
        return _coin.SoVRMLScript_pick(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLScript self, SoHandleEventAction action)"""
        return _coin.SoVRMLScript_handleEvent(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLScript self, SoWriteAction action)"""
        return _coin.SoVRMLScript_write(self, action)


    def setScriptEvaluateCB(cb: 'SoVRMLScriptEvaluateCB *', closure: 'void *') -> "void":
        """setScriptEvaluateCB(SoVRMLScriptEvaluateCB * cb, void * closure)"""
        return _coin.SoVRMLScript_setScriptEvaluateCB(cb, closure)

    setScriptEvaluateCB = staticmethod(setScriptEvaluateCB)
SoVRMLScript_swigregister = _coin.SoVRMLScript_swigregister
SoVRMLScript_swigregister(SoVRMLScript)

def SoVRMLScript_initClass() -> "void":
    """SoVRMLScript_initClass()"""
    return _coin.SoVRMLScript_initClass()

def SoVRMLScript_getClassTypeId() -> "SoType":
    """SoVRMLScript_getClassTypeId() -> SoType"""
    return _coin.SoVRMLScript_getClassTypeId()

def SoVRMLScript_setScriptEvaluateCB(cb: 'SoVRMLScriptEvaluateCB *', closure: 'void *') -> "void":
    """SoVRMLScript_setScriptEvaluateCB(SoVRMLScriptEvaluateCB * cb, void * closure)"""
    return _coin.SoVRMLScript_setScriptEvaluateCB(cb, closure)

class SoVRMLShape(SoNode):
    """Proxy of C++ SoVRMLShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLShape_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLShape self) -> SoType"""
        return _coin.SoVRMLShape_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLShape_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLShape self) -> SoVRMLShape"""
        this = _coin.new_SoVRMLShape()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    OFF = _coin.SoVRMLShape_OFF
    ON = _coin.SoVRMLShape_ON
    AUTO = _coin.SoVRMLShape_AUTO
    appearance = _swig_property(_coin.SoVRMLShape_appearance_get, _coin.SoVRMLShape_appearance_set)
    geometry = _swig_property(_coin.SoVRMLShape_geometry_get, _coin.SoVRMLShape_geometry_set)
    renderCaching = _swig_property(_coin.SoVRMLShape_renderCaching_get, _coin.SoVRMLShape_renderCaching_set)
    boundingBoxCaching = _swig_property(_coin.SoVRMLShape_boundingBoxCaching_get, _coin.SoVRMLShape_boundingBoxCaching_set)

    def setNumRenderCaches(num: 'int') -> "void":
        """setNumRenderCaches(int num)"""
        return _coin.SoVRMLShape_setNumRenderCaches(num)

    setNumRenderCaches = staticmethod(setNumRenderCaches)

    def getNumRenderCaches() -> "int":
        """getNumRenderCaches() -> int"""
        return _coin.SoVRMLShape_getNumRenderCaches()

    getNumRenderCaches = staticmethod(getNumRenderCaches)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLShape self) -> SbBool"""
        return _coin.SoVRMLShape_affectsState(self)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLShape self, SoAction action)"""
        return _coin.SoVRMLShape_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLShape self, SoCallbackAction action)"""
        return _coin.SoVRMLShape_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLShape self, SoGLRenderAction action)"""
        return _coin.SoVRMLShape_GLRender(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLShape self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLShape_getBoundingBox(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLShape self, SoRayPickAction action)"""
        return _coin.SoVRMLShape_rayPick(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLShape self, SoSearchAction action)"""
        return _coin.SoVRMLShape_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLShape self, SoWriteAction action)"""
        return _coin.SoVRMLShape_write(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLShape self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLShape_getPrimitiveCount(self, action)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLShape self) -> SoChildList"""
        return _coin.SoVRMLShape_getChildren(self)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLShape self, SoNotList list)"""
        return _coin.SoVRMLShape_notify(self, list)


    def copyContents(self, arg2: 'SoFieldContainer', copyConn: 'SbBool') -> "void":
        """copyContents(SoVRMLShape self, SoFieldContainer arg2, SbBool copyConn)"""
        return _coin.SoVRMLShape_copyContents(self, arg2, copyConn)

SoVRMLShape_swigregister = _coin.SoVRMLShape_swigregister
SoVRMLShape_swigregister(SoVRMLShape)

def SoVRMLShape_getClassTypeId() -> "SoType":
    """SoVRMLShape_getClassTypeId() -> SoType"""
    return _coin.SoVRMLShape_getClassTypeId()

def SoVRMLShape_initClass() -> "void":
    """SoVRMLShape_initClass()"""
    return _coin.SoVRMLShape_initClass()

def SoVRMLShape_setNumRenderCaches(num: 'int') -> "void":
    """SoVRMLShape_setNumRenderCaches(int num)"""
    return _coin.SoVRMLShape_setNumRenderCaches(num)

def SoVRMLShape_getNumRenderCaches() -> "int":
    """SoVRMLShape_getNumRenderCaches() -> int"""
    return _coin.SoVRMLShape_getNumRenderCaches()

class SoVRMLSound(SoNode):
    """Proxy of C++ SoVRMLSound class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSound_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSound self) -> SoType"""
        return _coin.SoVRMLSound_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSound_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLSound self) -> SoVRMLSound"""
        this = _coin.new_SoVRMLSound()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    source = _swig_property(_coin.SoVRMLSound_source_get, _coin.SoVRMLSound_source_set)
    intensity = _swig_property(_coin.SoVRMLSound_intensity_get, _coin.SoVRMLSound_intensity_set)
    priority = _swig_property(_coin.SoVRMLSound_priority_get, _coin.SoVRMLSound_priority_set)
    location = _swig_property(_coin.SoVRMLSound_location_get, _coin.SoVRMLSound_location_set)
    direction = _swig_property(_coin.SoVRMLSound_direction_get, _coin.SoVRMLSound_direction_set)
    minFront = _swig_property(_coin.SoVRMLSound_minFront_get, _coin.SoVRMLSound_minFront_set)
    maxFront = _swig_property(_coin.SoVRMLSound_maxFront_get, _coin.SoVRMLSound_maxFront_set)
    minBack = _swig_property(_coin.SoVRMLSound_minBack_get, _coin.SoVRMLSound_minBack_set)
    maxBack = _swig_property(_coin.SoVRMLSound_maxBack_get, _coin.SoVRMLSound_maxBack_set)
    spatialize = _swig_property(_coin.SoVRMLSound_spatialize_get, _coin.SoVRMLSound_spatialize_set)
    dopplerFactor = _swig_property(_coin.SoVRMLSound_dopplerFactor_get, _coin.SoVRMLSound_dopplerFactor_set)
    dopplerVelocity = _swig_property(_coin.SoVRMLSound_dopplerVelocity_get, _coin.SoVRMLSound_dopplerVelocity_set)

    def setDopplerVelocity(self, velocity: 'float') -> "void":
        """setDopplerVelocity(SoVRMLSound self, float velocity)"""
        return _coin.SoVRMLSound_setDopplerVelocity(self, velocity)


    def getDopplerVelocity(self) -> "float":
        """getDopplerVelocity(SoVRMLSound self) -> float"""
        return _coin.SoVRMLSound_getDopplerVelocity(self)


    def setDopplerFactor(self, factor: 'float') -> "void":
        """setDopplerFactor(SoVRMLSound self, float factor)"""
        return _coin.SoVRMLSound_setDopplerFactor(self, factor)


    def getDopplerFactor(self) -> "float":
        """getDopplerFactor(SoVRMLSound self) -> float"""
        return _coin.SoVRMLSound_getDopplerFactor(self)


    def startPlaying(self, path: 'SoPath', userdataptr: 'void *') -> "void":
        """startPlaying(SoVRMLSound self, SoPath path, void * userdataptr)"""
        return _coin.SoVRMLSound_startPlaying(self, path, userdataptr)


    def stopPlaying(self, path: 'SoPath', userdataptr: 'void *') -> "void":
        """stopPlaying(SoVRMLSound self, SoPath path, void * userdataptr)"""
        return _coin.SoVRMLSound_stopPlaying(self, path, userdataptr)


    def setDefaultBufferingProperties(bufferLength: 'int', numBuffers: 'int', sleepTime: 'SbTime') -> "void":
        """setDefaultBufferingProperties(int bufferLength, int numBuffers, SbTime sleepTime)"""
        return _coin.SoVRMLSound_setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime)

    setDefaultBufferingProperties = staticmethod(setDefaultBufferingProperties)

    def setBufferingProperties(self, bufferLength: 'int', numBuffers: 'int', sleepTime: 'SbTime') -> "void":
        """setBufferingProperties(SoVRMLSound self, int bufferLength, int numBuffers, SbTime sleepTime)"""
        return _coin.SoVRMLSound_setBufferingProperties(self, bufferLength, numBuffers, sleepTime)


    def getBufferingProperties(self, bufferLength: 'int &', numBuffers: 'int &', sleepTime: 'SbTime') -> "void":
        """getBufferingProperties(SoVRMLSound self, int & bufferLength, int & numBuffers, SbTime sleepTime)"""
        return _coin.SoVRMLSound_getBufferingProperties(self, bufferLength, numBuffers, sleepTime)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoVRMLSound self, SoAudioRenderAction action)"""
        return _coin.SoVRMLSound_audioRender(self, action)

SoVRMLSound_swigregister = _coin.SoVRMLSound_swigregister
SoVRMLSound_swigregister(SoVRMLSound)

def SoVRMLSound_getClassTypeId() -> "SoType":
    """SoVRMLSound_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSound_getClassTypeId()

def SoVRMLSound_initClass() -> "void":
    """SoVRMLSound_initClass()"""
    return _coin.SoVRMLSound_initClass()

def SoVRMLSound_setDefaultBufferingProperties(bufferLength: 'int', numBuffers: 'int', sleepTime: 'SbTime') -> "void":
    """SoVRMLSound_setDefaultBufferingProperties(int bufferLength, int numBuffers, SbTime sleepTime)"""
    return _coin.SoVRMLSound_setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime)

class SoVRMLSphere(SoVRMLGeometry):
    """Proxy of C++ SoVRMLSphere class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSphere_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSphere self) -> SoType"""
        return _coin.SoVRMLSphere_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSphere_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLSphere self) -> SoVRMLSphere"""
        this = _coin.new_SoVRMLSphere()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    radius = _swig_property(_coin.SoVRMLSphere_radius_get, _coin.SoVRMLSphere_radius_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLSphere self, SoGLRenderAction action)"""
        return _coin.SoVRMLSphere_GLRender(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLSphere self, SoRayPickAction action)"""
        return _coin.SoVRMLSphere_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLSphere self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLSphere_getPrimitiveCount(self, action)

SoVRMLSphere_swigregister = _coin.SoVRMLSphere_swigregister
SoVRMLSphere_swigregister(SoVRMLSphere)

def SoVRMLSphere_getClassTypeId() -> "SoType":
    """SoVRMLSphere_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSphere_getClassTypeId()

def SoVRMLSphere_initClass() -> "void":
    """SoVRMLSphere_initClass()"""
    return _coin.SoVRMLSphere_initClass()

class SoVRMLSphereSensor(SoVRMLDragSensor):
    """Proxy of C++ SoVRMLSphereSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSphereSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSphereSensor self) -> SoType"""
        return _coin.SoVRMLSphereSensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSphereSensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLSphereSensor self) -> SoVRMLSphereSensor"""
        this = _coin.new_SoVRMLSphereSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    offset = _swig_property(_coin.SoVRMLSphereSensor_offset_get, _coin.SoVRMLSphereSensor_offset_set)
    rotation_changed = _swig_property(_coin.SoVRMLSphereSensor_rotation_changed_get, _coin.SoVRMLSphereSensor_rotation_changed_set)
SoVRMLSphereSensor_swigregister = _coin.SoVRMLSphereSensor_swigregister
SoVRMLSphereSensor_swigregister(SoVRMLSphereSensor)

def SoVRMLSphereSensor_getClassTypeId() -> "SoType":
    """SoVRMLSphereSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSphereSensor_getClassTypeId()

def SoVRMLSphereSensor_initClass() -> "void":
    """SoVRMLSphereSensor_initClass()"""
    return _coin.SoVRMLSphereSensor_initClass()

class SoVRMLSpotLight(SoVRMLLight):
    """Proxy of C++ SoVRMLSpotLight class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSpotLight_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSpotLight self) -> SoType"""
        return _coin.SoVRMLSpotLight_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSpotLight_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLSpotLight self) -> SoVRMLSpotLight"""
        this = _coin.new_SoVRMLSpotLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    location = _swig_property(_coin.SoVRMLSpotLight_location_get, _coin.SoVRMLSpotLight_location_set)
    direction = _swig_property(_coin.SoVRMLSpotLight_direction_get, _coin.SoVRMLSpotLight_direction_set)
    beamWidth = _swig_property(_coin.SoVRMLSpotLight_beamWidth_get, _coin.SoVRMLSpotLight_beamWidth_set)
    cutOffAngle = _swig_property(_coin.SoVRMLSpotLight_cutOffAngle_get, _coin.SoVRMLSpotLight_cutOffAngle_set)
    radius = _swig_property(_coin.SoVRMLSpotLight_radius_get, _coin.SoVRMLSpotLight_radius_set)
    attenuation = _swig_property(_coin.SoVRMLSpotLight_attenuation_get, _coin.SoVRMLSpotLight_attenuation_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLSpotLight self, SoGLRenderAction action)"""
        return _coin.SoVRMLSpotLight_GLRender(self, action)

SoVRMLSpotLight_swigregister = _coin.SoVRMLSpotLight_swigregister
SoVRMLSpotLight_swigregister(SoVRMLSpotLight)

def SoVRMLSpotLight_getClassTypeId() -> "SoType":
    """SoVRMLSpotLight_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSpotLight_getClassTypeId()

def SoVRMLSpotLight_initClass() -> "void":
    """SoVRMLSpotLight_initClass()"""
    return _coin.SoVRMLSpotLight_initClass()

class SoVRMLSwitch(SoGroup):
    """Proxy of C++ SoVRMLSwitch class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLSwitch_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLSwitch self) -> SoType"""
        return _coin.SoVRMLSwitch_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLSwitch_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLSwitch self) -> SoVRMLSwitch
        __init__(SoVRMLSwitch self, int choices) -> SoVRMLSwitch
        """
        this = _coin.new_SoVRMLSwitch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    choice = _swig_property(_coin.SoVRMLSwitch_choice_get, _coin.SoVRMLSwitch_choice_set)
    whichChoice = _swig_property(_coin.SoVRMLSwitch_whichChoice_get, _coin.SoVRMLSwitch_whichChoice_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLSwitch self) -> SbBool"""
        return _coin.SoVRMLSwitch_affectsState(self)


    def addChoice(self, choice: 'SoNode') -> "void":
        """addChoice(SoVRMLSwitch self, SoNode choice)"""
        return _coin.SoVRMLSwitch_addChoice(self, choice)


    def insertChoice(self, choice: 'SoNode', idx: 'int') -> "void":
        """insertChoice(SoVRMLSwitch self, SoNode choice, int idx)"""
        return _coin.SoVRMLSwitch_insertChoice(self, choice, idx)


    def getChoice(self, idx: 'int') -> "SoNode *":
        """getChoice(SoVRMLSwitch self, int idx) -> SoNode"""
        return _coin.SoVRMLSwitch_getChoice(self, idx)


    def findChoice(self, choice: 'SoNode') -> "int":
        """findChoice(SoVRMLSwitch self, SoNode choice) -> int"""
        return _coin.SoVRMLSwitch_findChoice(self, choice)


    def getNumChoices(self) -> "int":
        """getNumChoices(SoVRMLSwitch self) -> int"""
        return _coin.SoVRMLSwitch_getNumChoices(self)


    def removeChoice(self, *args) -> "void":
        """
        removeChoice(SoVRMLSwitch self, int idx)
        removeChoice(SoVRMLSwitch self, SoNode node)
        """
        return _coin.SoVRMLSwitch_removeChoice(self, *args)


    def removeAllChoices(self) -> "void":
        """removeAllChoices(SoVRMLSwitch self)"""
        return _coin.SoVRMLSwitch_removeAllChoices(self)


    def replaceChoice(self, *args) -> "void":
        """
        replaceChoice(SoVRMLSwitch self, int idx, SoNode choice)
        replaceChoice(SoVRMLSwitch self, SoNode old, SoNode choice)
        """
        return _coin.SoVRMLSwitch_replaceChoice(self, *args)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLSwitch self, SoAction action)"""
        return _coin.SoVRMLSwitch_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLSwitch self, SoCallbackAction action)"""
        return _coin.SoVRMLSwitch_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLSwitch self, SoGLRenderAction action)"""
        return _coin.SoVRMLSwitch_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLSwitch self, SoPickAction action)"""
        return _coin.SoVRMLSwitch_pick(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLSwitch self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLSwitch_getBoundingBox(self, action)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLSwitch self, SoHandleEventAction action)"""
        return _coin.SoVRMLSwitch_handleEvent(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLSwitch self, SoGetMatrixAction action)"""
        return _coin.SoVRMLSwitch_getMatrix(self, action)


    def search(self, action: 'SoSearchAction') -> "void":
        """search(SoVRMLSwitch self, SoSearchAction action)"""
        return _coin.SoVRMLSwitch_search(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLSwitch self, SoWriteAction action)"""
        return _coin.SoVRMLSwitch_write(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoVRMLSwitch self, SoAudioRenderAction action)"""
        return _coin.SoVRMLSwitch_audioRender(self, action)


    def addChild(self, child: 'SoNode') -> "void":
        """addChild(SoVRMLSwitch self, SoNode child)"""
        return _coin.SoVRMLSwitch_addChild(self, child)


    def insertChild(self, child: 'SoNode', idx: 'int') -> "void":
        """insertChild(SoVRMLSwitch self, SoNode child, int idx)"""
        return _coin.SoVRMLSwitch_insertChild(self, child, idx)


    def getChild(self, idx: 'int') -> "SoNode *":
        """getChild(SoVRMLSwitch self, int idx) -> SoNode"""
        return _coin.SoVRMLSwitch_getChild(self, idx)


    def findChild(self, child: 'SoNode') -> "int":
        """findChild(SoVRMLSwitch self, SoNode child) -> int"""
        return _coin.SoVRMLSwitch_findChild(self, child)


    def getNumChildren(self) -> "int":
        """getNumChildren(SoVRMLSwitch self) -> int"""
        return _coin.SoVRMLSwitch_getNumChildren(self)


    def removeChild(self, *args) -> "void":
        """
        removeChild(SoVRMLSwitch self, int idx)
        removeChild(SoVRMLSwitch self, SoNode child)
        """
        return _coin.SoVRMLSwitch_removeChild(self, *args)


    def removeAllChildren(self) -> "void":
        """removeAllChildren(SoVRMLSwitch self)"""
        return _coin.SoVRMLSwitch_removeAllChildren(self)


    def replaceChild(self, *args) -> "void":
        """
        replaceChild(SoVRMLSwitch self, int idx, SoNode node)
        replaceChild(SoVRMLSwitch self, SoNode old, SoNode node)
        """
        return _coin.SoVRMLSwitch_replaceChild(self, *args)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLSwitch self) -> SoChildList"""
        return _coin.SoVRMLSwitch_getChildren(self)

SoVRMLSwitch_swigregister = _coin.SoVRMLSwitch_swigregister
SoVRMLSwitch_swigregister(SoVRMLSwitch)

def SoVRMLSwitch_getClassTypeId() -> "SoType":
    """SoVRMLSwitch_getClassTypeId() -> SoType"""
    return _coin.SoVRMLSwitch_getClassTypeId()

def SoVRMLSwitch_initClass() -> "void":
    """SoVRMLSwitch_initClass()"""
    return _coin.SoVRMLSwitch_initClass()

class SoVRMLText(SoVRMLGeometry):
    """Proxy of C++ SoVRMLText class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLText_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLText self) -> SoType"""
        return _coin.SoVRMLText_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLText_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLText self) -> SoVRMLText"""
        this = _coin.new_SoVRMLText()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    string = _swig_property(_coin.SoVRMLText_string_get, _coin.SoVRMLText_string_set)
    fontStyle = _swig_property(_coin.SoVRMLText_fontStyle_get, _coin.SoVRMLText_fontStyle_set)
    maxExtent = _swig_property(_coin.SoVRMLText_maxExtent_get, _coin.SoVRMLText_maxExtent_set)
    length = _swig_property(_coin.SoVRMLText_length_get, _coin.SoVRMLText_length_set)
    BEGIN = _coin.SoVRMLText_BEGIN
    END = _coin.SoVRMLText_END
    MIDDLE = _coin.SoVRMLText_MIDDLE

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLText self, SoGLRenderAction action)"""
        return _coin.SoVRMLText_GLRender(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLText self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLText_getPrimitiveCount(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLText self, SoNotList list)"""
        return _coin.SoVRMLText_notify(self, list)


    def getChildren(self) -> "SoChildList *":
        """getChildren(SoVRMLText self) -> SoChildList"""
        return _coin.SoVRMLText_getChildren(self)

SoVRMLText_swigregister = _coin.SoVRMLText_swigregister
SoVRMLText_swigregister(SoVRMLText)

def SoVRMLText_getClassTypeId() -> "SoType":
    """SoVRMLText_getClassTypeId() -> SoType"""
    return _coin.SoVRMLText_getClassTypeId()

def SoVRMLText_initClass() -> "void":
    """SoVRMLText_initClass()"""
    return _coin.SoVRMLText_initClass()

class SoVRMLTextureCoordinate(SoNode):
    """Proxy of C++ SoVRMLTextureCoordinate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTextureCoordinate_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTextureCoordinate self) -> SoType"""
        return _coin.SoVRMLTextureCoordinate_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTextureCoordinate_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLTextureCoordinate self) -> SoVRMLTextureCoordinate"""
        this = _coin.new_SoVRMLTextureCoordinate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    point = _swig_property(_coin.SoVRMLTextureCoordinate_point_get, _coin.SoVRMLTextureCoordinate_point_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLTextureCoordinate self, SoAction action)"""
        return _coin.SoVRMLTextureCoordinate_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLTextureCoordinate self, SoCallbackAction action)"""
        return _coin.SoVRMLTextureCoordinate_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLTextureCoordinate self, SoGLRenderAction action)"""
        return _coin.SoVRMLTextureCoordinate_GLRender(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLTextureCoordinate self, SoPickAction action)"""
        return _coin.SoVRMLTextureCoordinate_pick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLTextureCoordinate self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLTextureCoordinate_getPrimitiveCount(self, action)

SoVRMLTextureCoordinate_swigregister = _coin.SoVRMLTextureCoordinate_swigregister
SoVRMLTextureCoordinate_swigregister(SoVRMLTextureCoordinate)

def SoVRMLTextureCoordinate_getClassTypeId() -> "SoType":
    """SoVRMLTextureCoordinate_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTextureCoordinate_getClassTypeId()

def SoVRMLTextureCoordinate_initClass() -> "void":
    """SoVRMLTextureCoordinate_initClass()"""
    return _coin.SoVRMLTextureCoordinate_initClass()

class SoVRMLTextureTransform(SoNode):
    """Proxy of C++ SoVRMLTextureTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTextureTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTextureTransform self) -> SoType"""
        return _coin.SoVRMLTextureTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTextureTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLTextureTransform self) -> SoVRMLTextureTransform"""
        this = _coin.new_SoVRMLTextureTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoVRMLTextureTransform_translation_get, _coin.SoVRMLTextureTransform_translation_set)
    rotation = _swig_property(_coin.SoVRMLTextureTransform_rotation_get, _coin.SoVRMLTextureTransform_rotation_set)
    scale = _swig_property(_coin.SoVRMLTextureTransform_scale_get, _coin.SoVRMLTextureTransform_scale_set)
    center = _swig_property(_coin.SoVRMLTextureTransform_center_get, _coin.SoVRMLTextureTransform_center_set)

    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLTextureTransform self, SoAction action)"""
        return _coin.SoVRMLTextureTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLTextureTransform self, SoCallbackAction action)"""
        return _coin.SoVRMLTextureTransform_callback(self, action)


    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLTextureTransform self, SoGLRenderAction action)"""
        return _coin.SoVRMLTextureTransform_GLRender(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLTextureTransform self, SoGetMatrixAction action)"""
        return _coin.SoVRMLTextureTransform_getMatrix(self, action)


    def pick(self, action: 'SoPickAction') -> "void":
        """pick(SoVRMLTextureTransform self, SoPickAction action)"""
        return _coin.SoVRMLTextureTransform_pick(self, action)

SoVRMLTextureTransform_swigregister = _coin.SoVRMLTextureTransform_swigregister
SoVRMLTextureTransform_swigregister(SoVRMLTextureTransform)

def SoVRMLTextureTransform_getClassTypeId() -> "SoType":
    """SoVRMLTextureTransform_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTextureTransform_getClassTypeId()

def SoVRMLTextureTransform_initClass() -> "void":
    """SoVRMLTextureTransform_initClass()"""
    return _coin.SoVRMLTextureTransform_initClass()

class SoVRMLTimeSensor(SoNodeEngine):
    """Proxy of C++ SoVRMLTimeSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTimeSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTimeSensor self) -> SoType"""
        return _coin.SoVRMLTimeSensor_getTypeId(self)


    def getOutputData(self) -> "SoEngineOutputData const *":
        """getOutputData(SoVRMLTimeSensor self) -> SoEngineOutputData"""
        return _coin.SoVRMLTimeSensor_getOutputData(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoVRMLTimeSensor_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTimeSensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLTimeSensor self) -> SoVRMLTimeSensor"""
        this = _coin.new_SoVRMLTimeSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    cycleInterval = _swig_property(_coin.SoVRMLTimeSensor_cycleInterval_get, _coin.SoVRMLTimeSensor_cycleInterval_set)
    enabled = _swig_property(_coin.SoVRMLTimeSensor_enabled_get, _coin.SoVRMLTimeSensor_enabled_set)
    loop = _swig_property(_coin.SoVRMLTimeSensor_loop_get, _coin.SoVRMLTimeSensor_loop_set)
    startTime = _swig_property(_coin.SoVRMLTimeSensor_startTime_get, _coin.SoVRMLTimeSensor_startTime_set)
    stopTime = _swig_property(_coin.SoVRMLTimeSensor_stopTime_get, _coin.SoVRMLTimeSensor_stopTime_set)

    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLTimeSensor self, SoNotList list)"""
        return _coin.SoVRMLTimeSensor_notify(self, list)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLTimeSensor self, SoHandleEventAction action)"""
        return _coin.SoVRMLTimeSensor_handleEvent(self, action)


    def write(self, action: 'SoWriteAction') -> "void":
        """write(SoVRMLTimeSensor self, SoWriteAction action)"""
        return _coin.SoVRMLTimeSensor_write(self, action)

    cycleTime = _swig_property(_coin.SoVRMLTimeSensor_cycleTime_get, _coin.SoVRMLTimeSensor_cycleTime_set)
    fraction_changed = _swig_property(_coin.SoVRMLTimeSensor_fraction_changed_get, _coin.SoVRMLTimeSensor_fraction_changed_set)
    isActive = _swig_property(_coin.SoVRMLTimeSensor_isActive_get, _coin.SoVRMLTimeSensor_isActive_set)
    time = _swig_property(_coin.SoVRMLTimeSensor_time_get, _coin.SoVRMLTimeSensor_time_set)
SoVRMLTimeSensor_swigregister = _coin.SoVRMLTimeSensor_swigregister
SoVRMLTimeSensor_swigregister(SoVRMLTimeSensor)

def SoVRMLTimeSensor_getClassTypeId() -> "SoType":
    """SoVRMLTimeSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTimeSensor_getClassTypeId()

def SoVRMLTimeSensor_createInstance() -> "void *":
    """SoVRMLTimeSensor_createInstance() -> void *"""
    return _coin.SoVRMLTimeSensor_createInstance()

def SoVRMLTimeSensor_initClass() -> "void":
    """SoVRMLTimeSensor_initClass()"""
    return _coin.SoVRMLTimeSensor_initClass()

class SoVRMLTouchSensor(SoNode):
    """Proxy of C++ SoVRMLTouchSensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTouchSensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTouchSensor self) -> SoType"""
        return _coin.SoVRMLTouchSensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTouchSensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLTouchSensor self) -> SoVRMLTouchSensor"""
        this = _coin.new_SoVRMLTouchSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    enabled = _swig_property(_coin.SoVRMLTouchSensor_enabled_get, _coin.SoVRMLTouchSensor_enabled_set)
    hitNormal_changed = _swig_property(_coin.SoVRMLTouchSensor_hitNormal_changed_get, _coin.SoVRMLTouchSensor_hitNormal_changed_set)
    hitPoint_changed = _swig_property(_coin.SoVRMLTouchSensor_hitPoint_changed_get, _coin.SoVRMLTouchSensor_hitPoint_changed_set)
    hitTexCoord_changed = _swig_property(_coin.SoVRMLTouchSensor_hitTexCoord_changed_get, _coin.SoVRMLTouchSensor_hitTexCoord_changed_set)
    isActive = _swig_property(_coin.SoVRMLTouchSensor_isActive_get, _coin.SoVRMLTouchSensor_isActive_set)
    isOver = _swig_property(_coin.SoVRMLTouchSensor_isOver_get, _coin.SoVRMLTouchSensor_isOver_set)
    touchTime = _swig_property(_coin.SoVRMLTouchSensor_touchTime_get, _coin.SoVRMLTouchSensor_touchTime_set)

    def affectsState(self) -> "SbBool":
        """affectsState(SoVRMLTouchSensor self) -> SbBool"""
        return _coin.SoVRMLTouchSensor_affectsState(self)


    def handleEvent(self, action: 'SoHandleEventAction') -> "void":
        """handleEvent(SoVRMLTouchSensor self, SoHandleEventAction action)"""
        return _coin.SoVRMLTouchSensor_handleEvent(self, action)

SoVRMLTouchSensor_swigregister = _coin.SoVRMLTouchSensor_swigregister
SoVRMLTouchSensor_swigregister(SoVRMLTouchSensor)

def SoVRMLTouchSensor_getClassTypeId() -> "SoType":
    """SoVRMLTouchSensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTouchSensor_getClassTypeId()

def SoVRMLTouchSensor_initClass() -> "void":
    """SoVRMLTouchSensor_initClass()"""
    return _coin.SoVRMLTouchSensor_initClass()

class SoVRMLTransform(SoVRMLGroup):
    """Proxy of C++ SoVRMLTransform class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLTransform_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLTransform self) -> SoType"""
        return _coin.SoVRMLTransform_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLTransform_initClass()

    initClass = staticmethod(initClass)

    def __init__(self, *args):
        """
        __init__(SoVRMLTransform self) -> SoVRMLTransform
        __init__(SoVRMLTransform self, int children) -> SoVRMLTransform
        """
        this = _coin.new_SoVRMLTransform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    translation = _swig_property(_coin.SoVRMLTransform_translation_get, _coin.SoVRMLTransform_translation_set)
    rotation = _swig_property(_coin.SoVRMLTransform_rotation_get, _coin.SoVRMLTransform_rotation_set)
    scale = _swig_property(_coin.SoVRMLTransform_scale_get, _coin.SoVRMLTransform_scale_set)
    scaleOrientation = _swig_property(_coin.SoVRMLTransform_scaleOrientation_get, _coin.SoVRMLTransform_scaleOrientation_set)
    center = _swig_property(_coin.SoVRMLTransform_center_get, _coin.SoVRMLTransform_center_set)

    def pointAt(self, arg2: 'SbVec3f', to: 'SbVec3f') -> "void":
        """pointAt(SoVRMLTransform self, SbVec3f arg2, SbVec3f to)"""
        return _coin.SoVRMLTransform_pointAt(self, arg2, to)


    def getScaleSpaceMatrix(self, inverse: 'SbMatrix') -> "void":
        """getScaleSpaceMatrix(SoVRMLTransform self, SbMatrix inverse)"""
        return _coin.SoVRMLTransform_getScaleSpaceMatrix(self, inverse)


    def getRotationSpaceMatrix(self, inverse: 'SbMatrix') -> "void":
        """getRotationSpaceMatrix(SoVRMLTransform self, SbMatrix inverse)"""
        return _coin.SoVRMLTransform_getRotationSpaceMatrix(self, inverse)


    def getTranslationSpaceMatrix(self, inverse: 'SbMatrix') -> "void":
        """getTranslationSpaceMatrix(SoVRMLTransform self, SbMatrix inverse)"""
        return _coin.SoVRMLTransform_getTranslationSpaceMatrix(self, inverse)


    def multLeft(self) -> "void":
        """multLeft(SoVRMLTransform self)"""
        return _coin.SoVRMLTransform_multLeft(self)


    def multRight(self) -> "void":
        """multRight(SoVRMLTransform self)"""
        return _coin.SoVRMLTransform_multRight(self)


    def combineLeft(self, leftnode: 'SoVRMLTransform') -> "void":
        """combineLeft(SoVRMLTransform self, SoVRMLTransform leftnode)"""
        return _coin.SoVRMLTransform_combineLeft(self, leftnode)


    def combineRight(self, rightnode: 'SoVRMLTransform') -> "void":
        """combineRight(SoVRMLTransform self, SoVRMLTransform rightnode)"""
        return _coin.SoVRMLTransform_combineRight(self, rightnode)


    def setMatrix(self) -> "void":
        """setMatrix(SoVRMLTransform self)"""
        return _coin.SoVRMLTransform_setMatrix(self)


    def recenter(self, newcenter: 'SbVec3f') -> "void":
        """recenter(SoVRMLTransform self, SbVec3f newcenter)"""
        return _coin.SoVRMLTransform_recenter(self, newcenter)


    def doAction(self, action: 'SoAction') -> "void":
        """doAction(SoVRMLTransform self, SoAction action)"""
        return _coin.SoVRMLTransform_doAction(self, action)


    def callback(self, action: 'SoCallbackAction') -> "void":
        """callback(SoVRMLTransform self, SoCallbackAction action)"""
        return _coin.SoVRMLTransform_callback(self, action)


    def getBoundingBox(self, action: 'SoGetBoundingBoxAction') -> "void":
        """getBoundingBox(SoVRMLTransform self, SoGetBoundingBoxAction action)"""
        return _coin.SoVRMLTransform_getBoundingBox(self, action)


    def getMatrix(self, action: 'SoGetMatrixAction') -> "void":
        """getMatrix(SoVRMLTransform self, SoGetMatrixAction action)"""
        return _coin.SoVRMLTransform_getMatrix(self, action)


    def rayPick(self, action: 'SoRayPickAction') -> "void":
        """rayPick(SoVRMLTransform self, SoRayPickAction action)"""
        return _coin.SoVRMLTransform_rayPick(self, action)


    def getPrimitiveCount(self, action: 'SoGetPrimitiveCountAction') -> "void":
        """getPrimitiveCount(SoVRMLTransform self, SoGetPrimitiveCountAction action)"""
        return _coin.SoVRMLTransform_getPrimitiveCount(self, action)


    def audioRender(self, action: 'SoAudioRenderAction') -> "void":
        """audioRender(SoVRMLTransform self, SoAudioRenderAction action)"""
        return _coin.SoVRMLTransform_audioRender(self, action)


    def GLRenderBelowPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderBelowPath(SoVRMLTransform self, SoGLRenderAction action)"""
        return _coin.SoVRMLTransform_GLRenderBelowPath(self, action)


    def GLRenderInPath(self, action: 'SoGLRenderAction') -> "void":
        """GLRenderInPath(SoVRMLTransform self, SoGLRenderAction action)"""
        return _coin.SoVRMLTransform_GLRenderInPath(self, action)


    def notify(self, list: 'SoNotList') -> "void":
        """notify(SoVRMLTransform self, SoNotList list)"""
        return _coin.SoVRMLTransform_notify(self, list)

SoVRMLTransform_swigregister = _coin.SoVRMLTransform_swigregister
SoVRMLTransform_swigregister(SoVRMLTransform)

def SoVRMLTransform_getClassTypeId() -> "SoType":
    """SoVRMLTransform_getClassTypeId() -> SoType"""
    return _coin.SoVRMLTransform_getClassTypeId()

def SoVRMLTransform_initClass() -> "void":
    """SoVRMLTransform_initClass()"""
    return _coin.SoVRMLTransform_initClass()

class SoVRMLViewpoint(SoNode):
    """Proxy of C++ SoVRMLViewpoint class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLViewpoint_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLViewpoint self) -> SoType"""
        return _coin.SoVRMLViewpoint_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLViewpoint_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLViewpoint self) -> SoVRMLViewpoint"""
        this = _coin.new_SoVRMLViewpoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    position = _swig_property(_coin.SoVRMLViewpoint_position_get, _coin.SoVRMLViewpoint_position_set)
    orientation = _swig_property(_coin.SoVRMLViewpoint_orientation_get, _coin.SoVRMLViewpoint_orientation_set)
    fieldOfView = _swig_property(_coin.SoVRMLViewpoint_fieldOfView_get, _coin.SoVRMLViewpoint_fieldOfView_set)
    description = _swig_property(_coin.SoVRMLViewpoint_description_get, _coin.SoVRMLViewpoint_description_set)
    jump = _swig_property(_coin.SoVRMLViewpoint_jump_get, _coin.SoVRMLViewpoint_jump_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLViewpoint self, SoGLRenderAction action)"""
        return _coin.SoVRMLViewpoint_GLRender(self, action)

SoVRMLViewpoint_swigregister = _coin.SoVRMLViewpoint_swigregister
SoVRMLViewpoint_swigregister(SoVRMLViewpoint)

def SoVRMLViewpoint_getClassTypeId() -> "SoType":
    """SoVRMLViewpoint_getClassTypeId() -> SoType"""
    return _coin.SoVRMLViewpoint_getClassTypeId()

def SoVRMLViewpoint_initClass() -> "void":
    """SoVRMLViewpoint_initClass()"""
    return _coin.SoVRMLViewpoint_initClass()

class SoVRMLVisibilitySensor(SoNode):
    """Proxy of C++ SoVRMLVisibilitySensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLVisibilitySensor_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLVisibilitySensor self) -> SoType"""
        return _coin.SoVRMLVisibilitySensor_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLVisibilitySensor_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLVisibilitySensor self) -> SoVRMLVisibilitySensor"""
        this = _coin.new_SoVRMLVisibilitySensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    center = _swig_property(_coin.SoVRMLVisibilitySensor_center_get, _coin.SoVRMLVisibilitySensor_center_set)
    size = _swig_property(_coin.SoVRMLVisibilitySensor_size_get, _coin.SoVRMLVisibilitySensor_size_set)
    enabled = _swig_property(_coin.SoVRMLVisibilitySensor_enabled_get, _coin.SoVRMLVisibilitySensor_enabled_set)
    enterTime = _swig_property(_coin.SoVRMLVisibilitySensor_enterTime_get, _coin.SoVRMLVisibilitySensor_enterTime_set)
    exitTime = _swig_property(_coin.SoVRMLVisibilitySensor_exitTime_get, _coin.SoVRMLVisibilitySensor_exitTime_set)
    isActive = _swig_property(_coin.SoVRMLVisibilitySensor_isActive_get, _coin.SoVRMLVisibilitySensor_isActive_set)

    def GLRender(self, action: 'SoGLRenderAction') -> "void":
        """GLRender(SoVRMLVisibilitySensor self, SoGLRenderAction action)"""
        return _coin.SoVRMLVisibilitySensor_GLRender(self, action)

SoVRMLVisibilitySensor_swigregister = _coin.SoVRMLVisibilitySensor_swigregister
SoVRMLVisibilitySensor_swigregister(SoVRMLVisibilitySensor)

def SoVRMLVisibilitySensor_getClassTypeId() -> "SoType":
    """SoVRMLVisibilitySensor_getClassTypeId() -> SoType"""
    return _coin.SoVRMLVisibilitySensor_getClassTypeId()

def SoVRMLVisibilitySensor_initClass() -> "void":
    """SoVRMLVisibilitySensor_initClass()"""
    return _coin.SoVRMLVisibilitySensor_initClass()

class SoVRMLWorldInfo(SoNode):
    """Proxy of C++ SoVRMLWorldInfo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoVRMLWorldInfo_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoVRMLWorldInfo self) -> SoType"""
        return _coin.SoVRMLWorldInfo_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoVRMLWorldInfo_initClass()

    initClass = staticmethod(initClass)

    def __init__(self):
        """__init__(SoVRMLWorldInfo self) -> SoVRMLWorldInfo"""
        this = _coin.new_SoVRMLWorldInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    title = _swig_property(_coin.SoVRMLWorldInfo_title_get, _coin.SoVRMLWorldInfo_title_set)
    info = _swig_property(_coin.SoVRMLWorldInfo_info_get, _coin.SoVRMLWorldInfo_info_set)
SoVRMLWorldInfo_swigregister = _coin.SoVRMLWorldInfo_swigregister
SoVRMLWorldInfo_swigregister(SoVRMLWorldInfo)

def SoVRMLWorldInfo_getClassTypeId() -> "SoType":
    """SoVRMLWorldInfo_getClassTypeId() -> SoType"""
    return _coin.SoVRMLWorldInfo_getClassTypeId()

def SoVRMLWorldInfo_initClass() -> "void":
    """SoVRMLWorldInfo_initClass()"""
    return _coin.SoVRMLWorldInfo_initClass()

class SoEventManager(object):
    """Proxy of C++ SoEventManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(SoEventManager self) -> SoEventManager"""
        this = _coin.new_SoEventManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoEventManager
    __del__ = lambda self: None
    NO_NAVIGATION = _coin.SoEventManager_NO_NAVIGATION
    JUST_NAVIGATION = _coin.SoEventManager_JUST_NAVIGATION
    MIXED_NAVIGATION = _coin.SoEventManager_MIXED_NAVIGATION

    def setSceneGraph(self, sceneroot: 'SoNode') -> "void":
        """setSceneGraph(SoEventManager self, SoNode sceneroot)"""
        return _coin.SoEventManager_setSceneGraph(self, sceneroot)


    def getSceneGraph(self) -> "SoNode *":
        """getSceneGraph(SoEventManager self) -> SoNode"""
        return _coin.SoEventManager_getSceneGraph(self)


    def setCamera(self, camera: 'SoCamera') -> "void":
        """setCamera(SoEventManager self, SoCamera camera)"""
        return _coin.SoEventManager_setCamera(self, camera)


    def getCamera(self) -> "SoCamera *":
        """getCamera(SoEventManager self) -> SoCamera"""
        return _coin.SoEventManager_getCamera(self)


    def processEvent(self, event: 'SoEvent') -> "SbBool":
        """processEvent(SoEventManager self, SoEvent event) -> SbBool"""
        return _coin.SoEventManager_processEvent(self, event)


    def setNavigationState(self, state: 'SoEventManager::NavigationState') -> "void":
        """setNavigationState(SoEventManager self, SoEventManager::NavigationState state)"""
        return _coin.SoEventManager_setNavigationState(self, state)


    def getNavigationState(self) -> "SoEventManager::NavigationState":
        """getNavigationState(SoEventManager self) -> SoEventManager::NavigationState"""
        return _coin.SoEventManager_getNavigationState(self)


    def getNumSoScXMLStateMachines(self) -> "int":
        """getNumSoScXMLStateMachines(SoEventManager self) -> int"""
        return _coin.SoEventManager_getNumSoScXMLStateMachines(self)


    def getSoScXMLStateMachine(self, idx: 'int') -> "SoScXMLStateMachine *":
        """getSoScXMLStateMachine(SoEventManager self, int idx) -> SoScXMLStateMachine"""
        return _coin.SoEventManager_getSoScXMLStateMachine(self, idx)


    def addSoScXMLStateMachine(self, sm: 'SoScXMLStateMachine') -> "void":
        """addSoScXMLStateMachine(SoEventManager self, SoScXMLStateMachine sm)"""
        return _coin.SoEventManager_addSoScXMLStateMachine(self, sm)


    def removeSoScXMLStateMachine(self, sm: 'SoScXMLStateMachine') -> "void":
        """removeSoScXMLStateMachine(SoEventManager self, SoScXMLStateMachine sm)"""
        return _coin.SoEventManager_removeSoScXMLStateMachine(self, sm)


    def setSize(self, newsize: 'SbVec2s') -> "void":
        """setSize(SoEventManager self, SbVec2s newsize)"""
        return _coin.SoEventManager_setSize(self, newsize)


    def setOrigin(self, newOrigin: 'SbVec2s') -> "void":
        """setOrigin(SoEventManager self, SbVec2s newOrigin)"""
        return _coin.SoEventManager_setOrigin(self, newOrigin)


    def setViewportRegion(self, newregion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoEventManager self, SbViewportRegion newregion)"""
        return _coin.SoEventManager_setViewportRegion(self, newregion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoEventManager self) -> SbViewportRegion"""
        return _coin.SoEventManager_getViewportRegion(self)


    def setHandleEventAction(self, hea: 'SoHandleEventAction') -> "void":
        """setHandleEventAction(SoEventManager self, SoHandleEventAction hea)"""
        return _coin.SoEventManager_setHandleEventAction(self, hea)


    def getHandleEventAction(self) -> "SoHandleEventAction *":
        """getHandleEventAction(SoEventManager self) -> SoHandleEventAction"""
        return _coin.SoEventManager_getHandleEventAction(self)

SoEventManager_swigregister = _coin.SoEventManager_swigregister
SoEventManager_swigregister(SoEventManager)

class SoRenderManager(object):
    """Proxy of C++ SoRenderManager class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    AS_IS = _coin.SoRenderManager_AS_IS
    WIREFRAME = _coin.SoRenderManager_WIREFRAME
    POINTS = _coin.SoRenderManager_POINTS
    WIREFRAME_OVERLAY = _coin.SoRenderManager_WIREFRAME_OVERLAY
    HIDDEN_LINE = _coin.SoRenderManager_HIDDEN_LINE
    BOUNDING_BOX = _coin.SoRenderManager_BOUNDING_BOX
    MONO = _coin.SoRenderManager_MONO
    ANAGLYPH = _coin.SoRenderManager_ANAGLYPH
    SEPARATE_OUTPUT = _coin.SoRenderManager_SEPARATE_OUTPUT
    QUAD_BUFFER = _coin.SoRenderManager_QUAD_BUFFER
    INTERLEAVED_ROWS = _coin.SoRenderManager_INTERLEAVED_ROWS
    INTERLEAVED_COLUMNS = _coin.SoRenderManager_INTERLEAVED_COLUMNS
    BUFFER_SINGLE = _coin.SoRenderManager_BUFFER_SINGLE
    BUFFER_DOUBLE = _coin.SoRenderManager_BUFFER_DOUBLE
    NO_AUTO_CLIPPING = _coin.SoRenderManager_NO_AUTO_CLIPPING
    FIXED_NEAR_PLANE = _coin.SoRenderManager_FIXED_NEAR_PLANE
    VARIABLE_NEAR_PLANE = _coin.SoRenderManager_VARIABLE_NEAR_PLANE

    def __init__(self):
        """__init__(SoRenderManager self) -> SoRenderManager"""
        this = _coin.new_SoRenderManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoRenderManager
    __del__ = lambda self: None

    def render(self, *args) -> "void":
        """
        render(SoRenderManager self, SbBool const clearwindow=1, SbBool const clearzbuffer=1)
        render(SoRenderManager self, SbBool const clearwindow=1)
        render(SoRenderManager self)
        render(SoRenderManager self, SoGLRenderAction action, SbBool const initmatrices=1, SbBool const clearwindow=1, SbBool const clearzbuffer=1)
        render(SoRenderManager self, SoGLRenderAction action, SbBool const initmatrices=1, SbBool const clearwindow=1)
        render(SoRenderManager self, SoGLRenderAction action, SbBool const initmatrices=1)
        render(SoRenderManager self, SoGLRenderAction action)
        """
        return _coin.SoRenderManager_render(self, *args)


    def addSuperimposition(self, *args) -> "SoRenderManager::Superimposition *":
        """
        addSuperimposition(SoRenderManager self, SoNode scene, uint32_t flags) -> SoRenderManager::Superimposition
        addSuperimposition(SoRenderManager self, SoNode scene) -> SoRenderManager::Superimposition *
        """
        return _coin.SoRenderManager_addSuperimposition(self, *args)


    def removeSuperimposition(self, s: 'SoRenderManager::Superimposition *') -> "void":
        """removeSuperimposition(SoRenderManager self, SoRenderManager::Superimposition * s)"""
        return _coin.SoRenderManager_removeSuperimposition(self, s)


    def setSceneGraph(self, sceneroot: 'SoNode') -> "void":
        """setSceneGraph(SoRenderManager self, SoNode sceneroot)"""
        return _coin.SoRenderManager_setSceneGraph(self, sceneroot)


    def getSceneGraph(self) -> "SoNode *":
        """getSceneGraph(SoRenderManager self) -> SoNode"""
        return _coin.SoRenderManager_getSceneGraph(self)


    def setCamera(self, camera: 'SoCamera') -> "void":
        """setCamera(SoRenderManager self, SoCamera camera)"""
        return _coin.SoRenderManager_setCamera(self, camera)


    def getCamera(self) -> "SoCamera *":
        """getCamera(SoRenderManager self) -> SoCamera"""
        return _coin.SoRenderManager_getCamera(self)


    def setAutoClipping(self, autoclipping: 'SoRenderManager::AutoClippingStrategy') -> "void":
        """setAutoClipping(SoRenderManager self, SoRenderManager::AutoClippingStrategy autoclipping)"""
        return _coin.SoRenderManager_setAutoClipping(self, autoclipping)


    def getAutoClipping(self) -> "SoRenderManager::AutoClippingStrategy":
        """getAutoClipping(SoRenderManager self) -> SoRenderManager::AutoClippingStrategy"""
        return _coin.SoRenderManager_getAutoClipping(self)


    def setNearPlaneValue(self, value: 'float') -> "void":
        """setNearPlaneValue(SoRenderManager self, float value)"""
        return _coin.SoRenderManager_setNearPlaneValue(self, value)


    def getNearPlaneValue(self) -> "float":
        """getNearPlaneValue(SoRenderManager self) -> float"""
        return _coin.SoRenderManager_getNearPlaneValue(self)


    def setTexturesEnabled(self, onoff: 'SbBool const') -> "void":
        """setTexturesEnabled(SoRenderManager self, SbBool const onoff)"""
        return _coin.SoRenderManager_setTexturesEnabled(self, onoff)


    def isTexturesEnabled(self) -> "SbBool":
        """isTexturesEnabled(SoRenderManager self) -> SbBool"""
        return _coin.SoRenderManager_isTexturesEnabled(self)


    def setDoubleBuffer(self, enable: 'SbBool const') -> "void":
        """setDoubleBuffer(SoRenderManager self, SbBool const enable)"""
        return _coin.SoRenderManager_setDoubleBuffer(self, enable)


    def isDoubleBuffer(self) -> "SbBool":
        """isDoubleBuffer(SoRenderManager self) -> SbBool"""
        return _coin.SoRenderManager_isDoubleBuffer(self)


    def setRenderMode(self, mode: 'SoRenderManager::RenderMode const') -> "void":
        """setRenderMode(SoRenderManager self, SoRenderManager::RenderMode const mode)"""
        return _coin.SoRenderManager_setRenderMode(self, mode)


    def getRenderMode(self) -> "SoRenderManager::RenderMode":
        """getRenderMode(SoRenderManager self) -> SoRenderManager::RenderMode"""
        return _coin.SoRenderManager_getRenderMode(self)


    def setStereoMode(self, mode: 'SoRenderManager::StereoMode const') -> "void":
        """setStereoMode(SoRenderManager self, SoRenderManager::StereoMode const mode)"""
        return _coin.SoRenderManager_setStereoMode(self, mode)


    def getStereoMode(self) -> "SoRenderManager::StereoMode":
        """getStereoMode(SoRenderManager self) -> SoRenderManager::StereoMode"""
        return _coin.SoRenderManager_getStereoMode(self)


    def setStereoOffset(self, offset: 'float const') -> "void":
        """setStereoOffset(SoRenderManager self, float const offset)"""
        return _coin.SoRenderManager_setStereoOffset(self, offset)


    def getStereoOffset(self) -> "float":
        """getStereoOffset(SoRenderManager self) -> float"""
        return _coin.SoRenderManager_getStereoOffset(self)


    def isAutoRedraw(self) -> "SbBool":
        """isAutoRedraw(SoRenderManager self) -> SbBool"""
        return _coin.SoRenderManager_isAutoRedraw(self)


    def setRedrawPriority(self, priority: 'uint32_t const') -> "void":
        """setRedrawPriority(SoRenderManager self, uint32_t const priority)"""
        return _coin.SoRenderManager_setRedrawPriority(self, priority)


    def getRedrawPriority(self) -> "uint32_t":
        """getRedrawPriority(SoRenderManager self) -> uint32_t"""
        return _coin.SoRenderManager_getRedrawPriority(self)


    def scheduleRedraw(self) -> "void":
        """scheduleRedraw(SoRenderManager self)"""
        return _coin.SoRenderManager_scheduleRedraw(self)


    def setWindowSize(self, newsize: 'SbVec2s') -> "void":
        """setWindowSize(SoRenderManager self, SbVec2s newsize)"""
        return _coin.SoRenderManager_setWindowSize(self, newsize)


    def getWindowSize(self) -> "SbVec2s const &":
        """getWindowSize(SoRenderManager self) -> SbVec2s"""
        return _coin.SoRenderManager_getWindowSize(self)


    def setSize(self, newsize: 'SbVec2s') -> "void":
        """setSize(SoRenderManager self, SbVec2s newsize)"""
        return _coin.SoRenderManager_setSize(self, newsize)


    def getSize(self) -> "SbVec2s const &":
        """getSize(SoRenderManager self) -> SbVec2s"""
        return _coin.SoRenderManager_getSize(self)


    def setOrigin(self, newOrigin: 'SbVec2s') -> "void":
        """setOrigin(SoRenderManager self, SbVec2s newOrigin)"""
        return _coin.SoRenderManager_setOrigin(self, newOrigin)


    def getOrigin(self) -> "SbVec2s const &":
        """getOrigin(SoRenderManager self) -> SbVec2s"""
        return _coin.SoRenderManager_getOrigin(self)


    def setViewportRegion(self, newRegion: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoRenderManager self, SbViewportRegion newRegion)"""
        return _coin.SoRenderManager_setViewportRegion(self, newRegion)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoRenderManager self) -> SbViewportRegion"""
        return _coin.SoRenderManager_getViewportRegion(self)


    def setBackgroundColor(self, color: 'SbColor4f') -> "void":
        """setBackgroundColor(SoRenderManager self, SbColor4f color)"""
        return _coin.SoRenderManager_setBackgroundColor(self, color)


    def getBackgroundColor(self) -> "SbColor4f const &":
        """getBackgroundColor(SoRenderManager self) -> SbColor4f"""
        return _coin.SoRenderManager_getBackgroundColor(self)


    def setOverlayColor(self, color: 'SbColor4f') -> "void":
        """setOverlayColor(SoRenderManager self, SbColor4f color)"""
        return _coin.SoRenderManager_setOverlayColor(self, color)


    def getOverlayColor(self) -> "SbColor4f":
        """getOverlayColor(SoRenderManager self) -> SbColor4f"""
        return _coin.SoRenderManager_getOverlayColor(self)


    def setBackgroundIndex(self, index: 'int const') -> "void":
        """setBackgroundIndex(SoRenderManager self, int const index)"""
        return _coin.SoRenderManager_setBackgroundIndex(self, index)


    def getBackgroundIndex(self) -> "int":
        """getBackgroundIndex(SoRenderManager self) -> int"""
        return _coin.SoRenderManager_getBackgroundIndex(self)


    def setRGBMode(self, onOrOff: 'SbBool const') -> "void":
        """setRGBMode(SoRenderManager self, SbBool const onOrOff)"""
        return _coin.SoRenderManager_setRGBMode(self, onOrOff)


    def isRGBMode(self) -> "SbBool":
        """isRGBMode(SoRenderManager self) -> SbBool"""
        return _coin.SoRenderManager_isRGBMode(self)


    def activate(self) -> "void":
        """activate(SoRenderManager self)"""
        return _coin.SoRenderManager_activate(self)


    def deactivate(self) -> "void":
        """deactivate(SoRenderManager self)"""
        return _coin.SoRenderManager_deactivate(self)


    def setAntialiasing(self, smoothing: 'SbBool const', numPasses: 'int const') -> "void":
        """setAntialiasing(SoRenderManager self, SbBool const smoothing, int const numPasses)"""
        return _coin.SoRenderManager_setAntialiasing(self, smoothing, numPasses)


    def getAntialiasing(self, smoothing: 'SbBool &', numPasses: 'int &') -> "void":
        """getAntialiasing(SoRenderManager self, SbBool & smoothing, int & numPasses)"""
        return _coin.SoRenderManager_getAntialiasing(self, smoothing, numPasses)


    def setGLRenderAction(self, action: 'SoGLRenderAction') -> "void":
        """setGLRenderAction(SoRenderManager self, SoGLRenderAction action)"""
        return _coin.SoRenderManager_setGLRenderAction(self, action)


    def getGLRenderAction(self) -> "SoGLRenderAction *":
        """getGLRenderAction(SoRenderManager self) -> SoGLRenderAction"""
        return _coin.SoRenderManager_getGLRenderAction(self)


    def setAudioRenderAction(self, action: 'SoAudioRenderAction') -> "void":
        """setAudioRenderAction(SoRenderManager self, SoAudioRenderAction action)"""
        return _coin.SoRenderManager_setAudioRenderAction(self, action)


    def getAudioRenderAction(self) -> "SoAudioRenderAction *":
        """getAudioRenderAction(SoRenderManager self) -> SoAudioRenderAction"""
        return _coin.SoRenderManager_getAudioRenderAction(self)


    def enableRealTimeUpdate(flag: 'SbBool const') -> "void":
        """enableRealTimeUpdate(SbBool const flag)"""
        return _coin.SoRenderManager_enableRealTimeUpdate(flag)

    enableRealTimeUpdate = staticmethod(enableRealTimeUpdate)

    def isRealTimeUpdateEnabled() -> "SbBool":
        """isRealTimeUpdateEnabled() -> SbBool"""
        return _coin.SoRenderManager_isRealTimeUpdateEnabled()

    isRealTimeUpdateEnabled = staticmethod(isRealTimeUpdateEnabled)

    def getDefaultRedrawPriority() -> "uint32_t":
        """getDefaultRedrawPriority() -> uint32_t"""
        return _coin.SoRenderManager_getDefaultRedrawPriority()

    getDefaultRedrawPriority = staticmethod(getDefaultRedrawPriority)

    def reinitialize(self) -> "void":
        """reinitialize(SoRenderManager self)"""
        return _coin.SoRenderManager_reinitialize(self)


    def setRenderCallback(self, *args) -> "void":
        """
        setRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * f, void *const userData=None)
        setRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * f)
        setRenderCallback(SoRenderManager self, PyObject * pyfunc, PyObject * userData=None)
        setRenderCallback(SoRenderManager self, PyObject * pyfunc)
        """
        return _coin.SoRenderManager_setRenderCallback(self, *args)


    def addPreRenderCallback(self, *args) -> "void":
        """
        addPreRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * cb, void * data)
        addPreRenderCallback(SoRenderManager self, PyObject * pyfunc, PyObject * data)
        """
        return _coin.SoRenderManager_addPreRenderCallback(self, *args)


    def removePreRenderCallback(self, *args) -> "void":
        """
        removePreRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * cb, void * data)
        removePreRenderCallback(SoRenderManager self, PyObject * pyfunc, PyObject * data)
        """
        return _coin.SoRenderManager_removePreRenderCallback(self, *args)


    def addPostRenderCallback(self, *args) -> "void":
        """
        addPostRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * cb, void * data)
        addPostRenderCallback(SoRenderManager self, PyObject * pyfunc, PyObject * data)
        """
        return _coin.SoRenderManager_addPostRenderCallback(self, *args)


    def removePostRenderCallback(self, *args) -> "void":
        """
        removePostRenderCallback(SoRenderManager self, SoRenderManagerRenderCB * cb, void * data)
        removePostRenderCallback(SoRenderManager self, PyObject * pyfunc, PyObject * data)
        """
        return _coin.SoRenderManager_removePostRenderCallback(self, *args)

SoRenderManager_swigregister = _coin.SoRenderManager_swigregister
SoRenderManager_swigregister(SoRenderManager)

def SoRenderManager_enableRealTimeUpdate(flag: 'SbBool const') -> "void":
    """SoRenderManager_enableRealTimeUpdate(SbBool const flag)"""
    return _coin.SoRenderManager_enableRealTimeUpdate(flag)

def SoRenderManager_isRealTimeUpdateEnabled() -> "SbBool":
    """SoRenderManager_isRealTimeUpdateEnabled() -> SbBool"""
    return _coin.SoRenderManager_isRealTimeUpdateEnabled()

def SoRenderManager_getDefaultRedrawPriority() -> "uint32_t":
    """SoRenderManager_getDefaultRedrawPriority() -> uint32_t"""
    return _coin.SoRenderManager_getDefaultRedrawPriority()

class ScXMLObject(object):
    """Proxy of C++ ScXMLObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLObject_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLObject self) -> SoType"""
        return _coin.ScXMLObject_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLObject_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLObject_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLObject
    __del__ = lambda self: None

    def isOfType(self, type: 'SoType') -> "SbBool":
        """isOfType(ScXMLObject self, SoType type) -> SbBool"""
        return _coin.ScXMLObject_isOfType(self, type)

ScXMLObject_swigregister = _coin.ScXMLObject_swigregister
ScXMLObject_swigregister(ScXMLObject)

def ScXMLObject_getClassTypeId() -> "SoType":
    """ScXMLObject_getClassTypeId() -> SoType"""
    return _coin.ScXMLObject_getClassTypeId()

def ScXMLObject_initClass() -> "void":
    """ScXMLObject_initClass()"""
    return _coin.ScXMLObject_initClass()

def ScXMLObject_cleanClass() -> "void":
    """ScXMLObject_cleanClass()"""
    return _coin.ScXMLObject_cleanClass()

class ScXMLEventTarget(ScXMLObject):
    """Proxy of C++ ScXMLEventTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLEventTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLEventTarget self) -> SoType"""
        return _coin.ScXMLEventTarget_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLEventTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLEventTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLEventTarget
    __del__ = lambda self: None

    def setEventTargetType(self, targettype: 'char const *') -> "void":
        """setEventTargetType(ScXMLEventTarget self, char const * targettype)"""
        return _coin.ScXMLEventTarget_setEventTargetType(self, targettype)


    def getEventTargetType(self) -> "char const *":
        """getEventTargetType(ScXMLEventTarget self) -> char const *"""
        return _coin.ScXMLEventTarget_getEventTargetType(self)


    def setEventTargetName(self, targetname: 'char const *') -> "void":
        """setEventTargetName(ScXMLEventTarget self, char const * targetname)"""
        return _coin.ScXMLEventTarget_setEventTargetName(self, targetname)


    def getEventTargetName(self) -> "char const *":
        """getEventTargetName(ScXMLEventTarget self) -> char const *"""
        return _coin.ScXMLEventTarget_getEventTargetName(self)


    def getCurrentEvent(self) -> "ScXMLEvent const *":
        """getCurrentEvent(ScXMLEventTarget self) -> ScXMLEvent"""
        return _coin.ScXMLEventTarget_getCurrentEvent(self)


    def queueEvent(self, *args) -> "void":
        """
        queueEvent(ScXMLEventTarget self, ScXMLEvent event)
        queueEvent(ScXMLEventTarget self, SbName eventid)
        """
        return _coin.ScXMLEventTarget_queueEvent(self, *args)


    def processEventQueue(self) -> "SbBool":
        """processEventQueue(ScXMLEventTarget self) -> SbBool"""
        return _coin.ScXMLEventTarget_processEventQueue(self)


    def sendExternalEvent(self, sendelt: 'ScXMLSendElt') -> "SbBool":
        """sendExternalEvent(ScXMLEventTarget self, ScXMLSendElt sendelt) -> SbBool"""
        return _coin.ScXMLEventTarget_sendExternalEvent(self, sendelt)


    def sendInternalEvent(self, sendelt: 'ScXMLEventElt') -> "SbBool":
        """sendInternalEvent(ScXMLEventTarget self, ScXMLEventElt sendelt) -> SbBool"""
        return _coin.ScXMLEventTarget_sendInternalEvent(self, sendelt)


    def queueInternalEvent(self, *args) -> "void":
        """
        queueInternalEvent(ScXMLEventTarget self, ScXMLEvent event)
        queueInternalEvent(ScXMLEventTarget self, SbName eventid)
        """
        return _coin.ScXMLEventTarget_queueInternalEvent(self, *args)

ScXMLEventTarget_swigregister = _coin.ScXMLEventTarget_swigregister
ScXMLEventTarget_swigregister(ScXMLEventTarget)

def ScXMLEventTarget_getClassTypeId() -> "SoType":
    """ScXMLEventTarget_getClassTypeId() -> SoType"""
    return _coin.ScXMLEventTarget_getClassTypeId()

def ScXMLEventTarget_initClass() -> "void":
    """ScXMLEventTarget_initClass()"""
    return _coin.ScXMLEventTarget_initClass()

def ScXMLEventTarget_cleanClass() -> "void":
    """ScXMLEventTarget_cleanClass()"""
    return _coin.ScXMLEventTarget_cleanClass()

COIN_NAVIGATION_EVENT_PREFIX = _coin.COIN_NAVIGATION_EVENT_PREFIX
class SoScXMLNavigationTarget(ScXMLEventTarget):
    """Proxy of C++ SoScXMLNavigationTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLNavigationTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLNavigationTarget self) -> SoType"""
        return _coin.SoScXMLNavigationTarget_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLNavigationTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLNavigationTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)
SoScXMLNavigationTarget_swigregister = _coin.SoScXMLNavigationTarget_swigregister
SoScXMLNavigationTarget_swigregister(SoScXMLNavigationTarget)

def SoScXMLNavigationTarget_getClassTypeId() -> "SoType":
    """SoScXMLNavigationTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLNavigationTarget_getClassTypeId()

def SoScXMLNavigationTarget_initClass() -> "void":
    """SoScXMLNavigationTarget_initClass()"""
    return _coin.SoScXMLNavigationTarget_initClass()

def SoScXMLNavigationTarget_cleanClass() -> "void":
    """SoScXMLNavigationTarget_cleanClass()"""
    return _coin.SoScXMLNavigationTarget_cleanClass()

class SoScXMLDollyTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLDollyTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLDollyTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLDollyTarget self) -> SoType"""
        return _coin.SoScXMLDollyTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLDollyTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLDollyTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLDollyTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLDollyTarget *":
        """constructSingleton() -> SoScXMLDollyTarget"""
        return _coin.SoScXMLDollyTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLDollyTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLDollyTarget *":
        """singleton() -> SoScXMLDollyTarget"""
        return _coin.SoScXMLDollyTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLDollyTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLDollyTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLDollyTarget_END()

    END = staticmethod(END)

    def JUMP() -> "SbName const &":
        """JUMP() -> SbName"""
        return _coin.SoScXMLDollyTarget_JUMP()

    JUMP = staticmethod(JUMP)

    def STEP_IN() -> "SbName const &":
        """STEP_IN() -> SbName"""
        return _coin.SoScXMLDollyTarget_STEP_IN()

    STEP_IN = staticmethod(STEP_IN)

    def STEP_OUT() -> "SbName const &":
        """STEP_OUT() -> SbName"""
        return _coin.SoScXMLDollyTarget_STEP_OUT()

    STEP_OUT = staticmethod(STEP_OUT)

    def dolly(camera: 'SoCamera', diff: 'float') -> "void":
        """dolly(SoCamera camera, float diff)"""
        return _coin.SoScXMLDollyTarget_dolly(camera, diff)

    dolly = staticmethod(dolly)

    def jump(camera: 'SoCamera', focaldistance: 'float') -> "void":
        """jump(SoCamera camera, float focaldistance)"""
        return _coin.SoScXMLDollyTarget_jump(camera, focaldistance)

    jump = staticmethod(jump)

    def step(camera: 'SoCamera', exponential: 'SbBool', diff: 'float', min: 'float'=0.0, max: 'float'=0.0) -> "void":
        """
        step(SoCamera camera, SbBool exponential, float diff, float min=0.0, float max=0.0)
        step(SoCamera camera, SbBool exponential, float diff, float min=0.0)
        step(SoCamera camera, SbBool exponential, float diff)
        """
        return _coin.SoScXMLDollyTarget_step(camera, exponential, diff, min, max)

    step = staticmethod(step)
SoScXMLDollyTarget_swigregister = _coin.SoScXMLDollyTarget_swigregister
SoScXMLDollyTarget_swigregister(SoScXMLDollyTarget)

def SoScXMLDollyTarget_getClassTypeId() -> "SoType":
    """SoScXMLDollyTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLDollyTarget_getClassTypeId()

def SoScXMLDollyTarget_createInstance() -> "void *":
    """SoScXMLDollyTarget_createInstance() -> void *"""
    return _coin.SoScXMLDollyTarget_createInstance()

def SoScXMLDollyTarget_initClass() -> "void":
    """SoScXMLDollyTarget_initClass()"""
    return _coin.SoScXMLDollyTarget_initClass()

def SoScXMLDollyTarget_cleanClass() -> "void":
    """SoScXMLDollyTarget_cleanClass()"""
    return _coin.SoScXMLDollyTarget_cleanClass()

def SoScXMLDollyTarget_constructSingleton() -> "SoScXMLDollyTarget *":
    """SoScXMLDollyTarget_constructSingleton() -> SoScXMLDollyTarget"""
    return _coin.SoScXMLDollyTarget_constructSingleton()

def SoScXMLDollyTarget_destructSingleton() -> "void":
    """SoScXMLDollyTarget_destructSingleton()"""
    return _coin.SoScXMLDollyTarget_destructSingleton()

def SoScXMLDollyTarget_singleton() -> "SoScXMLDollyTarget *":
    """SoScXMLDollyTarget_singleton() -> SoScXMLDollyTarget"""
    return _coin.SoScXMLDollyTarget_singleton()

def SoScXMLDollyTarget_BEGIN() -> "SbName const &":
    """SoScXMLDollyTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLDollyTarget_BEGIN()

def SoScXMLDollyTarget_UPDATE() -> "SbName const &":
    """SoScXMLDollyTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLDollyTarget_UPDATE()

def SoScXMLDollyTarget_END() -> "SbName const &":
    """SoScXMLDollyTarget_END() -> SbName"""
    return _coin.SoScXMLDollyTarget_END()

def SoScXMLDollyTarget_JUMP() -> "SbName const &":
    """SoScXMLDollyTarget_JUMP() -> SbName"""
    return _coin.SoScXMLDollyTarget_JUMP()

def SoScXMLDollyTarget_STEP_IN() -> "SbName const &":
    """SoScXMLDollyTarget_STEP_IN() -> SbName"""
    return _coin.SoScXMLDollyTarget_STEP_IN()

def SoScXMLDollyTarget_STEP_OUT() -> "SbName const &":
    """SoScXMLDollyTarget_STEP_OUT() -> SbName"""
    return _coin.SoScXMLDollyTarget_STEP_OUT()

def SoScXMLDollyTarget_dolly(camera: 'SoCamera', diff: 'float') -> "void":
    """SoScXMLDollyTarget_dolly(SoCamera camera, float diff)"""
    return _coin.SoScXMLDollyTarget_dolly(camera, diff)

def SoScXMLDollyTarget_jump(camera: 'SoCamera', focaldistance: 'float') -> "void":
    """SoScXMLDollyTarget_jump(SoCamera camera, float focaldistance)"""
    return _coin.SoScXMLDollyTarget_jump(camera, focaldistance)

def SoScXMLDollyTarget_step(camera: 'SoCamera', exponential: 'SbBool', diff: 'float', min: 'float'=0.0, max: 'float'=0.0) -> "void":
    """
    step(SoCamera camera, SbBool exponential, float diff, float min=0.0, float max=0.0)
    step(SoCamera camera, SbBool exponential, float diff, float min=0.0)
    SoScXMLDollyTarget_step(SoCamera camera, SbBool exponential, float diff)
    """
    return _coin.SoScXMLDollyTarget_step(camera, exponential, diff, min, max)

class SoScXMLFlightControlTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLFlightControlTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLFlightControlTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLFlightControlTarget self) -> SoType"""
        return _coin.SoScXMLFlightControlTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLFlightControlTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLFlightControlTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLFlightControlTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLFlightControlTarget *":
        """constructSingleton() -> SoScXMLFlightControlTarget"""
        return _coin.SoScXMLFlightControlTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLFlightControlTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLFlightControlTarget *":
        """singleton() -> SoScXMLFlightControlTarget"""
        return _coin.SoScXMLFlightControlTarget_singleton()

    singleton = staticmethod(singleton)

    def PITCH() -> "SbName const &":
        """PITCH() -> SbName"""
        return _coin.SoScXMLFlightControlTarget_PITCH()

    PITCH = staticmethod(PITCH)

    def YAW() -> "SbName const &":
        """YAW() -> SbName"""
        return _coin.SoScXMLFlightControlTarget_YAW()

    YAW = staticmethod(YAW)

    def ROLL() -> "SbName const &":
        """ROLL() -> SbName"""
        return _coin.SoScXMLFlightControlTarget_ROLL()

    ROLL = staticmethod(ROLL)

    def RESET_ROLL() -> "SbName const &":
        """RESET_ROLL() -> SbName"""
        return _coin.SoScXMLFlightControlTarget_RESET_ROLL()

    RESET_ROLL = staticmethod(RESET_ROLL)

    def pitch(camera: 'SoCamera', radians: 'float') -> "void":
        """pitch(SoCamera camera, float radians)"""
        return _coin.SoScXMLFlightControlTarget_pitch(camera, radians)

    pitch = staticmethod(pitch)

    def yaw(camera: 'SoCamera', radians: 'float') -> "void":
        """yaw(SoCamera camera, float radians)"""
        return _coin.SoScXMLFlightControlTarget_yaw(camera, radians)

    yaw = staticmethod(yaw)

    def roll(camera: 'SoCamera', radians: 'float') -> "void":
        """roll(SoCamera camera, float radians)"""
        return _coin.SoScXMLFlightControlTarget_roll(camera, radians)

    roll = staticmethod(roll)

    def resetRoll(camera: 'SoCamera', upvector: 'SbVec3f') -> "void":
        """resetRoll(SoCamera camera, SbVec3f upvector)"""
        return _coin.SoScXMLFlightControlTarget_resetRoll(camera, upvector)

    resetRoll = staticmethod(resetRoll)
SoScXMLFlightControlTarget_swigregister = _coin.SoScXMLFlightControlTarget_swigregister
SoScXMLFlightControlTarget_swigregister(SoScXMLFlightControlTarget)

def SoScXMLFlightControlTarget_getClassTypeId() -> "SoType":
    """SoScXMLFlightControlTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLFlightControlTarget_getClassTypeId()

def SoScXMLFlightControlTarget_createInstance() -> "void *":
    """SoScXMLFlightControlTarget_createInstance() -> void *"""
    return _coin.SoScXMLFlightControlTarget_createInstance()

def SoScXMLFlightControlTarget_initClass() -> "void":
    """SoScXMLFlightControlTarget_initClass()"""
    return _coin.SoScXMLFlightControlTarget_initClass()

def SoScXMLFlightControlTarget_cleanClass() -> "void":
    """SoScXMLFlightControlTarget_cleanClass()"""
    return _coin.SoScXMLFlightControlTarget_cleanClass()

def SoScXMLFlightControlTarget_constructSingleton() -> "SoScXMLFlightControlTarget *":
    """SoScXMLFlightControlTarget_constructSingleton() -> SoScXMLFlightControlTarget"""
    return _coin.SoScXMLFlightControlTarget_constructSingleton()

def SoScXMLFlightControlTarget_destructSingleton() -> "void":
    """SoScXMLFlightControlTarget_destructSingleton()"""
    return _coin.SoScXMLFlightControlTarget_destructSingleton()

def SoScXMLFlightControlTarget_singleton() -> "SoScXMLFlightControlTarget *":
    """SoScXMLFlightControlTarget_singleton() -> SoScXMLFlightControlTarget"""
    return _coin.SoScXMLFlightControlTarget_singleton()

def SoScXMLFlightControlTarget_PITCH() -> "SbName const &":
    """SoScXMLFlightControlTarget_PITCH() -> SbName"""
    return _coin.SoScXMLFlightControlTarget_PITCH()

def SoScXMLFlightControlTarget_YAW() -> "SbName const &":
    """SoScXMLFlightControlTarget_YAW() -> SbName"""
    return _coin.SoScXMLFlightControlTarget_YAW()

def SoScXMLFlightControlTarget_ROLL() -> "SbName const &":
    """SoScXMLFlightControlTarget_ROLL() -> SbName"""
    return _coin.SoScXMLFlightControlTarget_ROLL()

def SoScXMLFlightControlTarget_RESET_ROLL() -> "SbName const &":
    """SoScXMLFlightControlTarget_RESET_ROLL() -> SbName"""
    return _coin.SoScXMLFlightControlTarget_RESET_ROLL()

def SoScXMLFlightControlTarget_pitch(camera: 'SoCamera', radians: 'float') -> "void":
    """SoScXMLFlightControlTarget_pitch(SoCamera camera, float radians)"""
    return _coin.SoScXMLFlightControlTarget_pitch(camera, radians)

def SoScXMLFlightControlTarget_yaw(camera: 'SoCamera', radians: 'float') -> "void":
    """SoScXMLFlightControlTarget_yaw(SoCamera camera, float radians)"""
    return _coin.SoScXMLFlightControlTarget_yaw(camera, radians)

def SoScXMLFlightControlTarget_roll(camera: 'SoCamera', radians: 'float') -> "void":
    """SoScXMLFlightControlTarget_roll(SoCamera camera, float radians)"""
    return _coin.SoScXMLFlightControlTarget_roll(camera, radians)

def SoScXMLFlightControlTarget_resetRoll(camera: 'SoCamera', upvector: 'SbVec3f') -> "void":
    """SoScXMLFlightControlTarget_resetRoll(SoCamera camera, SbVec3f upvector)"""
    return _coin.SoScXMLFlightControlTarget_resetRoll(camera, upvector)

class SoScXMLMiscTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLMiscTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLMiscTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLMiscTarget self) -> SoType"""
        return _coin.SoScXMLMiscTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLMiscTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLMiscTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLMiscTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLMiscTarget *":
        """constructSingleton() -> SoScXMLMiscTarget"""
        return _coin.SoScXMLMiscTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLMiscTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLMiscTarget *":
        """singleton() -> SoScXMLMiscTarget"""
        return _coin.SoScXMLMiscTarget_singleton()

    singleton = staticmethod(singleton)

    def VIEW_ALL() -> "SbName const &":
        """VIEW_ALL() -> SbName"""
        return _coin.SoScXMLMiscTarget_VIEW_ALL()

    VIEW_ALL = staticmethod(VIEW_ALL)

    def REDRAW() -> "SbName const &":
        """REDRAW() -> SbName"""
        return _coin.SoScXMLMiscTarget_REDRAW()

    REDRAW = staticmethod(REDRAW)

    def POINT_AT() -> "SbName const &":
        """POINT_AT() -> SbName"""
        return _coin.SoScXMLMiscTarget_POINT_AT()

    POINT_AT = staticmethod(POINT_AT)

    def SET_FOCAL_DISTANCE() -> "SbName const &":
        """SET_FOCAL_DISTANCE() -> SbName"""
        return _coin.SoScXMLMiscTarget_SET_FOCAL_DISTANCE()

    SET_FOCAL_DISTANCE = staticmethod(SET_FOCAL_DISTANCE)

    def SET_CAMERA_POSITION() -> "SbName const &":
        """SET_CAMERA_POSITION() -> SbName"""
        return _coin.SoScXMLMiscTarget_SET_CAMERA_POSITION()

    SET_CAMERA_POSITION = staticmethod(SET_CAMERA_POSITION)
SoScXMLMiscTarget_swigregister = _coin.SoScXMLMiscTarget_swigregister
SoScXMLMiscTarget_swigregister(SoScXMLMiscTarget)

def SoScXMLMiscTarget_getClassTypeId() -> "SoType":
    """SoScXMLMiscTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLMiscTarget_getClassTypeId()

def SoScXMLMiscTarget_createInstance() -> "void *":
    """SoScXMLMiscTarget_createInstance() -> void *"""
    return _coin.SoScXMLMiscTarget_createInstance()

def SoScXMLMiscTarget_initClass() -> "void":
    """SoScXMLMiscTarget_initClass()"""
    return _coin.SoScXMLMiscTarget_initClass()

def SoScXMLMiscTarget_cleanClass() -> "void":
    """SoScXMLMiscTarget_cleanClass()"""
    return _coin.SoScXMLMiscTarget_cleanClass()

def SoScXMLMiscTarget_constructSingleton() -> "SoScXMLMiscTarget *":
    """SoScXMLMiscTarget_constructSingleton() -> SoScXMLMiscTarget"""
    return _coin.SoScXMLMiscTarget_constructSingleton()

def SoScXMLMiscTarget_destructSingleton() -> "void":
    """SoScXMLMiscTarget_destructSingleton()"""
    return _coin.SoScXMLMiscTarget_destructSingleton()

def SoScXMLMiscTarget_singleton() -> "SoScXMLMiscTarget *":
    """SoScXMLMiscTarget_singleton() -> SoScXMLMiscTarget"""
    return _coin.SoScXMLMiscTarget_singleton()

def SoScXMLMiscTarget_VIEW_ALL() -> "SbName const &":
    """SoScXMLMiscTarget_VIEW_ALL() -> SbName"""
    return _coin.SoScXMLMiscTarget_VIEW_ALL()

def SoScXMLMiscTarget_REDRAW() -> "SbName const &":
    """SoScXMLMiscTarget_REDRAW() -> SbName"""
    return _coin.SoScXMLMiscTarget_REDRAW()

def SoScXMLMiscTarget_POINT_AT() -> "SbName const &":
    """SoScXMLMiscTarget_POINT_AT() -> SbName"""
    return _coin.SoScXMLMiscTarget_POINT_AT()

def SoScXMLMiscTarget_SET_FOCAL_DISTANCE() -> "SbName const &":
    """SoScXMLMiscTarget_SET_FOCAL_DISTANCE() -> SbName"""
    return _coin.SoScXMLMiscTarget_SET_FOCAL_DISTANCE()

def SoScXMLMiscTarget_SET_CAMERA_POSITION() -> "SbName const &":
    """SoScXMLMiscTarget_SET_CAMERA_POSITION() -> SbName"""
    return _coin.SoScXMLMiscTarget_SET_CAMERA_POSITION()

class SoScXMLMotionTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLMotionTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLMotionTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLMotionTarget self) -> SoType"""
        return _coin.SoScXMLMotionTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLMotionTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLMotionTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLMotionTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLMotionTarget *":
        """constructSingleton() -> SoScXMLMotionTarget"""
        return _coin.SoScXMLMotionTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLMotionTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLMotionTarget *":
        """singleton() -> SoScXMLMotionTarget"""
        return _coin.SoScXMLMotionTarget_singleton()

    singleton = staticmethod(singleton)
SoScXMLMotionTarget_swigregister = _coin.SoScXMLMotionTarget_swigregister
SoScXMLMotionTarget_swigregister(SoScXMLMotionTarget)

def SoScXMLMotionTarget_getClassTypeId() -> "SoType":
    """SoScXMLMotionTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLMotionTarget_getClassTypeId()

def SoScXMLMotionTarget_createInstance() -> "void *":
    """SoScXMLMotionTarget_createInstance() -> void *"""
    return _coin.SoScXMLMotionTarget_createInstance()

def SoScXMLMotionTarget_initClass() -> "void":
    """SoScXMLMotionTarget_initClass()"""
    return _coin.SoScXMLMotionTarget_initClass()

def SoScXMLMotionTarget_cleanClass() -> "void":
    """SoScXMLMotionTarget_cleanClass()"""
    return _coin.SoScXMLMotionTarget_cleanClass()

def SoScXMLMotionTarget_constructSingleton() -> "SoScXMLMotionTarget *":
    """SoScXMLMotionTarget_constructSingleton() -> SoScXMLMotionTarget"""
    return _coin.SoScXMLMotionTarget_constructSingleton()

def SoScXMLMotionTarget_destructSingleton() -> "void":
    """SoScXMLMotionTarget_destructSingleton()"""
    return _coin.SoScXMLMotionTarget_destructSingleton()

def SoScXMLMotionTarget_singleton() -> "SoScXMLMotionTarget *":
    """SoScXMLMotionTarget_singleton() -> SoScXMLMotionTarget"""
    return _coin.SoScXMLMotionTarget_singleton()

SOSCXML_NAVIGATION_TARGETTYPE = _coin.SOSCXML_NAVIGATION_TARGETTYPE
class SoScXMLNavigation(object):
    """Proxy of C++ SoScXMLNavigation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.SoScXMLNavigation_initClasses()

    initClasses = staticmethod(initClasses)

    def cleanClasses() -> "void":
        """cleanClasses()"""
        return _coin.SoScXMLNavigation_cleanClasses()

    cleanClasses = staticmethod(cleanClasses)

    def syncLock() -> "void":
        """syncLock()"""
        return _coin.SoScXMLNavigation_syncLock()

    syncLock = staticmethod(syncLock)

    def syncUnlock() -> "void":
        """syncUnlock()"""
        return _coin.SoScXMLNavigation_syncUnlock()

    syncUnlock = staticmethod(syncUnlock)

    def __init__(self):
        """__init__(SoScXMLNavigation self) -> SoScXMLNavigation"""
        this = _coin.new_SoScXMLNavigation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoScXMLNavigation
    __del__ = lambda self: None
SoScXMLNavigation_swigregister = _coin.SoScXMLNavigation_swigregister
SoScXMLNavigation_swigregister(SoScXMLNavigation)

def SoScXMLNavigation_initClasses() -> "void":
    """SoScXMLNavigation_initClasses()"""
    return _coin.SoScXMLNavigation_initClasses()

def SoScXMLNavigation_cleanClasses() -> "void":
    """SoScXMLNavigation_cleanClasses()"""
    return _coin.SoScXMLNavigation_cleanClasses()

def SoScXMLNavigation_syncLock() -> "void":
    """SoScXMLNavigation_syncLock()"""
    return _coin.SoScXMLNavigation_syncLock()

def SoScXMLNavigation_syncUnlock() -> "void":
    """SoScXMLNavigation_syncUnlock()"""
    return _coin.SoScXMLNavigation_syncUnlock()

COIN_NAVIGATION_PAN_TARGET_EVENT_PREFIX = _coin.COIN_NAVIGATION_PAN_TARGET_EVENT_PREFIX
class SoScXMLPanTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLPanTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLPanTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLPanTarget self) -> SoType"""
        return _coin.SoScXMLPanTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLPanTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLPanTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLPanTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLPanTarget *":
        """constructSingleton() -> SoScXMLPanTarget"""
        return _coin.SoScXMLPanTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLPanTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLPanTarget *":
        """singleton() -> SoScXMLPanTarget"""
        return _coin.SoScXMLPanTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLPanTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLPanTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLPanTarget_END()

    END = staticmethod(END)

    def SET_FOCAL_POINT() -> "SbName const &":
        """SET_FOCAL_POINT() -> SbName"""
        return _coin.SoScXMLPanTarget_SET_FOCAL_POINT()

    SET_FOCAL_POINT = staticmethod(SET_FOCAL_POINT)

    def MOVE() -> "SbName const &":
        """MOVE() -> SbName"""
        return _coin.SoScXMLPanTarget_MOVE()

    MOVE = staticmethod(MOVE)

    def panCamera(camera: 'SoCamera', vpaspect: 'float', panplane: 'SbPlane', previous: 'SbVec2f', current: 'SbVec2f') -> "void":
        """panCamera(SoCamera camera, float vpaspect, SbPlane panplane, SbVec2f previous, SbVec2f current)"""
        return _coin.SoScXMLPanTarget_panCamera(camera, vpaspect, panplane, previous, current)

    panCamera = staticmethod(panCamera)

    def panSetFocalPoint(camera: 'SoCamera', worldspace: 'SbVec3f') -> "void":
        """panSetFocalPoint(SoCamera camera, SbVec3f worldspace)"""
        return _coin.SoScXMLPanTarget_panSetFocalPoint(camera, worldspace)

    panSetFocalPoint = staticmethod(panSetFocalPoint)

    def translateCamera(camera: 'SoCamera', translation: 'SbVec3f', cameraspace: 'SbBool'=0) -> "void":
        """
        translateCamera(SoCamera camera, SbVec3f translation, SbBool cameraspace=0)
        translateCamera(SoCamera camera, SbVec3f translation)
        """
        return _coin.SoScXMLPanTarget_translateCamera(camera, translation, cameraspace)

    translateCamera = staticmethod(translateCamera)
SoScXMLPanTarget_swigregister = _coin.SoScXMLPanTarget_swigregister
SoScXMLPanTarget_swigregister(SoScXMLPanTarget)

def SoScXMLPanTarget_getClassTypeId() -> "SoType":
    """SoScXMLPanTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLPanTarget_getClassTypeId()

def SoScXMLPanTarget_createInstance() -> "void *":
    """SoScXMLPanTarget_createInstance() -> void *"""
    return _coin.SoScXMLPanTarget_createInstance()

def SoScXMLPanTarget_initClass() -> "void":
    """SoScXMLPanTarget_initClass()"""
    return _coin.SoScXMLPanTarget_initClass()

def SoScXMLPanTarget_cleanClass() -> "void":
    """SoScXMLPanTarget_cleanClass()"""
    return _coin.SoScXMLPanTarget_cleanClass()

def SoScXMLPanTarget_constructSingleton() -> "SoScXMLPanTarget *":
    """SoScXMLPanTarget_constructSingleton() -> SoScXMLPanTarget"""
    return _coin.SoScXMLPanTarget_constructSingleton()

def SoScXMLPanTarget_destructSingleton() -> "void":
    """SoScXMLPanTarget_destructSingleton()"""
    return _coin.SoScXMLPanTarget_destructSingleton()

def SoScXMLPanTarget_singleton() -> "SoScXMLPanTarget *":
    """SoScXMLPanTarget_singleton() -> SoScXMLPanTarget"""
    return _coin.SoScXMLPanTarget_singleton()

def SoScXMLPanTarget_BEGIN() -> "SbName const &":
    """SoScXMLPanTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLPanTarget_BEGIN()

def SoScXMLPanTarget_UPDATE() -> "SbName const &":
    """SoScXMLPanTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLPanTarget_UPDATE()

def SoScXMLPanTarget_END() -> "SbName const &":
    """SoScXMLPanTarget_END() -> SbName"""
    return _coin.SoScXMLPanTarget_END()

def SoScXMLPanTarget_SET_FOCAL_POINT() -> "SbName const &":
    """SoScXMLPanTarget_SET_FOCAL_POINT() -> SbName"""
    return _coin.SoScXMLPanTarget_SET_FOCAL_POINT()

def SoScXMLPanTarget_MOVE() -> "SbName const &":
    """SoScXMLPanTarget_MOVE() -> SbName"""
    return _coin.SoScXMLPanTarget_MOVE()

def SoScXMLPanTarget_panCamera(camera: 'SoCamera', vpaspect: 'float', panplane: 'SbPlane', previous: 'SbVec2f', current: 'SbVec2f') -> "void":
    """SoScXMLPanTarget_panCamera(SoCamera camera, float vpaspect, SbPlane panplane, SbVec2f previous, SbVec2f current)"""
    return _coin.SoScXMLPanTarget_panCamera(camera, vpaspect, panplane, previous, current)

def SoScXMLPanTarget_panSetFocalPoint(camera: 'SoCamera', worldspace: 'SbVec3f') -> "void":
    """SoScXMLPanTarget_panSetFocalPoint(SoCamera camera, SbVec3f worldspace)"""
    return _coin.SoScXMLPanTarget_panSetFocalPoint(camera, worldspace)

def SoScXMLPanTarget_translateCamera(camera: 'SoCamera', translation: 'SbVec3f', cameraspace: 'SbBool'=0) -> "void":
    """
    translateCamera(SoCamera camera, SbVec3f translation, SbBool cameraspace=0)
    SoScXMLPanTarget_translateCamera(SoCamera camera, SbVec3f translation)
    """
    return _coin.SoScXMLPanTarget_translateCamera(camera, translation, cameraspace)

COIN_NAVIGATION_ROTATE_TARGET_EVENT_PREFIX = _coin.COIN_NAVIGATION_ROTATE_TARGET_EVENT_PREFIX
class SoScXMLRotateTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLRotateTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLRotateTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLRotateTarget self) -> SoType"""
        return _coin.SoScXMLRotateTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLRotateTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLRotateTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLRotateTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLRotateTarget *":
        """constructSingleton() -> SoScXMLRotateTarget"""
        return _coin.SoScXMLRotateTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLRotateTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLRotateTarget *":
        """singleton() -> SoScXMLRotateTarget"""
        return _coin.SoScXMLRotateTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLRotateTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLRotateTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLRotateTarget_END()

    END = staticmethod(END)

    def SET_FOCAL_POINT() -> "SbName const &":
        """SET_FOCAL_POINT() -> SbName"""
        return _coin.SoScXMLRotateTarget_SET_FOCAL_POINT()

    SET_FOCAL_POINT = staticmethod(SET_FOCAL_POINT)

    def setFocalPoint(*args) -> "void":
        """
        setFocalPoint(SoCamera camera, SbVec3f worldspace)
        setFocalPoint(SoCamera camera, SbVec3f worldspace, SbVec3f upvector)
        """
        return _coin.SoScXMLRotateTarget_setFocalPoint(*args)

    setFocalPoint = staticmethod(setFocalPoint)

    def reorientCamera(camera: 'SoCamera', rot: 'SbRotation') -> "void":
        """reorientCamera(SoCamera camera, SbRotation rot)"""
        return _coin.SoScXMLRotateTarget_reorientCamera(camera, rot)

    reorientCamera = staticmethod(reorientCamera)
SoScXMLRotateTarget_swigregister = _coin.SoScXMLRotateTarget_swigregister
SoScXMLRotateTarget_swigregister(SoScXMLRotateTarget)

def SoScXMLRotateTarget_getClassTypeId() -> "SoType":
    """SoScXMLRotateTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLRotateTarget_getClassTypeId()

def SoScXMLRotateTarget_createInstance() -> "void *":
    """SoScXMLRotateTarget_createInstance() -> void *"""
    return _coin.SoScXMLRotateTarget_createInstance()

def SoScXMLRotateTarget_initClass() -> "void":
    """SoScXMLRotateTarget_initClass()"""
    return _coin.SoScXMLRotateTarget_initClass()

def SoScXMLRotateTarget_cleanClass() -> "void":
    """SoScXMLRotateTarget_cleanClass()"""
    return _coin.SoScXMLRotateTarget_cleanClass()

def SoScXMLRotateTarget_constructSingleton() -> "SoScXMLRotateTarget *":
    """SoScXMLRotateTarget_constructSingleton() -> SoScXMLRotateTarget"""
    return _coin.SoScXMLRotateTarget_constructSingleton()

def SoScXMLRotateTarget_destructSingleton() -> "void":
    """SoScXMLRotateTarget_destructSingleton()"""
    return _coin.SoScXMLRotateTarget_destructSingleton()

def SoScXMLRotateTarget_singleton() -> "SoScXMLRotateTarget *":
    """SoScXMLRotateTarget_singleton() -> SoScXMLRotateTarget"""
    return _coin.SoScXMLRotateTarget_singleton()

def SoScXMLRotateTarget_BEGIN() -> "SbName const &":
    """SoScXMLRotateTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLRotateTarget_BEGIN()

def SoScXMLRotateTarget_UPDATE() -> "SbName const &":
    """SoScXMLRotateTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLRotateTarget_UPDATE()

def SoScXMLRotateTarget_END() -> "SbName const &":
    """SoScXMLRotateTarget_END() -> SbName"""
    return _coin.SoScXMLRotateTarget_END()

def SoScXMLRotateTarget_SET_FOCAL_POINT() -> "SbName const &":
    """SoScXMLRotateTarget_SET_FOCAL_POINT() -> SbName"""
    return _coin.SoScXMLRotateTarget_SET_FOCAL_POINT()

def SoScXMLRotateTarget_setFocalPoint(*args) -> "void":
    """
    setFocalPoint(SoCamera camera, SbVec3f worldspace)
    SoScXMLRotateTarget_setFocalPoint(SoCamera camera, SbVec3f worldspace, SbVec3f upvector)
    """
    return _coin.SoScXMLRotateTarget_setFocalPoint(*args)

def SoScXMLRotateTarget_reorientCamera(camera: 'SoCamera', rot: 'SbRotation') -> "void":
    """SoScXMLRotateTarget_reorientCamera(SoCamera camera, SbRotation rot)"""
    return _coin.SoScXMLRotateTarget_reorientCamera(camera, rot)

COIN_NAVIGATION_SEEK_EVENT_PREFIX = _coin.COIN_NAVIGATION_SEEK_EVENT_PREFIX
class SoScXMLSeekTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLSeekTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLSeekTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLSeekTarget self) -> SoType"""
        return _coin.SoScXMLSeekTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLSeekTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLSeekTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLSeekTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLSeekTarget *":
        """constructSingleton() -> SoScXMLSeekTarget"""
        return _coin.SoScXMLSeekTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLSeekTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLSeekTarget *":
        """singleton() -> SoScXMLSeekTarget"""
        return _coin.SoScXMLSeekTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLSeekTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLSeekTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLSeekTarget_END()

    END = staticmethod(END)
SoScXMLSeekTarget_swigregister = _coin.SoScXMLSeekTarget_swigregister
SoScXMLSeekTarget_swigregister(SoScXMLSeekTarget)

def SoScXMLSeekTarget_getClassTypeId() -> "SoType":
    """SoScXMLSeekTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLSeekTarget_getClassTypeId()

def SoScXMLSeekTarget_createInstance() -> "void *":
    """SoScXMLSeekTarget_createInstance() -> void *"""
    return _coin.SoScXMLSeekTarget_createInstance()

def SoScXMLSeekTarget_initClass() -> "void":
    """SoScXMLSeekTarget_initClass()"""
    return _coin.SoScXMLSeekTarget_initClass()

def SoScXMLSeekTarget_cleanClass() -> "void":
    """SoScXMLSeekTarget_cleanClass()"""
    return _coin.SoScXMLSeekTarget_cleanClass()

def SoScXMLSeekTarget_constructSingleton() -> "SoScXMLSeekTarget *":
    """SoScXMLSeekTarget_constructSingleton() -> SoScXMLSeekTarget"""
    return _coin.SoScXMLSeekTarget_constructSingleton()

def SoScXMLSeekTarget_destructSingleton() -> "void":
    """SoScXMLSeekTarget_destructSingleton()"""
    return _coin.SoScXMLSeekTarget_destructSingleton()

def SoScXMLSeekTarget_singleton() -> "SoScXMLSeekTarget *":
    """SoScXMLSeekTarget_singleton() -> SoScXMLSeekTarget"""
    return _coin.SoScXMLSeekTarget_singleton()

def SoScXMLSeekTarget_BEGIN() -> "SbName const &":
    """SoScXMLSeekTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLSeekTarget_BEGIN()

def SoScXMLSeekTarget_UPDATE() -> "SbName const &":
    """SoScXMLSeekTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLSeekTarget_UPDATE()

def SoScXMLSeekTarget_END() -> "SbName const &":
    """SoScXMLSeekTarget_END() -> SbName"""
    return _coin.SoScXMLSeekTarget_END()

COIN_NAVIGATION_SPIN_EVENT_PREFIX = _coin.COIN_NAVIGATION_SPIN_EVENT_PREFIX
class SoScXMLSpinTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLSpinTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLSpinTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLSpinTarget self) -> SoType"""
        return _coin.SoScXMLSpinTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLSpinTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLSpinTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLSpinTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLSpinTarget *":
        """constructSingleton() -> SoScXMLSpinTarget"""
        return _coin.SoScXMLSpinTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLSpinTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLSpinTarget *":
        """singleton() -> SoScXMLSpinTarget"""
        return _coin.SoScXMLSpinTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLSpinTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLSpinTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLSpinTarget_END()

    END = staticmethod(END)

    def reorientCamera(camera: 'SoCamera', rot: 'SbRotation') -> "void":
        """reorientCamera(SoCamera camera, SbRotation rot)"""
        return _coin.SoScXMLSpinTarget_reorientCamera(camera, rot)

    reorientCamera = staticmethod(reorientCamera)
SoScXMLSpinTarget_swigregister = _coin.SoScXMLSpinTarget_swigregister
SoScXMLSpinTarget_swigregister(SoScXMLSpinTarget)

def SoScXMLSpinTarget_getClassTypeId() -> "SoType":
    """SoScXMLSpinTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLSpinTarget_getClassTypeId()

def SoScXMLSpinTarget_createInstance() -> "void *":
    """SoScXMLSpinTarget_createInstance() -> void *"""
    return _coin.SoScXMLSpinTarget_createInstance()

def SoScXMLSpinTarget_initClass() -> "void":
    """SoScXMLSpinTarget_initClass()"""
    return _coin.SoScXMLSpinTarget_initClass()

def SoScXMLSpinTarget_cleanClass() -> "void":
    """SoScXMLSpinTarget_cleanClass()"""
    return _coin.SoScXMLSpinTarget_cleanClass()

def SoScXMLSpinTarget_constructSingleton() -> "SoScXMLSpinTarget *":
    """SoScXMLSpinTarget_constructSingleton() -> SoScXMLSpinTarget"""
    return _coin.SoScXMLSpinTarget_constructSingleton()

def SoScXMLSpinTarget_destructSingleton() -> "void":
    """SoScXMLSpinTarget_destructSingleton()"""
    return _coin.SoScXMLSpinTarget_destructSingleton()

def SoScXMLSpinTarget_singleton() -> "SoScXMLSpinTarget *":
    """SoScXMLSpinTarget_singleton() -> SoScXMLSpinTarget"""
    return _coin.SoScXMLSpinTarget_singleton()

def SoScXMLSpinTarget_BEGIN() -> "SbName const &":
    """SoScXMLSpinTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLSpinTarget_BEGIN()

def SoScXMLSpinTarget_UPDATE() -> "SbName const &":
    """SoScXMLSpinTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLSpinTarget_UPDATE()

def SoScXMLSpinTarget_END() -> "SbName const &":
    """SoScXMLSpinTarget_END() -> SbName"""
    return _coin.SoScXMLSpinTarget_END()

def SoScXMLSpinTarget_reorientCamera(camera: 'SoCamera', rot: 'SbRotation') -> "void":
    """SoScXMLSpinTarget_reorientCamera(SoCamera camera, SbRotation rot)"""
    return _coin.SoScXMLSpinTarget_reorientCamera(camera, rot)

COIN_NAVIGATION_ZOOM_TARGET_EVENT_PREFIX = _coin.COIN_NAVIGATION_ZOOM_TARGET_EVENT_PREFIX
class SoScXMLZoomTarget(SoScXMLNavigationTarget):
    """Proxy of C++ SoScXMLZoomTarget class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLZoomTarget_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLZoomTarget self) -> SoType"""
        return _coin.SoScXMLZoomTarget_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLZoomTarget_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLZoomTarget_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLZoomTarget_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def constructSingleton() -> "SoScXMLZoomTarget *":
        """constructSingleton() -> SoScXMLZoomTarget"""
        return _coin.SoScXMLZoomTarget_constructSingleton()

    constructSingleton = staticmethod(constructSingleton)

    def destructSingleton() -> "void":
        """destructSingleton()"""
        return _coin.SoScXMLZoomTarget_destructSingleton()

    destructSingleton = staticmethod(destructSingleton)

    def singleton() -> "SoScXMLZoomTarget *":
        """singleton() -> SoScXMLZoomTarget"""
        return _coin.SoScXMLZoomTarget_singleton()

    singleton = staticmethod(singleton)

    def BEGIN() -> "SbName const &":
        """BEGIN() -> SbName"""
        return _coin.SoScXMLZoomTarget_BEGIN()

    BEGIN = staticmethod(BEGIN)

    def UPDATE() -> "SbName const &":
        """UPDATE() -> SbName"""
        return _coin.SoScXMLZoomTarget_UPDATE()

    UPDATE = staticmethod(UPDATE)

    def END() -> "SbName const &":
        """END() -> SbName"""
        return _coin.SoScXMLZoomTarget_END()

    END = staticmethod(END)

    def ZOOM() -> "SbName const &":
        """ZOOM() -> SbName"""
        return _coin.SoScXMLZoomTarget_ZOOM()

    ZOOM = staticmethod(ZOOM)

    def ZOOM_IN() -> "SbName const &":
        """ZOOM_IN() -> SbName"""
        return _coin.SoScXMLZoomTarget_ZOOM_IN()

    ZOOM_IN = staticmethod(ZOOM_IN)

    def ZOOM_OUT() -> "SbName const &":
        """ZOOM_OUT() -> SbName"""
        return _coin.SoScXMLZoomTarget_ZOOM_OUT()

    ZOOM_OUT = staticmethod(ZOOM_OUT)

    def RESET() -> "SbName const &":
        """RESET() -> SbName"""
        return _coin.SoScXMLZoomTarget_RESET()

    RESET = staticmethod(RESET)

    def zoom(camera: 'SoCamera', factor: 'float') -> "void":
        """zoom(SoCamera camera, float factor)"""
        return _coin.SoScXMLZoomTarget_zoom(camera, factor)

    zoom = staticmethod(zoom)

    def reset(camera: 'SoCamera') -> "void":
        """reset(SoCamera camera)"""
        return _coin.SoScXMLZoomTarget_reset(camera)

    reset = staticmethod(reset)
SoScXMLZoomTarget_swigregister = _coin.SoScXMLZoomTarget_swigregister
SoScXMLZoomTarget_swigregister(SoScXMLZoomTarget)

def SoScXMLZoomTarget_getClassTypeId() -> "SoType":
    """SoScXMLZoomTarget_getClassTypeId() -> SoType"""
    return _coin.SoScXMLZoomTarget_getClassTypeId()

def SoScXMLZoomTarget_createInstance() -> "void *":
    """SoScXMLZoomTarget_createInstance() -> void *"""
    return _coin.SoScXMLZoomTarget_createInstance()

def SoScXMLZoomTarget_initClass() -> "void":
    """SoScXMLZoomTarget_initClass()"""
    return _coin.SoScXMLZoomTarget_initClass()

def SoScXMLZoomTarget_cleanClass() -> "void":
    """SoScXMLZoomTarget_cleanClass()"""
    return _coin.SoScXMLZoomTarget_cleanClass()

def SoScXMLZoomTarget_constructSingleton() -> "SoScXMLZoomTarget *":
    """SoScXMLZoomTarget_constructSingleton() -> SoScXMLZoomTarget"""
    return _coin.SoScXMLZoomTarget_constructSingleton()

def SoScXMLZoomTarget_destructSingleton() -> "void":
    """SoScXMLZoomTarget_destructSingleton()"""
    return _coin.SoScXMLZoomTarget_destructSingleton()

def SoScXMLZoomTarget_singleton() -> "SoScXMLZoomTarget *":
    """SoScXMLZoomTarget_singleton() -> SoScXMLZoomTarget"""
    return _coin.SoScXMLZoomTarget_singleton()

def SoScXMLZoomTarget_BEGIN() -> "SbName const &":
    """SoScXMLZoomTarget_BEGIN() -> SbName"""
    return _coin.SoScXMLZoomTarget_BEGIN()

def SoScXMLZoomTarget_UPDATE() -> "SbName const &":
    """SoScXMLZoomTarget_UPDATE() -> SbName"""
    return _coin.SoScXMLZoomTarget_UPDATE()

def SoScXMLZoomTarget_END() -> "SbName const &":
    """SoScXMLZoomTarget_END() -> SbName"""
    return _coin.SoScXMLZoomTarget_END()

def SoScXMLZoomTarget_ZOOM() -> "SbName const &":
    """SoScXMLZoomTarget_ZOOM() -> SbName"""
    return _coin.SoScXMLZoomTarget_ZOOM()

def SoScXMLZoomTarget_ZOOM_IN() -> "SbName const &":
    """SoScXMLZoomTarget_ZOOM_IN() -> SbName"""
    return _coin.SoScXMLZoomTarget_ZOOM_IN()

def SoScXMLZoomTarget_ZOOM_OUT() -> "SbName const &":
    """SoScXMLZoomTarget_ZOOM_OUT() -> SbName"""
    return _coin.SoScXMLZoomTarget_ZOOM_OUT()

def SoScXMLZoomTarget_RESET() -> "SbName const &":
    """SoScXMLZoomTarget_RESET() -> SbName"""
    return _coin.SoScXMLZoomTarget_RESET()

def SoScXMLZoomTarget_zoom(camera: 'SoCamera', factor: 'float') -> "void":
    """SoScXMLZoomTarget_zoom(SoCamera camera, float factor)"""
    return _coin.SoScXMLZoomTarget_zoom(camera, factor)

def SoScXMLZoomTarget_reset(camera: 'SoCamera') -> "void":
    """SoScXMLZoomTarget_reset(SoCamera camera)"""
    return _coin.SoScXMLZoomTarget_reset(camera)

class ScXML(object):
    """Proxy of C++ ScXML class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def initClasses() -> "void":
        """initClasses()"""
        return _coin.ScXML_initClasses()

    initClasses = staticmethod(initClasses)

    def cleanClasses() -> "void":
        """cleanClasses()"""
        return _coin.ScXML_cleanClasses()

    cleanClasses = staticmethod(cleanClasses)

    def readFile(filename: 'char const *') -> "ScXMLStateMachine *":
        """readFile(char const * filename) -> ScXMLStateMachine"""
        return _coin.ScXML_readFile(filename)

    readFile = staticmethod(readFile)

    def readBuffer(buffer: 'SbByteBuffer') -> "ScXMLStateMachine *":
        """readBuffer(SbByteBuffer buffer) -> ScXMLStateMachine"""
        return _coin.ScXML_readBuffer(buffer)

    readBuffer = staticmethod(readBuffer)

    def registerEvaluatorType(profilename: 'SbName', evaluatortype: 'SoType') -> "SbBool":
        """registerEvaluatorType(SbName profilename, SoType evaluatortype) -> SbBool"""
        return _coin.ScXML_registerEvaluatorType(profilename, evaluatortype)

    registerEvaluatorType = staticmethod(registerEvaluatorType)

    def unregisterEvaluatorType(profilename: 'SbName', evaluatortype: 'SoType') -> "SbBool":
        """unregisterEvaluatorType(SbName profilename, SoType evaluatortype) -> SbBool"""
        return _coin.ScXML_unregisterEvaluatorType(profilename, evaluatortype)

    unregisterEvaluatorType = staticmethod(unregisterEvaluatorType)

    def getEvaluatorTypeForProfile(profilename: 'SbName') -> "SoType":
        """getEvaluatorTypeForProfile(SbName profilename) -> SoType"""
        return _coin.ScXML_getEvaluatorTypeForProfile(profilename)

    getEvaluatorTypeForProfile = staticmethod(getEvaluatorTypeForProfile)

    def __init__(self):
        """__init__(ScXML self) -> ScXML"""
        this = _coin.new_ScXML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXML
    __del__ = lambda self: None
ScXML_swigregister = _coin.ScXML_swigregister
ScXML_swigregister(ScXML)

def ScXML_initClasses() -> "void":
    """ScXML_initClasses()"""
    return _coin.ScXML_initClasses()

def ScXML_cleanClasses() -> "void":
    """ScXML_cleanClasses()"""
    return _coin.ScXML_cleanClasses()

def ScXML_readFile(filename: 'char const *') -> "ScXMLStateMachine *":
    """ScXML_readFile(char const * filename) -> ScXMLStateMachine"""
    return _coin.ScXML_readFile(filename)

def ScXML_readBuffer(buffer: 'SbByteBuffer') -> "ScXMLStateMachine *":
    """ScXML_readBuffer(SbByteBuffer buffer) -> ScXMLStateMachine"""
    return _coin.ScXML_readBuffer(buffer)

def ScXML_registerEvaluatorType(profilename: 'SbName', evaluatortype: 'SoType') -> "SbBool":
    """ScXML_registerEvaluatorType(SbName profilename, SoType evaluatortype) -> SbBool"""
    return _coin.ScXML_registerEvaluatorType(profilename, evaluatortype)

def ScXML_unregisterEvaluatorType(profilename: 'SbName', evaluatortype: 'SoType') -> "SbBool":
    """ScXML_unregisterEvaluatorType(SbName profilename, SoType evaluatortype) -> SbBool"""
    return _coin.ScXML_unregisterEvaluatorType(profilename, evaluatortype)

def ScXML_getEvaluatorTypeForProfile(profilename: 'SbName') -> "SoType":
    """ScXML_getEvaluatorTypeForProfile(SbName profilename) -> SoType"""
    return _coin.ScXML_getEvaluatorTypeForProfile(profilename)

class ScXMLElt(ScXMLObject):
    """Proxy of C++ ScXMLElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLElt self) -> SoType"""
        return _coin.ScXMLElt_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLElt_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLElt
    __del__ = lambda self: None

    def setXMLAttribute(self, attribute: 'char const *', value: 'char const *') -> "void":
        """setXMLAttribute(ScXMLElt self, char const * attribute, char const * value)"""
        return _coin.ScXMLElt_setXMLAttribute(self, attribute, value)


    def getXMLAttribute(self, attribute: 'char const *') -> "char const *":
        """getXMLAttribute(ScXMLElt self, char const * attribute) -> char const *"""
        return _coin.ScXMLElt_getXMLAttribute(self, attribute)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLElt self) -> SbBool"""
        return _coin.ScXMLElt_handleXMLAttributes(self)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLElt_search(self, attrname, attrvalue)


    def clone(self) -> "ScXMLElt *":
        """clone(ScXMLElt self) -> ScXMLElt"""
        return _coin.ScXMLElt_clone(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLElt self, ScXMLElt rhs)"""
        return _coin.ScXMLElt_copyContents(self, rhs)


    def setContainer(self, container: 'ScXMLElt') -> "void":
        """setContainer(ScXMLElt self, ScXMLElt container)"""
        return _coin.ScXMLElt_setContainer(self, container)


    def getContainer(self) -> "ScXMLElt *":
        """getContainer(ScXMLElt self) -> ScXMLElt"""
        return _coin.ScXMLElt_getContainer(self)


    def isContainedIn(self, object: 'ScXMLElt') -> "SbBool":
        """isContainedIn(ScXMLElt self, ScXMLElt object) -> SbBool"""
        return _coin.ScXMLElt_isContainedIn(self, object)

ScXMLElt_swigregister = _coin.ScXMLElt_swigregister
ScXMLElt_swigregister(ScXMLElt)

def ScXMLElt_getClassTypeId() -> "SoType":
    """ScXMLElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLElt_getClassTypeId()

def ScXMLElt_initClass() -> "void":
    """ScXMLElt_initClass()"""
    return _coin.ScXMLElt_initClass()

def ScXMLElt_cleanClass() -> "void":
    """ScXMLElt_cleanClass()"""
    return _coin.ScXMLElt_cleanClass()

class ScXMLEltReader(object):
    """Proxy of C++ ScXMLEltReader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coin.delete_ScXMLEltReader
    __del__ = lambda self: None

    def read(self, container: 'ScXMLElt', elt: 'cc_xml_elt *', doc: 'ScXMLDocument', sm: 'ScXMLStateMachine') -> "ScXMLElt *":
        """read(ScXMLEltReader self, ScXMLElt container, cc_xml_elt * elt, ScXMLDocument doc, ScXMLStateMachine sm) -> ScXMLElt"""
        return _coin.ScXMLEltReader_read(self, container, elt, doc, sm)

ScXMLEltReader_swigregister = _coin.ScXMLEltReader_swigregister
ScXMLEltReader_swigregister(ScXMLEltReader)

class ScXMLAbstractStateElt(ScXMLElt):
    """Proxy of C++ ScXMLAbstractStateElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAbstractStateElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAbstractStateElt self) -> SoType"""
        return _coin.ScXMLAbstractStateElt_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAbstractStateElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAbstractStateElt_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLAbstractStateElt
    __del__ = lambda self: None

    def setIdAttribute(self, id: 'char const *') -> "void":
        """setIdAttribute(ScXMLAbstractStateElt self, char const * id)"""
        return _coin.ScXMLAbstractStateElt_setIdAttribute(self, id)


    def getIdAttribute(self) -> "char const *":
        """getIdAttribute(ScXMLAbstractStateElt self) -> char const *"""
        return _coin.ScXMLAbstractStateElt_getIdAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLAbstractStateElt self) -> SbBool"""
        return _coin.ScXMLAbstractStateElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLAbstractStateElt self, ScXMLElt rhs)"""
        return _coin.ScXMLAbstractStateElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLAbstractStateElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLAbstractStateElt_search(self, attrname, attrvalue)

ScXMLAbstractStateElt_swigregister = _coin.ScXMLAbstractStateElt_swigregister
ScXMLAbstractStateElt_swigregister(ScXMLAbstractStateElt)

def ScXMLAbstractStateElt_getClassTypeId() -> "SoType":
    """ScXMLAbstractStateElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLAbstractStateElt_getClassTypeId()

def ScXMLAbstractStateElt_initClass() -> "void":
    """ScXMLAbstractStateElt_initClass()"""
    return _coin.ScXMLAbstractStateElt_initClass()

def ScXMLAbstractStateElt_cleanClass() -> "void":
    """ScXMLAbstractStateElt_cleanClass()"""
    return _coin.ScXMLAbstractStateElt_cleanClass()

class ScXMLAnchorElt(ScXMLElt):
    """Proxy of C++ ScXMLAnchorElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLAnchorElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAnchorElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAnchorElt self) -> SoType"""
        return _coin.ScXMLAnchorElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLAnchorElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAnchorElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAnchorElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLAnchorElt self) -> ScXMLAnchorElt"""
        this = _coin.new_ScXMLAnchorElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLAnchorElt
    __del__ = lambda self: None

    def setTypeAttribute(self, type: 'char const *') -> "void":
        """setTypeAttribute(ScXMLAnchorElt self, char const * type)"""
        return _coin.ScXMLAnchorElt_setTypeAttribute(self, type)


    def getTypeAttribute(self) -> "char const *":
        """getTypeAttribute(ScXMLAnchorElt self) -> char const *"""
        return _coin.ScXMLAnchorElt_getTypeAttribute(self)


    def setSnapshotAttribute(self, snapshot: 'char const *') -> "void":
        """setSnapshotAttribute(ScXMLAnchorElt self, char const * snapshot)"""
        return _coin.ScXMLAnchorElt_setSnapshotAttribute(self, snapshot)


    def getSnapshotAttribute(self) -> "char const *":
        """getSnapshotAttribute(ScXMLAnchorElt self) -> char const *"""
        return _coin.ScXMLAnchorElt_getSnapshotAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLAnchorElt self) -> SbBool"""
        return _coin.ScXMLAnchorElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLAnchorElt self, ScXMLElt rhs)"""
        return _coin.ScXMLAnchorElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLAnchorElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLAnchorElt_search(self, attrname, attrvalue)

ScXMLAnchorElt_swigregister = _coin.ScXMLAnchorElt_swigregister
ScXMLAnchorElt_swigregister(ScXMLAnchorElt)

def ScXMLAnchorElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLAnchorElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLAnchorElt_getElementReader()

def ScXMLAnchorElt_getClassTypeId() -> "SoType":
    """ScXMLAnchorElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLAnchorElt_getClassTypeId()

def ScXMLAnchorElt_createInstance() -> "void *":
    """ScXMLAnchorElt_createInstance() -> void *"""
    return _coin.ScXMLAnchorElt_createInstance()

def ScXMLAnchorElt_initClass() -> "void":
    """ScXMLAnchorElt_initClass()"""
    return _coin.ScXMLAnchorElt_initClass()

def ScXMLAnchorElt_cleanClass() -> "void":
    """ScXMLAnchorElt_cleanClass()"""
    return _coin.ScXMLAnchorElt_cleanClass()

class ScXMLExecutableElt(ScXMLElt):
    """Proxy of C++ ScXMLExecutableElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLExecutableElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLExecutableElt self) -> SoType"""
        return _coin.ScXMLExecutableElt_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLExecutableElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLExecutableElt_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLExecutableElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLExecutableElt self, ScXMLElt rhs)"""
        return _coin.ScXMLExecutableElt_copyContents(self, rhs)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLExecutableElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLExecutableElt_execute(self, statemachine)

ScXMLExecutableElt_swigregister = _coin.ScXMLExecutableElt_swigregister
ScXMLExecutableElt_swigregister(ScXMLExecutableElt)

def ScXMLExecutableElt_getClassTypeId() -> "SoType":
    """ScXMLExecutableElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLExecutableElt_getClassTypeId()

def ScXMLExecutableElt_initClass() -> "void":
    """ScXMLExecutableElt_initClass()"""
    return _coin.ScXMLExecutableElt_initClass()

def ScXMLExecutableElt_cleanClass() -> "void":
    """ScXMLExecutableElt_cleanClass()"""
    return _coin.ScXMLExecutableElt_cleanClass()

class ScXMLAssignElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLAssignElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLAssignElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAssignElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAssignElt self) -> SoType"""
        return _coin.ScXMLAssignElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLAssignElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAssignElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAssignElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLAssignElt self) -> ScXMLAssignElt"""
        this = _coin.new_ScXMLAssignElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLAssignElt
    __del__ = lambda self: None

    def setLocationAttribute(self, location: 'char const *') -> "void":
        """setLocationAttribute(ScXMLAssignElt self, char const * location)"""
        return _coin.ScXMLAssignElt_setLocationAttribute(self, location)


    def getLocationAttribute(self) -> "char const *":
        """getLocationAttribute(ScXMLAssignElt self) -> char const *"""
        return _coin.ScXMLAssignElt_getLocationAttribute(self)


    def setDataIDAttribute(self, dataID: 'char const *') -> "void":
        """setDataIDAttribute(ScXMLAssignElt self, char const * dataID)"""
        return _coin.ScXMLAssignElt_setDataIDAttribute(self, dataID)


    def getDataIDAttribute(self) -> "char const *":
        """getDataIDAttribute(ScXMLAssignElt self) -> char const *"""
        return _coin.ScXMLAssignElt_getDataIDAttribute(self)


    def setExprAttribute(self, expr: 'char const *') -> "void":
        """setExprAttribute(ScXMLAssignElt self, char const * expr)"""
        return _coin.ScXMLAssignElt_setExprAttribute(self, expr)


    def getExprAttribute(self) -> "char const *":
        """getExprAttribute(ScXMLAssignElt self) -> char const *"""
        return _coin.ScXMLAssignElt_getExprAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLAssignElt self) -> SbBool"""
        return _coin.ScXMLAssignElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLAssignElt self, ScXMLElt rhs)"""
        return _coin.ScXMLAssignElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLAssignElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLAssignElt_search(self, attrname, attrvalue)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLAssignElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLAssignElt_execute(self, statemachine)

ScXMLAssignElt_swigregister = _coin.ScXMLAssignElt_swigregister
ScXMLAssignElt_swigregister(ScXMLAssignElt)

def ScXMLAssignElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLAssignElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLAssignElt_getElementReader()

def ScXMLAssignElt_getClassTypeId() -> "SoType":
    """ScXMLAssignElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLAssignElt_getClassTypeId()

def ScXMLAssignElt_createInstance() -> "void *":
    """ScXMLAssignElt_createInstance() -> void *"""
    return _coin.ScXMLAssignElt_createInstance()

def ScXMLAssignElt_initClass() -> "void":
    """ScXMLAssignElt_initClass()"""
    return _coin.ScXMLAssignElt_initClass()

def ScXMLAssignElt_cleanClass() -> "void":
    """ScXMLAssignElt_cleanClass()"""
    return _coin.ScXMLAssignElt_cleanClass()

class ScXMLEvaluator(ScXMLObject):
    """Proxy of C++ ScXMLEvaluator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLEvaluator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLEvaluator self) -> SoType"""
        return _coin.ScXMLEvaluator_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLEvaluator_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLEvaluator_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLEvaluator
    __del__ = lambda self: None

    def setStateMachine(self, sm: 'ScXMLStateMachine') -> "void":
        """setStateMachine(ScXMLEvaluator self, ScXMLStateMachine sm)"""
        return _coin.ScXMLEvaluator_setStateMachine(self, sm)


    def getStateMachine(self) -> "ScXMLStateMachine *":
        """getStateMachine(ScXMLEvaluator self) -> ScXMLStateMachine"""
        return _coin.ScXMLEvaluator_getStateMachine(self)


    def evaluate(self, expression: 'char const *') -> "ScXMLDataObj *":
        """evaluate(ScXMLEvaluator self, char const * expression) -> ScXMLDataObj"""
        return _coin.ScXMLEvaluator_evaluate(self, expression)


    def setAtLocation(self, location: 'char const *', obj: 'ScXMLDataObj') -> "SbBool":
        """setAtLocation(ScXMLEvaluator self, char const * location, ScXMLDataObj obj) -> SbBool"""
        return _coin.ScXMLEvaluator_setAtLocation(self, location, obj)


    def locate(self, location: 'char const *') -> "ScXMLDataObj *":
        """locate(ScXMLEvaluator self, char const * location) -> ScXMLDataObj"""
        return _coin.ScXMLEvaluator_locate(self, location)


    def clearTemporaryVariables(self) -> "void":
        """clearTemporaryVariables(ScXMLEvaluator self)"""
        return _coin.ScXMLEvaluator_clearTemporaryVariables(self)

ScXMLEvaluator_swigregister = _coin.ScXMLEvaluator_swigregister
ScXMLEvaluator_swigregister(ScXMLEvaluator)

def ScXMLEvaluator_getClassTypeId() -> "SoType":
    """ScXMLEvaluator_getClassTypeId() -> SoType"""
    return _coin.ScXMLEvaluator_getClassTypeId()

def ScXMLEvaluator_initClass() -> "void":
    """ScXMLEvaluator_initClass()"""
    return _coin.ScXMLEvaluator_initClass()

def ScXMLEvaluator_cleanClass() -> "void":
    """ScXMLEvaluator_cleanClass()"""
    return _coin.ScXMLEvaluator_cleanClass()

class ScXMLDataObj(ScXMLObject):
    """Proxy of C++ ScXMLDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLDataObj self) -> SoType"""
        return _coin.ScXMLDataObj_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLDataObj
    __del__ = lambda self: None

    def setContainer(self, container: 'ScXMLObject') -> "void":
        """setContainer(ScXMLDataObj self, ScXMLObject container)"""
        return _coin.ScXMLDataObj_setContainer(self, container)


    def getContainer(self) -> "ScXMLObject *":
        """getContainer(ScXMLDataObj self) -> ScXMLObject"""
        return _coin.ScXMLDataObj_getContainer(self)

ScXMLDataObj_swigregister = _coin.ScXMLDataObj_swigregister
ScXMLDataObj_swigregister(ScXMLDataObj)

def ScXMLDataObj_getClassTypeId() -> "SoType":
    """ScXMLDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLDataObj_getClassTypeId()

def ScXMLDataObj_initClass() -> "void":
    """ScXMLDataObj_initClass()"""
    return _coin.ScXMLDataObj_initClass()

def ScXMLDataObj_cleanClass() -> "void":
    """ScXMLDataObj_cleanClass()"""
    return _coin.ScXMLDataObj_cleanClass()

class ScXMLConstantDataObj(ScXMLDataObj):
    """Proxy of C++ ScXMLConstantDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLConstantDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLConstantDataObj self) -> SoType"""
        return _coin.ScXMLConstantDataObj_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLConstantDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLConstantDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLConstantDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLConstantDataObj_clone(self)


    def convertToString(self, str: 'SbString') -> "void":
        """convertToString(ScXMLConstantDataObj self, SbString str)"""
        return _coin.ScXMLConstantDataObj_convertToString(self, str)

    __swig_destroy__ = _coin.delete_ScXMLConstantDataObj
    __del__ = lambda self: None
ScXMLConstantDataObj_swigregister = _coin.ScXMLConstantDataObj_swigregister
ScXMLConstantDataObj_swigregister(ScXMLConstantDataObj)

def ScXMLConstantDataObj_getClassTypeId() -> "SoType":
    """ScXMLConstantDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLConstantDataObj_getClassTypeId()

def ScXMLConstantDataObj_initClass() -> "void":
    """ScXMLConstantDataObj_initClass()"""
    return _coin.ScXMLConstantDataObj_initClass()

def ScXMLConstantDataObj_cleanClass() -> "void":
    """ScXMLConstantDataObj_cleanClass()"""
    return _coin.ScXMLConstantDataObj_cleanClass()

class ScXMLStringDataObj(ScXMLConstantDataObj):
    """Proxy of C++ ScXMLStringDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLStringDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLStringDataObj self) -> SoType"""
        return _coin.ScXMLStringDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLStringDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLStringDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLStringDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(value: 'char const *') -> "ScXMLDataObj *":
        """createFor(char const * value) -> ScXMLDataObj"""
        return _coin.ScXMLStringDataObj_createFor(value)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLStringDataObj self) -> ScXMLStringDataObj
        __init__(ScXMLStringDataObj self, char const * value) -> ScXMLStringDataObj
        """
        this = _coin.new_ScXMLStringDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLStringDataObj
    __del__ = lambda self: None

    def setString(self, value: 'char const *') -> "void":
        """setString(ScXMLStringDataObj self, char const * value)"""
        return _coin.ScXMLStringDataObj_setString(self, value)


    def getString(self) -> "char const *":
        """getString(ScXMLStringDataObj self) -> char const *"""
        return _coin.ScXMLStringDataObj_getString(self)


    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLStringDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLStringDataObj_clone(self)


    def convertToString(self, str: 'SbString') -> "void":
        """convertToString(ScXMLStringDataObj self, SbString str)"""
        return _coin.ScXMLStringDataObj_convertToString(self, str)

ScXMLStringDataObj_swigregister = _coin.ScXMLStringDataObj_swigregister
ScXMLStringDataObj_swigregister(ScXMLStringDataObj)

def ScXMLStringDataObj_getClassTypeId() -> "SoType":
    """ScXMLStringDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLStringDataObj_getClassTypeId()

def ScXMLStringDataObj_createInstance() -> "void *":
    """ScXMLStringDataObj_createInstance() -> void *"""
    return _coin.ScXMLStringDataObj_createInstance()

def ScXMLStringDataObj_initClass() -> "void":
    """ScXMLStringDataObj_initClass()"""
    return _coin.ScXMLStringDataObj_initClass()

def ScXMLStringDataObj_cleanClass() -> "void":
    """ScXMLStringDataObj_cleanClass()"""
    return _coin.ScXMLStringDataObj_cleanClass()

def ScXMLStringDataObj_createFor(value: 'char const *') -> "ScXMLDataObj *":
    """ScXMLStringDataObj_createFor(char const * value) -> ScXMLDataObj"""
    return _coin.ScXMLStringDataObj_createFor(value)

class ScXMLRealDataObj(ScXMLConstantDataObj):
    """Proxy of C++ ScXMLRealDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLRealDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLRealDataObj self) -> SoType"""
        return _coin.ScXMLRealDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLRealDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLRealDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLRealDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(value: 'double') -> "ScXMLDataObj *":
        """createFor(double value) -> ScXMLDataObj"""
        return _coin.ScXMLRealDataObj_createFor(value)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLRealDataObj self) -> ScXMLRealDataObj
        __init__(ScXMLRealDataObj self, double value) -> ScXMLRealDataObj
        """
        this = _coin.new_ScXMLRealDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLRealDataObj
    __del__ = lambda self: None

    def setReal(self, value: 'double') -> "void":
        """setReal(ScXMLRealDataObj self, double value)"""
        return _coin.ScXMLRealDataObj_setReal(self, value)


    def getReal(self) -> "double":
        """getReal(ScXMLRealDataObj self) -> double"""
        return _coin.ScXMLRealDataObj_getReal(self)


    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLRealDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLRealDataObj_clone(self)


    def convertToString(self, str: 'SbString') -> "void":
        """convertToString(ScXMLRealDataObj self, SbString str)"""
        return _coin.ScXMLRealDataObj_convertToString(self, str)

ScXMLRealDataObj_swigregister = _coin.ScXMLRealDataObj_swigregister
ScXMLRealDataObj_swigregister(ScXMLRealDataObj)

def ScXMLRealDataObj_getClassTypeId() -> "SoType":
    """ScXMLRealDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLRealDataObj_getClassTypeId()

def ScXMLRealDataObj_createInstance() -> "void *":
    """ScXMLRealDataObj_createInstance() -> void *"""
    return _coin.ScXMLRealDataObj_createInstance()

def ScXMLRealDataObj_initClass() -> "void":
    """ScXMLRealDataObj_initClass()"""
    return _coin.ScXMLRealDataObj_initClass()

def ScXMLRealDataObj_cleanClass() -> "void":
    """ScXMLRealDataObj_cleanClass()"""
    return _coin.ScXMLRealDataObj_cleanClass()

def ScXMLRealDataObj_createFor(value: 'double') -> "ScXMLDataObj *":
    """ScXMLRealDataObj_createFor(double value) -> ScXMLDataObj"""
    return _coin.ScXMLRealDataObj_createFor(value)

class ScXMLBoolDataObj(ScXMLConstantDataObj):
    """Proxy of C++ ScXMLBoolDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLBoolDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLBoolDataObj self) -> SoType"""
        return _coin.ScXMLBoolDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLBoolDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLBoolDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLBoolDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(value: 'SbBool') -> "ScXMLDataObj *":
        """createFor(SbBool value) -> ScXMLDataObj"""
        return _coin.ScXMLBoolDataObj_createFor(value)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLBoolDataObj self) -> ScXMLBoolDataObj
        __init__(ScXMLBoolDataObj self, SbBool value) -> ScXMLBoolDataObj
        """
        this = _coin.new_ScXMLBoolDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLBoolDataObj
    __del__ = lambda self: None

    def setBool(self, value: 'SbBool') -> "void":
        """setBool(ScXMLBoolDataObj self, SbBool value)"""
        return _coin.ScXMLBoolDataObj_setBool(self, value)


    def getBool(self) -> "SbBool":
        """getBool(ScXMLBoolDataObj self) -> SbBool"""
        return _coin.ScXMLBoolDataObj_getBool(self)


    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLBoolDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLBoolDataObj_clone(self)


    def convertToString(self, str: 'SbString') -> "void":
        """convertToString(ScXMLBoolDataObj self, SbString str)"""
        return _coin.ScXMLBoolDataObj_convertToString(self, str)

ScXMLBoolDataObj_swigregister = _coin.ScXMLBoolDataObj_swigregister
ScXMLBoolDataObj_swigregister(ScXMLBoolDataObj)

def ScXMLBoolDataObj_getClassTypeId() -> "SoType":
    """ScXMLBoolDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLBoolDataObj_getClassTypeId()

def ScXMLBoolDataObj_createInstance() -> "void *":
    """ScXMLBoolDataObj_createInstance() -> void *"""
    return _coin.ScXMLBoolDataObj_createInstance()

def ScXMLBoolDataObj_initClass() -> "void":
    """ScXMLBoolDataObj_initClass()"""
    return _coin.ScXMLBoolDataObj_initClass()

def ScXMLBoolDataObj_cleanClass() -> "void":
    """ScXMLBoolDataObj_cleanClass()"""
    return _coin.ScXMLBoolDataObj_cleanClass()

def ScXMLBoolDataObj_createFor(value: 'SbBool') -> "ScXMLDataObj *":
    """ScXMLBoolDataObj_createFor(SbBool value) -> ScXMLDataObj"""
    return _coin.ScXMLBoolDataObj_createFor(value)

class ScXMLSbDataObj(ScXMLConstantDataObj):
    """Proxy of C++ ScXMLSbDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLSbDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLSbDataObj self) -> SoType"""
        return _coin.ScXMLSbDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLSbDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLSbDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLSbDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(value: 'char const *') -> "ScXMLDataObj *":
        """createFor(char const * value) -> ScXMLDataObj"""
        return _coin.ScXMLSbDataObj_createFor(value)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLSbDataObj self) -> ScXMLSbDataObj
        __init__(ScXMLSbDataObj self, char const * value) -> ScXMLSbDataObj
        """
        this = _coin.new_ScXMLSbDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLSbDataObj
    __del__ = lambda self: None

    def setSbValue(self, value: 'char const *') -> "void":
        """setSbValue(ScXMLSbDataObj self, char const * value)"""
        return _coin.ScXMLSbDataObj_setSbValue(self, value)


    def getSbValue(self) -> "char const *":
        """getSbValue(ScXMLSbDataObj self) -> char const *"""
        return _coin.ScXMLSbDataObj_getSbValue(self)


    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLSbDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLSbDataObj_clone(self)


    def convertToString(self, str: 'SbString') -> "void":
        """convertToString(ScXMLSbDataObj self, SbString str)"""
        return _coin.ScXMLSbDataObj_convertToString(self, str)

ScXMLSbDataObj_swigregister = _coin.ScXMLSbDataObj_swigregister
ScXMLSbDataObj_swigregister(ScXMLSbDataObj)

def ScXMLSbDataObj_getClassTypeId() -> "SoType":
    """ScXMLSbDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLSbDataObj_getClassTypeId()

def ScXMLSbDataObj_createInstance() -> "void *":
    """ScXMLSbDataObj_createInstance() -> void *"""
    return _coin.ScXMLSbDataObj_createInstance()

def ScXMLSbDataObj_initClass() -> "void":
    """ScXMLSbDataObj_initClass()"""
    return _coin.ScXMLSbDataObj_initClass()

def ScXMLSbDataObj_cleanClass() -> "void":
    """ScXMLSbDataObj_cleanClass()"""
    return _coin.ScXMLSbDataObj_cleanClass()

def ScXMLSbDataObj_createFor(value: 'char const *') -> "ScXMLDataObj *":
    """ScXMLSbDataObj_createFor(char const * value) -> ScXMLDataObj"""
    return _coin.ScXMLSbDataObj_createFor(value)

class ScXMLXMLDataObj(ScXMLDataObj):
    """Proxy of C++ ScXMLXMLDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLXMLDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLXMLDataObj self) -> SoType"""
        return _coin.ScXMLXMLDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLXMLDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLXMLDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLXMLDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLXMLDataObj self) -> ScXMLXMLDataObj"""
        this = _coin.new_ScXMLXMLDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLXMLDataObj
    __del__ = lambda self: None

    def clone(self) -> "ScXMLDataObj *":
        """clone(ScXMLXMLDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLXMLDataObj_clone(self)

ScXMLXMLDataObj_swigregister = _coin.ScXMLXMLDataObj_swigregister
ScXMLXMLDataObj_swigregister(ScXMLXMLDataObj)

def ScXMLXMLDataObj_getClassTypeId() -> "SoType":
    """ScXMLXMLDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLXMLDataObj_getClassTypeId()

def ScXMLXMLDataObj_createInstance() -> "void *":
    """ScXMLXMLDataObj_createInstance() -> void *"""
    return _coin.ScXMLXMLDataObj_createInstance()

def ScXMLXMLDataObj_initClass() -> "void":
    """ScXMLXMLDataObj_initClass()"""
    return _coin.ScXMLXMLDataObj_initClass()

def ScXMLXMLDataObj_cleanClass() -> "void":
    """ScXMLXMLDataObj_cleanClass()"""
    return _coin.ScXMLXMLDataObj_cleanClass()

class ScXMLExprDataObj(ScXMLDataObj):
    """Proxy of C++ ScXMLExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLExprDataObj self) -> SoType"""
        return _coin.ScXMLExprDataObj_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLExprDataObj
    __del__ = lambda self: None

    def evaluate(self, sm: 'ScXMLStateMachine') -> "ScXMLDataObj *":
        """evaluate(ScXMLExprDataObj self, ScXMLStateMachine sm) -> ScXMLDataObj"""
        return _coin.ScXMLExprDataObj_evaluate(self, sm)

ScXMLExprDataObj_swigregister = _coin.ScXMLExprDataObj_swigregister
ScXMLExprDataObj_swigregister(ScXMLExprDataObj)

def ScXMLExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLExprDataObj_getClassTypeId()

def ScXMLExprDataObj_initClass() -> "void":
    """ScXMLExprDataObj_initClass()"""
    return _coin.ScXMLExprDataObj_initClass()

def ScXMLExprDataObj_cleanClass() -> "void":
    """ScXMLExprDataObj_cleanClass()"""
    return _coin.ScXMLExprDataObj_cleanClass()

class ScXMLReferenceDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLReferenceDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLReferenceDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLReferenceDataObj self) -> SoType"""
        return _coin.ScXMLReferenceDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLReferenceDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLReferenceDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLReferenceDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(reference: 'char const *') -> "ScXMLDataObj *":
        """createFor(char const * reference) -> ScXMLDataObj"""
        return _coin.ScXMLReferenceDataObj_createFor(reference)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLReferenceDataObj self) -> ScXMLReferenceDataObj
        __init__(ScXMLReferenceDataObj self, char const * reference) -> ScXMLReferenceDataObj
        """
        this = _coin.new_ScXMLReferenceDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLReferenceDataObj
    __del__ = lambda self: None

    def setReference(self, reference: 'char const *') -> "void":
        """setReference(ScXMLReferenceDataObj self, char const * reference)"""
        return _coin.ScXMLReferenceDataObj_setReference(self, reference)


    def getReference(self) -> "char const *":
        """getReference(ScXMLReferenceDataObj self) -> char const *"""
        return _coin.ScXMLReferenceDataObj_getReference(self)


    def evaluateNow(self, sm: 'ScXMLStateMachine', pointer: 'ScXMLDataObj *&') -> "SbBool":
        """evaluateNow(ScXMLReferenceDataObj self, ScXMLStateMachine sm, ScXMLDataObj *& pointer) -> SbBool"""
        return _coin.ScXMLReferenceDataObj_evaluateNow(self, sm, pointer)

ScXMLReferenceDataObj_swigregister = _coin.ScXMLReferenceDataObj_swigregister
ScXMLReferenceDataObj_swigregister(ScXMLReferenceDataObj)

def ScXMLReferenceDataObj_getClassTypeId() -> "SoType":
    """ScXMLReferenceDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLReferenceDataObj_getClassTypeId()

def ScXMLReferenceDataObj_createInstance() -> "void *":
    """ScXMLReferenceDataObj_createInstance() -> void *"""
    return _coin.ScXMLReferenceDataObj_createInstance()

def ScXMLReferenceDataObj_initClass() -> "void":
    """ScXMLReferenceDataObj_initClass()"""
    return _coin.ScXMLReferenceDataObj_initClass()

def ScXMLReferenceDataObj_cleanClass() -> "void":
    """ScXMLReferenceDataObj_cleanClass()"""
    return _coin.ScXMLReferenceDataObj_cleanClass()

def ScXMLReferenceDataObj_createFor(reference: 'char const *') -> "ScXMLDataObj *":
    """ScXMLReferenceDataObj_createFor(char const * reference) -> ScXMLDataObj"""
    return _coin.ScXMLReferenceDataObj_createFor(reference)

class ScXMLAndOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLAndOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAndOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAndOpExprDataObj self) -> SoType"""
        return _coin.ScXMLAndOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLAndOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAndOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAndOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLAndOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLAndOpExprDataObj self) -> ScXMLAndOpExprDataObj
        __init__(ScXMLAndOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLAndOpExprDataObj
        """
        this = _coin.new_ScXMLAndOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLAndOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLAndOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLAndOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLAndOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAndOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLAndOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLAndOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLAndOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAndOpExprDataObj_getRHS(self)

ScXMLAndOpExprDataObj_swigregister = _coin.ScXMLAndOpExprDataObj_swigregister
ScXMLAndOpExprDataObj_swigregister(ScXMLAndOpExprDataObj)

def ScXMLAndOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLAndOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLAndOpExprDataObj_getClassTypeId()

def ScXMLAndOpExprDataObj_createInstance() -> "void *":
    """ScXMLAndOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLAndOpExprDataObj_createInstance()

def ScXMLAndOpExprDataObj_initClass() -> "void":
    """ScXMLAndOpExprDataObj_initClass()"""
    return _coin.ScXMLAndOpExprDataObj_initClass()

def ScXMLAndOpExprDataObj_cleanClass() -> "void":
    """ScXMLAndOpExprDataObj_cleanClass()"""
    return _coin.ScXMLAndOpExprDataObj_cleanClass()

def ScXMLAndOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLAndOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLAndOpExprDataObj_createFor(lhs, rhs)

class ScXMLOrOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLOrOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLOrOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLOrOpExprDataObj self) -> SoType"""
        return _coin.ScXMLOrOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLOrOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLOrOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLOrOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLOrOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLOrOpExprDataObj self) -> ScXMLOrOpExprDataObj
        __init__(ScXMLOrOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLOrOpExprDataObj
        """
        this = _coin.new_ScXMLOrOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLOrOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLOrOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLOrOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLOrOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLOrOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLOrOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLOrOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLOrOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLOrOpExprDataObj_getRHS(self)

ScXMLOrOpExprDataObj_swigregister = _coin.ScXMLOrOpExprDataObj_swigregister
ScXMLOrOpExprDataObj_swigregister(ScXMLOrOpExprDataObj)

def ScXMLOrOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLOrOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLOrOpExprDataObj_getClassTypeId()

def ScXMLOrOpExprDataObj_createInstance() -> "void *":
    """ScXMLOrOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLOrOpExprDataObj_createInstance()

def ScXMLOrOpExprDataObj_initClass() -> "void":
    """ScXMLOrOpExprDataObj_initClass()"""
    return _coin.ScXMLOrOpExprDataObj_initClass()

def ScXMLOrOpExprDataObj_cleanClass() -> "void":
    """ScXMLOrOpExprDataObj_cleanClass()"""
    return _coin.ScXMLOrOpExprDataObj_cleanClass()

def ScXMLOrOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLOrOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLOrOpExprDataObj_createFor(lhs, rhs)

class ScXMLNotOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLNotOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLNotOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLNotOpExprDataObj self) -> SoType"""
        return _coin.ScXMLNotOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLNotOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLNotOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLNotOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLNotOpExprDataObj_createFor(rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLNotOpExprDataObj self) -> ScXMLNotOpExprDataObj
        __init__(ScXMLNotOpExprDataObj self, ScXMLDataObj rhs) -> ScXMLNotOpExprDataObj
        """
        this = _coin.new_ScXMLNotOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLNotOpExprDataObj
    __del__ = lambda self: None

    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLNotOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLNotOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLNotOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLNotOpExprDataObj_getRHS(self)

ScXMLNotOpExprDataObj_swigregister = _coin.ScXMLNotOpExprDataObj_swigregister
ScXMLNotOpExprDataObj_swigregister(ScXMLNotOpExprDataObj)

def ScXMLNotOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLNotOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLNotOpExprDataObj_getClassTypeId()

def ScXMLNotOpExprDataObj_createInstance() -> "void *":
    """ScXMLNotOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLNotOpExprDataObj_createInstance()

def ScXMLNotOpExprDataObj_initClass() -> "void":
    """ScXMLNotOpExprDataObj_initClass()"""
    return _coin.ScXMLNotOpExprDataObj_initClass()

def ScXMLNotOpExprDataObj_cleanClass() -> "void":
    """ScXMLNotOpExprDataObj_cleanClass()"""
    return _coin.ScXMLNotOpExprDataObj_cleanClass()

def ScXMLNotOpExprDataObj_createFor(rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLNotOpExprDataObj_createFor(ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLNotOpExprDataObj_createFor(rhs)

class ScXMLEqualsOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLEqualsOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLEqualsOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLEqualsOpExprDataObj self) -> SoType"""
        return _coin.ScXMLEqualsOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLEqualsOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLEqualsOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLEqualsOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLEqualsOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLEqualsOpExprDataObj self) -> ScXMLEqualsOpExprDataObj
        __init__(ScXMLEqualsOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLEqualsOpExprDataObj
        """
        this = _coin.new_ScXMLEqualsOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLEqualsOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLEqualsOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLEqualsOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLEqualsOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLEqualsOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLEqualsOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLEqualsOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLEqualsOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLEqualsOpExprDataObj_getRHS(self)

ScXMLEqualsOpExprDataObj_swigregister = _coin.ScXMLEqualsOpExprDataObj_swigregister
ScXMLEqualsOpExprDataObj_swigregister(ScXMLEqualsOpExprDataObj)

def ScXMLEqualsOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLEqualsOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLEqualsOpExprDataObj_getClassTypeId()

def ScXMLEqualsOpExprDataObj_createInstance() -> "void *":
    """ScXMLEqualsOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLEqualsOpExprDataObj_createInstance()

def ScXMLEqualsOpExprDataObj_initClass() -> "void":
    """ScXMLEqualsOpExprDataObj_initClass()"""
    return _coin.ScXMLEqualsOpExprDataObj_initClass()

def ScXMLEqualsOpExprDataObj_cleanClass() -> "void":
    """ScXMLEqualsOpExprDataObj_cleanClass()"""
    return _coin.ScXMLEqualsOpExprDataObj_cleanClass()

def ScXMLEqualsOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLEqualsOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLEqualsOpExprDataObj_createFor(lhs, rhs)

class ScXMLAddOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLAddOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAddOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAddOpExprDataObj self) -> SoType"""
        return _coin.ScXMLAddOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLAddOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAddOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAddOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLAddOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLAddOpExprDataObj self) -> ScXMLAddOpExprDataObj
        __init__(ScXMLAddOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLAddOpExprDataObj
        """
        this = _coin.new_ScXMLAddOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLAddOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLAddOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLAddOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLAddOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAddOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLAddOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLAddOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLAddOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAddOpExprDataObj_getRHS(self)

ScXMLAddOpExprDataObj_swigregister = _coin.ScXMLAddOpExprDataObj_swigregister
ScXMLAddOpExprDataObj_swigregister(ScXMLAddOpExprDataObj)

def ScXMLAddOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLAddOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLAddOpExprDataObj_getClassTypeId()

def ScXMLAddOpExprDataObj_createInstance() -> "void *":
    """ScXMLAddOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLAddOpExprDataObj_createInstance()

def ScXMLAddOpExprDataObj_initClass() -> "void":
    """ScXMLAddOpExprDataObj_initClass()"""
    return _coin.ScXMLAddOpExprDataObj_initClass()

def ScXMLAddOpExprDataObj_cleanClass() -> "void":
    """ScXMLAddOpExprDataObj_cleanClass()"""
    return _coin.ScXMLAddOpExprDataObj_cleanClass()

def ScXMLAddOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLAddOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLAddOpExprDataObj_createFor(lhs, rhs)

class ScXMLSubtractOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLSubtractOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLSubtractOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLSubtractOpExprDataObj self) -> SoType"""
        return _coin.ScXMLSubtractOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLSubtractOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLSubtractOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLSubtractOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLSubtractOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLSubtractOpExprDataObj self) -> ScXMLSubtractOpExprDataObj
        __init__(ScXMLSubtractOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLSubtractOpExprDataObj
        """
        this = _coin.new_ScXMLSubtractOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLSubtractOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLSubtractOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLSubtractOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLSubtractOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLSubtractOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLSubtractOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLSubtractOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLSubtractOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLSubtractOpExprDataObj_getRHS(self)

ScXMLSubtractOpExprDataObj_swigregister = _coin.ScXMLSubtractOpExprDataObj_swigregister
ScXMLSubtractOpExprDataObj_swigregister(ScXMLSubtractOpExprDataObj)

def ScXMLSubtractOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLSubtractOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLSubtractOpExprDataObj_getClassTypeId()

def ScXMLSubtractOpExprDataObj_createInstance() -> "void *":
    """ScXMLSubtractOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLSubtractOpExprDataObj_createInstance()

def ScXMLSubtractOpExprDataObj_initClass() -> "void":
    """ScXMLSubtractOpExprDataObj_initClass()"""
    return _coin.ScXMLSubtractOpExprDataObj_initClass()

def ScXMLSubtractOpExprDataObj_cleanClass() -> "void":
    """ScXMLSubtractOpExprDataObj_cleanClass()"""
    return _coin.ScXMLSubtractOpExprDataObj_cleanClass()

def ScXMLSubtractOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLSubtractOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLSubtractOpExprDataObj_createFor(lhs, rhs)

class ScXMLMultiplyOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLMultiplyOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLMultiplyOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLMultiplyOpExprDataObj self) -> SoType"""
        return _coin.ScXMLMultiplyOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLMultiplyOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLMultiplyOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLMultiplyOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLMultiplyOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLMultiplyOpExprDataObj self) -> ScXMLMultiplyOpExprDataObj
        __init__(ScXMLMultiplyOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLMultiplyOpExprDataObj
        """
        this = _coin.new_ScXMLMultiplyOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLMultiplyOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLMultiplyOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLMultiplyOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLMultiplyOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLMultiplyOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLMultiplyOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLMultiplyOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLMultiplyOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLMultiplyOpExprDataObj_getRHS(self)

ScXMLMultiplyOpExprDataObj_swigregister = _coin.ScXMLMultiplyOpExprDataObj_swigregister
ScXMLMultiplyOpExprDataObj_swigregister(ScXMLMultiplyOpExprDataObj)

def ScXMLMultiplyOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLMultiplyOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLMultiplyOpExprDataObj_getClassTypeId()

def ScXMLMultiplyOpExprDataObj_createInstance() -> "void *":
    """ScXMLMultiplyOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLMultiplyOpExprDataObj_createInstance()

def ScXMLMultiplyOpExprDataObj_initClass() -> "void":
    """ScXMLMultiplyOpExprDataObj_initClass()"""
    return _coin.ScXMLMultiplyOpExprDataObj_initClass()

def ScXMLMultiplyOpExprDataObj_cleanClass() -> "void":
    """ScXMLMultiplyOpExprDataObj_cleanClass()"""
    return _coin.ScXMLMultiplyOpExprDataObj_cleanClass()

def ScXMLMultiplyOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLMultiplyOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLMultiplyOpExprDataObj_createFor(lhs, rhs)

class ScXMLDivideOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLDivideOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLDivideOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLDivideOpExprDataObj self) -> SoType"""
        return _coin.ScXMLDivideOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLDivideOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLDivideOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLDivideOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLDivideOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLDivideOpExprDataObj self) -> ScXMLDivideOpExprDataObj
        __init__(ScXMLDivideOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDivideOpExprDataObj
        """
        this = _coin.new_ScXMLDivideOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLDivideOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLDivideOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLDivideOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLDivideOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLDivideOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLDivideOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLDivideOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLDivideOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLDivideOpExprDataObj_getRHS(self)

ScXMLDivideOpExprDataObj_swigregister = _coin.ScXMLDivideOpExprDataObj_swigregister
ScXMLDivideOpExprDataObj_swigregister(ScXMLDivideOpExprDataObj)

def ScXMLDivideOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLDivideOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLDivideOpExprDataObj_getClassTypeId()

def ScXMLDivideOpExprDataObj_createInstance() -> "void *":
    """ScXMLDivideOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLDivideOpExprDataObj_createInstance()

def ScXMLDivideOpExprDataObj_initClass() -> "void":
    """ScXMLDivideOpExprDataObj_initClass()"""
    return _coin.ScXMLDivideOpExprDataObj_initClass()

def ScXMLDivideOpExprDataObj_cleanClass() -> "void":
    """ScXMLDivideOpExprDataObj_cleanClass()"""
    return _coin.ScXMLDivideOpExprDataObj_cleanClass()

def ScXMLDivideOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLDivideOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLDivideOpExprDataObj_createFor(lhs, rhs)

class ScXMLNegateOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLNegateOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLNegateOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLNegateOpExprDataObj self) -> SoType"""
        return _coin.ScXMLNegateOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLNegateOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLNegateOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLNegateOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLNegateOpExprDataObj_createFor(rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLNegateOpExprDataObj self) -> ScXMLNegateOpExprDataObj
        __init__(ScXMLNegateOpExprDataObj self, ScXMLDataObj rhs) -> ScXMLNegateOpExprDataObj
        """
        this = _coin.new_ScXMLNegateOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLNegateOpExprDataObj
    __del__ = lambda self: None

    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLNegateOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLNegateOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLNegateOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLNegateOpExprDataObj_getRHS(self)

ScXMLNegateOpExprDataObj_swigregister = _coin.ScXMLNegateOpExprDataObj_swigregister
ScXMLNegateOpExprDataObj_swigregister(ScXMLNegateOpExprDataObj)

def ScXMLNegateOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLNegateOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLNegateOpExprDataObj_getClassTypeId()

def ScXMLNegateOpExprDataObj_createInstance() -> "void *":
    """ScXMLNegateOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLNegateOpExprDataObj_createInstance()

def ScXMLNegateOpExprDataObj_initClass() -> "void":
    """ScXMLNegateOpExprDataObj_initClass()"""
    return _coin.ScXMLNegateOpExprDataObj_initClass()

def ScXMLNegateOpExprDataObj_cleanClass() -> "void":
    """ScXMLNegateOpExprDataObj_cleanClass()"""
    return _coin.ScXMLNegateOpExprDataObj_cleanClass()

def ScXMLNegateOpExprDataObj_createFor(rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLNegateOpExprDataObj_createFor(ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLNegateOpExprDataObj_createFor(rhs)

class ScXMLCoinEvaluator(ScXMLEvaluator):
    """Proxy of C++ ScXMLCoinEvaluator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinEvaluator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinEvaluator self) -> SoType"""
        return _coin.ScXMLCoinEvaluator_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinEvaluator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinEvaluator_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinEvaluator_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLCoinEvaluator self) -> ScXMLCoinEvaluator"""
        this = _coin.new_ScXMLCoinEvaluator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinEvaluator
    __del__ = lambda self: None

    def setStateMachine(self, sm: 'ScXMLStateMachine') -> "void":
        """setStateMachine(ScXMLCoinEvaluator self, ScXMLStateMachine sm)"""
        return _coin.ScXMLCoinEvaluator_setStateMachine(self, sm)


    def evaluate(self, expression: 'char const *') -> "ScXMLDataObj *":
        """evaluate(ScXMLCoinEvaluator self, char const * expression) -> ScXMLDataObj"""
        return _coin.ScXMLCoinEvaluator_evaluate(self, expression)


    def setAtLocation(self, location: 'char const *', obj: 'ScXMLDataObj') -> "SbBool":
        """setAtLocation(ScXMLCoinEvaluator self, char const * location, ScXMLDataObj obj) -> SbBool"""
        return _coin.ScXMLCoinEvaluator_setAtLocation(self, location, obj)


    def locate(self, location: 'char const *') -> "ScXMLDataObj *":
        """locate(ScXMLCoinEvaluator self, char const * location) -> ScXMLDataObj"""
        return _coin.ScXMLCoinEvaluator_locate(self, location)


    def clearTemporaryVariables(self) -> "void":
        """clearTemporaryVariables(ScXMLCoinEvaluator self)"""
        return _coin.ScXMLCoinEvaluator_clearTemporaryVariables(self)


    def dumpTemporaries(self) -> "void":
        """dumpTemporaries(ScXMLCoinEvaluator self)"""
        return _coin.ScXMLCoinEvaluator_dumpTemporaries(self)

ScXMLCoinEvaluator_swigregister = _coin.ScXMLCoinEvaluator_swigregister
ScXMLCoinEvaluator_swigregister(ScXMLCoinEvaluator)

def ScXMLCoinEvaluator_getClassTypeId() -> "SoType":
    """ScXMLCoinEvaluator_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinEvaluator_getClassTypeId()

def ScXMLCoinEvaluator_createInstance() -> "void *":
    """ScXMLCoinEvaluator_createInstance() -> void *"""
    return _coin.ScXMLCoinEvaluator_createInstance()

def ScXMLCoinEvaluator_initClass() -> "void":
    """ScXMLCoinEvaluator_initClass()"""
    return _coin.ScXMLCoinEvaluator_initClass()

def ScXMLCoinEvaluator_cleanClass() -> "void":
    """ScXMLCoinEvaluator_cleanClass()"""
    return _coin.ScXMLCoinEvaluator_cleanClass()

class ScXMLCoinEqualsOpExprDataObj(ScXMLEqualsOpExprDataObj):
    """Proxy of C++ ScXMLCoinEqualsOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinEqualsOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinEqualsOpExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinEqualsOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinEqualsOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinEqualsOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinEqualsOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLCoinEqualsOpExprDataObj self) -> ScXMLCoinEqualsOpExprDataObj"""
        this = _coin.new_ScXMLCoinEqualsOpExprDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinEqualsOpExprDataObj
    __del__ = lambda self: None
ScXMLCoinEqualsOpExprDataObj_swigregister = _coin.ScXMLCoinEqualsOpExprDataObj_swigregister
ScXMLCoinEqualsOpExprDataObj_swigregister(ScXMLCoinEqualsOpExprDataObj)

def ScXMLCoinEqualsOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinEqualsOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinEqualsOpExprDataObj_getClassTypeId()

def ScXMLCoinEqualsOpExprDataObj_createInstance() -> "void *":
    """ScXMLCoinEqualsOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinEqualsOpExprDataObj_createInstance()

def ScXMLCoinEqualsOpExprDataObj_initClass() -> "void":
    """ScXMLCoinEqualsOpExprDataObj_initClass()"""
    return _coin.ScXMLCoinEqualsOpExprDataObj_initClass()

def ScXMLCoinEqualsOpExprDataObj_cleanClass() -> "void":
    """ScXMLCoinEqualsOpExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinEqualsOpExprDataObj_cleanClass()

class ScXMLCoinAddOpExprDataObj(ScXMLAddOpExprDataObj):
    """Proxy of C++ ScXMLCoinAddOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinAddOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinAddOpExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinAddOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinAddOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinAddOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinAddOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLCoinAddOpExprDataObj self) -> ScXMLCoinAddOpExprDataObj"""
        this = _coin.new_ScXMLCoinAddOpExprDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinAddOpExprDataObj
    __del__ = lambda self: None
ScXMLCoinAddOpExprDataObj_swigregister = _coin.ScXMLCoinAddOpExprDataObj_swigregister
ScXMLCoinAddOpExprDataObj_swigregister(ScXMLCoinAddOpExprDataObj)

def ScXMLCoinAddOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinAddOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinAddOpExprDataObj_getClassTypeId()

def ScXMLCoinAddOpExprDataObj_createInstance() -> "void *":
    """ScXMLCoinAddOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinAddOpExprDataObj_createInstance()

def ScXMLCoinAddOpExprDataObj_initClass() -> "void":
    """ScXMLCoinAddOpExprDataObj_initClass()"""
    return _coin.ScXMLCoinAddOpExprDataObj_initClass()

def ScXMLCoinAddOpExprDataObj_cleanClass() -> "void":
    """ScXMLCoinAddOpExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinAddOpExprDataObj_cleanClass()

class ScXMLCoinSubtractOpExprDataObj(ScXMLSubtractOpExprDataObj):
    """Proxy of C++ ScXMLCoinSubtractOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinSubtractOpExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLCoinSubtractOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self):
        """__init__(ScXMLCoinSubtractOpExprDataObj self) -> ScXMLCoinSubtractOpExprDataObj"""
        this = _coin.new_ScXMLCoinSubtractOpExprDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinSubtractOpExprDataObj
    __del__ = lambda self: None
ScXMLCoinSubtractOpExprDataObj_swigregister = _coin.ScXMLCoinSubtractOpExprDataObj_swigregister
ScXMLCoinSubtractOpExprDataObj_swigregister(ScXMLCoinSubtractOpExprDataObj)

def ScXMLCoinSubtractOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinSubtractOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinSubtractOpExprDataObj_getClassTypeId()

def ScXMLCoinSubtractOpExprDataObj_createInstance() -> "void *":
    """ScXMLCoinSubtractOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinSubtractOpExprDataObj_createInstance()

def ScXMLCoinSubtractOpExprDataObj_initClass() -> "void":
    """ScXMLCoinSubtractOpExprDataObj_initClass()"""
    return _coin.ScXMLCoinSubtractOpExprDataObj_initClass()

def ScXMLCoinSubtractOpExprDataObj_cleanClass() -> "void":
    """ScXMLCoinSubtractOpExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinSubtractOpExprDataObj_cleanClass()

def ScXMLCoinSubtractOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLCoinSubtractOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLCoinSubtractOpExprDataObj_createFor(lhs, rhs)

class ScXMLCoinMultiplyOpExprDataObj(ScXMLMultiplyOpExprDataObj):
    """Proxy of C++ ScXMLCoinMultiplyOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinMultiplyOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinMultiplyOpExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinMultiplyOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinMultiplyOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinMultiplyOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinMultiplyOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLCoinMultiplyOpExprDataObj self) -> ScXMLCoinMultiplyOpExprDataObj"""
        this = _coin.new_ScXMLCoinMultiplyOpExprDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinMultiplyOpExprDataObj
    __del__ = lambda self: None
ScXMLCoinMultiplyOpExprDataObj_swigregister = _coin.ScXMLCoinMultiplyOpExprDataObj_swigregister
ScXMLCoinMultiplyOpExprDataObj_swigregister(ScXMLCoinMultiplyOpExprDataObj)

def ScXMLCoinMultiplyOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinMultiplyOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinMultiplyOpExprDataObj_getClassTypeId()

def ScXMLCoinMultiplyOpExprDataObj_createInstance() -> "void *":
    """ScXMLCoinMultiplyOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinMultiplyOpExprDataObj_createInstance()

def ScXMLCoinMultiplyOpExprDataObj_initClass() -> "void":
    """ScXMLCoinMultiplyOpExprDataObj_initClass()"""
    return _coin.ScXMLCoinMultiplyOpExprDataObj_initClass()

def ScXMLCoinMultiplyOpExprDataObj_cleanClass() -> "void":
    """ScXMLCoinMultiplyOpExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinMultiplyOpExprDataObj_cleanClass()

class ScXMLCoinDivideOpExprDataObj(ScXMLDivideOpExprDataObj):
    """Proxy of C++ ScXMLCoinDivideOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinDivideOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinDivideOpExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinDivideOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinDivideOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinDivideOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinDivideOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLCoinDivideOpExprDataObj self) -> ScXMLCoinDivideOpExprDataObj"""
        this = _coin.new_ScXMLCoinDivideOpExprDataObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinDivideOpExprDataObj
    __del__ = lambda self: None
ScXMLCoinDivideOpExprDataObj_swigregister = _coin.ScXMLCoinDivideOpExprDataObj_swigregister
ScXMLCoinDivideOpExprDataObj_swigregister(ScXMLCoinDivideOpExprDataObj)

def ScXMLCoinDivideOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinDivideOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinDivideOpExprDataObj_getClassTypeId()

def ScXMLCoinDivideOpExprDataObj_createInstance() -> "void *":
    """ScXMLCoinDivideOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinDivideOpExprDataObj_createInstance()

def ScXMLCoinDivideOpExprDataObj_initClass() -> "void":
    """ScXMLCoinDivideOpExprDataObj_initClass()"""
    return _coin.ScXMLCoinDivideOpExprDataObj_initClass()

def ScXMLCoinDivideOpExprDataObj_cleanClass() -> "void":
    """ScXMLCoinDivideOpExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinDivideOpExprDataObj_cleanClass()

class ScXMLCoinLengthFuncExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLCoinLengthFuncExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLCoinLengthFuncExprDataObj self) -> SoType"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(obj: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj obj) -> ScXMLDataObj"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_createFor(obj)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLCoinLengthFuncExprDataObj self) -> ScXMLCoinLengthFuncExprDataObj
        __init__(ScXMLCoinLengthFuncExprDataObj self, ScXMLDataObj obj) -> ScXMLCoinLengthFuncExprDataObj
        """
        this = _coin.new_ScXMLCoinLengthFuncExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLCoinLengthFuncExprDataObj
    __del__ = lambda self: None

    def setExpr(self, obj: 'ScXMLDataObj') -> "void":
        """setExpr(ScXMLCoinLengthFuncExprDataObj self, ScXMLDataObj obj)"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_setExpr(self, obj)


    def getExpr(self) -> "ScXMLDataObj *":
        """getExpr(ScXMLCoinLengthFuncExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLCoinLengthFuncExprDataObj_getExpr(self)

ScXMLCoinLengthFuncExprDataObj_swigregister = _coin.ScXMLCoinLengthFuncExprDataObj_swigregister
ScXMLCoinLengthFuncExprDataObj_swigregister(ScXMLCoinLengthFuncExprDataObj)

def ScXMLCoinLengthFuncExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLCoinLengthFuncExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLCoinLengthFuncExprDataObj_getClassTypeId()

def ScXMLCoinLengthFuncExprDataObj_createInstance() -> "void *":
    """ScXMLCoinLengthFuncExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLCoinLengthFuncExprDataObj_createInstance()

def ScXMLCoinLengthFuncExprDataObj_initClass() -> "void":
    """ScXMLCoinLengthFuncExprDataObj_initClass()"""
    return _coin.ScXMLCoinLengthFuncExprDataObj_initClass()

def ScXMLCoinLengthFuncExprDataObj_cleanClass() -> "void":
    """ScXMLCoinLengthFuncExprDataObj_cleanClass()"""
    return _coin.ScXMLCoinLengthFuncExprDataObj_cleanClass()

def ScXMLCoinLengthFuncExprDataObj_createFor(obj: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLCoinLengthFuncExprDataObj_createFor(ScXMLDataObj obj) -> ScXMLDataObj"""
    return _coin.ScXMLCoinLengthFuncExprDataObj_createFor(obj)

class ScXMLContentElt(ScXMLElt):
    """Proxy of C++ ScXMLContentElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLContentElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLContentElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLContentElt self) -> SoType"""
        return _coin.ScXMLContentElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLContentElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLContentElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLContentElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLContentElt self) -> ScXMLContentElt"""
        this = _coin.new_ScXMLContentElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLContentElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLContentElt self, ScXMLElt rhs)"""
        return _coin.ScXMLContentElt_copyContents(self, rhs)

ScXMLContentElt_swigregister = _coin.ScXMLContentElt_swigregister
ScXMLContentElt_swigregister(ScXMLContentElt)

def ScXMLContentElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLContentElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLContentElt_getElementReader()

def ScXMLContentElt_getClassTypeId() -> "SoType":
    """ScXMLContentElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLContentElt_getClassTypeId()

def ScXMLContentElt_createInstance() -> "void *":
    """ScXMLContentElt_createInstance() -> void *"""
    return _coin.ScXMLContentElt_createInstance()

def ScXMLContentElt_initClass() -> "void":
    """ScXMLContentElt_initClass()"""
    return _coin.ScXMLContentElt_initClass()

def ScXMLContentElt_cleanClass() -> "void":
    """ScXMLContentElt_cleanClass()"""
    return _coin.ScXMLContentElt_cleanClass()

class ScXMLDataElt(ScXMLElt):
    """Proxy of C++ ScXMLDataElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLDataElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLDataElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLDataElt self) -> SoType"""
        return _coin.ScXMLDataElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLDataElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLDataElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLDataElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLDataElt self) -> ScXMLDataElt"""
        this = _coin.new_ScXMLDataElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLDataElt
    __del__ = lambda self: None

    def setIDAttribute(self, ID: 'char const *') -> "void":
        """setIDAttribute(ScXMLDataElt self, char const * ID)"""
        return _coin.ScXMLDataElt_setIDAttribute(self, ID)


    def getIDAttribute(self) -> "char const *":
        """getIDAttribute(ScXMLDataElt self) -> char const *"""
        return _coin.ScXMLDataElt_getIDAttribute(self)


    def setSrcAttribute(self, src: 'char const *') -> "void":
        """setSrcAttribute(ScXMLDataElt self, char const * src)"""
        return _coin.ScXMLDataElt_setSrcAttribute(self, src)


    def getSrcAttribute(self) -> "char const *":
        """getSrcAttribute(ScXMLDataElt self) -> char const *"""
        return _coin.ScXMLDataElt_getSrcAttribute(self)


    def setExprAttribute(self, expr: 'char const *') -> "void":
        """setExprAttribute(ScXMLDataElt self, char const * expr)"""
        return _coin.ScXMLDataElt_setExprAttribute(self, expr)


    def getExprAttribute(self) -> "char const *":
        """getExprAttribute(ScXMLDataElt self) -> char const *"""
        return _coin.ScXMLDataElt_getExprAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLDataElt self) -> SbBool"""
        return _coin.ScXMLDataElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLDataElt self, ScXMLElt rhs)"""
        return _coin.ScXMLDataElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLDataElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLDataElt_search(self, attrname, attrvalue)


    def setValueObj(self, value: 'ScXMLDataObj') -> "void":
        """setValueObj(ScXMLDataElt self, ScXMLDataObj value)"""
        return _coin.ScXMLDataElt_setValueObj(self, value)


    def getValueObj(self) -> "ScXMLDataObj *":
        """getValueObj(ScXMLDataElt self) -> ScXMLDataObj"""
        return _coin.ScXMLDataElt_getValueObj(self)

ScXMLDataElt_swigregister = _coin.ScXMLDataElt_swigregister
ScXMLDataElt_swigregister(ScXMLDataElt)

def ScXMLDataElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLDataElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLDataElt_getElementReader()

def ScXMLDataElt_getClassTypeId() -> "SoType":
    """ScXMLDataElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLDataElt_getClassTypeId()

def ScXMLDataElt_createInstance() -> "void *":
    """ScXMLDataElt_createInstance() -> void *"""
    return _coin.ScXMLDataElt_createInstance()

def ScXMLDataElt_initClass() -> "void":
    """ScXMLDataElt_initClass()"""
    return _coin.ScXMLDataElt_initClass()

def ScXMLDataElt_cleanClass() -> "void":
    """ScXMLDataElt_cleanClass()"""
    return _coin.ScXMLDataElt_cleanClass()

class ScXMLDataModelElt(ScXMLElt):
    """Proxy of C++ ScXMLDataModelElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLDataModelElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLDataModelElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLDataModelElt self) -> SoType"""
        return _coin.ScXMLDataModelElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLDataModelElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLDataModelElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLDataModelElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLDataModelElt self) -> ScXMLDataModelElt"""
        this = _coin.new_ScXMLDataModelElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLDataModelElt
    __del__ = lambda self: None

    def setSchemaAttribute(self, schema: 'char const *') -> "void":
        """setSchemaAttribute(ScXMLDataModelElt self, char const * schema)"""
        return _coin.ScXMLDataModelElt_setSchemaAttribute(self, schema)


    def getSchemaAttribute(self) -> "char const *":
        """getSchemaAttribute(ScXMLDataModelElt self) -> char const *"""
        return _coin.ScXMLDataModelElt_getSchemaAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLDataModelElt self) -> SbBool"""
        return _coin.ScXMLDataModelElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLDataModelElt self, ScXMLElt rhs)"""
        return _coin.ScXMLDataModelElt_copyContents(self, rhs)


    def getNumData(self) -> "int":
        """getNumData(ScXMLDataModelElt self) -> int"""
        return _coin.ScXMLDataModelElt_getNumData(self)


    def getData(self, idx: 'int') -> "ScXMLDataElt *":
        """getData(ScXMLDataModelElt self, int idx) -> ScXMLDataElt"""
        return _coin.ScXMLDataModelElt_getData(self, idx)


    def addData(self, data: 'ScXMLDataElt') -> "void":
        """addData(ScXMLDataModelElt self, ScXMLDataElt data)"""
        return _coin.ScXMLDataModelElt_addData(self, data)


    def removeData(self, data: 'ScXMLDataElt') -> "void":
        """removeData(ScXMLDataModelElt self, ScXMLDataElt data)"""
        return _coin.ScXMLDataModelElt_removeData(self, data)


    def clearAllData(self) -> "void":
        """clearAllData(ScXMLDataModelElt self)"""
        return _coin.ScXMLDataModelElt_clearAllData(self)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLDataModelElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLDataModelElt_search(self, attrname, attrvalue)

ScXMLDataModelElt_swigregister = _coin.ScXMLDataModelElt_swigregister
ScXMLDataModelElt_swigregister(ScXMLDataModelElt)

def ScXMLDataModelElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLDataModelElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLDataModelElt_getElementReader()

def ScXMLDataModelElt_getClassTypeId() -> "SoType":
    """ScXMLDataModelElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLDataModelElt_getClassTypeId()

def ScXMLDataModelElt_createInstance() -> "void *":
    """ScXMLDataModelElt_createInstance() -> void *"""
    return _coin.ScXMLDataModelElt_createInstance()

def ScXMLDataModelElt_initClass() -> "void":
    """ScXMLDataModelElt_initClass()"""
    return _coin.ScXMLDataModelElt_initClass()

def ScXMLDataModelElt_cleanClass() -> "void":
    """ScXMLDataModelElt_cleanClass()"""
    return _coin.ScXMLDataModelElt_cleanClass()

class ScXMLDocument(ScXMLObject):
    """Proxy of C++ ScXMLDocument class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLDocument_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLDocument self) -> SoType"""
        return _coin.ScXMLDocument_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLDocument_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLDocument_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLDocument_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def readFile(filename: 'char const *') -> "ScXMLDocument *":
        """readFile(char const * filename) -> ScXMLDocument"""
        return _coin.ScXMLDocument_readFile(filename)

    readFile = staticmethod(readFile)

    def readBuffer(buffer: 'SbByteBuffer') -> "ScXMLDocument *":
        """readBuffer(SbByteBuffer buffer) -> ScXMLDocument"""
        return _coin.ScXMLDocument_readBuffer(buffer)

    readBuffer = staticmethod(readBuffer)

    def readXMLData(xmldoc: 'cc_xml_doc *') -> "ScXMLDocument *":
        """readXMLData(cc_xml_doc * xmldoc) -> ScXMLDocument"""
        return _coin.ScXMLDocument_readXMLData(xmldoc)

    readXMLData = staticmethod(readXMLData)

    def __init__(self):
        """__init__(ScXMLDocument self) -> ScXMLDocument"""
        this = _coin.new_ScXMLDocument()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLDocument
    __del__ = lambda self: None

    def setFilename(self, filename: 'char const *') -> "void":
        """setFilename(ScXMLDocument self, char const * filename)"""
        return _coin.ScXMLDocument_setFilename(self, filename)


    def getFilename(self) -> "char const *":
        """getFilename(ScXMLDocument self) -> char const *"""
        return _coin.ScXMLDocument_getFilename(self)


    def setRoot(self, root: 'ScXMLScxmlElt') -> "void":
        """setRoot(ScXMLDocument self, ScXMLScxmlElt root)"""
        return _coin.ScXMLDocument_setRoot(self, root)


    def getRoot(self) -> "ScXMLScxmlElt *":
        """getRoot(ScXMLDocument self) -> ScXMLScxmlElt"""
        return _coin.ScXMLDocument_getRoot(self)


    def getStateById(self, id: 'SbName') -> "ScXMLAbstractStateElt *":
        """getStateById(ScXMLDocument self, SbName id) -> ScXMLAbstractStateElt"""
        return _coin.ScXMLDocument_getStateById(self, id)


    def getDataById(self, id: 'SbName') -> "ScXMLDataElt *":
        """getDataById(ScXMLDocument self, SbName id) -> ScXMLDataElt"""
        return _coin.ScXMLDocument_getDataById(self, id)

ScXMLDocument_swigregister = _coin.ScXMLDocument_swigregister
ScXMLDocument_swigregister(ScXMLDocument)

def ScXMLDocument_getClassTypeId() -> "SoType":
    """ScXMLDocument_getClassTypeId() -> SoType"""
    return _coin.ScXMLDocument_getClassTypeId()

def ScXMLDocument_createInstance() -> "void *":
    """ScXMLDocument_createInstance() -> void *"""
    return _coin.ScXMLDocument_createInstance()

def ScXMLDocument_initClass() -> "void":
    """ScXMLDocument_initClass()"""
    return _coin.ScXMLDocument_initClass()

def ScXMLDocument_cleanClass() -> "void":
    """ScXMLDocument_cleanClass()"""
    return _coin.ScXMLDocument_cleanClass()

def ScXMLDocument_readFile(filename: 'char const *') -> "ScXMLDocument *":
    """ScXMLDocument_readFile(char const * filename) -> ScXMLDocument"""
    return _coin.ScXMLDocument_readFile(filename)

def ScXMLDocument_readBuffer(buffer: 'SbByteBuffer') -> "ScXMLDocument *":
    """ScXMLDocument_readBuffer(SbByteBuffer buffer) -> ScXMLDocument"""
    return _coin.ScXMLDocument_readBuffer(buffer)

def ScXMLDocument_readXMLData(xmldoc: 'cc_xml_doc *') -> "ScXMLDocument *":
    """ScXMLDocument_readXMLData(cc_xml_doc * xmldoc) -> ScXMLDocument"""
    return _coin.ScXMLDocument_readXMLData(xmldoc)

class ScXMLECMAScriptEvaluator(ScXMLEvaluator):
    """Proxy of C++ ScXMLECMAScriptEvaluator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLECMAScriptEvaluator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLECMAScriptEvaluator self) -> SoType"""
        return _coin.ScXMLECMAScriptEvaluator_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLECMAScriptEvaluator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLECMAScriptEvaluator_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLECMAScriptEvaluator_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLECMAScriptEvaluator self) -> ScXMLECMAScriptEvaluator"""
        this = _coin.new_ScXMLECMAScriptEvaluator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLECMAScriptEvaluator
    __del__ = lambda self: None

    def evaluate(self, expression: 'char const *') -> "ScXMLDataObj *":
        """evaluate(ScXMLECMAScriptEvaluator self, char const * expression) -> ScXMLDataObj"""
        return _coin.ScXMLECMAScriptEvaluator_evaluate(self, expression)


    def setAtLocation(self, location: 'char const *', obj: 'ScXMLDataObj') -> "SbBool":
        """setAtLocation(ScXMLECMAScriptEvaluator self, char const * location, ScXMLDataObj obj) -> SbBool"""
        return _coin.ScXMLECMAScriptEvaluator_setAtLocation(self, location, obj)


    def locate(self, location: 'char const *') -> "ScXMLDataObj *":
        """locate(ScXMLECMAScriptEvaluator self, char const * location) -> ScXMLDataObj"""
        return _coin.ScXMLECMAScriptEvaluator_locate(self, location)

ScXMLECMAScriptEvaluator_swigregister = _coin.ScXMLECMAScriptEvaluator_swigregister
ScXMLECMAScriptEvaluator_swigregister(ScXMLECMAScriptEvaluator)

def ScXMLECMAScriptEvaluator_getClassTypeId() -> "SoType":
    """ScXMLECMAScriptEvaluator_getClassTypeId() -> SoType"""
    return _coin.ScXMLECMAScriptEvaluator_getClassTypeId()

def ScXMLECMAScriptEvaluator_createInstance() -> "void *":
    """ScXMLECMAScriptEvaluator_createInstance() -> void *"""
    return _coin.ScXMLECMAScriptEvaluator_createInstance()

def ScXMLECMAScriptEvaluator_initClass() -> "void":
    """ScXMLECMAScriptEvaluator_initClass()"""
    return _coin.ScXMLECMAScriptEvaluator_initClass()

def ScXMLECMAScriptEvaluator_cleanClass() -> "void":
    """ScXMLECMAScriptEvaluator_cleanClass()"""
    return _coin.ScXMLECMAScriptEvaluator_cleanClass()

class ScXMLElseElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLElseElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLElseElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLElseElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLElseElt self) -> SoType"""
        return _coin.ScXMLElseElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLElseElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLElseElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLElseElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLElseElt self) -> ScXMLElseElt"""
        this = _coin.new_ScXMLElseElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLElseElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLElseElt self, ScXMLElt rhs)"""
        return _coin.ScXMLElseElt_copyContents(self, rhs)

ScXMLElseElt_swigregister = _coin.ScXMLElseElt_swigregister
ScXMLElseElt_swigregister(ScXMLElseElt)

def ScXMLElseElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLElseElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLElseElt_getElementReader()

def ScXMLElseElt_getClassTypeId() -> "SoType":
    """ScXMLElseElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLElseElt_getClassTypeId()

def ScXMLElseElt_createInstance() -> "void *":
    """ScXMLElseElt_createInstance() -> void *"""
    return _coin.ScXMLElseElt_createInstance()

def ScXMLElseElt_initClass() -> "void":
    """ScXMLElseElt_initClass()"""
    return _coin.ScXMLElseElt_initClass()

def ScXMLElseElt_cleanClass() -> "void":
    """ScXMLElseElt_cleanClass()"""
    return _coin.ScXMLElseElt_cleanClass()

class ScXMLElseIfElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLElseIfElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLElseIfElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLElseIfElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLElseIfElt self) -> SoType"""
        return _coin.ScXMLElseIfElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLElseIfElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLElseIfElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLElseIfElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLElseIfElt self) -> ScXMLElseIfElt"""
        this = _coin.new_ScXMLElseIfElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLElseIfElt
    __del__ = lambda self: None

    def setCondAttribute(self, cond: 'char const *') -> "void":
        """setCondAttribute(ScXMLElseIfElt self, char const * cond)"""
        return _coin.ScXMLElseIfElt_setCondAttribute(self, cond)


    def getCondAttribute(self) -> "char const *":
        """getCondAttribute(ScXMLElseIfElt self) -> char const *"""
        return _coin.ScXMLElseIfElt_getCondAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLElseIfElt self) -> SbBool"""
        return _coin.ScXMLElseIfElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLElseIfElt self, ScXMLElt rhs)"""
        return _coin.ScXMLElseIfElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLElseIfElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLElseIfElt_search(self, attrname, attrvalue)

ScXMLElseIfElt_swigregister = _coin.ScXMLElseIfElt_swigregister
ScXMLElseIfElt_swigregister(ScXMLElseIfElt)

def ScXMLElseIfElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLElseIfElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLElseIfElt_getElementReader()

def ScXMLElseIfElt_getClassTypeId() -> "SoType":
    """ScXMLElseIfElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLElseIfElt_getClassTypeId()

def ScXMLElseIfElt_createInstance() -> "void *":
    """ScXMLElseIfElt_createInstance() -> void *"""
    return _coin.ScXMLElseIfElt_createInstance()

def ScXMLElseIfElt_initClass() -> "void":
    """ScXMLElseIfElt_initClass()"""
    return _coin.ScXMLElseIfElt_initClass()

def ScXMLElseIfElt_cleanClass() -> "void":
    """ScXMLElseIfElt_cleanClass()"""
    return _coin.ScXMLElseIfElt_cleanClass()

class ScXMLEvent(ScXMLObject):
    """Proxy of C++ ScXMLEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLEvent self) -> SoType"""
        return _coin.ScXMLEvent_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLEvent_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLEvent_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLEvent_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLEvent self) -> ScXMLEvent"""
        this = _coin.new_ScXMLEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLEvent
    __del__ = lambda self: None

    def setEventName(self, name: 'SbName') -> "void":
        """setEventName(ScXMLEvent self, SbName name)"""
        return _coin.ScXMLEvent_setEventName(self, name)


    def getEventName(self) -> "SbName const &":
        """getEventName(ScXMLEvent self) -> SbName"""
        return _coin.ScXMLEvent_getEventName(self)


    def clone(self) -> "ScXMLEvent *":
        """clone(ScXMLEvent self) -> ScXMLEvent"""
        return _coin.ScXMLEvent_clone(self)


    def setAssociation(self, key: 'char const *', value: 'char const *') -> "void":
        """setAssociation(ScXMLEvent self, char const * key, char const * value)"""
        return _coin.ScXMLEvent_setAssociation(self, key, value)


    def getAssociation(self, key: 'char const *') -> "char const *":
        """getAssociation(ScXMLEvent self, char const * key) -> char const *"""
        return _coin.ScXMLEvent_getAssociation(self, key)


    def getNumAssociations(self) -> "size_t":
        """getNumAssociations(ScXMLEvent self) -> size_t"""
        return _coin.ScXMLEvent_getNumAssociations(self)


    def getAssociationKeys(self, keys: 'SbList< char const * > &') -> "size_t":
        """getAssociationKeys(ScXMLEvent self, SbList< char const * > & keys) -> size_t"""
        return _coin.ScXMLEvent_getAssociationKeys(self, keys)

ScXMLEvent_swigregister = _coin.ScXMLEvent_swigregister
ScXMLEvent_swigregister(ScXMLEvent)

def ScXMLEvent_getClassTypeId() -> "SoType":
    """ScXMLEvent_getClassTypeId() -> SoType"""
    return _coin.ScXMLEvent_getClassTypeId()

def ScXMLEvent_createInstance() -> "void *":
    """ScXMLEvent_createInstance() -> void *"""
    return _coin.ScXMLEvent_createInstance()

def ScXMLEvent_initClass() -> "void":
    """ScXMLEvent_initClass()"""
    return _coin.ScXMLEvent_initClass()

def ScXMLEvent_cleanClass() -> "void":
    """ScXMLEvent_cleanClass()"""
    return _coin.ScXMLEvent_cleanClass()

class ScXMLEventElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLEventElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLEventElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLEventElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLEventElt self) -> SoType"""
        return _coin.ScXMLEventElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLEventElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLEventElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLEventElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLEventElt self) -> ScXMLEventElt"""
        this = _coin.new_ScXMLEventElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLEventElt
    __del__ = lambda self: None

    def setNameAttribute(self, name: 'char const *') -> "void":
        """setNameAttribute(ScXMLEventElt self, char const * name)"""
        return _coin.ScXMLEventElt_setNameAttribute(self, name)


    def getNameAttribute(self) -> "char const *":
        """getNameAttribute(ScXMLEventElt self) -> char const *"""
        return _coin.ScXMLEventElt_getNameAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLEventElt self) -> SbBool"""
        return _coin.ScXMLEventElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLEventElt self, ScXMLElt rhs)"""
        return _coin.ScXMLEventElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLEventElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLEventElt_search(self, attrname, attrvalue)


    def createEvent(self, host: 'ScXMLEventTarget') -> "ScXMLEvent *":
        """createEvent(ScXMLEventElt self, ScXMLEventTarget host) -> ScXMLEvent"""
        return _coin.ScXMLEventElt_createEvent(self, host)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLEventElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLEventElt_execute(self, statemachine)

ScXMLEventElt_swigregister = _coin.ScXMLEventElt_swigregister
ScXMLEventElt_swigregister(ScXMLEventElt)

def ScXMLEventElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLEventElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLEventElt_getElementReader()

def ScXMLEventElt_getClassTypeId() -> "SoType":
    """ScXMLEventElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLEventElt_getClassTypeId()

def ScXMLEventElt_createInstance() -> "void *":
    """ScXMLEventElt_createInstance() -> void *"""
    return _coin.ScXMLEventElt_createInstance()

def ScXMLEventElt_initClass() -> "void":
    """ScXMLEventElt_initClass()"""
    return _coin.ScXMLEventElt_initClass()

def ScXMLEventElt_cleanClass() -> "void":
    """ScXMLEventElt_cleanClass()"""
    return _coin.ScXMLEventElt_cleanClass()

class ScXMLFinalElt(ScXMLAbstractStateElt):
    """Proxy of C++ ScXMLFinalElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLFinalElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLFinalElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLFinalElt self) -> SoType"""
        return _coin.ScXMLFinalElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLFinalElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLFinalElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLFinalElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLFinalElt self) -> ScXMLFinalElt"""
        this = _coin.new_ScXMLFinalElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLFinalElt
    __del__ = lambda self: None

    def setOnEntry(self, onentry: 'ScXMLOnEntryElt') -> "void":
        """setOnEntry(ScXMLFinalElt self, ScXMLOnEntryElt onentry)"""
        return _coin.ScXMLFinalElt_setOnEntry(self, onentry)


    def getOnEntry(self) -> "ScXMLOnEntryElt *":
        """getOnEntry(ScXMLFinalElt self) -> ScXMLOnEntryElt"""
        return _coin.ScXMLFinalElt_getOnEntry(self)


    def setOnExit(self, onexit: 'ScXMLOnExitElt') -> "void":
        """setOnExit(ScXMLFinalElt self, ScXMLOnExitElt onexit)"""
        return _coin.ScXMLFinalElt_setOnExit(self, onexit)


    def getOnExit(self) -> "ScXMLOnExitElt *":
        """getOnExit(ScXMLFinalElt self) -> ScXMLOnExitElt"""
        return _coin.ScXMLFinalElt_getOnExit(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLFinalElt self, ScXMLElt rhs)"""
        return _coin.ScXMLFinalElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLFinalElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLFinalElt_search(self, attrname, attrvalue)

ScXMLFinalElt_swigregister = _coin.ScXMLFinalElt_swigregister
ScXMLFinalElt_swigregister(ScXMLFinalElt)

def ScXMLFinalElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLFinalElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLFinalElt_getElementReader()

def ScXMLFinalElt_getClassTypeId() -> "SoType":
    """ScXMLFinalElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLFinalElt_getClassTypeId()

def ScXMLFinalElt_createInstance() -> "void *":
    """ScXMLFinalElt_createInstance() -> void *"""
    return _coin.ScXMLFinalElt_createInstance()

def ScXMLFinalElt_initClass() -> "void":
    """ScXMLFinalElt_initClass()"""
    return _coin.ScXMLFinalElt_initClass()

def ScXMLFinalElt_cleanClass() -> "void":
    """ScXMLFinalElt_cleanClass()"""
    return _coin.ScXMLFinalElt_cleanClass()

class ScXMLFinalizeElt(ScXMLElt):
    """Proxy of C++ ScXMLFinalizeElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLFinalizeElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLFinalizeElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLFinalizeElt self) -> SoType"""
        return _coin.ScXMLFinalizeElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLFinalizeElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLFinalizeElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLFinalizeElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLFinalizeElt self) -> ScXMLFinalizeElt"""
        this = _coin.new_ScXMLFinalizeElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLFinalizeElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLFinalizeElt self, ScXMLElt rhs)"""
        return _coin.ScXMLFinalizeElt_copyContents(self, rhs)

ScXMLFinalizeElt_swigregister = _coin.ScXMLFinalizeElt_swigregister
ScXMLFinalizeElt_swigregister(ScXMLFinalizeElt)

def ScXMLFinalizeElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLFinalizeElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLFinalizeElt_getElementReader()

def ScXMLFinalizeElt_getClassTypeId() -> "SoType":
    """ScXMLFinalizeElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLFinalizeElt_getClassTypeId()

def ScXMLFinalizeElt_createInstance() -> "void *":
    """ScXMLFinalizeElt_createInstance() -> void *"""
    return _coin.ScXMLFinalizeElt_createInstance()

def ScXMLFinalizeElt_initClass() -> "void":
    """ScXMLFinalizeElt_initClass()"""
    return _coin.ScXMLFinalizeElt_initClass()

def ScXMLFinalizeElt_cleanClass() -> "void":
    """ScXMLFinalizeElt_cleanClass()"""
    return _coin.ScXMLFinalizeElt_cleanClass()

class ScXMLHistoryElt(ScXMLElt):
    """Proxy of C++ ScXMLHistoryElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLHistoryElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLHistoryElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLHistoryElt self) -> SoType"""
        return _coin.ScXMLHistoryElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLHistoryElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLHistoryElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLHistoryElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLHistoryElt self) -> ScXMLHistoryElt"""
        this = _coin.new_ScXMLHistoryElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLHistoryElt
    __del__ = lambda self: None

    def setIdAttribute(self, id: 'char const *') -> "void":
        """setIdAttribute(ScXMLHistoryElt self, char const * id)"""
        return _coin.ScXMLHistoryElt_setIdAttribute(self, id)


    def getIdAttribute(self) -> "char const *":
        """getIdAttribute(ScXMLHistoryElt self) -> char const *"""
        return _coin.ScXMLHistoryElt_getIdAttribute(self)


    def setTypeAttribute(self, type: 'char const *') -> "void":
        """setTypeAttribute(ScXMLHistoryElt self, char const * type)"""
        return _coin.ScXMLHistoryElt_setTypeAttribute(self, type)


    def getTypeAttribute(self) -> "char const *":
        """getTypeAttribute(ScXMLHistoryElt self) -> char const *"""
        return _coin.ScXMLHistoryElt_getTypeAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLHistoryElt self) -> SbBool"""
        return _coin.ScXMLHistoryElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLHistoryElt self, ScXMLElt rhs)"""
        return _coin.ScXMLHistoryElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLHistoryElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLHistoryElt_search(self, attrname, attrvalue)


    def setTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """setTransition(ScXMLHistoryElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLHistoryElt_setTransition(self, transition)


    def getTransition(self) -> "ScXMLTransitionElt *":
        """getTransition(ScXMLHistoryElt self) -> ScXMLTransitionElt"""
        return _coin.ScXMLHistoryElt_getTransition(self)

ScXMLHistoryElt_swigregister = _coin.ScXMLHistoryElt_swigregister
ScXMLHistoryElt_swigregister(ScXMLHistoryElt)

def ScXMLHistoryElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLHistoryElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLHistoryElt_getElementReader()

def ScXMLHistoryElt_getClassTypeId() -> "SoType":
    """ScXMLHistoryElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLHistoryElt_getClassTypeId()

def ScXMLHistoryElt_createInstance() -> "void *":
    """ScXMLHistoryElt_createInstance() -> void *"""
    return _coin.ScXMLHistoryElt_createInstance()

def ScXMLHistoryElt_initClass() -> "void":
    """ScXMLHistoryElt_initClass()"""
    return _coin.ScXMLHistoryElt_initClass()

def ScXMLHistoryElt_cleanClass() -> "void":
    """ScXMLHistoryElt_cleanClass()"""
    return _coin.ScXMLHistoryElt_cleanClass()

class ScXMLIfElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLIfElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLIfElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLIfElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLIfElt self) -> SoType"""
        return _coin.ScXMLIfElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLIfElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLIfElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLIfElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLIfElt self) -> ScXMLIfElt"""
        this = _coin.new_ScXMLIfElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLIfElt
    __del__ = lambda self: None

    def setCondAttribute(self, cond: 'char const *') -> "void":
        """setCondAttribute(ScXMLIfElt self, char const * cond)"""
        return _coin.ScXMLIfElt_setCondAttribute(self, cond)


    def getCondAttribute(self) -> "char const *":
        """getCondAttribute(ScXMLIfElt self) -> char const *"""
        return _coin.ScXMLIfElt_getCondAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLIfElt self) -> SbBool"""
        return _coin.ScXMLIfElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLIfElt self, ScXMLElt rhs)"""
        return _coin.ScXMLIfElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLIfElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLIfElt_search(self, attrname, attrvalue)


    def getNumElseIfs(self) -> "int":
        """getNumElseIfs(ScXMLIfElt self) -> int"""
        return _coin.ScXMLIfElt_getNumElseIfs(self)


    def getElseIf(self, idx: 'int') -> "ScXMLElseIfElt *":
        """getElseIf(ScXMLIfElt self, int idx) -> ScXMLElseIfElt"""
        return _coin.ScXMLIfElt_getElseIf(self, idx)


    def addElseIf(self, elseif: 'ScXMLElseIfElt') -> "void":
        """addElseIf(ScXMLIfElt self, ScXMLElseIfElt elseif)"""
        return _coin.ScXMLIfElt_addElseIf(self, elseif)


    def removeElseIf(self, elseif: 'ScXMLElseIfElt') -> "void":
        """removeElseIf(ScXMLIfElt self, ScXMLElseIfElt elseif)"""
        return _coin.ScXMLIfElt_removeElseIf(self, elseif)


    def clearAllElseIfs(self) -> "void":
        """clearAllElseIfs(ScXMLIfElt self)"""
        return _coin.ScXMLIfElt_clearAllElseIfs(self)


    def setElse(self, elseelt: 'ScXMLElseElt') -> "void":
        """setElse(ScXMLIfElt self, ScXMLElseElt elseelt)"""
        return _coin.ScXMLIfElt_setElse(self, elseelt)


    def getElse(self) -> "ScXMLElseElt *":
        """getElse(ScXMLIfElt self) -> ScXMLElseElt"""
        return _coin.ScXMLIfElt_getElse(self)


    def getNumExecutables(self, conditional: 'ScXMLExecutableElt') -> "int":
        """getNumExecutables(ScXMLIfElt self, ScXMLExecutableElt conditional) -> int"""
        return _coin.ScXMLIfElt_getNumExecutables(self, conditional)


    def getExecutable(self, conditional: 'ScXMLExecutableElt', idx: 'int') -> "ScXMLExecutableElt *":
        """getExecutable(ScXMLIfElt self, ScXMLExecutableElt conditional, int idx) -> ScXMLExecutableElt"""
        return _coin.ScXMLIfElt_getExecutable(self, conditional, idx)


    def addExecutable(self, conditional: 'ScXMLExecutableElt', executable: 'ScXMLExecutableElt') -> "void":
        """addExecutable(ScXMLIfElt self, ScXMLExecutableElt conditional, ScXMLExecutableElt executable)"""
        return _coin.ScXMLIfElt_addExecutable(self, conditional, executable)


    def removeExecutable(self, conditional: 'ScXMLExecutableElt', executable: 'ScXMLExecutableElt') -> "void":
        """removeExecutable(ScXMLIfElt self, ScXMLExecutableElt conditional, ScXMLExecutableElt executable)"""
        return _coin.ScXMLIfElt_removeExecutable(self, conditional, executable)


    def clearAllExecutables(self, conditional: 'ScXMLExecutableElt') -> "void":
        """clearAllExecutables(ScXMLIfElt self, ScXMLExecutableElt conditional)"""
        return _coin.ScXMLIfElt_clearAllExecutables(self, conditional)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLIfElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLIfElt_execute(self, statemachine)

ScXMLIfElt_swigregister = _coin.ScXMLIfElt_swigregister
ScXMLIfElt_swigregister(ScXMLIfElt)

def ScXMLIfElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLIfElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLIfElt_getElementReader()

def ScXMLIfElt_getClassTypeId() -> "SoType":
    """ScXMLIfElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLIfElt_getClassTypeId()

def ScXMLIfElt_createInstance() -> "void *":
    """ScXMLIfElt_createInstance() -> void *"""
    return _coin.ScXMLIfElt_createInstance()

def ScXMLIfElt_initClass() -> "void":
    """ScXMLIfElt_initClass()"""
    return _coin.ScXMLIfElt_initClass()

def ScXMLIfElt_cleanClass() -> "void":
    """ScXMLIfElt_cleanClass()"""
    return _coin.ScXMLIfElt_cleanClass()

class ScXMLInitialElt(ScXMLElt):
    """Proxy of C++ ScXMLInitialElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLInitialElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLInitialElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLInitialElt self) -> SoType"""
        return _coin.ScXMLInitialElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLInitialElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLInitialElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLInitialElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLInitialElt self) -> ScXMLInitialElt"""
        this = _coin.new_ScXMLInitialElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLInitialElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLInitialElt self, ScXMLElt rhs)"""
        return _coin.ScXMLInitialElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLInitialElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLInitialElt_search(self, attrname, attrvalue)


    def setTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """setTransition(ScXMLInitialElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLInitialElt_setTransition(self, transition)


    def getTransition(self) -> "ScXMLTransitionElt *":
        """getTransition(ScXMLInitialElt self) -> ScXMLTransitionElt"""
        return _coin.ScXMLInitialElt_getTransition(self)

ScXMLInitialElt_swigregister = _coin.ScXMLInitialElt_swigregister
ScXMLInitialElt_swigregister(ScXMLInitialElt)

def ScXMLInitialElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLInitialElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLInitialElt_getElementReader()

def ScXMLInitialElt_getClassTypeId() -> "SoType":
    """ScXMLInitialElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLInitialElt_getClassTypeId()

def ScXMLInitialElt_createInstance() -> "void *":
    """ScXMLInitialElt_createInstance() -> void *"""
    return _coin.ScXMLInitialElt_createInstance()

def ScXMLInitialElt_initClass() -> "void":
    """ScXMLInitialElt_initClass()"""
    return _coin.ScXMLInitialElt_initClass()

def ScXMLInitialElt_cleanClass() -> "void":
    """ScXMLInitialElt_cleanClass()"""
    return _coin.ScXMLInitialElt_cleanClass()

class ScXMLInvokeElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLInvokeElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLInvokeElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLInvokeElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLInvokeElt self) -> SoType"""
        return _coin.ScXMLInvokeElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLInvokeElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLInvokeElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLInvokeElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLInvokeElt self) -> ScXMLInvokeElt"""
        this = _coin.new_ScXMLInvokeElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLInvokeElt
    __del__ = lambda self: None

    def setTargetTypeAttribute(self, id: 'char const *') -> "void":
        """setTargetTypeAttribute(ScXMLInvokeElt self, char const * id)"""
        return _coin.ScXMLInvokeElt_setTargetTypeAttribute(self, id)


    def getTargetTypeAttribute(self) -> "char const *":
        """getTargetTypeAttribute(ScXMLInvokeElt self) -> char const *"""
        return _coin.ScXMLInvokeElt_getTargetTypeAttribute(self)


    def setSrcAttribute(self, id: 'char const *') -> "void":
        """setSrcAttribute(ScXMLInvokeElt self, char const * id)"""
        return _coin.ScXMLInvokeElt_setSrcAttribute(self, id)


    def getSrcAttribute(self) -> "char const *":
        """getSrcAttribute(ScXMLInvokeElt self) -> char const *"""
        return _coin.ScXMLInvokeElt_getSrcAttribute(self)


    def setSrcExprAttribute(self, id: 'char const *') -> "void":
        """setSrcExprAttribute(ScXMLInvokeElt self, char const * id)"""
        return _coin.ScXMLInvokeElt_setSrcExprAttribute(self, id)


    def getSrcExprAttribute(self) -> "char const *":
        """getSrcExprAttribute(ScXMLInvokeElt self) -> char const *"""
        return _coin.ScXMLInvokeElt_getSrcExprAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLInvokeElt self) -> SbBool"""
        return _coin.ScXMLInvokeElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLInvokeElt self, ScXMLElt rhs)"""
        return _coin.ScXMLInvokeElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLInvokeElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLInvokeElt_search(self, attrname, attrvalue)


    def getNumParams(self) -> "int":
        """getNumParams(ScXMLInvokeElt self) -> int"""
        return _coin.ScXMLInvokeElt_getNumParams(self)


    def getParam(self, idx: 'int') -> "ScXMLParamElt *":
        """getParam(ScXMLInvokeElt self, int idx) -> ScXMLParamElt"""
        return _coin.ScXMLInvokeElt_getParam(self, idx)


    def addParam(self, param: 'ScXMLParamElt') -> "void":
        """addParam(ScXMLInvokeElt self, ScXMLParamElt param)"""
        return _coin.ScXMLInvokeElt_addParam(self, param)


    def removeParam(self, param: 'ScXMLParamElt') -> "void":
        """removeParam(ScXMLInvokeElt self, ScXMLParamElt param)"""
        return _coin.ScXMLInvokeElt_removeParam(self, param)


    def clearAllParams(self) -> "void":
        """clearAllParams(ScXMLInvokeElt self)"""
        return _coin.ScXMLInvokeElt_clearAllParams(self)


    def setFinalize(self, finalize: 'ScXMLFinalizeElt') -> "void":
        """setFinalize(ScXMLInvokeElt self, ScXMLFinalizeElt finalize)"""
        return _coin.ScXMLInvokeElt_setFinalize(self, finalize)


    def getFinalize(self) -> "ScXMLFinalizeElt *":
        """getFinalize(ScXMLInvokeElt self) -> ScXMLFinalizeElt"""
        return _coin.ScXMLInvokeElt_getFinalize(self)


    def setContent(self, content: 'ScXMLContentElt') -> "void":
        """setContent(ScXMLInvokeElt self, ScXMLContentElt content)"""
        return _coin.ScXMLInvokeElt_setContent(self, content)


    def getContent(self) -> "ScXMLContentElt *":
        """getContent(ScXMLInvokeElt self) -> ScXMLContentElt"""
        return _coin.ScXMLInvokeElt_getContent(self)

ScXMLInvokeElt_swigregister = _coin.ScXMLInvokeElt_swigregister
ScXMLInvokeElt_swigregister(ScXMLInvokeElt)

def ScXMLInvokeElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLInvokeElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLInvokeElt_getElementReader()

def ScXMLInvokeElt_getClassTypeId() -> "SoType":
    """ScXMLInvokeElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLInvokeElt_getClassTypeId()

def ScXMLInvokeElt_createInstance() -> "void *":
    """ScXMLInvokeElt_createInstance() -> void *"""
    return _coin.ScXMLInvokeElt_createInstance()

def ScXMLInvokeElt_initClass() -> "void":
    """ScXMLInvokeElt_initClass()"""
    return _coin.ScXMLInvokeElt_initClass()

def ScXMLInvokeElt_cleanClass() -> "void":
    """ScXMLInvokeElt_cleanClass()"""
    return _coin.ScXMLInvokeElt_cleanClass()

class ScXMLLogElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLLogElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLLogElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLLogElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLLogElt self) -> SoType"""
        return _coin.ScXMLLogElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLLogElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLLogElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLLogElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLLogElt self) -> ScXMLLogElt"""
        this = _coin.new_ScXMLLogElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLLogElt
    __del__ = lambda self: None

    def setLabelAttribute(self, label: 'char const *') -> "void":
        """setLabelAttribute(ScXMLLogElt self, char const * label)"""
        return _coin.ScXMLLogElt_setLabelAttribute(self, label)


    def getLabelAttribute(self) -> "char const *":
        """getLabelAttribute(ScXMLLogElt self) -> char const *"""
        return _coin.ScXMLLogElt_getLabelAttribute(self)


    def setExprAttribute(self, expr: 'char const *') -> "void":
        """setExprAttribute(ScXMLLogElt self, char const * expr)"""
        return _coin.ScXMLLogElt_setExprAttribute(self, expr)


    def getExprAttribute(self) -> "char const *":
        """getExprAttribute(ScXMLLogElt self) -> char const *"""
        return _coin.ScXMLLogElt_getExprAttribute(self)


    def setLevelAttribute(self, level: 'char const *') -> "void":
        """setLevelAttribute(ScXMLLogElt self, char const * level)"""
        return _coin.ScXMLLogElt_setLevelAttribute(self, level)


    def getLevelAttribute(self) -> "char const *":
        """getLevelAttribute(ScXMLLogElt self) -> char const *"""
        return _coin.ScXMLLogElt_getLevelAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLLogElt self) -> SbBool"""
        return _coin.ScXMLLogElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLLogElt self, ScXMLElt rhs)"""
        return _coin.ScXMLLogElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLLogElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLLogElt_search(self, attrname, attrvalue)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLLogElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLLogElt_execute(self, statemachine)

ScXMLLogElt_swigregister = _coin.ScXMLLogElt_swigregister
ScXMLLogElt_swigregister(ScXMLLogElt)

def ScXMLLogElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLLogElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLLogElt_getElementReader()

def ScXMLLogElt_getClassTypeId() -> "SoType":
    """ScXMLLogElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLLogElt_getClassTypeId()

def ScXMLLogElt_createInstance() -> "void *":
    """ScXMLLogElt_createInstance() -> void *"""
    return _coin.ScXMLLogElt_createInstance()

def ScXMLLogElt_initClass() -> "void":
    """ScXMLLogElt_initClass()"""
    return _coin.ScXMLLogElt_initClass()

def ScXMLLogElt_cleanClass() -> "void":
    """ScXMLLogElt_cleanClass()"""
    return _coin.ScXMLLogElt_cleanClass()

class ScXMLMinimumEvaluator(ScXMLEvaluator):
    """Proxy of C++ ScXMLMinimumEvaluator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLMinimumEvaluator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLMinimumEvaluator self) -> SoType"""
        return _coin.ScXMLMinimumEvaluator_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLMinimumEvaluator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLMinimumEvaluator_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLMinimumEvaluator_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLMinimumEvaluator self) -> ScXMLMinimumEvaluator"""
        this = _coin.new_ScXMLMinimumEvaluator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLMinimumEvaluator
    __del__ = lambda self: None

    def setStateMachine(self, arg2: 'ScXMLStateMachine') -> "void":
        """setStateMachine(ScXMLMinimumEvaluator self, ScXMLStateMachine arg2)"""
        return _coin.ScXMLMinimumEvaluator_setStateMachine(self, arg2)


    def evaluate(self, expression: 'char const *') -> "ScXMLDataObj *":
        """evaluate(ScXMLMinimumEvaluator self, char const * expression) -> ScXMLDataObj"""
        return _coin.ScXMLMinimumEvaluator_evaluate(self, expression)


    def setAtLocation(self, location: 'char const *', obj: 'ScXMLDataObj') -> "SbBool":
        """setAtLocation(ScXMLMinimumEvaluator self, char const * location, ScXMLDataObj obj) -> SbBool"""
        return _coin.ScXMLMinimumEvaluator_setAtLocation(self, location, obj)


    def locate(self, location: 'char const *') -> "ScXMLDataObj *":
        """locate(ScXMLMinimumEvaluator self, char const * location) -> ScXMLDataObj"""
        return _coin.ScXMLMinimumEvaluator_locate(self, location)


    def clearTemporaryVariables(self) -> "void":
        """clearTemporaryVariables(ScXMLMinimumEvaluator self)"""
        return _coin.ScXMLMinimumEvaluator_clearTemporaryVariables(self)

ScXMLMinimumEvaluator_swigregister = _coin.ScXMLMinimumEvaluator_swigregister
ScXMLMinimumEvaluator_swigregister(ScXMLMinimumEvaluator)

def ScXMLMinimumEvaluator_getClassTypeId() -> "SoType":
    """ScXMLMinimumEvaluator_getClassTypeId() -> SoType"""
    return _coin.ScXMLMinimumEvaluator_getClassTypeId()

def ScXMLMinimumEvaluator_createInstance() -> "void *":
    """ScXMLMinimumEvaluator_createInstance() -> void *"""
    return _coin.ScXMLMinimumEvaluator_createInstance()

def ScXMLMinimumEvaluator_initClass() -> "void":
    """ScXMLMinimumEvaluator_initClass()"""
    return _coin.ScXMLMinimumEvaluator_initClass()

def ScXMLMinimumEvaluator_cleanClass() -> "void":
    """ScXMLMinimumEvaluator_cleanClass()"""
    return _coin.ScXMLMinimumEvaluator_cleanClass()

class ScXMLMinimumExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLMinimumExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLMinimumExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLMinimumExprDataObj self) -> SoType"""
        return _coin.ScXMLMinimumExprDataObj_getTypeId(self)


    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLMinimumExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLMinimumExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)
    __swig_destroy__ = _coin.delete_ScXMLMinimumExprDataObj
    __del__ = lambda self: None
ScXMLMinimumExprDataObj_swigregister = _coin.ScXMLMinimumExprDataObj_swigregister
ScXMLMinimumExprDataObj_swigregister(ScXMLMinimumExprDataObj)

def ScXMLMinimumExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLMinimumExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLMinimumExprDataObj_getClassTypeId()

def ScXMLMinimumExprDataObj_initClass() -> "void":
    """ScXMLMinimumExprDataObj_initClass()"""
    return _coin.ScXMLMinimumExprDataObj_initClass()

def ScXMLMinimumExprDataObj_cleanClass() -> "void":
    """ScXMLMinimumExprDataObj_cleanClass()"""
    return _coin.ScXMLMinimumExprDataObj_cleanClass()

class ScXMLInExprDataObj(ScXMLMinimumExprDataObj):
    """Proxy of C++ ScXMLInExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLInExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLInExprDataObj self) -> SoType"""
        return _coin.ScXMLInExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLInExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLInExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLInExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(stateid: 'char const *') -> "ScXMLDataObj *":
        """createFor(char const * stateid) -> ScXMLDataObj"""
        return _coin.ScXMLInExprDataObj_createFor(stateid)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLInExprDataObj self) -> ScXMLInExprDataObj
        __init__(ScXMLInExprDataObj self, char const * stateid) -> ScXMLInExprDataObj
        """
        this = _coin.new_ScXMLInExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLInExprDataObj
    __del__ = lambda self: None

    def setStateId(self, stateid: 'char const *') -> "void":
        """setStateId(ScXMLInExprDataObj self, char const * stateid)"""
        return _coin.ScXMLInExprDataObj_setStateId(self, stateid)


    def getStateId(self) -> "char const *":
        """getStateId(ScXMLInExprDataObj self) -> char const *"""
        return _coin.ScXMLInExprDataObj_getStateId(self)

ScXMLInExprDataObj_swigregister = _coin.ScXMLInExprDataObj_swigregister
ScXMLInExprDataObj_swigregister(ScXMLInExprDataObj)

def ScXMLInExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLInExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLInExprDataObj_getClassTypeId()

def ScXMLInExprDataObj_createInstance() -> "void *":
    """ScXMLInExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLInExprDataObj_createInstance()

def ScXMLInExprDataObj_initClass() -> "void":
    """ScXMLInExprDataObj_initClass()"""
    return _coin.ScXMLInExprDataObj_initClass()

def ScXMLInExprDataObj_cleanClass() -> "void":
    """ScXMLInExprDataObj_cleanClass()"""
    return _coin.ScXMLInExprDataObj_cleanClass()

def ScXMLInExprDataObj_createFor(stateid: 'char const *') -> "ScXMLDataObj *":
    """ScXMLInExprDataObj_createFor(char const * stateid) -> ScXMLDataObj"""
    return _coin.ScXMLInExprDataObj_createFor(stateid)

class ScXMLAppendOpExprDataObj(ScXMLExprDataObj):
    """Proxy of C++ ScXMLAppendOpExprDataObj class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLAppendOpExprDataObj_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLAppendOpExprDataObj self) -> SoType"""
        return _coin.ScXMLAppendOpExprDataObj_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLAppendOpExprDataObj_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLAppendOpExprDataObj_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLAppendOpExprDataObj_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
        """createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
        return _coin.ScXMLAppendOpExprDataObj_createFor(lhs, rhs)

    createFor = staticmethod(createFor)

    def __init__(self, *args):
        """
        __init__(ScXMLAppendOpExprDataObj self) -> ScXMLAppendOpExprDataObj
        __init__(ScXMLAppendOpExprDataObj self, ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLAppendOpExprDataObj
        """
        this = _coin.new_ScXMLAppendOpExprDataObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLAppendOpExprDataObj
    __del__ = lambda self: None

    def setLHS(self, lhs: 'ScXMLDataObj') -> "void":
        """setLHS(ScXMLAppendOpExprDataObj self, ScXMLDataObj lhs)"""
        return _coin.ScXMLAppendOpExprDataObj_setLHS(self, lhs)


    def getLHS(self) -> "ScXMLDataObj const *":
        """getLHS(ScXMLAppendOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAppendOpExprDataObj_getLHS(self)


    def setRHS(self, rhs: 'ScXMLDataObj') -> "void":
        """setRHS(ScXMLAppendOpExprDataObj self, ScXMLDataObj rhs)"""
        return _coin.ScXMLAppendOpExprDataObj_setRHS(self, rhs)


    def getRHS(self) -> "ScXMLDataObj const *":
        """getRHS(ScXMLAppendOpExprDataObj self) -> ScXMLDataObj"""
        return _coin.ScXMLAppendOpExprDataObj_getRHS(self)

ScXMLAppendOpExprDataObj_swigregister = _coin.ScXMLAppendOpExprDataObj_swigregister
ScXMLAppendOpExprDataObj_swigregister(ScXMLAppendOpExprDataObj)

def ScXMLAppendOpExprDataObj_getClassTypeId() -> "SoType":
    """ScXMLAppendOpExprDataObj_getClassTypeId() -> SoType"""
    return _coin.ScXMLAppendOpExprDataObj_getClassTypeId()

def ScXMLAppendOpExprDataObj_createInstance() -> "void *":
    """ScXMLAppendOpExprDataObj_createInstance() -> void *"""
    return _coin.ScXMLAppendOpExprDataObj_createInstance()

def ScXMLAppendOpExprDataObj_initClass() -> "void":
    """ScXMLAppendOpExprDataObj_initClass()"""
    return _coin.ScXMLAppendOpExprDataObj_initClass()

def ScXMLAppendOpExprDataObj_cleanClass() -> "void":
    """ScXMLAppendOpExprDataObj_cleanClass()"""
    return _coin.ScXMLAppendOpExprDataObj_cleanClass()

def ScXMLAppendOpExprDataObj_createFor(lhs: 'ScXMLDataObj', rhs: 'ScXMLDataObj') -> "ScXMLDataObj *":
    """ScXMLAppendOpExprDataObj_createFor(ScXMLDataObj lhs, ScXMLDataObj rhs) -> ScXMLDataObj"""
    return _coin.ScXMLAppendOpExprDataObj_createFor(lhs, rhs)

class ScXMLOnEntryElt(ScXMLElt):
    """Proxy of C++ ScXMLOnEntryElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLOnEntryElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLOnEntryElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLOnEntryElt self) -> SoType"""
        return _coin.ScXMLOnEntryElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLOnEntryElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLOnEntryElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLOnEntryElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLOnEntryElt self) -> ScXMLOnEntryElt"""
        this = _coin.new_ScXMLOnEntryElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLOnEntryElt
    __del__ = lambda self: None

    def getNumExecutables(self) -> "int":
        """getNumExecutables(ScXMLOnEntryElt self) -> int"""
        return _coin.ScXMLOnEntryElt_getNumExecutables(self)


    def getExecutable(self, idx: 'int') -> "ScXMLExecutableElt *":
        """getExecutable(ScXMLOnEntryElt self, int idx) -> ScXMLExecutableElt"""
        return _coin.ScXMLOnEntryElt_getExecutable(self, idx)


    def addExecutable(self, exectable: 'ScXMLExecutableElt') -> "void":
        """addExecutable(ScXMLOnEntryElt self, ScXMLExecutableElt exectable)"""
        return _coin.ScXMLOnEntryElt_addExecutable(self, exectable)


    def removeExecutable(self, exectable: 'ScXMLExecutableElt') -> "void":
        """removeExecutable(ScXMLOnEntryElt self, ScXMLExecutableElt exectable)"""
        return _coin.ScXMLOnEntryElt_removeExecutable(self, exectable)


    def clearAllExecutables(self) -> "void":
        """clearAllExecutables(ScXMLOnEntryElt self)"""
        return _coin.ScXMLOnEntryElt_clearAllExecutables(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLOnEntryElt self, ScXMLElt rhs)"""
        return _coin.ScXMLOnEntryElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLOnEntryElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLOnEntryElt_search(self, attrname, attrvalue)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLOnEntryElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLOnEntryElt_execute(self, statemachine)

ScXMLOnEntryElt_swigregister = _coin.ScXMLOnEntryElt_swigregister
ScXMLOnEntryElt_swigregister(ScXMLOnEntryElt)

def ScXMLOnEntryElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLOnEntryElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLOnEntryElt_getElementReader()

def ScXMLOnEntryElt_getClassTypeId() -> "SoType":
    """ScXMLOnEntryElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLOnEntryElt_getClassTypeId()

def ScXMLOnEntryElt_createInstance() -> "void *":
    """ScXMLOnEntryElt_createInstance() -> void *"""
    return _coin.ScXMLOnEntryElt_createInstance()

def ScXMLOnEntryElt_initClass() -> "void":
    """ScXMLOnEntryElt_initClass()"""
    return _coin.ScXMLOnEntryElt_initClass()

def ScXMLOnEntryElt_cleanClass() -> "void":
    """ScXMLOnEntryElt_cleanClass()"""
    return _coin.ScXMLOnEntryElt_cleanClass()

class ScXMLOnExitElt(ScXMLElt):
    """Proxy of C++ ScXMLOnExitElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLOnExitElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLOnExitElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLOnExitElt self) -> SoType"""
        return _coin.ScXMLOnExitElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLOnExitElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLOnExitElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLOnExitElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLOnExitElt self) -> ScXMLOnExitElt"""
        this = _coin.new_ScXMLOnExitElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLOnExitElt
    __del__ = lambda self: None

    def getNumExecutables(self) -> "int":
        """getNumExecutables(ScXMLOnExitElt self) -> int"""
        return _coin.ScXMLOnExitElt_getNumExecutables(self)


    def getExecutable(self, idx: 'int') -> "ScXMLExecutableElt *":
        """getExecutable(ScXMLOnExitElt self, int idx) -> ScXMLExecutableElt"""
        return _coin.ScXMLOnExitElt_getExecutable(self, idx)


    def addExecutable(self, executable: 'ScXMLExecutableElt') -> "void":
        """addExecutable(ScXMLOnExitElt self, ScXMLExecutableElt executable)"""
        return _coin.ScXMLOnExitElt_addExecutable(self, executable)


    def removeExecutable(self, executable: 'ScXMLExecutableElt') -> "void":
        """removeExecutable(ScXMLOnExitElt self, ScXMLExecutableElt executable)"""
        return _coin.ScXMLOnExitElt_removeExecutable(self, executable)


    def clearAllExecutables(self) -> "void":
        """clearAllExecutables(ScXMLOnExitElt self)"""
        return _coin.ScXMLOnExitElt_clearAllExecutables(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLOnExitElt self, ScXMLElt rhs)"""
        return _coin.ScXMLOnExitElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLOnExitElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLOnExitElt_search(self, attrname, attrvalue)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLOnExitElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLOnExitElt_execute(self, statemachine)

ScXMLOnExitElt_swigregister = _coin.ScXMLOnExitElt_swigregister
ScXMLOnExitElt_swigregister(ScXMLOnExitElt)

def ScXMLOnExitElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLOnExitElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLOnExitElt_getElementReader()

def ScXMLOnExitElt_getClassTypeId() -> "SoType":
    """ScXMLOnExitElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLOnExitElt_getClassTypeId()

def ScXMLOnExitElt_createInstance() -> "void *":
    """ScXMLOnExitElt_createInstance() -> void *"""
    return _coin.ScXMLOnExitElt_createInstance()

def ScXMLOnExitElt_initClass() -> "void":
    """ScXMLOnExitElt_initClass()"""
    return _coin.ScXMLOnExitElt_initClass()

def ScXMLOnExitElt_cleanClass() -> "void":
    """ScXMLOnExitElt_cleanClass()"""
    return _coin.ScXMLOnExitElt_cleanClass()

class ScXMLParallelElt(ScXMLAbstractStateElt):
    """Proxy of C++ ScXMLParallelElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLParallelElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLParallelElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLParallelElt self) -> SoType"""
        return _coin.ScXMLParallelElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLParallelElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLParallelElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLParallelElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLParallelElt self) -> ScXMLParallelElt"""
        this = _coin.new_ScXMLParallelElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLParallelElt
    __del__ = lambda self: None

    def setSrcAttribute(self, src: 'char const *') -> "void":
        """setSrcAttribute(ScXMLParallelElt self, char const * src)"""
        return _coin.ScXMLParallelElt_setSrcAttribute(self, src)


    def getSrcAttribute(self) -> "char const *":
        """getSrcAttribute(ScXMLParallelElt self) -> char const *"""
        return _coin.ScXMLParallelElt_getSrcAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLParallelElt self) -> SbBool"""
        return _coin.ScXMLParallelElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLParallelElt self, ScXMLElt rhs)"""
        return _coin.ScXMLParallelElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLParallelElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLParallelElt_search(self, attrname, attrvalue)


    def setOnEntry(self, onentry: 'ScXMLOnEntryElt') -> "void":
        """setOnEntry(ScXMLParallelElt self, ScXMLOnEntryElt onentry)"""
        return _coin.ScXMLParallelElt_setOnEntry(self, onentry)


    def getOnEntry(self) -> "ScXMLOnEntryElt *":
        """getOnEntry(ScXMLParallelElt self) -> ScXMLOnEntryElt"""
        return _coin.ScXMLParallelElt_getOnEntry(self)


    def setOnExit(self, onexit: 'ScXMLOnExitElt') -> "void":
        """setOnExit(ScXMLParallelElt self, ScXMLOnExitElt onexit)"""
        return _coin.ScXMLParallelElt_setOnExit(self, onexit)


    def getOnExit(self) -> "ScXMLOnExitElt *":
        """getOnExit(ScXMLParallelElt self) -> ScXMLOnExitElt"""
        return _coin.ScXMLParallelElt_getOnExit(self)


    def getNumTransitions(self) -> "int":
        """getNumTransitions(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumTransitions(self)


    def getTransition(self, idx: 'int') -> "ScXMLTransitionElt *":
        """getTransition(ScXMLParallelElt self, int idx) -> ScXMLTransitionElt"""
        return _coin.ScXMLParallelElt_getTransition(self, idx)


    def addTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """addTransition(ScXMLParallelElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLParallelElt_addTransition(self, transition)


    def removeTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """removeTransition(ScXMLParallelElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLParallelElt_removeTransition(self, transition)


    def clearAllTransitions(self) -> "void":
        """clearAllTransitions(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllTransitions(self)


    def setInitial(self, initial: 'ScXMLInitialElt') -> "void":
        """setInitial(ScXMLParallelElt self, ScXMLInitialElt initial)"""
        return _coin.ScXMLParallelElt_setInitial(self, initial)


    def getInitial(self) -> "ScXMLInitialElt *":
        """getInitial(ScXMLParallelElt self) -> ScXMLInitialElt"""
        return _coin.ScXMLParallelElt_getInitial(self)


    def getNumStates(self) -> "int":
        """getNumStates(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumStates(self)


    def getState(self, idx: 'int') -> "ScXMLStateElt *":
        """getState(ScXMLParallelElt self, int idx) -> ScXMLStateElt"""
        return _coin.ScXMLParallelElt_getState(self, idx)


    def addState(self, state: 'ScXMLStateElt') -> "void":
        """addState(ScXMLParallelElt self, ScXMLStateElt state)"""
        return _coin.ScXMLParallelElt_addState(self, state)


    def removeState(self, state: 'ScXMLStateElt') -> "void":
        """removeState(ScXMLParallelElt self, ScXMLStateElt state)"""
        return _coin.ScXMLParallelElt_removeState(self, state)


    def clearAllStates(self) -> "void":
        """clearAllStates(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllStates(self)


    def getNumParallels(self) -> "int":
        """getNumParallels(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumParallels(self)


    def getParallel(self, idx: 'int') -> "ScXMLParallelElt *":
        """getParallel(ScXMLParallelElt self, int idx) -> ScXMLParallelElt"""
        return _coin.ScXMLParallelElt_getParallel(self, idx)


    def addParallel(self, state: 'ScXMLParallelElt') -> "void":
        """addParallel(ScXMLParallelElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLParallelElt_addParallel(self, state)


    def removeParallel(self, state: 'ScXMLParallelElt') -> "void":
        """removeParallel(ScXMLParallelElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLParallelElt_removeParallel(self, state)


    def clearAllParallels(self) -> "void":
        """clearAllParallels(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllParallels(self)


    def getNumFinals(self) -> "int":
        """getNumFinals(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumFinals(self)


    def getFinal(self, idx: 'int') -> "ScXMLFinalElt *":
        """getFinal(ScXMLParallelElt self, int idx) -> ScXMLFinalElt"""
        return _coin.ScXMLParallelElt_getFinal(self, idx)


    def addFinal(self, state: 'ScXMLFinalElt') -> "void":
        """addFinal(ScXMLParallelElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLParallelElt_addFinal(self, state)


    def removeFinal(self, state: 'ScXMLFinalElt') -> "void":
        """removeFinal(ScXMLParallelElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLParallelElt_removeFinal(self, state)


    def clearAllFinals(self) -> "void":
        """clearAllFinals(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllFinals(self)


    def getNumHistories(self) -> "int":
        """getNumHistories(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumHistories(self)


    def getHistory(self, idx: 'int') -> "ScXMLHistoryElt *":
        """getHistory(ScXMLParallelElt self, int idx) -> ScXMLHistoryElt"""
        return _coin.ScXMLParallelElt_getHistory(self, idx)


    def addHistory(self, history: 'ScXMLHistoryElt') -> "void":
        """addHistory(ScXMLParallelElt self, ScXMLHistoryElt history)"""
        return _coin.ScXMLParallelElt_addHistory(self, history)


    def removeHistory(self, history: 'ScXMLHistoryElt') -> "void":
        """removeHistory(ScXMLParallelElt self, ScXMLHistoryElt history)"""
        return _coin.ScXMLParallelElt_removeHistory(self, history)


    def clearAllHistories(self) -> "void":
        """clearAllHistories(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllHistories(self)


    def getNumAnchors(self) -> "int":
        """getNumAnchors(ScXMLParallelElt self) -> int"""
        return _coin.ScXMLParallelElt_getNumAnchors(self)


    def getAnchor(self, idx: 'int') -> "ScXMLAnchorElt *":
        """getAnchor(ScXMLParallelElt self, int idx) -> ScXMLAnchorElt"""
        return _coin.ScXMLParallelElt_getAnchor(self, idx)


    def addAnchor(self, anchor: 'ScXMLAnchorElt') -> "void":
        """addAnchor(ScXMLParallelElt self, ScXMLAnchorElt anchor)"""
        return _coin.ScXMLParallelElt_addAnchor(self, anchor)


    def removeAnchor(self, anchor: 'ScXMLAnchorElt') -> "void":
        """removeAnchor(ScXMLParallelElt self, ScXMLAnchorElt anchor)"""
        return _coin.ScXMLParallelElt_removeAnchor(self, anchor)


    def clearAllAnchors(self) -> "void":
        """clearAllAnchors(ScXMLParallelElt self)"""
        return _coin.ScXMLParallelElt_clearAllAnchors(self)


    def setDataModel(self, datamodel: 'ScXMLDataModelElt') -> "void":
        """setDataModel(ScXMLParallelElt self, ScXMLDataModelElt datamodel)"""
        return _coin.ScXMLParallelElt_setDataModel(self, datamodel)


    def getDataModel(self) -> "ScXMLDataModelElt *":
        """getDataModel(ScXMLParallelElt self) -> ScXMLDataModelElt"""
        return _coin.ScXMLParallelElt_getDataModel(self)


    def isAtomicState(self) -> "SbBool":
        """isAtomicState(ScXMLParallelElt self) -> SbBool"""
        return _coin.ScXMLParallelElt_isAtomicState(self)

ScXMLParallelElt_swigregister = _coin.ScXMLParallelElt_swigregister
ScXMLParallelElt_swigregister(ScXMLParallelElt)

def ScXMLParallelElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLParallelElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLParallelElt_getElementReader()

def ScXMLParallelElt_getClassTypeId() -> "SoType":
    """ScXMLParallelElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLParallelElt_getClassTypeId()

def ScXMLParallelElt_createInstance() -> "void *":
    """ScXMLParallelElt_createInstance() -> void *"""
    return _coin.ScXMLParallelElt_createInstance()

def ScXMLParallelElt_initClass() -> "void":
    """ScXMLParallelElt_initClass()"""
    return _coin.ScXMLParallelElt_initClass()

def ScXMLParallelElt_cleanClass() -> "void":
    """ScXMLParallelElt_cleanClass()"""
    return _coin.ScXMLParallelElt_cleanClass()

class ScXMLParamElt(ScXMLElt):
    """Proxy of C++ ScXMLParamElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLParamElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLParamElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLParamElt self) -> SoType"""
        return _coin.ScXMLParamElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLParamElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLParamElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLParamElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLParamElt self) -> ScXMLParamElt"""
        this = _coin.new_ScXMLParamElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLParamElt
    __del__ = lambda self: None

    def setNameAttribute(self, name: 'char const *') -> "void":
        """setNameAttribute(ScXMLParamElt self, char const * name)"""
        return _coin.ScXMLParamElt_setNameAttribute(self, name)


    def getNameAttribute(self) -> "char const *":
        """getNameAttribute(ScXMLParamElt self) -> char const *"""
        return _coin.ScXMLParamElt_getNameAttribute(self)


    def setExprAttribute(self, expr: 'char const *') -> "void":
        """setExprAttribute(ScXMLParamElt self, char const * expr)"""
        return _coin.ScXMLParamElt_setExprAttribute(self, expr)


    def getExprAttribute(self) -> "char const *":
        """getExprAttribute(ScXMLParamElt self) -> char const *"""
        return _coin.ScXMLParamElt_getExprAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLParamElt self) -> SbBool"""
        return _coin.ScXMLParamElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLParamElt self, ScXMLElt rhs)"""
        return _coin.ScXMLParamElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLParamElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLParamElt_search(self, attrname, attrvalue)

ScXMLParamElt_swigregister = _coin.ScXMLParamElt_swigregister
ScXMLParamElt_swigregister(ScXMLParamElt)

def ScXMLParamElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLParamElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLParamElt_getElementReader()

def ScXMLParamElt_getClassTypeId() -> "SoType":
    """ScXMLParamElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLParamElt_getClassTypeId()

def ScXMLParamElt_createInstance() -> "void *":
    """ScXMLParamElt_createInstance() -> void *"""
    return _coin.ScXMLParamElt_createInstance()

def ScXMLParamElt_initClass() -> "void":
    """ScXMLParamElt_initClass()"""
    return _coin.ScXMLParamElt_initClass()

def ScXMLParamElt_cleanClass() -> "void":
    """ScXMLParamElt_cleanClass()"""
    return _coin.ScXMLParamElt_cleanClass()

class ScXMLScriptElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLScriptElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLScriptElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLScriptElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLScriptElt self) -> SoType"""
        return _coin.ScXMLScriptElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLScriptElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLScriptElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLScriptElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLScriptElt self) -> ScXMLScriptElt"""
        this = _coin.new_ScXMLScriptElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLScriptElt
    __del__ = lambda self: None

    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLScriptElt self, ScXMLElt rhs)"""
        return _coin.ScXMLScriptElt_copyContents(self, rhs)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLScriptElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLScriptElt_execute(self, statemachine)

ScXMLScriptElt_swigregister = _coin.ScXMLScriptElt_swigregister
ScXMLScriptElt_swigregister(ScXMLScriptElt)

def ScXMLScriptElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLScriptElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLScriptElt_getElementReader()

def ScXMLScriptElt_getClassTypeId() -> "SoType":
    """ScXMLScriptElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLScriptElt_getClassTypeId()

def ScXMLScriptElt_createInstance() -> "void *":
    """ScXMLScriptElt_createInstance() -> void *"""
    return _coin.ScXMLScriptElt_createInstance()

def ScXMLScriptElt_initClass() -> "void":
    """ScXMLScriptElt_initClass()"""
    return _coin.ScXMLScriptElt_initClass()

def ScXMLScriptElt_cleanClass() -> "void":
    """ScXMLScriptElt_cleanClass()"""
    return _coin.ScXMLScriptElt_cleanClass()

class ScXMLScxmlElt(ScXMLElt):
    """Proxy of C++ ScXMLScxmlElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLScxmlElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLScxmlElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLScxmlElt self) -> SoType"""
        return _coin.ScXMLScxmlElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLScxmlElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLScxmlElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLScxmlElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLScxmlElt self) -> ScXMLScxmlElt"""
        this = _coin.new_ScXMLScxmlElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLScxmlElt
    __del__ = lambda self: None

    def setIsReferenced(self, referenced: 'SbBool') -> "void":
        """setIsReferenced(ScXMLScxmlElt self, SbBool referenced)"""
        return _coin.ScXMLScxmlElt_setIsReferenced(self, referenced)


    def isReferenced(self) -> "SbBool":
        """isReferenced(ScXMLScxmlElt self) -> SbBool"""
        return _coin.ScXMLScxmlElt_isReferenced(self)


    def setInitialAttribute(self, initial: 'char const *') -> "void":
        """setInitialAttribute(ScXMLScxmlElt self, char const * initial)"""
        return _coin.ScXMLScxmlElt_setInitialAttribute(self, initial)


    def getInitialAttribute(self) -> "char const *":
        """getInitialAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getInitialAttribute(self)


    def setNameAttribute(self, name: 'char const *') -> "void":
        """setNameAttribute(ScXMLScxmlElt self, char const * name)"""
        return _coin.ScXMLScxmlElt_setNameAttribute(self, name)


    def getNameAttribute(self) -> "char const *":
        """getNameAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getNameAttribute(self)


    def setXMLNSAttribute(self, xmlns: 'char const *') -> "void":
        """setXMLNSAttribute(ScXMLScxmlElt self, char const * xmlns)"""
        return _coin.ScXMLScxmlElt_setXMLNSAttribute(self, xmlns)


    def getXMLNSAttribute(self) -> "char const *":
        """getXMLNSAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getXMLNSAttribute(self)


    def setVersionAttribute(self, version: 'char const *') -> "void":
        """setVersionAttribute(ScXMLScxmlElt self, char const * version)"""
        return _coin.ScXMLScxmlElt_setVersionAttribute(self, version)


    def getVersionAttribute(self) -> "char const *":
        """getVersionAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getVersionAttribute(self)


    def setProfileAttribute(self, profile: 'char const *') -> "void":
        """setProfileAttribute(ScXMLScxmlElt self, char const * profile)"""
        return _coin.ScXMLScxmlElt_setProfileAttribute(self, profile)


    def getProfileAttribute(self) -> "char const *":
        """getProfileAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getProfileAttribute(self)


    def setExModeAttribute(self, exmode: 'char const *') -> "void":
        """setExModeAttribute(ScXMLScxmlElt self, char const * exmode)"""
        return _coin.ScXMLScxmlElt_setExModeAttribute(self, exmode)


    def getExModeAttribute(self) -> "char const *":
        """getExModeAttribute(ScXMLScxmlElt self) -> char const *"""
        return _coin.ScXMLScxmlElt_getExModeAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLScxmlElt self) -> SbBool"""
        return _coin.ScXMLScxmlElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLScxmlElt self, ScXMLElt rhs)"""
        return _coin.ScXMLScxmlElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLScxmlElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLScxmlElt_search(self, attrname, attrvalue)


    def setInitial(self, initial: 'ScXMLInitialElt') -> "void":
        """setInitial(ScXMLScxmlElt self, ScXMLInitialElt initial)"""
        return _coin.ScXMLScxmlElt_setInitial(self, initial)


    def getInitial(self) -> "ScXMLInitialElt *":
        """getInitial(ScXMLScxmlElt self) -> ScXMLInitialElt"""
        return _coin.ScXMLScxmlElt_getInitial(self)


    def getNumStates(self) -> "int":
        """getNumStates(ScXMLScxmlElt self) -> int"""
        return _coin.ScXMLScxmlElt_getNumStates(self)


    def getState(self, idx: 'int') -> "ScXMLStateElt *":
        """getState(ScXMLScxmlElt self, int idx) -> ScXMLStateElt"""
        return _coin.ScXMLScxmlElt_getState(self, idx)


    def addState(self, state: 'ScXMLStateElt') -> "void":
        """addState(ScXMLScxmlElt self, ScXMLStateElt state)"""
        return _coin.ScXMLScxmlElt_addState(self, state)


    def removeState(self, state: 'ScXMLStateElt') -> "void":
        """removeState(ScXMLScxmlElt self, ScXMLStateElt state)"""
        return _coin.ScXMLScxmlElt_removeState(self, state)


    def clearAllStates(self) -> "void":
        """clearAllStates(ScXMLScxmlElt self)"""
        return _coin.ScXMLScxmlElt_clearAllStates(self)


    def getNumParallels(self) -> "int":
        """getNumParallels(ScXMLScxmlElt self) -> int"""
        return _coin.ScXMLScxmlElt_getNumParallels(self)


    def getParallel(self, idx: 'int') -> "ScXMLParallelElt *":
        """getParallel(ScXMLScxmlElt self, int idx) -> ScXMLParallelElt"""
        return _coin.ScXMLScxmlElt_getParallel(self, idx)


    def addParallel(self, state: 'ScXMLParallelElt') -> "void":
        """addParallel(ScXMLScxmlElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLScxmlElt_addParallel(self, state)


    def removeParallel(self, state: 'ScXMLParallelElt') -> "void":
        """removeParallel(ScXMLScxmlElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLScxmlElt_removeParallel(self, state)


    def clearAllParallels(self) -> "void":
        """clearAllParallels(ScXMLScxmlElt self)"""
        return _coin.ScXMLScxmlElt_clearAllParallels(self)


    def getNumFinals(self) -> "int":
        """getNumFinals(ScXMLScxmlElt self) -> int"""
        return _coin.ScXMLScxmlElt_getNumFinals(self)


    def getFinal(self, idx: 'int') -> "ScXMLFinalElt *":
        """getFinal(ScXMLScxmlElt self, int idx) -> ScXMLFinalElt"""
        return _coin.ScXMLScxmlElt_getFinal(self, idx)


    def addFinal(self, state: 'ScXMLFinalElt') -> "void":
        """addFinal(ScXMLScxmlElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLScxmlElt_addFinal(self, state)


    def removeFinal(self, state: 'ScXMLFinalElt') -> "void":
        """removeFinal(ScXMLScxmlElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLScxmlElt_removeFinal(self, state)


    def clearAllFinals(self) -> "void":
        """clearAllFinals(ScXMLScxmlElt self)"""
        return _coin.ScXMLScxmlElt_clearAllFinals(self)


    def setDataModel(self, datamodel: 'ScXMLDataModelElt') -> "void":
        """setDataModel(ScXMLScxmlElt self, ScXMLDataModelElt datamodel)"""
        return _coin.ScXMLScxmlElt_setDataModel(self, datamodel)


    def getDataModel(self) -> "ScXMLDataModelElt *":
        """getDataModel(ScXMLScxmlElt self) -> ScXMLDataModelElt"""
        return _coin.ScXMLScxmlElt_getDataModel(self)


    def getNumScripts(self) -> "int":
        """getNumScripts(ScXMLScxmlElt self) -> int"""
        return _coin.ScXMLScxmlElt_getNumScripts(self)


    def getScript(self, idx: 'int') -> "ScXMLScriptElt *":
        """getScript(ScXMLScxmlElt self, int idx) -> ScXMLScriptElt"""
        return _coin.ScXMLScxmlElt_getScript(self, idx)


    def addScript(self, state: 'ScXMLScriptElt') -> "void":
        """addScript(ScXMLScxmlElt self, ScXMLScriptElt state)"""
        return _coin.ScXMLScxmlElt_addScript(self, state)


    def removeScript(self, state: 'ScXMLScriptElt') -> "void":
        """removeScript(ScXMLScxmlElt self, ScXMLScriptElt state)"""
        return _coin.ScXMLScxmlElt_removeScript(self, state)


    def clearAllScripts(self) -> "void":
        """clearAllScripts(ScXMLScxmlElt self)"""
        return _coin.ScXMLScxmlElt_clearAllScripts(self)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLScxmlElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLScxmlElt_execute(self, statemachine)

ScXMLScxmlElt_swigregister = _coin.ScXMLScxmlElt_swigregister
ScXMLScxmlElt_swigregister(ScXMLScxmlElt)

def ScXMLScxmlElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLScxmlElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLScxmlElt_getElementReader()

def ScXMLScxmlElt_getClassTypeId() -> "SoType":
    """ScXMLScxmlElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLScxmlElt_getClassTypeId()

def ScXMLScxmlElt_createInstance() -> "void *":
    """ScXMLScxmlElt_createInstance() -> void *"""
    return _coin.ScXMLScxmlElt_createInstance()

def ScXMLScxmlElt_initClass() -> "void":
    """ScXMLScxmlElt_initClass()"""
    return _coin.ScXMLScxmlElt_initClass()

def ScXMLScxmlElt_cleanClass() -> "void":
    """ScXMLScxmlElt_cleanClass()"""
    return _coin.ScXMLScxmlElt_cleanClass()

class ScXMLSendElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLSendElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLSendElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLSendElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLSendElt self) -> SoType"""
        return _coin.ScXMLSendElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLSendElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLSendElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLSendElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLSendElt self) -> ScXMLSendElt"""
        this = _coin.new_ScXMLSendElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLSendElt
    __del__ = lambda self: None

    def setEventAttribute(self, event: 'char const *') -> "void":
        """setEventAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setEventAttribute(self, event)


    def getEventAttribute(self) -> "char const *":
        """getEventAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getEventAttribute(self)


    def setTargetAttribute(self, event: 'char const *') -> "void":
        """setTargetAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setTargetAttribute(self, event)


    def getTargetAttribute(self) -> "char const *":
        """getTargetAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getTargetAttribute(self)


    def setTargetTypeAttribute(self, event: 'char const *') -> "void":
        """setTargetTypeAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setTargetTypeAttribute(self, event)


    def getTargetTypeAttribute(self) -> "char const *":
        """getTargetTypeAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getTargetTypeAttribute(self)


    def setSendIDAttribute(self, event: 'char const *') -> "void":
        """setSendIDAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setSendIDAttribute(self, event)


    def getSendIDAttribute(self) -> "char const *":
        """getSendIDAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getSendIDAttribute(self)


    def setDelayAttribute(self, event: 'char const *') -> "void":
        """setDelayAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setDelayAttribute(self, event)


    def getDelayAttribute(self) -> "char const *":
        """getDelayAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getDelayAttribute(self)


    def setNameListAttribute(self, event: 'char const *') -> "void":
        """setNameListAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setNameListAttribute(self, event)


    def getNameListAttribute(self) -> "char const *":
        """getNameListAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getNameListAttribute(self)


    def setHintsAttribute(self, event: 'char const *') -> "void":
        """setHintsAttribute(ScXMLSendElt self, char const * event)"""
        return _coin.ScXMLSendElt_setHintsAttribute(self, event)


    def getHintsAttribute(self) -> "char const *":
        """getHintsAttribute(ScXMLSendElt self) -> char const *"""
        return _coin.ScXMLSendElt_getHintsAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLSendElt self) -> SbBool"""
        return _coin.ScXMLSendElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLSendElt self, ScXMLElt rhs)"""
        return _coin.ScXMLSendElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLSendElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLSendElt_search(self, attrname, attrvalue)


    def createEvent(self, host: 'ScXMLEventTarget') -> "ScXMLEvent *":
        """createEvent(ScXMLSendElt self, ScXMLEventTarget host) -> ScXMLEvent"""
        return _coin.ScXMLSendElt_createEvent(self, host)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLSendElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLSendElt_execute(self, statemachine)

ScXMLSendElt_swigregister = _coin.ScXMLSendElt_swigregister
ScXMLSendElt_swigregister(ScXMLSendElt)

def ScXMLSendElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLSendElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLSendElt_getElementReader()

def ScXMLSendElt_getClassTypeId() -> "SoType":
    """ScXMLSendElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLSendElt_getClassTypeId()

def ScXMLSendElt_createInstance() -> "void *":
    """ScXMLSendElt_createInstance() -> void *"""
    return _coin.ScXMLSendElt_createInstance()

def ScXMLSendElt_initClass() -> "void":
    """ScXMLSendElt_initClass()"""
    return _coin.ScXMLSendElt_initClass()

def ScXMLSendElt_cleanClass() -> "void":
    """ScXMLSendElt_cleanClass()"""
    return _coin.ScXMLSendElt_cleanClass()

class ScXMLStateElt(ScXMLAbstractStateElt):
    """Proxy of C++ ScXMLStateElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLStateElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLStateElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLStateElt self) -> SoType"""
        return _coin.ScXMLStateElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLStateElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLStateElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLStateElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLStateElt self) -> ScXMLStateElt"""
        this = _coin.new_ScXMLStateElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLStateElt
    __del__ = lambda self: None

    def setSrcAttribute(self, src: 'char const *') -> "void":
        """setSrcAttribute(ScXMLStateElt self, char const * src)"""
        return _coin.ScXMLStateElt_setSrcAttribute(self, src)


    def getSrcAttribute(self) -> "char const *":
        """getSrcAttribute(ScXMLStateElt self) -> char const *"""
        return _coin.ScXMLStateElt_getSrcAttribute(self)


    def setInitialAttribute(self, initial: 'char const *') -> "void":
        """setInitialAttribute(ScXMLStateElt self, char const * initial)"""
        return _coin.ScXMLStateElt_setInitialAttribute(self, initial)


    def getInitialAttribute(self) -> "char const *":
        """getInitialAttribute(ScXMLStateElt self) -> char const *"""
        return _coin.ScXMLStateElt_getInitialAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLStateElt self) -> SbBool"""
        return _coin.ScXMLStateElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLStateElt self, ScXMLElt rhs)"""
        return _coin.ScXMLStateElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLStateElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLStateElt_search(self, attrname, attrvalue)


    def setOnEntry(self, onentry: 'ScXMLOnEntryElt') -> "void":
        """setOnEntry(ScXMLStateElt self, ScXMLOnEntryElt onentry)"""
        return _coin.ScXMLStateElt_setOnEntry(self, onentry)


    def getOnEntry(self) -> "ScXMLOnEntryElt *":
        """getOnEntry(ScXMLStateElt self) -> ScXMLOnEntryElt"""
        return _coin.ScXMLStateElt_getOnEntry(self)


    def setOnExit(self, onexit: 'ScXMLOnExitElt') -> "void":
        """setOnExit(ScXMLStateElt self, ScXMLOnExitElt onexit)"""
        return _coin.ScXMLStateElt_setOnExit(self, onexit)


    def getOnExit(self) -> "ScXMLOnExitElt *":
        """getOnExit(ScXMLStateElt self) -> ScXMLOnExitElt"""
        return _coin.ScXMLStateElt_getOnExit(self)


    def getNumTransitions(self) -> "int":
        """getNumTransitions(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumTransitions(self)


    def getTransition(self, idx: 'int') -> "ScXMLTransitionElt *":
        """getTransition(ScXMLStateElt self, int idx) -> ScXMLTransitionElt"""
        return _coin.ScXMLStateElt_getTransition(self, idx)


    def addTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """addTransition(ScXMLStateElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLStateElt_addTransition(self, transition)


    def removeTransition(self, transition: 'ScXMLTransitionElt') -> "void":
        """removeTransition(ScXMLStateElt self, ScXMLTransitionElt transition)"""
        return _coin.ScXMLStateElt_removeTransition(self, transition)


    def clearAllTransitions(self) -> "void":
        """clearAllTransitions(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllTransitions(self)


    def setInitial(self, initial: 'ScXMLInitialElt') -> "void":
        """setInitial(ScXMLStateElt self, ScXMLInitialElt initial)"""
        return _coin.ScXMLStateElt_setInitial(self, initial)


    def getInitial(self) -> "ScXMLInitialElt *":
        """getInitial(ScXMLStateElt self) -> ScXMLInitialElt"""
        return _coin.ScXMLStateElt_getInitial(self)


    def getNumStates(self) -> "int":
        """getNumStates(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumStates(self)


    def getState(self, idx: 'int') -> "ScXMLStateElt *":
        """getState(ScXMLStateElt self, int idx) -> ScXMLStateElt"""
        return _coin.ScXMLStateElt_getState(self, idx)


    def addState(self, state: 'ScXMLStateElt') -> "void":
        """addState(ScXMLStateElt self, ScXMLStateElt state)"""
        return _coin.ScXMLStateElt_addState(self, state)


    def removeState(self, state: 'ScXMLStateElt') -> "void":
        """removeState(ScXMLStateElt self, ScXMLStateElt state)"""
        return _coin.ScXMLStateElt_removeState(self, state)


    def clearAllStates(self) -> "void":
        """clearAllStates(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllStates(self)


    def getNumParallels(self) -> "int":
        """getNumParallels(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumParallels(self)


    def getParallel(self, idx: 'int') -> "ScXMLParallelElt *":
        """getParallel(ScXMLStateElt self, int idx) -> ScXMLParallelElt"""
        return _coin.ScXMLStateElt_getParallel(self, idx)


    def addParallel(self, state: 'ScXMLParallelElt') -> "void":
        """addParallel(ScXMLStateElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLStateElt_addParallel(self, state)


    def removeParallel(self, state: 'ScXMLParallelElt') -> "void":
        """removeParallel(ScXMLStateElt self, ScXMLParallelElt state)"""
        return _coin.ScXMLStateElt_removeParallel(self, state)


    def clearAllParallels(self) -> "void":
        """clearAllParallels(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllParallels(self)


    def getNumFinals(self) -> "int":
        """getNumFinals(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumFinals(self)


    def getFinal(self, idx: 'int') -> "ScXMLFinalElt *":
        """getFinal(ScXMLStateElt self, int idx) -> ScXMLFinalElt"""
        return _coin.ScXMLStateElt_getFinal(self, idx)


    def addFinal(self, state: 'ScXMLFinalElt') -> "void":
        """addFinal(ScXMLStateElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLStateElt_addFinal(self, state)


    def removeFinal(self, state: 'ScXMLFinalElt') -> "void":
        """removeFinal(ScXMLStateElt self, ScXMLFinalElt state)"""
        return _coin.ScXMLStateElt_removeFinal(self, state)


    def clearAllFinals(self) -> "void":
        """clearAllFinals(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllFinals(self)


    def getNumHistories(self) -> "int":
        """getNumHistories(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumHistories(self)


    def getHistory(self, idx: 'int') -> "ScXMLHistoryElt *":
        """getHistory(ScXMLStateElt self, int idx) -> ScXMLHistoryElt"""
        return _coin.ScXMLStateElt_getHistory(self, idx)


    def addHistory(self, history: 'ScXMLHistoryElt') -> "void":
        """addHistory(ScXMLStateElt self, ScXMLHistoryElt history)"""
        return _coin.ScXMLStateElt_addHistory(self, history)


    def removeHistory(self, history: 'ScXMLHistoryElt') -> "void":
        """removeHistory(ScXMLStateElt self, ScXMLHistoryElt history)"""
        return _coin.ScXMLStateElt_removeHistory(self, history)


    def clearAllHistories(self) -> "void":
        """clearAllHistories(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllHistories(self)


    def getNumAnchors(self) -> "int":
        """getNumAnchors(ScXMLStateElt self) -> int"""
        return _coin.ScXMLStateElt_getNumAnchors(self)


    def getAnchor(self, idx: 'int') -> "ScXMLAnchorElt *":
        """getAnchor(ScXMLStateElt self, int idx) -> ScXMLAnchorElt"""
        return _coin.ScXMLStateElt_getAnchor(self, idx)


    def addAnchor(self, anchor: 'ScXMLAnchorElt') -> "void":
        """addAnchor(ScXMLStateElt self, ScXMLAnchorElt anchor)"""
        return _coin.ScXMLStateElt_addAnchor(self, anchor)


    def removeAnchor(self, anchor: 'ScXMLAnchorElt') -> "void":
        """removeAnchor(ScXMLStateElt self, ScXMLAnchorElt anchor)"""
        return _coin.ScXMLStateElt_removeAnchor(self, anchor)


    def clearAllAnchors(self) -> "void":
        """clearAllAnchors(ScXMLStateElt self)"""
        return _coin.ScXMLStateElt_clearAllAnchors(self)


    def setDataModel(self, datamodel: 'ScXMLDataModelElt') -> "void":
        """setDataModel(ScXMLStateElt self, ScXMLDataModelElt datamodel)"""
        return _coin.ScXMLStateElt_setDataModel(self, datamodel)


    def getDataModel(self) -> "ScXMLDataModelElt *":
        """getDataModel(ScXMLStateElt self) -> ScXMLDataModelElt"""
        return _coin.ScXMLStateElt_getDataModel(self)


    def isAtomicState(self) -> "SbBool":
        """isAtomicState(ScXMLStateElt self) -> SbBool"""
        return _coin.ScXMLStateElt_isAtomicState(self)

ScXMLStateElt_swigregister = _coin.ScXMLStateElt_swigregister
ScXMLStateElt_swigregister(ScXMLStateElt)

def ScXMLStateElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLStateElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLStateElt_getElementReader()

def ScXMLStateElt_getClassTypeId() -> "SoType":
    """ScXMLStateElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLStateElt_getClassTypeId()

def ScXMLStateElt_createInstance() -> "void *":
    """ScXMLStateElt_createInstance() -> void *"""
    return _coin.ScXMLStateElt_createInstance()

def ScXMLStateElt_initClass() -> "void":
    """ScXMLStateElt_initClass()"""
    return _coin.ScXMLStateElt_initClass()

def ScXMLStateElt_cleanClass() -> "void":
    """ScXMLStateElt_cleanClass()"""
    return _coin.ScXMLStateElt_cleanClass()

class ScXMLStateMachine(ScXMLEventTarget):
    """Proxy of C++ ScXMLStateMachine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLStateMachine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLStateMachine self) -> SoType"""
        return _coin.ScXMLStateMachine_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLStateMachine_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLStateMachine_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLStateMachine_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLStateMachine self) -> ScXMLStateMachine"""
        this = _coin.new_ScXMLStateMachine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLStateMachine
    __del__ = lambda self: None

    def setName(self, name: 'SbName') -> "void":
        """setName(ScXMLStateMachine self, SbName name)"""
        return _coin.ScXMLStateMachine_setName(self, name)


    def getName(self) -> "SbName const &":
        """getName(ScXMLStateMachine self) -> SbName"""
        return _coin.ScXMLStateMachine_getName(self)


    def setDescription(self, document: 'ScXMLDocument') -> "void":
        """setDescription(ScXMLStateMachine self, ScXMLDocument document)"""
        return _coin.ScXMLStateMachine_setDescription(self, document)


    def getDescription(self) -> "ScXMLDocument const *":
        """getDescription(ScXMLStateMachine self) -> ScXMLDocument"""
        return _coin.ScXMLStateMachine_getDescription(self)


    def setSessionId(self, sessionid: 'SbName') -> "void":
        """setSessionId(ScXMLStateMachine self, SbName sessionid)"""
        return _coin.ScXMLStateMachine_setSessionId(self, sessionid)


    def getSessionId(self) -> "SbName const &":
        """getSessionId(ScXMLStateMachine self) -> SbName"""
        return _coin.ScXMLStateMachine_getSessionId(self)


    def initialize(self) -> "void":
        """initialize(ScXMLStateMachine self)"""
        return _coin.ScXMLStateMachine_initialize(self)


    def isActive(self) -> "SbBool":
        """isActive(ScXMLStateMachine self) -> SbBool"""
        return _coin.ScXMLStateMachine_isActive(self)


    def isFinished(self) -> "SbBool":
        """isFinished(ScXMLStateMachine self) -> SbBool"""
        return _coin.ScXMLStateMachine_isFinished(self)


    def getNumActiveStates(self) -> "int":
        """getNumActiveStates(ScXMLStateMachine self) -> int"""
        return _coin.ScXMLStateMachine_getNumActiveStates(self)


    def getActiveState(self, idx: 'int') -> "ScXMLElt const *":
        """getActiveState(ScXMLStateMachine self, int idx) -> ScXMLElt"""
        return _coin.ScXMLStateMachine_getActiveState(self, idx)


    def setVariable(self, name: 'char const *', value: 'char const *') -> "void":
        """setVariable(ScXMLStateMachine self, char const * name, char const * value)"""
        return _coin.ScXMLStateMachine_setVariable(self, name, value)


    def getVariable(self, name: 'char const *') -> "char const *":
        """getVariable(ScXMLStateMachine self, char const * name) -> char const *"""
        return _coin.ScXMLStateMachine_getVariable(self, name)


    def getStateMachineForSessionId(sessionid: 'SbName') -> "ScXMLStateMachine *":
        """getStateMachineForSessionId(SbName sessionid) -> ScXMLStateMachine"""
        return _coin.ScXMLStateMachine_getStateMachineForSessionId(sessionid)

    getStateMachineForSessionId = staticmethod(getStateMachineForSessionId)

    def setLogLevel(self, loglevel: 'int') -> "void":
        """setLogLevel(ScXMLStateMachine self, int loglevel)"""
        return _coin.ScXMLStateMachine_setLogLevel(self, loglevel)


    def getLogLevel(self) -> "int":
        """getLogLevel(ScXMLStateMachine self) -> int"""
        return _coin.ScXMLStateMachine_getLogLevel(self)


    def setEvaluator(self, evaluator: 'ScXMLEvaluator') -> "void":
        """setEvaluator(ScXMLStateMachine self, ScXMLEvaluator evaluator)"""
        return _coin.ScXMLStateMachine_setEvaluator(self, evaluator)


    def getEvaluator(self) -> "ScXMLEvaluator *":
        """getEvaluator(ScXMLStateMachine self) -> ScXMLEvaluator"""
        return _coin.ScXMLStateMachine_getEvaluator(self)


    def isModuleEnabled(self, modulename: 'char const *') -> "SbBool":
        """isModuleEnabled(ScXMLStateMachine self, char const * modulename) -> SbBool"""
        return _coin.ScXMLStateMachine_isModuleEnabled(self, modulename)


    def getNumEnabledModules(self) -> "int":
        """getNumEnabledModules(ScXMLStateMachine self) -> int"""
        return _coin.ScXMLStateMachine_getNumEnabledModules(self)


    def getEnabledModuleName(self, idx: 'int') -> "char const *":
        """getEnabledModuleName(ScXMLStateMachine self, int idx) -> char const *"""
        return _coin.ScXMLStateMachine_getEnabledModuleName(self, idx)


    def setEnabledModulesList(self, modulenames: 'SbList< char const * > const &') -> "void":
        """setEnabledModulesList(ScXMLStateMachine self, SbList< char const * > const & modulenames)"""
        return _coin.ScXMLStateMachine_setEnabledModulesList(self, modulenames)


    def addDeleteCallback(self, *args) -> "void":
        """
        addDeleteCallback(ScXMLStateMachine self, ScXMLStateMachineDeleteCB * callback, void * userdata)
        addDeleteCallback(ScXMLStateMachine self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.ScXMLStateMachine_addDeleteCallback(self, *args)


    def removeDeleteCallback(self, *args) -> "void":
        """
        removeDeleteCallback(ScXMLStateMachine self, ScXMLStateMachineDeleteCB * callback, void * userdata)
        removeDeleteCallback(ScXMLStateMachine self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.ScXMLStateMachine_removeDeleteCallback(self, *args)


    def addStateChangeCallback(self, *args) -> "void":
        """
        addStateChangeCallback(ScXMLStateMachine self, ScXMLStateChangeCB * callback, void * userdata)
        addStateChangeCallback(ScXMLStateMachine self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.ScXMLStateMachine_addStateChangeCallback(self, *args)


    def removeStateChangeCallback(self, *args) -> "void":
        """
        removeStateChangeCallback(ScXMLStateMachine self, ScXMLStateChangeCB * callback, void * userdata)
        removeStateChangeCallback(ScXMLStateMachine self, PyObject * pyfunc, PyObject * userdata)
        """
        return _coin.ScXMLStateMachine_removeStateChangeCallback(self, *args)

ScXMLStateMachine_swigregister = _coin.ScXMLStateMachine_swigregister
ScXMLStateMachine_swigregister(ScXMLStateMachine)

def ScXMLStateMachine_getClassTypeId() -> "SoType":
    """ScXMLStateMachine_getClassTypeId() -> SoType"""
    return _coin.ScXMLStateMachine_getClassTypeId()

def ScXMLStateMachine_createInstance() -> "void *":
    """ScXMLStateMachine_createInstance() -> void *"""
    return _coin.ScXMLStateMachine_createInstance()

def ScXMLStateMachine_initClass() -> "void":
    """ScXMLStateMachine_initClass()"""
    return _coin.ScXMLStateMachine_initClass()

def ScXMLStateMachine_cleanClass() -> "void":
    """ScXMLStateMachine_cleanClass()"""
    return _coin.ScXMLStateMachine_cleanClass()

def ScXMLStateMachine_getStateMachineForSessionId(sessionid: 'SbName') -> "ScXMLStateMachine *":
    """ScXMLStateMachine_getStateMachineForSessionId(SbName sessionid) -> ScXMLStateMachine"""
    return _coin.ScXMLStateMachine_getStateMachineForSessionId(sessionid)

class ScXMLTransitionElt(ScXMLElt):
    """Proxy of C++ ScXMLTransitionElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLTransitionElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLTransitionElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLTransitionElt self) -> SoType"""
        return _coin.ScXMLTransitionElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLTransitionElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLTransitionElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLTransitionElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLTransitionElt self) -> ScXMLTransitionElt"""
        this = _coin.new_ScXMLTransitionElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLTransitionElt
    __del__ = lambda self: None

    def setEventAttribute(self, event: 'char const *') -> "void":
        """setEventAttribute(ScXMLTransitionElt self, char const * event)"""
        return _coin.ScXMLTransitionElt_setEventAttribute(self, event)


    def getEventAttribute(self) -> "char const *":
        """getEventAttribute(ScXMLTransitionElt self) -> char const *"""
        return _coin.ScXMLTransitionElt_getEventAttribute(self)


    def setCondAttribute(self, cond: 'char const *') -> "void":
        """setCondAttribute(ScXMLTransitionElt self, char const * cond)"""
        return _coin.ScXMLTransitionElt_setCondAttribute(self, cond)


    def getCondAttribute(self) -> "char const *":
        """getCondAttribute(ScXMLTransitionElt self) -> char const *"""
        return _coin.ScXMLTransitionElt_getCondAttribute(self)


    def setTargetAttribute(self, target: 'char const *') -> "void":
        """setTargetAttribute(ScXMLTransitionElt self, char const * target)"""
        return _coin.ScXMLTransitionElt_setTargetAttribute(self, target)


    def getTargetAttribute(self) -> "char const *":
        """getTargetAttribute(ScXMLTransitionElt self) -> char const *"""
        return _coin.ScXMLTransitionElt_getTargetAttribute(self)


    def setAnchorAttribute(self, anchor: 'char const *') -> "void":
        """setAnchorAttribute(ScXMLTransitionElt self, char const * anchor)"""
        return _coin.ScXMLTransitionElt_setAnchorAttribute(self, anchor)


    def getAnchorAttribute(self) -> "char const *":
        """getAnchorAttribute(ScXMLTransitionElt self) -> char const *"""
        return _coin.ScXMLTransitionElt_getAnchorAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLTransitionElt self) -> SbBool"""
        return _coin.ScXMLTransitionElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLTransitionElt self, ScXMLElt rhs)"""
        return _coin.ScXMLTransitionElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLTransitionElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLTransitionElt_search(self, attrname, attrvalue)


    def isConditionLess(self) -> "SbBool":
        """isConditionLess(ScXMLTransitionElt self) -> SbBool"""
        return _coin.ScXMLTransitionElt_isConditionLess(self)


    def isTargetLess(self) -> "SbBool":
        """isTargetLess(ScXMLTransitionElt self) -> SbBool"""
        return _coin.ScXMLTransitionElt_isTargetLess(self)


    def isSelfReferencing(self) -> "SbBool":
        """isSelfReferencing(ScXMLTransitionElt self) -> SbBool"""
        return _coin.ScXMLTransitionElt_isSelfReferencing(self)


    def isEventMatch(self, event: 'ScXMLEvent') -> "SbBool":
        """isEventMatch(ScXMLTransitionElt self, ScXMLEvent event) -> SbBool"""
        return _coin.ScXMLTransitionElt_isEventMatch(self, event)


    def evaluateCondition(self, statemachine: 'ScXMLStateMachine') -> "SbBool":
        """evaluateCondition(ScXMLTransitionElt self, ScXMLStateMachine statemachine) -> SbBool"""
        return _coin.ScXMLTransitionElt_evaluateCondition(self, statemachine)


    def getNumExecutables(self) -> "int":
        """getNumExecutables(ScXMLTransitionElt self) -> int"""
        return _coin.ScXMLTransitionElt_getNumExecutables(self)


    def getExecutable(self, idx: 'int') -> "ScXMLExecutableElt *":
        """getExecutable(ScXMLTransitionElt self, int idx) -> ScXMLExecutableElt"""
        return _coin.ScXMLTransitionElt_getExecutable(self, idx)


    def addExecutable(self, executable: 'ScXMLExecutableElt') -> "void":
        """addExecutable(ScXMLTransitionElt self, ScXMLExecutableElt executable)"""
        return _coin.ScXMLTransitionElt_addExecutable(self, executable)


    def removeExecutable(self, executable: 'ScXMLExecutableElt') -> "void":
        """removeExecutable(ScXMLTransitionElt self, ScXMLExecutableElt executable)"""
        return _coin.ScXMLTransitionElt_removeExecutable(self, executable)


    def clearAllExecutables(self) -> "void":
        """clearAllExecutables(ScXMLTransitionElt self)"""
        return _coin.ScXMLTransitionElt_clearAllExecutables(self)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLTransitionElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLTransitionElt_execute(self, statemachine)

ScXMLTransitionElt_swigregister = _coin.ScXMLTransitionElt_swigregister
ScXMLTransitionElt_swigregister(ScXMLTransitionElt)

def ScXMLTransitionElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLTransitionElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLTransitionElt_getElementReader()

def ScXMLTransitionElt_getClassTypeId() -> "SoType":
    """ScXMLTransitionElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLTransitionElt_getClassTypeId()

def ScXMLTransitionElt_createInstance() -> "void *":
    """ScXMLTransitionElt_createInstance() -> void *"""
    return _coin.ScXMLTransitionElt_createInstance()

def ScXMLTransitionElt_initClass() -> "void":
    """ScXMLTransitionElt_initClass()"""
    return _coin.ScXMLTransitionElt_initClass()

def ScXMLTransitionElt_cleanClass() -> "void":
    """ScXMLTransitionElt_cleanClass()"""
    return _coin.ScXMLTransitionElt_cleanClass()

class ScXMLValidateElt(ScXMLExecutableElt):
    """Proxy of C++ ScXMLValidateElt class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getElementReader() -> "ScXMLEltReader *":
        """getElementReader() -> ScXMLEltReader"""
        return _coin.ScXMLValidateElt_getElementReader()

    getElementReader = staticmethod(getElementReader)

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLValidateElt_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLValidateElt self) -> SoType"""
        return _coin.ScXMLValidateElt_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLValidateElt_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLValidateElt_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLValidateElt_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLValidateElt self) -> ScXMLValidateElt"""
        this = _coin.new_ScXMLValidateElt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLValidateElt
    __del__ = lambda self: None

    def setLocationAttribute(self, location: 'char const *') -> "void":
        """setLocationAttribute(ScXMLValidateElt self, char const * location)"""
        return _coin.ScXMLValidateElt_setLocationAttribute(self, location)


    def getLocationAttribute(self) -> "char const *":
        """getLocationAttribute(ScXMLValidateElt self) -> char const *"""
        return _coin.ScXMLValidateElt_getLocationAttribute(self)


    def setSchemaAttribute(self, schema: 'char const *') -> "void":
        """setSchemaAttribute(ScXMLValidateElt self, char const * schema)"""
        return _coin.ScXMLValidateElt_setSchemaAttribute(self, schema)


    def getSchemaAttribute(self) -> "char const *":
        """getSchemaAttribute(ScXMLValidateElt self) -> char const *"""
        return _coin.ScXMLValidateElt_getSchemaAttribute(self)


    def handleXMLAttributes(self) -> "SbBool":
        """handleXMLAttributes(ScXMLValidateElt self) -> SbBool"""
        return _coin.ScXMLValidateElt_handleXMLAttributes(self)


    def copyContents(self, rhs: 'ScXMLElt') -> "void":
        """copyContents(ScXMLValidateElt self, ScXMLElt rhs)"""
        return _coin.ScXMLValidateElt_copyContents(self, rhs)


    def search(self, attrname: 'char const *', attrvalue: 'char const *') -> "ScXMLElt const *":
        """search(ScXMLValidateElt self, char const * attrname, char const * attrvalue) -> ScXMLElt"""
        return _coin.ScXMLValidateElt_search(self, attrname, attrvalue)


    def execute(self, statemachine: 'ScXMLStateMachine') -> "void":
        """execute(ScXMLValidateElt self, ScXMLStateMachine statemachine)"""
        return _coin.ScXMLValidateElt_execute(self, statemachine)

ScXMLValidateElt_swigregister = _coin.ScXMLValidateElt_swigregister
ScXMLValidateElt_swigregister(ScXMLValidateElt)

def ScXMLValidateElt_getElementReader() -> "ScXMLEltReader *":
    """ScXMLValidateElt_getElementReader() -> ScXMLEltReader"""
    return _coin.ScXMLValidateElt_getElementReader()

def ScXMLValidateElt_getClassTypeId() -> "SoType":
    """ScXMLValidateElt_getClassTypeId() -> SoType"""
    return _coin.ScXMLValidateElt_getClassTypeId()

def ScXMLValidateElt_createInstance() -> "void *":
    """ScXMLValidateElt_createInstance() -> void *"""
    return _coin.ScXMLValidateElt_createInstance()

def ScXMLValidateElt_initClass() -> "void":
    """ScXMLValidateElt_initClass()"""
    return _coin.ScXMLValidateElt_initClass()

def ScXMLValidateElt_cleanClass() -> "void":
    """ScXMLValidateElt_cleanClass()"""
    return _coin.ScXMLValidateElt_cleanClass()

class ScXMLXPathEvaluator(ScXMLEvaluator):
    """Proxy of C++ ScXMLXPathEvaluator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.ScXMLXPathEvaluator_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(ScXMLXPathEvaluator self) -> SoType"""
        return _coin.ScXMLXPathEvaluator_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.ScXMLXPathEvaluator_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.ScXMLXPathEvaluator_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.ScXMLXPathEvaluator_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(ScXMLXPathEvaluator self) -> ScXMLXPathEvaluator"""
        this = _coin.new_ScXMLXPathEvaluator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_ScXMLXPathEvaluator
    __del__ = lambda self: None

    def evaluate(self, expression: 'char const *') -> "ScXMLDataObj *":
        """evaluate(ScXMLXPathEvaluator self, char const * expression) -> ScXMLDataObj"""
        return _coin.ScXMLXPathEvaluator_evaluate(self, expression)


    def setAtLocation(self, location: 'char const *', obj: 'ScXMLDataObj') -> "SbBool":
        """setAtLocation(ScXMLXPathEvaluator self, char const * location, ScXMLDataObj obj) -> SbBool"""
        return _coin.ScXMLXPathEvaluator_setAtLocation(self, location, obj)


    def locate(self, location: 'char const *') -> "ScXMLDataObj *":
        """locate(ScXMLXPathEvaluator self, char const * location) -> ScXMLDataObj"""
        return _coin.ScXMLXPathEvaluator_locate(self, location)

ScXMLXPathEvaluator_swigregister = _coin.ScXMLXPathEvaluator_swigregister
ScXMLXPathEvaluator_swigregister(ScXMLXPathEvaluator)

def ScXMLXPathEvaluator_getClassTypeId() -> "SoType":
    """ScXMLXPathEvaluator_getClassTypeId() -> SoType"""
    return _coin.ScXMLXPathEvaluator_getClassTypeId()

def ScXMLXPathEvaluator_createInstance() -> "void *":
    """ScXMLXPathEvaluator_createInstance() -> void *"""
    return _coin.ScXMLXPathEvaluator_createInstance()

def ScXMLXPathEvaluator_initClass() -> "void":
    """ScXMLXPathEvaluator_initClass()"""
    return _coin.ScXMLXPathEvaluator_initClass()

def ScXMLXPathEvaluator_cleanClass() -> "void":
    """ScXMLXPathEvaluator_cleanClass()"""
    return _coin.ScXMLXPathEvaluator_cleanClass()

class SoScXMLEvent(ScXMLEvent):
    """Proxy of C++ SoScXMLEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLEvent_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLEvent self) -> SoType"""
        return _coin.SoScXMLEvent_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLEvent_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLEvent_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLEvent_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(SoScXMLEvent self) -> SoScXMLEvent"""
        this = _coin.new_SoScXMLEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoScXMLEvent
    __del__ = lambda self: None

    def setSoEvent(self, soevent: 'SoEvent') -> "void":
        """setSoEvent(SoScXMLEvent self, SoEvent soevent)"""
        return _coin.SoScXMLEvent_setSoEvent(self, soevent)


    def getSoEvent(self) -> "SoEvent const *":
        """getSoEvent(SoScXMLEvent self) -> SoEvent"""
        return _coin.SoScXMLEvent_getSoEvent(self)


    def setUpIdentifier(self) -> "void":
        """setUpIdentifier(SoScXMLEvent self)"""
        return _coin.SoScXMLEvent_setUpIdentifier(self)


    def copyContents(self, rhs: 'ScXMLEvent') -> "void":
        """copyContents(SoScXMLEvent self, ScXMLEvent rhs)"""
        return _coin.SoScXMLEvent_copyContents(self, rhs)

SoScXMLEvent_swigregister = _coin.SoScXMLEvent_swigregister
SoScXMLEvent_swigregister(SoScXMLEvent)

def SoScXMLEvent_getClassTypeId() -> "SoType":
    """SoScXMLEvent_getClassTypeId() -> SoType"""
    return _coin.SoScXMLEvent_getClassTypeId()

def SoScXMLEvent_createInstance() -> "void *":
    """SoScXMLEvent_createInstance() -> void *"""
    return _coin.SoScXMLEvent_createInstance()

def SoScXMLEvent_initClass() -> "void":
    """SoScXMLEvent_initClass()"""
    return _coin.SoScXMLEvent_initClass()

def SoScXMLEvent_cleanClass() -> "void":
    """SoScXMLEvent_cleanClass()"""
    return _coin.SoScXMLEvent_cleanClass()

class SoScXMLStateMachine(ScXMLStateMachine):
    """Proxy of C++ SoScXMLStateMachine class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getClassTypeId() -> "SoType":
        """getClassTypeId() -> SoType"""
        return _coin.SoScXMLStateMachine_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)

    def getTypeId(self) -> "SoType":
        """getTypeId(SoScXMLStateMachine self) -> SoType"""
        return _coin.SoScXMLStateMachine_getTypeId(self)


    def createInstance() -> "void *":
        """createInstance() -> void *"""
        return _coin.SoScXMLStateMachine_createInstance()

    createInstance = staticmethod(createInstance)

    def initClass() -> "void":
        """initClass()"""
        return _coin.SoScXMLStateMachine_initClass()

    initClass = staticmethod(initClass)

    def cleanClass() -> "void":
        """cleanClass()"""
        return _coin.SoScXMLStateMachine_cleanClass()

    cleanClass = staticmethod(cleanClass)

    def __init__(self):
        """__init__(SoScXMLStateMachine self) -> SoScXMLStateMachine"""
        this = _coin.new_SoScXMLStateMachine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coin.delete_SoScXMLStateMachine
    __del__ = lambda self: None

    def setSceneGraphRoot(self, root: 'SoNode') -> "void":
        """setSceneGraphRoot(SoScXMLStateMachine self, SoNode root)"""
        return _coin.SoScXMLStateMachine_setSceneGraphRoot(self, root)


    def getSceneGraphRoot(self) -> "SoNode *":
        """getSceneGraphRoot(SoScXMLStateMachine self) -> SoNode"""
        return _coin.SoScXMLStateMachine_getSceneGraphRoot(self)


    def setActiveCamera(self, camera: 'SoCamera') -> "void":
        """setActiveCamera(SoScXMLStateMachine self, SoCamera camera)"""
        return _coin.SoScXMLStateMachine_setActiveCamera(self, camera)


    def getActiveCamera(self) -> "SoCamera *":
        """getActiveCamera(SoScXMLStateMachine self) -> SoCamera"""
        return _coin.SoScXMLStateMachine_getActiveCamera(self)


    def setViewportRegion(self, vp: 'SbViewportRegion') -> "void":
        """setViewportRegion(SoScXMLStateMachine self, SbViewportRegion vp)"""
        return _coin.SoScXMLStateMachine_setViewportRegion(self, vp)


    def getViewportRegion(self) -> "SbViewportRegion const &":
        """getViewportRegion(SoScXMLStateMachine self) -> SbViewportRegion"""
        return _coin.SoScXMLStateMachine_getViewportRegion(self)


    def preGLRender(self) -> "void":
        """preGLRender(SoScXMLStateMachine self)"""
        return _coin.SoScXMLStateMachine_preGLRender(self)


    def postGLRender(self) -> "void":
        """postGLRender(SoScXMLStateMachine self)"""
        return _coin.SoScXMLStateMachine_postGLRender(self)


    def processSoEvent(self, event: 'SoEvent') -> "SbBool":
        """processSoEvent(SoScXMLStateMachine self, SoEvent event) -> SbBool"""
        return _coin.SoScXMLStateMachine_processSoEvent(self, event)


    def getVariable(self, key: 'char const *') -> "char const *":
        """getVariable(SoScXMLStateMachine self, char const * key) -> char const *"""
        return _coin.SoScXMLStateMachine_getVariable(self, key)

SoScXMLStateMachine_swigregister = _coin.SoScXMLStateMachine_swigregister
SoScXMLStateMachine_swigregister(SoScXMLStateMachine)

def SoScXMLStateMachine_getClassTypeId() -> "SoType":
    """SoScXMLStateMachine_getClassTypeId() -> SoType"""
    return _coin.SoScXMLStateMachine_getClassTypeId()

def SoScXMLStateMachine_createInstance() -> "void *":
    """SoScXMLStateMachine_createInstance() -> void *"""
    return _coin.SoScXMLStateMachine_createInstance()

def SoScXMLStateMachine_initClass() -> "void":
    """SoScXMLStateMachine_initClass()"""
    return _coin.SoScXMLStateMachine_initClass()

def SoScXMLStateMachine_cleanClass() -> "void":
    """SoScXMLStateMachine_cleanClass()"""
    return _coin.SoScXMLStateMachine_cleanClass()


for x in list(locals()):
  value = locals()[x]
  try:
    if isinstance(value, type) and issubclass(value, SoFieldContainer):
      for name in list(value.__dict__):
        val = value.__dict__[name]
        if isinstance(val, property):
          delattr(value, name)
  except NameError:
# value == SoSearchAction_duringSearchAll ???
    pass



